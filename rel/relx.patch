@@ -19,7 +19,7 @@
 
 # OSX does not support readlink '-f' flag, work
 # around that
-case $OSTYPE in 
+case $OSTYPE in
     darwin*)
         SCRIPT=$(readlink $0 || true)
     ;;
@@ -210,7 +210,7 @@
     if [ $RELX_MULTI_NODE ]; then
         echo "${PFX}.${NAME}.${SFX}"
     else
-        echo "${PFX}.${SFX}"
+        echo "${PFX}.local.${SFX}"
     fi
 }
 
@@ -240,30 +240,14 @@
 check_replace_os_vars() {
     IN_FILE_PATH=$(add_path $1 $2)
     OUT_FILE_PATH="$IN_FILE_PATH"
-    ORIG_FILE_PATH="$IN_FILE_PATH.orig"
+
     if [ $RELX_REPLACE_OS_VARS ]; then
         # Create a new file in the same location as original
         OUT_FILE_PATH=$(make_out_file_path $IN_FILE_PATH)
-        # If vm.args.orig or sys.config.orig is present then use that
-        if [ -f "$ORIG_FILE_PATH" ]; then
-           IN_FILE_PATH="$ORIG_FILE_PATH"
-        fi
 
         # apply the environment variable substitution to $IN_FILE_PATH
         # the result is saved to $OUT_FILE_PATH
-        # if they are both the same, then ensure that we don't clobber
-        # the file by saving a backup with the .orig extension
-        if [ "$IN_FILE_PATH" = "$OUT_FILE_PATH" ]; then
-            cp "$IN_FILE_PATH" "$ORIG_FILE_PATH"
-            replace_os_vars "$ORIG_FILE_PATH" "$OUT_FILE_PATH"
-        else
-            replace_os_vars "$IN_FILE_PATH" "$OUT_FILE_PATH"
-        fi
-    else
-        # If vm.arg.orig or sys.config.orig is present then use that
-        if [ -f "$ORIG_FILE_PATH" ]; then
-           cp "$ORIG_FILE_PATH" "$OUT_FILE_PATH"
-        fi
+        replace_os_vars "$IN_FILE_PATH" "$OUT_FILE_PATH"
     fi
     echo $OUT_FILE_PATH
 }
@@ -552,7 +536,7 @@
 
         # Log the startup
         echo "$RELEASE_ROOT_DIR"
-        logger -t "$REL_NAME[$$]" "Starting up"
+        logger -t "$REL_NAME[$$]" "Starting up" $NAME
 
         # Start the VM
         exec "$@" -- ${1+$ARGS}
