{
  "openapi": "3.0.1",
  "info": {
    "title": "Crossbar",
    "description": "The Crossbar APIs",
    "license": {
      "name": "Mozilla Public License 1.1"
    },
    "version": "v2"
  },
  "externalDocs": {
    "description": "Kazoo documentation's Git repository",
    "url": "https://docs.2600hz.com/dev"
  },
  "servers": [
    {
      "url": "//localhost:8000/v2"
    }
  ],
  "paths": {
    "/about": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          }
        
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },{
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },{
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },{
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },{
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },{
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/access_lists": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/access_lists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/acdc_call_stats": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/acls": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/agents": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/agents/stats": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/agents/status": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/agents/status/{USER_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/agents/{USER_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/agents/{USER_ID}/queue_status": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/agents/{USER_ID}/status": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/alerts": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/alerts/{ALERT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ALERT_ID",
            "in": "path",
            "description": "request ALERT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ALERT_ID",
            "in": "path",
            "description": "request ALERT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/allotments": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/allotments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/allotments/consumed": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/api_key": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/apps_link/authorize": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/apps_store": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/apps_store/blacklist": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/apps_store/{APP_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "APP_ID",
            "in": "path",
            "description": "request APP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "APP_ID",
            "in": "path",
            "description": "request APP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "APP_ID",
            "in": "path",
            "description": "request APP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "APP_ID",
            "in": "path",
            "description": "request APP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/apps_store/{APP_ID}/icon": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "APP_ID",
            "in": "path",
            "description": "request APP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/apps_store/{APP_ID}/screenshot/{APP_SCREENSHOT_INDEX}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "APP_ID",
            "in": "path",
            "description": "request APP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "APP_SCREENSHOT_INDEX",
            "in": "path",
            "description": "request APP_SCREENSHOT_INDEX parameter",
            "required": true,
            "schema": {
              "pattern": "^[0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/att_handlers_errors": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/att_handlers_errors/handler/{HANDLER_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "HANDLER_ID",
            "in": "path",
            "description": "request HANDLER_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/att_handlers_errors/{ERROR_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ERROR_ID",
            "in": "path",
            "description": "request ERROR_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/blacklists": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/blacklists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/blacklists/{BLACKLIST_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "BLACKLIST_ID",
            "in": "path",
            "description": "request BLACKLIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "BLACKLIST_ID",
            "in": "path",
            "description": "request BLACKLIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/blacklists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "BLACKLIST_ID",
            "in": "path",
            "description": "request BLACKLIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "BLACKLIST_ID",
            "in": "path",
            "description": "request BLACKLIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/bulk": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/call_inspector": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/call_inspector/{CALL_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CALL_ID",
            "in": "path",
            "description": "request CALL_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/callflows": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/callflows"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/callflows/{CALLFLOW_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CALLFLOW_ID",
            "in": "path",
            "description": "request CALLFLOW_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CALLFLOW_ID",
            "in": "path",
            "description": "request CALLFLOW_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/callflows"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CALLFLOW_ID",
            "in": "path",
            "description": "request CALLFLOW_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CALLFLOW_ID",
            "in": "path",
            "description": "request CALLFLOW_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/cccps": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cccps"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/cccps/{CCCP_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CCCP_ID",
            "in": "path",
            "description": "request CCCP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CCCP_ID",
            "in": "path",
            "description": "request CCCP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cccps"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CCCP_ID",
            "in": "path",
            "description": "request CCCP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cccps"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CCCP_ID",
            "in": "path",
            "description": "request CCCP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/cdrs": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/cdrs/interaction": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/cdrs/legs/{INTERACTION_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "INTERACTION_ID",
            "in": "path",
            "description": "request INTERACTION_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/cdrs/summary": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/cdrs/{CDR_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CDR_ID",
            "in": "path",
            "description": "request CDR_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 39,
              "minLength": 39,
              "pattern": "^[0-9a-f-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/channels": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/channels/{UUID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "request UUID parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-f0-9-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "request UUID parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-f0-9-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "request UUID parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-f0-9-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/children": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/clicktocall": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clicktocall"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/clicktocall/{C2C_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "C2C_ID",
            "in": "path",
            "description": "request C2C_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "C2C_ID",
            "in": "path",
            "description": "request C2C_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clicktocall"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "C2C_ID",
            "in": "path",
            "description": "request C2C_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "C2C_ID",
            "in": "path",
            "description": "request C2C_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/clicktocall/{C2C_ID}/connect": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "C2C_ID",
            "in": "path",
            "description": "request C2C_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "C2C_ID",
            "in": "path",
            "description": "request C2C_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clicktocall"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/clicktocall/{C2C_ID}/history": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "C2C_ID",
            "in": "path",
            "description": "request C2C_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/comments": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/comments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/comments/{COMMENT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "COMMENT_ID",
            "in": "path",
            "description": "request COMMENT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "COMMENT_ID",
            "in": "path",
            "description": "request COMMENT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/comments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "COMMENT_ID",
            "in": "path",
            "description": "request COMMENT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/conferences": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/conferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/conferences/{CONFERENCE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFERENCE_ID",
            "in": "path",
            "description": "request CONFERENCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFERENCE_ID",
            "in": "path",
            "description": "request CONFERENCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/conferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFERENCE_ID",
            "in": "path",
            "description": "request CONFERENCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/conferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFERENCE_ID",
            "in": "path",
            "description": "request CONFERENCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFERENCE_ID",
            "in": "path",
            "description": "request CONFERENCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/conferences/{CONFERENCE_ID}/participants": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFERENCE_ID",
            "in": "path",
            "description": "request CONFERENCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFERENCE_ID",
            "in": "path",
            "description": "request CONFERENCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/conferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/conferences/{CONFERENCE_ID}/participants/{PARTICIPANT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFERENCE_ID",
            "in": "path",
            "description": "request CONFERENCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PARTICIPANT_ID",
            "in": "path",
            "description": "request PARTICIPANT_ID parameter",
            "required": true,
            "schema": {
              "pattern": "^[0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFERENCE_ID",
            "in": "path",
            "description": "request CONFERENCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PARTICIPANT_ID",
            "in": "path",
            "description": "request PARTICIPANT_ID parameter",
            "required": true,
            "schema": {
              "pattern": "^[0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/conferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/configs/{CONFIG_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFIG_ID",
            "in": "path",
            "description": "request CONFIG_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFIG_ID",
            "in": "path",
            "description": "request CONFIG_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFIG_ID",
            "in": "path",
            "description": "request CONFIG_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFIG_ID",
            "in": "path",
            "description": "request CONFIG_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFIG_ID",
            "in": "path",
            "description": "request CONFIG_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/connectivity": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/connectivity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/connectivity/{CONNECTIVITY_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONNECTIVITY_ID",
            "in": "path",
            "description": "request CONNECTIVITY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONNECTIVITY_ID",
            "in": "path",
            "description": "request CONNECTIVITY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/connectivity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONNECTIVITY_ID",
            "in": "path",
            "description": "request CONNECTIVITY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONNECTIVITY_ID",
            "in": "path",
            "description": "request CONNECTIVITY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/contact_list": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/descendants": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/devices": {
      "get": {
        "description": "Summary listing of devices for the account",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "description": "Create a new device",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/devices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          },
          "201": {
            "description": "The newly created device object",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/devices/status": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/devices/{DEVICE_ID}": {
      "get": {
        "description": "Get the device details",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DEVICE_ID",
            "in": "path",
            "description": "request DEVICE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DEVICE_ID",
            "in": "path",
            "description": "request DEVICE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/devices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          },
          "202": {
            "description": "action was accepted (for asynchronous actions)",
            "content": {}
          }
        }
      },
      "post": {
        "description": "Edit the device object",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DEVICE_ID",
            "in": "path",
            "description": "request DEVICE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/devices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "description": "Remove the device from the account",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DEVICE_ID",
            "in": "path",
            "description": "request DEVICE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DEVICE_ID",
            "in": "path",
            "description": "request DEVICE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/devices/{DEVICE_ID}/sync": {
      "post": {
        "description": "Reset the device by sending a check-sync SIP NOTIFY",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DEVICE_ID",
            "in": "path",
            "description": "request DEVICE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/devices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          },
          "202": {
            "description": "Notice that the check-sync has been sent",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/dialplans": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/directories": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/directories"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/directories/{DIRECTORY_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DIRECTORY_ID",
            "in": "path",
            "description": "request DIRECTORY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DIRECTORY_ID",
            "in": "path",
            "description": "request DIRECTORY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/directories"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DIRECTORY_ID",
            "in": "path",
            "description": "request DIRECTORY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "DIRECTORY_ID",
            "in": "path",
            "description": "request DIRECTORY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxboxes": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxboxes/{FAXBOX_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAXBOX_ID",
            "in": "path",
            "description": "request FAXBOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAXBOX_ID",
            "in": "path",
            "description": "request FAXBOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAXBOX_ID",
            "in": "path",
            "description": "request FAXBOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAXBOX_ID",
            "in": "path",
            "description": "request FAXBOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/faxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/inbox": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/inbox/{FAX_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/faxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/inbox/{FAX_ID}/attachment": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/incoming": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/incoming/{FAX_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/outbox": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/outbox/{FAX_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/faxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/outbox/{FAX_ID}/attachment": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_ID",
            "in": "path",
            "description": "request FAX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/outgoing": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/faxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/outgoing/{FAX_JOB_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "FAX_JOB_ID",
            "in": "path",
            "description": "request FAX_JOB_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/smtplog": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/faxes/smtplog/{ATTEMPT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ATTEMPT_ID",
            "in": "path",
            "description": "request ATTEMPT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/freeswitch": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/global_provisioner_templates": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/global_provisioner_templates/{TEMPLATE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/global_provisioner_templates/{TEMPLATE_ID}/image": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/groups": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/groups/{GROUP_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "GROUP_ID",
            "in": "path",
            "description": "request GROUP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "GROUP_ID",
            "in": "path",
            "description": "request GROUP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "GROUP_ID",
            "in": "path",
            "description": "request GROUP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "GROUP_ID",
            "in": "path",
            "description": "request GROUP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/hotdesks": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ips": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ips"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ips"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ips/assigned": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ips/hosts": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ips/zones": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ips/{IP_ADDRESS}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "IP_ADDRESS",
            "in": "path",
            "description": "request IP_ADDRESS parameter",
            "required": true,
            "schema": {
              "maxLength": 15,
              "minLength": 7,
              "pattern": "^[0-9.]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "IP_ADDRESS",
            "in": "path",
            "description": "request IP_ADDRESS parameter",
            "required": true,
            "schema": {
              "maxLength": 15,
              "minLength": 7,
              "pattern": "^[0-9.]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ips"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "IP_ADDRESS",
            "in": "path",
            "description": "request IP_ADDRESS parameter",
            "required": true,
            "schema": {
              "maxLength": 15,
              "minLength": 7,
              "pattern": "^[0-9.]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ledgers": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ledgers/available": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ledgers/credit": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ledgers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ledgers/debit": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ledgers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ledgers/summary/{MODB_SUFFIX}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MODB_SUFFIX",
            "in": "path",
            "description": "request MODB_SUFFIX parameter",
            "required": true,
            "schema": {
              "maxLength": 6,
              "minLength": 6,
              "pattern": "^[0-9]{6}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ledgers/total": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ledgers/{SOURCE_SERVICE}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SOURCE_SERVICE",
            "in": "path",
            "description": "request SOURCE_SERVICE parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/ledgers/{SOURCE_SERVICE}/{LEDGER_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SOURCE_SERVICE",
            "in": "path",
            "description": "request SOURCE_SERVICE parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LEDGER_ID",
            "in": "path",
            "description": "request LEDGER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/limits": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/limits"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/lists": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}/entries": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}/entries/{LIST_ENTRY_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ENTRY_ID",
            "in": "path",
            "description": "request LIST_ENTRY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ENTRY_ID",
            "in": "path",
            "description": "request LIST_ENTRY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ENTRY_ID",
            "in": "path",
            "description": "request LIST_ENTRY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ENTRY_ID",
            "in": "path",
            "description": "request LIST_ENTRY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}/entries/{LIST_ENTRY_ID}/photo": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ENTRY_ID",
            "in": "path",
            "description": "request LIST_ENTRY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}/entries/{LIST_ENTRY_ID}/vcard": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ID",
            "in": "path",
            "description": "request LIST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LIST_ENTRY_ID",
            "in": "path",
            "description": "request LIST_ENTRY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/local_provisioner_templates": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/local_provisioner_templates/{TEMPLATE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/local_provisioner_templates/{TEMPLATE_ID}/image": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPLATE_ID",
            "in": "path",
            "description": "request TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/media": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/media"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/media/languages": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/media/languages/{LANGUAGE}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "LANGUAGE",
            "in": "path",
            "description": "request LANGUAGE parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/media/prompts": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/media/prompts/{PROMPT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PROMPT_ID",
            "in": "path",
            "description": "request PROMPT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/media/{MEDIA_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MEDIA_ID",
            "in": "path",
            "description": "request MEDIA_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MEDIA_ID",
            "in": "path",
            "description": "request MEDIA_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/media"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MEDIA_ID",
            "in": "path",
            "description": "request MEDIA_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/media/{MEDIA_ID}/raw": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MEDIA_ID",
            "in": "path",
            "description": "request MEDIA_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MEDIA_ID",
            "in": "path",
            "description": "request MEDIA_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/media"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/menus": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/menus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/menus/{MENU_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MENU_ID",
            "in": "path",
            "description": "request MENU_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MENU_ID",
            "in": "path",
            "description": "request MENU_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/menus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MENU_ID",
            "in": "path",
            "description": "request MENU_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MENU_ID",
            "in": "path",
            "description": "request MENU_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/metaflows": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/metaflows"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/migrations": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/migrations/{MIGRATION_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MIGRATION_ID",
            "in": "path",
            "description": "request MIGRATION_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "MIGRATION_ID",
            "in": "path",
            "description": "request MIGRATION_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/move": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/multi_factor": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/multi_factor/attempts": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/multi_factor/attempts/{ATTEMPT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ATTEMPT_ID",
            "in": "path",
            "description": "request ATTEMPT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/multi_factor/{CONFIG_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFIG_ID",
            "in": "path",
            "description": "request CONFIG_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFIG_ID",
            "in": "path",
            "description": "request CONFIG_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFIG_ID",
            "in": "path",
            "description": "request CONFIG_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "CONFIG_ID",
            "in": "path",
            "description": "request CONFIG_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/notifications": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notifications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/notifications/customer_update/message": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notifications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/notifications/smtplog": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/notifications/smtplog/{SMTP_LOG_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SMTP_LOG_ID",
            "in": "path",
            "description": "request SMTP_LOG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/notifications/{NOTIFICATION_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "NOTIFICATION_ID",
            "in": "path",
            "description": "request NOTIFICATION_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "NOTIFICATION_ID",
            "in": "path",
            "description": "request NOTIFICATION_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notifications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "NOTIFICATION_ID",
            "in": "path",
            "description": "request NOTIFICATION_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/notifications/{NOTIFICATION_ID}/preview": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "NOTIFICATION_ID",
            "in": "path",
            "description": "request NOTIFICATION_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notifications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/onboard": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/parents": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/parked_calls": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/carriers_info": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/check": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/classifiers": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/classifiers/{PHONE_NUMBER}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/collection": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/collection/activate": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/fix": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/fix/{PHONE_NUMBER}": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/locality": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/prefix": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}/activate": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}/identify": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}/port": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}/reserve": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/phone_numbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/pivot/debug": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/pivot/debug/{UUID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "request UUID parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-f0-9-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/port_requests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/last_submitted": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/port_requests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/attachments": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/port_requests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/attachments/{ATTACHMENT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ATTACHMENT_ID",
            "in": "path",
            "description": "request ATTACHMENT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ATTACHMENT_ID",
            "in": "path",
            "description": "request ATTACHMENT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/port_requests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ATTACHMENT_ID",
            "in": "path",
            "description": "request ATTACHMENT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/canceled": {
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/completed": {
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/loa": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/pending": {
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/rejected": {
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/scheduled": {
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/submitted": {
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/timeline": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PORT_REQUEST_ID",
            "in": "path",
            "description": "request PORT_REQUEST_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/presence": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/presence/report-{REPORT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "REPORT_ID",
            "in": "path",
            "description": "request REPORT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 39,
              "minLength": 39,
              "pattern": "^report\\-[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/presence/{EXTENSION}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "EXTENSION",
            "in": "path",
            "description": "request EXTENSION parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "EXTENSION",
            "in": "path",
            "description": "request EXTENSION parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/queues": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/queues"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/queues/eavesdrop": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/queues"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/queues/stats": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/queues/{QUEUE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "QUEUE_ID",
            "in": "path",
            "description": "request QUEUE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "QUEUE_ID",
            "in": "path",
            "description": "request QUEUE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/queues"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "QUEUE_ID",
            "in": "path",
            "description": "request QUEUE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "QUEUE_ID",
            "in": "path",
            "description": "request QUEUE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/queues/{QUEUE_ID}/eavesdrop": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "QUEUE_ID",
            "in": "path",
            "description": "request QUEUE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/queues"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/queues/{QUEUE_ID}/roster": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "QUEUE_ID",
            "in": "path",
            "description": "request QUEUE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "QUEUE_ID",
            "in": "path",
            "description": "request QUEUE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/queues"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "QUEUE_ID",
            "in": "path",
            "description": "request QUEUE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/rate_limits": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/recordings": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/recordings/{RECORDING_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RECORDING_ID",
            "in": "path",
            "description": "request RECORDING_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 39,
              "minLength": 39,
              "pattern": "^[0-9a-f-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RECORDING_ID",
            "in": "path",
            "description": "request RECORDING_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 39,
              "minLength": 39,
              "pattern": "^[0-9a-f-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/registrations": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/registrations/count": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/registrations/{USERNAME}": {
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USERNAME",
            "in": "path",
            "description": "request USERNAME parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/reseller": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_selectors": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_selectors/name": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_selectors/name/{SELECTOR_NAME}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SELECTOR_NAME",
            "in": "path",
            "description": "request SELECTOR_NAME parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_selectors/name/{SELECTOR_NAME}/resource/{RESOURCE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SELECTOR_NAME",
            "in": "path",
            "description": "request SELECTOR_NAME parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_ID",
            "in": "path",
            "description": "request RESOURCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_selectors/resource": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_selectors/resource/{RESOURCE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_ID",
            "in": "path",
            "description": "request RESOURCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_selectors/resource/{RESOURCE_ID}/name/{SELECTOR_NAME}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_ID",
            "in": "path",
            "description": "request RESOURCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SELECTOR_NAME",
            "in": "path",
            "description": "request SELECTOR_NAME parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_selectors/rules": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_selectors"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_selectors/{UUID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "request UUID parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-f0-9-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "request UUID parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-f0-9-]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_selectors"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "UUID",
            "in": "path",
            "description": "request UUID parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-f0-9-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_templates": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resource_templates/{RESOURCE_TEMPLATE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_TEMPLATE_ID",
            "in": "path",
            "description": "request RESOURCE_TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_TEMPLATE_ID",
            "in": "path",
            "description": "request RESOURCE_TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_TEMPLATE_ID",
            "in": "path",
            "description": "request RESOURCE_TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_TEMPLATE_ID",
            "in": "path",
            "description": "request RESOURCE_TEMPLATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resources": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resources"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resources/collection": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resources"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resources"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resources/jobs": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resources"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resources/jobs/{JOB_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "JOB_ID",
            "in": "path",
            "description": "request JOB_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/resources/{RESOURCE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_ID",
            "in": "path",
            "description": "request RESOURCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_ID",
            "in": "path",
            "description": "request RESOURCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resources"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_ID",
            "in": "path",
            "description": "request RESOURCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "RESOURCE_ID",
            "in": "path",
            "description": "request RESOURCE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/search": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/search/multi": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/security": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/security/attempts": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/security/attempts/{ATTEMPT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ATTEMPT_ID",
            "in": "path",
            "description": "request ATTEMPT_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/audit": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/audit/{AUDIT_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "AUDIT_ID",
            "in": "path",
            "description": "request AUDIT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/available": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/editable": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/manual": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/overrides": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/quote": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/reconciliation": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/summary": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/synchronization": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/topup": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/services/{PLAN_ID}": {
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PLAN_ID",
            "in": "path",
            "description": "request PLAN_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "PLAN_ID",
            "in": "path",
            "description": "request PLAN_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/siblings": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/skels": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/skels/{THING}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "THING",
            "in": "path",
            "description": "request THING parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "THING",
            "in": "path",
            "description": "request THING parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "THING",
            "in": "path",
            "description": "request THING parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "THING",
            "in": "path",
            "description": "request THING parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/sms": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/sms/{SMS_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SMS_ID",
            "in": "path",
            "description": "request SMS_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SMS_ID",
            "in": "path",
            "description": "request SMS_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/storage": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/storage/plans": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/storage/plans/{STORAGE_PLAN_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "STORAGE_PLAN_ID",
            "in": "path",
            "description": "request STORAGE_PLAN_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "STORAGE_PLAN_ID",
            "in": "path",
            "description": "request STORAGE_PLAN_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "STORAGE_PLAN_ID",
            "in": "path",
            "description": "request STORAGE_PLAN_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "STORAGE_PLAN_ID",
            "in": "path",
            "description": "request STORAGE_PLAN_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/tasks": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/tasks/{TASK_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TASK_ID",
            "in": "path",
            "description": "request TASK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 15,
              "minLength": 15,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TASK_ID",
            "in": "path",
            "description": "request TASK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 15,
              "minLength": 15,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TASK_ID",
            "in": "path",
            "description": "request TASK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 15,
              "minLength": 15,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/tasks/{TASK_ID}/input": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TASK_ID",
            "in": "path",
            "description": "request TASK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 15,
              "minLength": 15,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/tasks/{TASK_ID}/output": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TASK_ID",
            "in": "path",
            "description": "request TASK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 15,
              "minLength": 15,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/tasks/{TASK_ID}/stop": {
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TASK_ID",
            "in": "path",
            "description": "request TASK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 15,
              "minLength": 15,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/temporal_rules": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/temporal_rules"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/temporal_rules/{TEMPORAL_RULE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPORAL_RULE_ID",
            "in": "path",
            "description": "request TEMPORAL_RULE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPORAL_RULE_ID",
            "in": "path",
            "description": "request TEMPORAL_RULE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/temporal_rules"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPORAL_RULE_ID",
            "in": "path",
            "description": "request TEMPORAL_RULE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPORAL_RULE_ID",
            "in": "path",
            "description": "request TEMPORAL_RULE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/temporal_rules_sets": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/temporal_rules_sets"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/temporal_rules_sets/{TEMPORAL_RULE_SET}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPORAL_RULE_SET",
            "in": "path",
            "description": "request TEMPORAL_RULE_SET parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPORAL_RULE_SET",
            "in": "path",
            "description": "request TEMPORAL_RULE_SET parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/temporal_rules_sets"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPORAL_RULE_SET",
            "in": "path",
            "description": "request TEMPORAL_RULE_SET parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TEMPORAL_RULE_SET",
            "in": "path",
            "description": "request TEMPORAL_RULE_SET parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/token_restrictions": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/token_restrictions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/transactions": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/transactions/refund": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/transactions/sale": {
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/transactions/{TRANSACTION_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "TRANSACTION_ID",
            "in": "path",
            "description": "request TRANSACTION_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/tree": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/users": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/users/{USER_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/users/{USER_ID}/photo": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/users/{USER_ID}/vcard": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "USER_ID",
            "in": "path",
            "description": "request USER_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/vmboxes": {
      "get": {
        "description": "Summary listing of voicemail boxes for the account",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "description": "Create a new voicemail box",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmboxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          },
          "201": {
            "description": "The newly created voicemail box",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/vmboxes/messages": {
      "get": {
        "description": "Listing of all messages on an account",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}": {
      "get": {
        "description": "Details of the voicemail box",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "description": "Edit an existing voicemail box",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmboxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "description": "Deletes the voicemail box from the account",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "description": "Patch an existing voicemail box",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}/messages": {
      "get": {
        "description": "Listing of messages contained in the voicemail box",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmboxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "description": "Change a list message",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmboxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "description": "Remove all or a list of messages from a voicemail box",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}/messages/raw": {
      "post": {
        "description": "Fetch raw audio of a list message id",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmboxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}/messages/{VM_MSG_ID}": {
      "get": {
        "description": "Get a specific message object",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_MSG_ID",
            "in": "path",
            "description": "request VM_MSG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "description": "Change a message",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_MSG_ID",
            "in": "path",
            "description": "request VM_MSG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmboxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "description": "Remove the message from the voicemail box",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_MSG_ID",
            "in": "path",
            "description": "request VM_MSG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}/messages/{VM_MSG_ID}/raw": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_MSG_ID",
            "in": "path",
            "description": "request VM_MSG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_BOX_ID",
            "in": "path",
            "description": "request VM_BOX_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "VM_MSG_ID",
            "in": "path",
            "description": "request VM_MSG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmboxes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/webhooks": {
      "get": {
        "description": "Summary listing of webhooks for the account",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "description": "Create a new webhook",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhooks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          },
          "201": {
            "description": "The newly created webhook object",
            "content": {}
          }
        }
      },
      "patch": {
        "description": "Re-enable the collection of webhooks",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/webhooks/attempts": {
      "get": {
        "description": "List the attempts Kazoo has made to the external servers",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/webhooks/samples": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/webhooks/samples/{SAMPLE_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SAMPLE_ID",
            "in": "path",
            "description": "request SAMPLE_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/webhooks/{WEBHOOK_ID}": {
      "get": {
        "description": "Get the webhook details",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "WEBHOOK_ID",
            "in": "path",
            "description": "request WEBHOOK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "description": "Edit the webhook object",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "WEBHOOK_ID",
            "in": "path",
            "description": "request WEBHOOK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhooks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "description": "Remove the webhook from the account",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "WEBHOOK_ID",
            "in": "path",
            "description": "request WEBHOOK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "description": "Patch the webhook object",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "WEBHOOK_ID",
            "in": "path",
            "description": "request WEBHOOK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/webhooks/{WEBHOOK_ID}/attempts": {
      "get": {
        "description": "List the attempts Kazoo has made to the external servers for this webhook",
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "WEBHOOK_ID",
            "in": "path",
            "description": "request WEBHOOK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/websockets": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/websockets/{SOCKET_ID}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "SOCKET_ID",
            "in": "path",
            "description": "request SOCKET_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/whitelabel": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whitelabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whitelabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/whitelabel/domains": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whitelabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/whitelabel/icon": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whitelabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/whitelabel/logo": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whitelabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/whitelabel/welcome": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/whitelabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/whitelabel/{WHITELABEL_DOMAIN}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "WHITELABEL_DOMAIN",
            "in": "path",
            "description": "request WHITELABEL_DOMAIN parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/whitelabel/{WHITELABEL_DOMAIN}/icon": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "WHITELABEL_DOMAIN",
            "in": "path",
            "description": "request WHITELABEL_DOMAIN parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/whitelabel/{WHITELABEL_DOMAIN}/logo": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "WHITELABEL_DOMAIN",
            "in": "path",
            "description": "request WHITELABEL_DOMAIN parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/whitelabel/{WHITELABEL_DOMAIN}/welcome": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "WHITELABEL_DOMAIN",
            "in": "path",
            "description": "request WHITELABEL_DOMAIN parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/accounts/{ACCOUNT_ID}/{ENDPOINT_TYPE}/{ENDPOINT_ID}/quickcall/{NUMBER}": {
      "get": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ENDPOINT_TYPE",
            "in": "path",
            "description": "request ENDPOINT_TYPE parameter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "users",
                "devices"
              ]
            }
          },
          {
            "name": "ENDPOINT_ID",
            "in": "path",
            "description": "request ENDPOINT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "NUMBER",
            "in": "path",
            "description": "request NUMBER parameter",
            "required": true,
            "schema": {
              "pattern": "^\\+?[0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "X-Auth-Token",
            "in": "header",
            "description": "request authentication token",
            "required": true,
            "schema": {
              "minLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "description": "request ACCOUNT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "ENDPOINT_TYPE",
            "in": "path",
            "description": "request ENDPOINT_TYPE parameter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "users",
                "devices"
              ]
            }
          },
          {
            "name": "ENDPOINT_ID",
            "in": "path",
            "description": "request ENDPOINT_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          },
          {
            "name": "NUMBER",
            "in": "path",
            "description": "request NUMBER parameter",
            "required": true,
            "schema": {
              "pattern": "^\\+?[0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/api_auth": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api_auth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth": {
      "put": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/apps": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/apps/{APP_ID}": {
      "get": {
        "parameters": [
          {
            "name": "APP_ID",
            "in": "path",
            "description": "request APP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "APP_ID",
            "in": "path",
            "description": "request APP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "APP_ID",
            "in": "path",
            "description": "request APP_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/authorize": {
      "put": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/callback": {
      "put": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/keys": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/keys/{KEY_ID}": {
      "get": {
        "parameters": [
          {
            "name": "KEY_ID",
            "in": "path",
            "description": "request KEY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "KEY_ID",
            "in": "path",
            "description": "request KEY_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/links": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/links/{LINK_ID}": {
      "get": {
        "parameters": [
          {
            "name": "LINK_ID",
            "in": "path",
            "description": "request LINK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "LINK_ID",
            "in": "path",
            "description": "request LINK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "LINK_ID",
            "in": "path",
            "description": "request LINK_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/providers": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/providers/{PROVIDER_ID}": {
      "get": {
        "parameters": [
          {
            "name": "PROVIDER_ID",
            "in": "path",
            "description": "request PROVIDER_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "PROVIDER_ID",
            "in": "path",
            "description": "request PROVIDER_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "PROVIDER_ID",
            "in": "path",
            "description": "request PROVIDER_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/auth/tokeninfo": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/ip_auth": {
      "put": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/rates": {
      "get": {
        "description": "Listing of available rate docs",
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/rates/number/{PHONE_NUMBER}": {
      "get": {
        "parameters": [
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "request PHONE_NUMBER parameter",
            "required": true,
            "schema": {
              "minLength": 13,
              "pattern": "^%2[Bb][0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/rates/ratedecks": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/rates/{RATE_ID}": {
      "get": {
        "description": "Get the rate doc",
        "parameters": [
          {
            "name": "RATE_ID",
            "in": "path",
            "description": "request RATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "RATE_ID",
            "in": "path",
            "description": "request RATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "description": "Delete the rate doc",
        "parameters": [
          {
            "name": "RATE_ID",
            "in": "path",
            "description": "request RATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "RATE_ID",
            "in": "path",
            "description": "request RATE_ID parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/schemas": {
      "get": {
        "description": "Listing of installed schemas available",
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/schemas/{SCHEMA_NAME}": {
      "get": {
        "description": "Get the JSON schema definition",
        "parameters": [
          {
            "name": "SCHEMA_NAME",
            "in": "path",
            "description": "request SCHEMA_NAME parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-z0-9._-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/schemas/{SCHEMA_NAME}/validation": {
      "put": {
        "description": "Perform a test validation",
        "parameters": [
          {
            "name": "SCHEMA_NAME",
            "in": "path",
            "description": "request SCHEMA_NAME parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-z0-9._-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/shared_auth": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shared_auth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/sup/{MODULE}": {
      "get": {
        "parameters": [
          {
            "name": "MODULE",
            "in": "path",
            "description": "request MODULE parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/sup/{MODULE}/{FUNCTION}": {
      "get": {
        "parameters": [
          {
            "name": "MODULE",
            "in": "path",
            "description": "request MODULE parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9]+$",
              "type": "string"
            }
          },
          {
            "name": "FUNCTION",
            "in": "path",
            "description": "request FUNCTION parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/sup/{MODULE}/{FUNCTION}/{ARGS}": {
      "get": {
        "parameters": [
          {
            "name": "MODULE",
            "in": "path",
            "description": "request MODULE parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9]+$",
              "type": "string"
            }
          },
          {
            "name": "FUNCTION",
            "in": "path",
            "description": "request FUNCTION parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9]+$",
              "type": "string"
            }
          },
          {
            "name": "ARGS",
            "in": "path",
            "description": "request ARGS parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/system_configs": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/system_configs/{SYSTEM_CONFIG_ID}": {
      "get": {
        "parameters": [
          {
            "name": "SYSTEM_CONFIG_ID",
            "in": "path",
            "description": "request SYSTEM_CONFIG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "SYSTEM_CONFIG_ID",
            "in": "path",
            "description": "request SYSTEM_CONFIG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_configs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "SYSTEM_CONFIG_ID",
            "in": "path",
            "description": "request SYSTEM_CONFIG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_configs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "SYSTEM_CONFIG_ID",
            "in": "path",
            "description": "request SYSTEM_CONFIG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "SYSTEM_CONFIG_ID",
            "in": "path",
            "description": "request SYSTEM_CONFIG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/system_configs/{SYSTEM_CONFIG_ID}/{NODE}": {
      "get": {
        "parameters": [
          {
            "name": "SYSTEM_CONFIG_ID",
            "in": "path",
            "description": "request SYSTEM_CONFIG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NODE",
            "in": "path",
            "description": "request NODE parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9]+@[a-zA-Z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "SYSTEM_CONFIG_ID",
            "in": "path",
            "description": "request SYSTEM_CONFIG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NODE",
            "in": "path",
            "description": "request NODE parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9]+@[a-zA-Z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_configs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "SYSTEM_CONFIG_ID",
            "in": "path",
            "description": "request SYSTEM_CONFIG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NODE",
            "in": "path",
            "description": "request NODE parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9]+@[a-zA-Z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "SYSTEM_CONFIG_ID",
            "in": "path",
            "description": "request SYSTEM_CONFIG_ID parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NODE",
            "in": "path",
            "description": "request NODE parameter",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9]+@[a-zA-Z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/system_status": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/templates": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/templates/{TEMPLATE_NAME}": {
      "put": {
        "parameters": [
          {
            "name": "TEMPLATE_NAME",
            "in": "path",
            "description": "request TEMPLATE_NAME parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "TEMPLATE_NAME",
            "in": "path",
            "description": "request TEMPLATE_NAME parameter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/token_auth": {
      "get": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "delete": {
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/ubiquiti_auth": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ubiquiti_auth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/user_auth": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_auth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/user_auth/recovery": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_auth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_auth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    },
    "/user_auth/{AUTH_TOKEN}": {
      "get": {
        "parameters": [
          {
            "name": "AUTH_TOKEN",
            "in": "path",
            "description": "request AUTH_TOKEN parameter",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 32,
              "pattern": "^[0-9a-f]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "request succeeded",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "kapi.sms.outbound": {
        "required": [
          "Body",
          "Callee-ID-Number",
          "Caller-ID-Number",
          "Message-ID",
          "Route-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Contact-IP": {
            "type": "string"
          },
          "Contact-Port": {
            "type": "string"
          },
          "Contact-Username": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Delivery-Failure": {
            "type": "string"
          },
          "Delivery-Result-Code": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "message"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "outbound"
            ]
          },
          "Event-Queue": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Network-Addr": {
            "type": "string"
          },
          "Geo-Location": {
            "type": "string"
          },
          "Message-ID": {
            "type": "string"
          },
          "Orig-IP": {
            "type": "string"
          },
          "Orig-Port": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Route-ID": {
            "type": "string"
          },
          "Route-Type": {
            "type": "string",
            "enum": [
              "on-net",
              "off-net"
            ]
          },
          "Status": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-Nodename": {
            "type": "string"
          },
          "System-ID": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          }
        },
        "description": "AMQP API for sms.outbound"
      },
      "system_config.datamgr": {
        "type": "object",
        "properties": {
          "cache_policy": {
            "type": "object",
            "properties": {},
            "description": "datamgr cache policy"
          },
          "change_notice_exclude_types": {
            "type": "array",
            "description": "datamgr change_notice_exclude_types",
            "items": {
              "type": "string"
            }
          },
          "default_archive_folder": {
            "type": "string",
            "description": "datamgr default archive folder",
            "default": "/tmp"
          },
          "max_bulk_insert": {
            "minimum": 1,
            "type": "integer",
            "description": "maximum number of documents that will be inserted in a single request"
          },
          "max_bulk_read": {
            "minimum": 1,
            "type": "integer",
            "description": "maximum number of documents that will be read in a single request"
          },
          "no_caching_doc_types": {
            "type": "array",
            "description": "datamgr no caching doc types",
            "items": {
              "type": "string"
            }
          },
          "performance": {
            "type": "object",
            "properties": {},
            "description": "datamgr performance"
          }
        },
        "description": "Schema for datamgr system_config"
      },
      "kapi.bookkeepers.refund_req_definition": {
        "required": [
          "Account-ID",
          "Amount",
          "Bookkeeper-Type",
          "Transaction-DB",
          "Transaction-ID",
          "Vendor-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Amount": {
            "type": "string"
          },
          "Bookkeeper-Type": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "refund_req"
            ]
          },
          "Transaction-DB": {
            "type": "string"
          },
          "Transaction-ID": {
            "type": "string"
          },
          "Vendor-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.refund_req_definition"
      },
      "kapi.websockets.get_resp": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "websockets"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "get_resp"
            ]
          }
        },
        "description": "AMQP API for websockets.get_resp"
      },
      "kapi.acdc_agent.login": {
        "required": [
          "Account-ID",
          "Agent-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "login"
            ]
          },
          "Presence-ID": {
            "type": "string"
          },
          "Presence-State": {
            "type": "string",
            "enum": [
              "trying",
              "online",
              "offline",
              "early",
              "confirmed",
              "terminated"
            ]
          },
          "Queue-ID": {
            "type": "string"
          },
          "Time-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_agent.login"
      },
      "kapi.call.usurp_control": {
        "required": [
          "Call-ID",
          "Fetch-ID"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "usurp_control"
            ]
          },
          "Fetch-ID": {
            "type": "string"
          },
          "Media-Node": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          }
        },
        "description": "AMQP API for call.usurp_control"
      },
      "system_config.kzt_twiml_util": {
        "type": "object",
        "properties": {
          "max_length": {
            "type": "integer",
            "description": "kzt_twiml_util maximum length"
          }
        },
        "description": "Schema for kzt_twiml_util system_config"
      },
      "kapi.websockets.module_resp": {
        "required": [
          "Persisted",
          "Started"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "websockets"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "module_resp"
            ]
          },
          "Persisted": {
            "type": "boolean"
          },
          "Started": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for websockets.module_resp"
      },
      "kapi.acdc_queue.member_connect_accepted": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "connect_accepted"
            ]
          },
          "Process-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_connect_accepted"
      },
      "kapi.dialplan.redirect": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Redirect-Contact"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "redirect"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Redirect-Contact": {
            "type": "string"
          },
          "Redirect-Node": {
            "type": "string"
          },
          "Redirect-Server": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.redirect"
      },
      "system_config.edr": {
        "type": "object",
        "properties": {
          "backends": {
            "type": "array",
            "description": "Registered edr backends",
            "items": {
              "required": [
                "bindings",
                "enabled",
                "name",
                "type"
              ],
              "type": "object",
              "properties": {
                "bindings": {
                  "type": "array",
                  "description": "The types of events the backend should be notified about",
                  "items": {
                    "type": "object",
                    "properties": {
                      "include_descendants": {
                        "type": "boolean",
                        "description": "Should we receive events relating to descendant accounts if an account is specified?",
                        "default": false
                      },
                      "severity": {
                        "type": "object"
                      },
                      "app_name": {
                        "type": "string",
                        "description": "Which apps should we receive events from? If not specified or * then events for all apps will be received",
                        "default": "*"
                      },
                      "account_id": {
                        "type": "object"
                      },
                      "exact_severity": {
                        "type": "boolean",
                        "description": "If true, then only events with severity exactly matching the severity field will be received. If false then more severe events will also be received",
                        "default": false
                      },
                      "exact_verbosity": {
                        "type": "boolean",
                        "description": "If true, then only events with verbosity exactly matching the verbosity field will be received. If false then less verbose events will also be received",
                        "default": false
                      },
                      "verbosity": {
                        "type": "object"
                      }
                    },
                    "description": "An edr binding"
                  }
                },
                "name": {
                  "minLength": 1,
                  "type": "string",
                  "description": "A unique identifier for the backend"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "formatter": {
                      "type": "object",
                      "properties": {
                        "options": {
                          "type": "object",
                          "properties": {},
                          "description": "Options passed on to the formatter module. These vary by module"
                        },
                        "type": {
                          "type": "string",
                          "description": "The formatter module to be used (e.g. json refers to edr_fmt_json.erl)",
                          "enum": [
                            "json"
                          ]
                        }
                      },
                      "description": "Output format configuration which is used by some (but not all) backends"
                    }
                  },
                  "description": "Options passed on to the backend module. These vary by module"
                },
                "type": {
                  "type": "string",
                  "description": "The backend module to be used (e.g. amqp refers to edr_be_amqp.erl)",
                  "enum": [
                    "amqp",
                    "file",
                    "http"
                  ]
                },
                "enabled": {
                  "type": "boolean",
                  "description": "Should the backend be started on edr app start?",
                  "default": true
                }
              }
            }
          }
        },
        "description": "Schema for edr system_config"
      },
      "kapi.acdc_queue.agent_timeout": {
        "required": [
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Agent-Process-IDs": {
            "type": "array"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "connect_timeout"
            ]
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.agent_timeout"
      },
      "system_config.system_data": {
        "type": "object",
        "properties": {
          "allow_validation_overrides": {
            "type": "boolean",
            "description": "Whether to allow storage plans to skip validating attachment settings",
            "default": false
          }
        },
        "description": "Schema for system_data system_config"
      },
      "kapi.sms.resume": {
        "required": [
          "SMS-ID"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "message"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "resume"
            ]
          },
          "SMS-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for sms.resume"
      },
      "metaflows.audio_level": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Start or stop the audio adjustment",
            "enum": [
              "start",
              "stop"
            ]
          },
          "level": {
            "maximum": 4,
            "minimum": -4,
            "type": "integer",
            "description": "Adjustment level for the audio"
          },
          "mode": {
            "type": "string",
            "description": "What mode to use (depends on direction)",
            "enum": [
              "read",
              "write"
            ]
          }
        },
        "description": "Allow changing the volume on a channel (including mute/unmute)"
      },
      "system_config.notify.transaction": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.transaction default to"
          },
          "html_content_transfer_encoding": {
            "type": "string",
            "description": "notify.transaction html content transfer encoding",
            "default": "7BIT"
          },
          "text_content_transfer_encoding": {
            "type": "string",
            "description": "notify.transaction text content transfer encoding",
            "default": "7BIT"
          }
        },
        "description": "Schema for notify.transaction system_config"
      },
      "kapi.conference.participants_req": {
        "required": [
          "Application-Name",
          "Conference-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "participants"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          }
        },
        "description": "AMQP API for conference.participants_req"
      },
      "system_config.konami": {
        "type": "object",
        "properties": {
          "event_cleanup_timeout_ms": {
            "type": "integer",
            "description": "konami event cleanup timeout in milliseconds"
          },
          "transfer": {
            "type": "object",
            "properties": {
              "default_takeback_dtmf": {
                "type": "string",
                "description": "konami default takeback dtmf",
                "default": "*1"
              },
              "default_target_timeout_ms": {
                "type": "integer",
                "description": "konami default target timeout in milliseconds"
              }
            }
          },
          "use_fast_rearm": {
            "type": "boolean",
            "description": "konami use fast rearm",
            "default": false
          },
          "webseq_enabled": {
            "type": "boolean",
            "description": "konami webseq enabled",
            "default": false
          }
        },
        "description": "Schema for konami system_config"
      },
      "system_config.notify.port_request_admin": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.port_request_admin default to"
          }
        },
        "description": "Schema for notify.port_request_admin system_config"
      },
      "callflows.record_call": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Whether to start or stop the recording",
            "default": "start",
            "enum": [
              "start",
              "stop"
            ]
          },
          "format": {
            "type": "string",
            "description": "What format to store the recording on disk",
            "enum": [
              "mp3",
              "wav"
            ]
          },
          "label": {
            "type": "string",
            "description": "Label to include in the origin of call recording"
          },
          "media_name": {
            "type": "string",
            "description": "the name of media"
          },
          "method": {
            "type": "string",
            "description": "HTTP verb to use when sending the recording to the supplied URL",
            "default": "put",
            "enum": [
              "put",
              "post"
            ]
          },
          "origin": {
            "type": "string",
            "description": "How the recording was started - read-only"
          },
          "record_min_sec": {
            "type": "integer",
            "description": "The minimum length, in seconds, the recording must be to be considered successful. Otherwise it is deleted"
          },
          "record_on_answer": {
            "type": "boolean",
            "description": "Whether to delay the recording until the channel is answered",
            "default": false
          },
          "record_on_bridge": {
            "type": "boolean",
            "description": "Whether to delay the recording until the channel is bridged",
            "default": false
          },
          "record_sample_rate": {
            "type": "integer",
            "description": "What sampling rate to use on the recording"
          },
          "should_follow_transfer": {
            "type": "boolean",
            "description": "If true, the recording will continue after a transfer on the active leg",
            "default": true
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "time_limit": {
            "maximum": 10800,
            "minimum": 5,
            "type": "integer",
            "description": "Time limit, in seconds, for the recording"
          },
          "url": {
            "type": "string",
            "description": "The URL to use when sending the recording for storage",
            "format": "uri"
          }
        },
        "description": "Validator for the Record Call callflow action"
      },
      "devices": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "call_forward": {
            "type": "object",
            "properties": {
              "require_keypress": {
                "type": "boolean",
                "description": "Determines if the callee is prompted to press 1 to accept the call",
                "default": true
              },
              "keep_caller_id": {
                "type": "boolean",
                "description": "Determines if the caller id is kept when the call is forwarded, if not the devices caller id is used",
                "default": true
              },
              "number": {
                "maxLength": 15,
                "type": "string",
                "description": "The number to forward calls to"
              },
              "direct_calls_only": {
                "type": "boolean",
                "description": "Determines if the calls that are not directly sent to the device should be forwarded",
                "default": false
              },
              "failover": {
                "type": "boolean",
                "description": "Enable the call-forwarding parameters if the device is offline",
                "default": false
              },
              "enabled": {
                "type": "boolean",
                "description": "Determines if the call forwarding should be used",
                "default": false
              },
              "substitute": {
                "type": "boolean",
                "description": "Determines if the call forwarding replaces the device",
                "default": true
              },
              "ignore_early_media": {
                "type": "boolean",
                "description": "The option to determine if early media from the call forwarded number should ignored",
                "default": true
              }
            },
            "description": "The device call forward parameters"
          },
          "call_recording": {
            "$ref": "#/components/schemas/call_recording"
          },
          "call_restriction": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "If set to deny all calls of this type will be rejected.  If set to inherit the user/device rules apply",
                  "enum": [
                    "inherit",
                    "deny"
                  ]
                }
              }
            },
            "description": "Device level call restrictions for each available number classification"
          },
          "call_waiting": {
            "$ref": "#/components/schemas/call_waiting"
          },
          "caller_id": {
            "$ref": "#/components/schemas/caller_id"
          },
          "caller_id_options": {
            "type": "object",
            "properties": {
              "outbound_privacy": {
                "type": "string",
                "description": "Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing",
                "enum": [
                  "full",
                  "name",
                  "number",
                  "none"
                ]
              }
            },
            "description": "custom properties for configuring caller_id"
          },
          "contact_list": {
            "type": "object",
            "properties": {
              "exclude": {
                "type": "boolean",
                "description": "If set to true the device is excluded from the contact list"
              }
            },
            "description": "Contact List Parameters"
          },
          "device_type": {
            "type": "string",
            "description": "Arbitrary device type used by the UI and billing system"
          },
          "dial_plan": {
            "$ref": "#/components/schemas/dialplans"
          },
          "do_not_disturb": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Is do-not-disturb enabled for this device?"
              }
            },
            "description": "DND Parameters"
          },
          "enabled": {
            "type": "boolean",
            "description": "Determines if the device is currently enabled",
            "default": true
          },
          "exclude_from_queues": {
            "type": "boolean",
            "description": "Do not ring this device when calling user/agent in queue",
            "default": false
          },
          "formatters": {
            "$ref": "#/components/schemas/formatters"
          },
          "hotdesk": {
            "type": "object",
            "properties": {
              "users": {
                "type": "object",
                "properties": {},
                "description": "The user(s) currently hotdesked into the device"
              }
            },
            "description": "The hotdesk status of this device"
          },
          "language": {
            "type": "string",
            "description": "The language for the device"
          },
          "mac_address": {
            "type": "string",
            "description": "The MAC Address of the device (if applicable)"
          },
          "media": {
            "$ref": "#/components/schemas/endpoint.media"
          },
          "metaflows": {
            "$ref": "#/components/schemas/metaflows"
          },
          "music_on_hold": {
            "type": "object",
            "properties": {
              "media_id": {
                "maxLength": 2048,
                "type": "string",
                "description": "The ID of a media object that should be used as the music on hold"
              }
            },
            "description": "The music on hold parameters used if not a property of the device owner"
          },
          "mwi_unsolicited_updates": {
            "type": "boolean",
            "description": "When true enables unsolicited mwi notifications",
            "default": true
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the device"
          },
          "outbound_flags": {
            "type": "object",
            "description": "List of flags (features) this device requires when making outbound calls"
          },
          "owner_id": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "The ID of the user object that 'owns' the device"
          },
          "presence_id": {
            "type": "string",
            "description": "Static presence ID (used instead of SIP username)"
          },
          "provision": {
            "type": "object",
            "properties": {
              "endpoint_model": {
                "type": "object",
                "description": "Model name of the phone"
              },
              "feature_keys": {
                "type": "object",
                "properties": {}
              },
              "combo_keys": {
                "type": "object",
                "properties": {}
              },
              "endpoint_brand": {
                "type": "string",
                "description": "Brand of the phone"
              },
              "endpoint_family": {
                "type": "string",
                "description": "Family name of the phone"
              },
              "id": {
                "type": "string",
                "description": "Provisioner Template ID"
              }
            },
            "description": "Provision data"
          },
          "register_overwrite_notify": {
            "type": "boolean",
            "description": "When true enables overwrite notifications",
            "default": false
          },
          "ringtones": {
            "type": "object",
            "properties": {
              "external": {
                "maxLength": 256,
                "type": "string",
                "description": "The alert info SIP header added when the call is from internal sources"
              },
              "internal": {
                "maxLength": 256,
                "type": "string",
                "description": "The alert info SIP header added when the call is from external sources"
              }
            },
            "description": "Ringtone Parameters"
          },
          "sip": {
            "type": "object",
            "properties": {
              "custom_sip_headers": {
                "type": "object",
                "properties": {},
                "description": "A property list of SIP headers"
              },
              "ignore_completed_elsewhere": {
                "type": "boolean",
                "description": "When set to false the phone should not consider ring group calls answered elsewhere as missed"
              },
              "number": {
                "type": "string",
                "description": "The number used if the invite format is 1npan, npan, or e164 (if not set the dialed number is used)"
              },
              "password": {
                "maxLength": 32,
                "minLength": 5,
                "type": "string",
                "description": "SIP authentication password"
              },
              "route": {
                "type": "string",
                "description": "The SIP URL used if the invite format is 'route'"
              },
              "method": {
                "type": "string",
                "description": "Method of authentication",
                "default": "password",
                "enum": [
                  "password",
                  "ip"
                ]
              },
              "ip": {
                "type": "string",
                "description": "IP address for this device"
              },
              "static_route": {
                "type": "string",
                "description": "Sends all inbound calls to this string (instead of dialed number or username)"
              },
              "invite_format": {
                "type": "string",
                "description": "The SIP request URI invite format",
                "default": "contact",
                "enum": [
                  "username",
                  "npan",
                  "1npan",
                  "e164",
                  "route",
                  "contact"
                ]
              },
              "realm": {
                "maxLength": 253,
                "minLength": 4,
                "pattern": "^[.\\w_-]+$",
                "type": "string",
                "description": "The realm this device should use, overriding the account realm. Should rarely be necessary."
              },
              "expire_seconds": {
                "type": "integer",
                "description": "The time, in seconds, sent to the provisioner for the registration period that the device should be configured with."
              },
              "username": {
                "maxLength": 32,
                "minLength": 2,
                "type": "string",
                "description": "SIP authentication username"
              }
            },
            "description": "SIP Parameters"
          },
          "suppress_unregister_notifications": {
            "type": "boolean",
            "description": "When true disables deregister notifications",
            "default": false
          },
          "timezone": {
            "type": "string",
            "description": "Device's timezone"
          }
        },
        "description": "A device be it a SIP phone or landline number"
      },
      "profile": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "description": "To specify the components of the addresses",
            "items": {
              "type": "object",
              "properties": {
                "types": {
                  "type": "array",
                  "description": "To specify types of the address",
                  "items": {
                    "type": "object"
                  }
                },
                "address": {
                  "type": "string",
                  "description": "To specify the address"
                }
              }
            }
          },
          "assistant": {
            "type": "string",
            "description": "To specify the user's assistant"
          },
          "birthday": {
            "type": "string",
            "description": "To specify the birth date of the user"
          },
          "nicknames": {
            "type": "array",
            "description": "To specify the text corresponding to the nickname of the user",
            "items": {
              "type": "string"
            }
          },
          "note": {
            "type": "string",
            "description": "To specify supplemental information or a comment that is associated with the user"
          },
          "role": {
            "type": "string",
            "description": "To specify the function or part played in a particular situation by the user"
          },
          "sort-string": {
            "type": "string",
            "description": "To specify the family name or given name text to be used for national-language-specific sorting of the FN and N types"
          },
          "title": {
            "type": "string",
            "description": "To specify the position or job of the user"
          }
        },
        "description": "Defines user extended properties"
      },
      "account_config.crossbar.sms": {
        "type": "object",
        "properties": {
          "api_e164_convert_from": {
            "type": "boolean",
            "description": "crossbar.sms api e164 convert from",
            "default": false
          },
          "api_e164_convert_to": {
            "type": "boolean",
            "description": "crossbar.sms api e164 convert to",
            "default": false
          }
        },
        "description": "Schema for crossbar.sms account_config"
      },
      "storage.attachment.aws": {
        "required": [
          "handler",
          "settings"
        ],
        "type": "object",
        "properties": {
          "handler": {
            "type": "string",
            "description": "What AWS service to use",
            "enum": [
              "s3"
            ]
          },
          "settings": {
            "required": [
              "bucket",
              "key",
              "secret"
            ],
            "type": "object",
            "properties": {
              "bucket": {
                "maxLength": 63,
                "minLength": 6,
                "pattern": "^[^\\s]*$",
                "type": "string",
                "description": "Bucket name to store data to"
              },
              "scheme": {
                "type": "string",
                "description": "scheme to use to access host",
                "enum": [
                  "http",
                  "https"
                ]
              },
              "port": {
                "type": "integer",
                "description": "port to use"
              },
              "bucket_access_method": {
                "type": "string",
                "description": "how to access the host.",
                "enum": [
                  "auto",
                  "vhost",
                  "path"
                ]
              },
              "bucket_after_host": {
                "type": "boolean",
                "description": "use bucket after host as part of url"
              },
              "host": {
                "minLength": 1,
                "pattern": "^[^\\s]*$",
                "type": "string",
                "description": "the s3 host, leave empty for default"
              },
              "secret": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "^[^\\s]*$",
                "type": "string",
                "description": "AWS Secret to use"
              },
              "region": {
                "minLength": 1,
                "pattern": "^[^\\s]*$",
                "type": "string",
                "description": "the region where the bucket is located"
              },
              "key": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "^[^\\s]*$",
                "type": "string",
                "description": "AWS Key to use"
              }
            },
            "description": "AWS API settings"
          }
        },
        "description": "schema for AWS attachment entry"
      },
      "kapi.call.channel_status_resp": {
        "required": [
          "Call-ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Error-Msg": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "channel_status_resp"
            ]
          },
          "From-Tag": {
            "type": "string"
          },
          "Other-Leg-Call-ID": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "Status": {
            "type": "string",
            "enum": [
              "active",
              "tmpdown",
              "terminated"
            ]
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-Nodename": {
            "type": "string"
          },
          "Switch-URL": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for call.channel_status_resp"
      },
      "account_config.tasks.bill_early": {
        "type": "object",
        "properties": {
          "bill_early_enabled": {
            "type": "boolean",
            "description": "Controls whether we should bill early this account",
            "default": false
          },
          "reminder_enabled": {
            "type": "boolean",
            "description": "Controls whether we should send bill reminder for this account a few days before due date",
            "default": false
          }
        },
        "description": "Schema for tasks.bill_early account_config"
      },
      "system_config.notify": {
        "type": "object",
        "properties": {
          "autoload_modules": {
            "type": "array",
            "description": "teletype modules to start when teletype is started",
            "items": {
              "type": "string"
            }
          },
          "backoff_fudge_ms": {
            "type": "integer",
            "description": "notify backoff fudge in milliseconds"
          },
          "notification_app": {
            "type": "string",
            "description": "notify notification app",
            "default": "teletype"
          },
          "notify_persist_enabled": {
            "type": "boolean",
            "description": "notify notify_persist_enabled",
            "default": true
          },
          "notify_persist_exceptions": {
            "type": "array",
            "description": "notify notify_persist_exceptions",
            "items": {
              "type": "string"
            }
          },
          "notify_persist_temporary_force_exceptions": {
            "type": "array",
            "description": "notify notify_persist_temporary_force_exceptions",
            "items": {
              "type": "string"
            }
          },
          "notify_publisher_timeout_ms": {
            "minimum": 1,
            "type": "integer",
            "description": "Timeout in milliseconds when publishing notification using notify publisher"
          },
          "search_rep_email": {
            "type": "boolean",
            "description": "notify search rep email",
            "default": true
          },
          "should_persist_for_retry": {
            "type": "boolean",
            "description": "notify should_persist_for_retry",
            "default": true
          },
          "use_federated_listener": {
            "type": "boolean",
            "description": "notify use federated listener",
            "default": false
          }
        },
        "description": "Schema for notify system_config"
      },
      "webhook_attempts": {
        "required": [
          "hook_id",
          "result"
        ],
        "type": "object",
        "properties": {
          "client_error": {
            "type": "string",
            "description": "Kazoo-side error string, if any"
          },
          "hook_id": {
            "type": "string",
            "description": "Id of the hook attempted"
          },
          "reason": {
            "type": "string",
            "description": "short reason for the failure"
          },
          "response_body": {
            "type": "string",
            "description": "HTTP response body received, if any"
          },
          "response_code": {
            "type": "string",
            "description": "HTTP response code received, if any"
          },
          "result": {
            "type": "string",
            "description": "Whether the attempt succeeded or not",
            "enum": [
              "success",
              "failure"
            ]
          },
          "retries_left": {
            "type": "integer",
            "description": "How many retries were left after this attempt"
          }
        },
        "description": "Log of an attempt to send a webhook to a third-party server"
      },
      "callflows.pivot": {
        "required": [
          "voice_url"
        ],
        "type": "object",
        "properties": {
          "cdr_url": {
            "pattern": "^https?://",
            "type": "string",
            "description": "Optional URL to send the CDR to at the end of the call"
          },
          "debug": {
            "type": "boolean",
            "description": "Store debug logs related to processing this Pivot call",
            "default": false
          },
          "method": {
            "type": "string",
            "description": "What HTTP verb to send the request(s) with",
            "default": "get",
            "enum": [
              "get",
              "post",
              "GET",
              "POST"
            ]
          },
          "req_body_format": {
            "type": "string",
            "description": "What format should the request body have",
            "default": "form",
            "enum": [
              "form",
              "json"
            ]
          },
          "req_format": {
            "type": "string",
            "description": "What format of Pivot will the your server respond with",
            "default": "kazoo",
            "enum": [
              "kazoo",
              "twiml"
            ]
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "voice_url": {
            "pattern": "^https?://",
            "type": "string",
            "description": "What URL to request the initial Pivot callflow"
          }
        },
        "description": "Validator for the Pivot callflow element"
      },
      "ips": {
        "type": "object",
        "properties": {
          "ips": {
            "minItems": 1,
            "type": "array",
            "description": "List of IP addresses",
            "items": {
              "type": "object",
              "description": "IP address"
            }
          }
        },
        "description": "IP addresses assigned to the account"
      },
      "kapi.frontier.ratelimits_resp": {
        "type": "object",
        "properties": {
          "Device": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "rate_limit"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_resp"
            ]
          },
          "Realm": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "AMQP API for frontier.ratelimits_resp"
      },
      "callflows.flush_dtmf": {
        "type": "object",
        "properties": {
          "collection_name": {
            "type": "string",
            "description": "Flush collected DTMF in a named key",
            "default": "default"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the flush_dtmf callflow data object"
      },
      "metaflows.resume": {
        "type": "object",
        "description": "Reconnect the two legs of a call, if possible"
      },
      "kapi.globals.call": {
        "required": [
          "Message",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "globals"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Message": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "description": "AMQP API for globals.call"
      },
      "system_config.konami_pro": {
        "type": "object",
        "properties": {
          "route_win_timeout": {
            "type": "integer",
            "description": "konami_pro route_win_timeout"
          }
        },
        "description": "Schema for konami_pro system_config"
      },
      "kapi.conference.unmute_participant": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Participant-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "unmute_participant"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.unmute_participant"
      },
      "system_config.crossbar.contact_list": {
        "type": "object",
        "properties": {
          "default_includes": {
            "type": "array",
            "description": "crossbar.contact_list default includes",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "description": "Schema for crossbar.contact_list system_config"
      },
      "kapi.dialplan.progress": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "progress"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.progress"
      },
      "callflows.offnet": {
        "type": "object",
        "properties": {
          "bypass_e164": {
            "type": "boolean",
            "description": "Use the original requested number instead of normalizing to E164"
          },
          "caller_id_type": {
            "type": "string",
            "description": "Which configured caller-id to use (key in the 'caller_id' object)",
            "default": "external"
          },
          "custom_sip_headers": {
            "type": "object",
            "properties": {},
            "description": "A property list of SIP headers"
          },
          "do_not_normalize": {
            "type": "boolean",
            "description": "Use the original requested number instead of normalizing; otherwise try to apply the endpoint's dialplan to the requested number"
          },
          "dynamic_flags": {
            "type": "array",
            "description": "List of function names (or 'zone') that are called on the Call record to populate the 'flags' array sent to the resource(s) for matching",
            "items": {
              "type": "string"
            }
          },
          "emit_account_id": {
            "type": "boolean",
            "description": "Toggles whether to put the account id in the SIP packets"
          },
          "format_from_uri": {
            "type": "boolean",
            "description": "If true, puts the account realm in the From header"
          },
          "from_uri_realm": {
            "type": "string",
            "description": "Override the From realm in the SIP packets"
          },
          "hunt_account_id": {
            "type": "string",
            "description": "When using local resources, use this account instead of the account making the call (useful for resellers)"
          },
          "ignore_early_media": {
            "type": "boolean",
            "description": "Toggle whether to ignore early media",
            "default": false
          },
          "outbound_flags": {
            "type": "array",
            "description": "List of flags to use when matching resources to route the call",
            "items": {
              "type": "string"
            }
          },
          "resource_type": {
            "type": "string",
            "description": "sets a custom resource type for the published amqp message"
          },
          "ringback": {
            "type": "string",
            "description": "Tone or file to play while waiting for the leg to be answered"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "timeout": {
            "type": "integer",
            "description": "How long, in seconds, to wait for the call to be answered"
          },
          "to_did": {
            "type": "string",
            "description": "Statically set the DID to dial"
          },
          "use_local_resources": {
            "type": "boolean",
            "description": "Toggle whether to use the account's (or hunt_account_id's) resources vs the system resources",
            "default": true
          }
        },
        "description": "Validator for the offnet callflow data object"
      },
      "kapi.acdc_stats.call_processed": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_call_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "processed"
            ]
          },
          "Hung-Up-By": {
            "type": "string"
          },
          "Processed-Timestamp": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_stats.call_processed"
      },
      "kapi.sms.message": {
        "required": [
          "Application-Name",
          "Body",
          "Call-ID",
          "Endpoints"
        ],
        "type": "object",
        "properties": {
          "Application-Data": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "send"
            ]
          },
          "Asserted-Identity-Name": {
            "type": "string"
          },
          "Asserted-Identity-Number": {
            "type": "string"
          },
          "Asserted-Identity-Realm": {
            "type": "string"
          },
          "B-Leg-Events": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "Bridge-Actions": {
            "type": "object",
            "properties": {}
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Confirm-Cancel-Timeout": {
            "type": "integer"
          },
          "Confirm-File": {
            "type": "string"
          },
          "Confirm-Key": {
            "type": "string"
          },
          "Continue-After": {
            "type": "string"
          },
          "Continue-On-Fail": {
            "type": "boolean"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Dial-Endpoint-Method": {
            "type": "string",
            "enum": [
              "single",
              "simultaneous"
            ]
          },
          "Enable-T38-Fax": {
            "type": "string"
          },
          "Enable-T38-Fax-Request": {
            "type": "string"
          },
          "Enable-T38-Gateway": {
            "type": "string"
          },
          "Enable-T38-Passthrough": {
            "type": "string"
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/kapi.dialplan.bridge_endpoint"
            }
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "message"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "route"
            ]
          },
          "Export-Bridge-Variables": {
            "type": "string"
          },
          "Export-Variables": {
            "type": "string"
          },
          "Fail-On-Single-Reject": {
            "type": "string"
          },
          "Force-Fax": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-URI": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "Hold-Media": {
            "type": "string"
          },
          "Ignore-Completed-Elsewhere": {
            "type": "string"
          },
          "Ignore-Early-Media": {
            "type": "string"
          },
          "Ignore-Forward": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string"
          },
          "Loopback-Bowout": {
            "type": "string"
          },
          "Media": {
            "type": "string"
          },
          "Message-ID": {
            "type": "string"
          },
          "Outbound-Callee-ID-Name": {
            "type": "string"
          },
          "Outbound-Callee-ID-Number": {
            "type": "string"
          },
          "Outbound-Caller-ID-Name": {
            "type": "string"
          },
          "Outbound-Caller-ID-Number": {
            "type": "string"
          },
          "Privacy-Hide-Name": {
            "type": "string"
          },
          "Privacy-Hide-Number": {
            "type": "string"
          },
          "Privacy-Method": {
            "type": "string"
          },
          "Ringback": {
            "type": "string"
          },
          "Route-ID": {
            "type": "string"
          },
          "Route-Type": {
            "type": "string",
            "enum": [
              "on-net",
              "off-net"
            ]
          },
          "SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "SIP-Invite-Parameters": {
            "type": "string"
          },
          "SIP-Transport": {
            "type": "string",
            "enum": [
              "udp",
              "tcp",
              "tls"
            ]
          },
          "Secure-RTP": {
            "type": "string"
          },
          "Simplify-Loopback": {
            "type": "string"
          },
          "Timeout": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-URI": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          }
        },
        "description": "AMQP API for sms.message"
      },
      "kapi.dialplan.call_pickup": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Target-Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "call_pickup"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Continue-On-Cancel": {
            "type": "string"
          },
          "Continue-On-Fail": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Hangup-After-Pickup": {
            "type": "boolean"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Move-Channel-If-Necessary": {
            "type": "boolean"
          },
          "Other-Leg": {
            "type": "string"
          },
          "Park-After-Pickup": {
            "type": "boolean"
          },
          "Target-Call-ID": {
            "type": "string"
          },
          "Unanswered-Only": {
            "type": "string"
          },
          "Unbridged-Only": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.call_pickup"
      },
      "kapi.switch.reload_acls": {
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "switch_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reload_acls"
            ]
          }
        },
        "description": "AMQP API for switch.reload_acls"
      },
      "kapi.authz.balance_check_resp": {
        "required": [
          "Balances"
        ],
        "type": "object",
        "properties": {
          "Balances": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "authz"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "balance_check_resp"
            ]
          }
        },
        "description": "AMQP API for authz.balance_check_resp"
      },
      "storage.plan.database.attachment": {
        "type": "object",
        "properties": {
          "handler": {
            "type": "string"
          },
          "params": {
            "type": "object",
            "properties": {
              "folder_path": {
                "type": "string",
                "description": "folder path"
              }
            }
          },
          "stub": {
            "type": "boolean"
          }
        },
        "description": "schema for attachment ref type storage plan"
      },
      "kapi.dialplan.sound_touch": {
        "required": [
          "Action",
          "Application-Name",
          "Call-ID",
          "Insert-At"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": [
              "start",
              "stop"
            ]
          },
          "Adjust-In-Octaves": {
            "type": "string"
          },
          "Adjust-In-Semitones": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "sound_touch"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Hook-DTMF": {
            "type": "boolean"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Pitch": {
            "type": "string"
          },
          "Rate": {
            "type": "string"
          },
          "Sending-Leg": {
            "type": "boolean"
          },
          "Tempo": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.sound_touch"
      },
      "kapi.presence.sync": {
        "required": [
          "Action"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": [
              "Request",
              "Start",
              "End"
            ]
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "sync"
            ]
          },
          "Event-Package": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.sync"
      },
      "kapi.pusher.push_resp": {
        "required": [
          "Token-ID"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "push_resp"
            ]
          },
          "Token-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for pusher.push_resp"
      },
      "kapi.dialplan.set_terminators": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Terminators"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "set_terminators"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Terminators": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "*",
                "0",
                "#"
              ]
            }
          }
        },
        "description": "AMQP API for dialplan.set_terminators"
      },
      "kapi.call.event": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Data": {
            "type": "string"
          },
          "Application-Event": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string"
          },
          "Application-Response": {
            "type": "string"
          },
          "Billing-Seconds": {
            "type": "string"
          },
          "Bridge-Hangup-Cause": {
            "type": "string"
          },
          "Call-Debug": {
            "type": "string"
          },
          "Call-Direction": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Channel-Answer-State": {
            "type": "string"
          },
          "Channel-Call-State": {
            "type": "string"
          },
          "Channel-Created-Time": {
            "type": "integer"
          },
          "Channel-Debug": {
            "type": "string"
          },
          "Channel-Is-Loopback": {
            "type": "string"
          },
          "Channel-Loopback-Bowout": {
            "type": "string"
          },
          "Channel-Loopback-Bowout-Execute": {
            "type": "string"
          },
          "Channel-Loopback-Leg": {
            "type": "string"
          },
          "Channel-Loopback-Other-Leg-ID": {
            "type": "string"
          },
          "Channel-Moving": {
            "type": "string"
          },
          "Channel-Name": {
            "type": "string"
          },
          "Channel-State": {
            "type": "string"
          },
          "Conference-Config": {
            "type": "string"
          },
          "Conference-Name": {
            "type": "string"
          },
          "Connecting-Leg-A-UUID": {
            "type": "string"
          },
          "Connecting-Leg-B-UUID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "DTMF-Digit": {
            "type": "string"
          },
          "DTMF-Duration": {
            "type": "string"
          },
          "Detected-Tone": {
            "type": "string"
          },
          "Digits-Dialed": {
            "type": "string"
          },
          "Disposition": {
            "type": "string"
          },
          "Duration-Seconds": {
            "type": "string"
          },
          "Endpoint-Disposition": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Fax-Info": {
            "type": "object",
            "properties": {}
          },
          "From": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "From-Uri": {
            "type": "string"
          },
          "Hangup-Cause": {
            "type": "string"
          },
          "Hangup-Code": {
            "type": "string"
          },
          "Interaction-ID": {
            "type": "string"
          },
          "Intercepted-By": {
            "type": "string"
          },
          "Length": {
            "type": "string"
          },
          "Local-SDP": {
            "type": "string"
          },
          "Media-Recordings": {
            "type": "string"
          },
          "Media-Server": {
            "type": "string"
          },
          "Origination-Call-ID": {
            "type": "string"
          },
          "Other-Leg-Call-ID": {
            "type": "string"
          },
          "Other-Leg-Caller-ID-Name": {
            "type": "string"
          },
          "Other-Leg-Caller-ID-Number": {
            "type": "string"
          },
          "Other-Leg-Destination-Number": {
            "type": "string"
          },
          "Other-Leg-Direction": {
            "type": "string"
          },
          "Parking-Slot": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "Raw-Application-Data": {
            "type": "string"
          },
          "Raw-Application-Name": {
            "type": "string"
          },
          "Recording": {
            "type": "string"
          },
          "Remote-SDP": {
            "type": "string"
          },
          "Replaced-By": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Resigning-Peer-UUID": {
            "type": "string"
          },
          "Resigning-UUID": {
            "type": "string"
          },
          "Ringing-Seconds": {
            "type": "string"
          },
          "Root-Call-Interaction-ID": {
            "type": "string"
          },
          "Silence-Terminated": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-Nodename": {
            "type": "string"
          },
          "Switch-URI": {
            "type": "string"
          },
          "Switch-URL": {
            "type": "string"
          },
          "Target-Call-ID": {
            "type": "string"
          },
          "Terminator": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "To-Uri": {
            "type": "string"
          },
          "Transfer-Disposition": {
            "type": "string"
          },
          "Transfer-History": {
            "type": "string"
          },
          "Transfer-Source": {
            "type": "string"
          },
          "Transfer-To": {
            "type": "string"
          },
          "Transfer-Type": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          }
        },
        "description": "AMQP API for call.event"
      },
      "kapi.dialplan.bridge_endpoint": {
        "type": "object",
        "properties": {
          "Bypass-Media": {
            "type": "boolean"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Enable-T38-Gateway": {
            "type": "string",
            "enum": [
              "self",
              "peer"
            ]
          },
          "Endpoint-Options": {
            "type": "object",
            "properties": {}
          },
          "Endpoint-Type": {
            "type": "string",
            "enum": [
              "sip",
              "freetdm",
              "skype"
            ]
          },
          "Ignore-Early-Media": {
            "type": "boolean"
          },
          "Invite-Format": {
            "type": "string",
            "enum": [
              "username",
              "e164",
              "npan",
              "1npan",
              "route",
              "loopback",
              "contact"
            ]
          },
          "SIP-Invite-Parameters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SIP-Transport": {
            "type": "string",
            "enum": [
              "udp",
              "tcp",
              "tls",
              "sctp"
            ]
          }
        },
        "description": "AMQP API for dialplan.bridge_endpoint"
      },
      "kapi.omnipresence.subscribe": {
        "required": [
          "Expires",
          "User"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "subscription"
            ]
          },
          "Event-Package": {
            "type": "string"
          },
          "Expires": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "Queue": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "User": {
            "type": "string"
          }
        },
        "description": "AMQP API for omnipresence.subscribe"
      },
      "kapi.globals.register": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "globals"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "register"
            ]
          },
          "Name": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Timestamp": {
            "type": "integer"
          }
        },
        "description": "AMQP API for globals.register"
      },
      "callflows.temporal_route": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "What action to perform",
            "enum": [
              "menu",
              "enable",
              "disable",
              "reset"
            ]
          },
          "interdigit_timeout": {
            "type": "integer",
            "description": "How long, in milliseconds, to wait for the next keypress"
          },
          "rule_set": {
            "type": "string",
            "description": "ID of the rule set"
          },
          "rules": {
            "type": "array",
            "description": "List of rule IDs to use",
            "items": {
              "type": "string",
              "description": "ID of the temporal rule set to use"
            }
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone to use when processing temporal rules"
          }
        },
        "description": "Validator for the temporal_route callflow data object"
      },
      "callflows.eavesdrop_feature": {
        "type": "object",
        "properties": {
          "approved_device_id": {
            "type": "string",
            "description": "Restricts the calling device to this Device"
          },
          "approved_group_id": {
            "type": "string",
            "description": "Requires the calling device to be part of the Group"
          },
          "approved_user_id": {
            "type": "string",
            "description": "Requires the calling device to be part of the User"
          },
          "group_id": {
            "type": "string",
            "description": "ID of the group/user/device to eavesdrop"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the eavesdrop_feature callflow data object"
      },
      "kapi.conference.lock": {
        "required": [
          "Application-Name",
          "Conference-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "lock"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          }
        },
        "description": "AMQP API for conference.lock"
      },
      "kapi.notifications.outbound_fax": {
        "required": [
          "Account-ID",
          "Callee-ID-Number",
          "Caller-ID-Number",
          "Fax-ID",
          "Fax-JobId"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "outbound_fax"
            ]
          },
          "Fax-ID": {
            "type": "string"
          },
          "Fax-Info": {
            "type": "string"
          },
          "Fax-JobId": {
            "type": "string"
          },
          "Fax-Notifications": {
            "type": "string"
          },
          "Fax-Timestamp": {
            "type": "string"
          },
          "FaxBox-ID": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Owner-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.outbound_fax"
      },
      "kapi.globals.reply_msg": {
        "required": [
          "Reply"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "globals"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reply"
            ]
          },
          "Name": {
            "type": "string"
          },
          "Reply": {
            "type": "string"
          }
        },
        "description": "AMQP API for globals.reply_msg"
      },
      "system_config.tasks.fax_cleanup": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enables the cluster to run the fax cleanup task",
            "default": true
          },
          "page_size": {
            "type": "integer",
            "description": "The number of documents to process in one fetch operation"
          },
          "per_page_pause_ms": {
            "type": "integer",
            "description": "How many milliseconds to pause between chunk fetches"
          },
          "stale_after_s": {
            "type": "integer",
            "description": "The number of seconds old a document is before it is considered to be stale"
          }
        },
        "description": "Schema for tasks.fax_cleanup system_config"
      },
      "system_config.topup": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "topup enable",
            "default": false
          }
        },
        "description": "Schema for topup system_config"
      },
      "system_config.stepswitch.cnam": {
        "type": "object",
        "properties": {
          "cnam_expires": {
            "type": "integer",
            "description": "stepswitch.cnam cnam expires"
          },
          "disable_normalize": {
            "type": "boolean",
            "description": "stepswitch.cnam disable normalize",
            "default": false
          },
          "http_accept_header": {
            "type": "string",
            "description": "stepswitch.cnam http accept header",
            "default": "text/pbx,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          },
          "http_basic_auth_password": {
            "type": "string",
            "description": "stepswitch.cnam http basic auth password",
            "default": ""
          },
          "http_basic_auth_username": {
            "type": "string",
            "description": "stepswitch.cnam http basic auth username",
            "default": ""
          },
          "http_body": {
            "type": "string",
            "description": "stepswitch.cnam http body",
            "default": ""
          },
          "http_connect_timeout_ms": {
            "type": "integer",
            "description": "stepswitch.cnam http connect timeout in milliseconds"
          },
          "http_content_type_header": {
            "type": "string",
            "description": "stepswitch.cnam http content type header",
            "default": "application/json"
          },
          "http_method": {
            "type": "string",
            "description": "stepswitch.cnam http method",
            "default": "get"
          },
          "http_token_auth_token": {
            "type": "string",
            "description": "stepswitch cnam http_token_auth_token",
            "default": ""
          },
          "http_url": {
            "type": "string",
            "description": "stepswitch.cnam http url",
            "default": "https://api.opencnam.com/v2/phone/{{phone_number}}"
          },
          "http_user_agent_header": {
            "type": "string",
            "description": "stepswitch.cnam http user agent header",
            "default": "Kazoo Stepswitch CNAM"
          }
        },
        "description": "Schema for stepswitch.cnam system_config"
      },
      "kapi.edr_amqp.event": {
        "required": [
          "Body",
          "Gregorian-Time",
          "ID",
          "Node",
          "Severity",
          "Timestamp",
          "Verbosity"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Account-Tree": {
            "type": "string"
          },
          "Body": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "edr"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "event"
            ]
          },
          "Gregorian-Time": {
            "type": "integer"
          },
          "ID": {
            "type": "string"
          },
          "Node": {
            "type": "string"
          },
          "Severity": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Verbosity": {
            "type": "string"
          }
        },
        "description": "AMQP API for edr_amqp.event"
      },
      "kapi.conference.participants_resp": {
        "required": [
          "Participants"
        ],
        "type": "object",
        "properties": {
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "participants_resp"
            ]
          },
          "Participants": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.participants_resp"
      },
      "callflows.intercept": {
        "type": "object",
        "properties": {
          "approved_device_id": {
            "type": "string",
            "description": "Restrict calling device to Device"
          },
          "approved_group_id": {
            "type": "string",
            "description": "Restrict calling device to Group"
          },
          "approved_user_id": {
            "type": "string",
            "description": "Restrict calling device to User"
          },
          "device_id": {
            "type": "string",
            "description": "Device to intercept"
          },
          "group_id": {
            "type": "string",
            "description": "Group in which to find a call to intercept"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "user_id": {
            "type": "string",
            "description": "User in which to find a call to intercept"
          }
        },
        "description": "Validator for the intercept callflow data object"
      },
      "kapi.call.query_auth_id_resp": {
        "type": "object",
        "properties": {
          "Channels": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_auth_id_resp"
            ]
          }
        },
        "description": "AMQP API for call.query_auth_id_resp"
      },
      "system_config.number_manager.telnyx": {
        "type": "object",
        "properties": {
          "debug": {
            "type": "boolean",
            "description": "number_manager.telnyx debug",
            "default": false
          },
          "enable_provisioning": {
            "type": "boolean",
            "description": "number_manager.telnyx enable provisioning",
            "default": true
          },
          "monthly_recurring_cost": {
            "type": "number",
            "description": "number_manager.telnyx monthly recurring cost"
          },
          "sandbox_provisioning": {
            "type": "boolean",
            "description": "number_manager.telnyx sandbox provisioning",
            "default": false
          },
          "should_filter_rates": {
            "type": "boolean",
            "description": "should search results be filtered based on configured allowed cost?",
            "default": false
          },
          "should_keep_best_effort": {
            "type": "boolean",
            "description": "should search results also contain 'best effort' results?",
            "default": false
          },
          "token": {
            "type": "string",
            "description": "number_manager.telnyx token"
          },
          "upfront_cost": {
            "type": "number",
            "description": "allowed upfront cost when acquiring number"
          },
          "user": {
            "type": "string",
            "description": "number_manager.telnyx user"
          }
        },
        "description": "Schema for number_manager.telnyx system_config"
      },
      "conferences.profile": {
        "type": "object",
        "properties": {
          "alone-sound": {
            "type": "string",
            "description": "Audio that plays while you are alone in the conference"
          },
          "announce-count": {
            "type": "integer",
            "description": "Play member count to conference when above this threshold"
          },
          "caller-controls": {
            "type": "string",
            "description": "Name of the caller control group"
          },
          "comfort-noise": {
            "maximum": 10000,
            "minimum": 0,
            "type": "integer",
            "description": "The volume level of background white noise"
          },
          "energy-level": {
            "maximum": 1800,
            "minimum": 0,
            "type": "integer",
            "description": "Energy level required for audio to be sent to other users"
          },
          "enter-sound": {
            "type": "string",
            "description": "Audio to play when entering a conference"
          },
          "exit-sound": {
            "type": "string",
            "description": "Audio to play when exiting a conference"
          },
          "interval": {
            "maximum": 120,
            "minimum": 10,
            "type": "integer",
            "description": "Milliseconds per frame"
          },
          "locked-sound": {
            "type": "string",
            "description": "Audio to play when the conference is locked"
          },
          "max-members": {
            "minimum": 2,
            "type": "integer",
            "description": "Set the maximum number of members in the conference"
          },
          "max-members-sound": {
            "type": "string",
            "description": "If max-members has been reached, audio to play to caller instead of joining the conference"
          },
          "moderator-controls": {
            "type": "string",
            "description": "Name of the moderator control group to use"
          },
          "moh-sound": {
            "type": "string",
            "description": "Audio to play, on a loop, while participant count is 1"
          },
          "muted-sound": {
            "type": "string",
            "description": "Audio to play when muted"
          },
          "rate": {
            "type": "integer",
            "description": "Audio sample rate"
          },
          "unmuted-sound": {
            "type": "string",
            "description": "Audio to play when unmuted"
          }
        },
        "description": "Schema for conference profiles"
      },
      "kapi.dialplan.hold": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "hold"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Hold-Media": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.hold"
      },
      "metaflows.hangup": {
        "type": "object",
        "description": "Hangup the call leg immediately"
      },
      "system_config.number_manager": {
        "type": "object",
        "properties": {
          "allow_port_transition_from_submitted_to_scheduled": {
            "type": "boolean",
            "description": "should number ports be allowed to transition from submitted to scheduled?",
            "default": false
          },
          "available_module_name": {
            "type": "string",
            "description": "default carrier module name to use when creating a number",
            "default": "knm_local"
          },
          "carrier_modules": {
            "type": "array",
            "description": "carrier modules to perform number search & ordering from",
            "items": {
              "type": "string"
            }
          },
          "classifiers": {
            "type": "object",
            "properties": {},
            "description": "regular expressions & billing names for numbers"
          },
          "converters": {
            "type": "array",
            "description": "suffix for the KNM module to use for E164, NPAN and 1NPAN normalization of numbers",
            "items": {
              "type": "string"
            }
          },
          "default_force_outbound": {
            "type": "boolean",
            "description": "should we 'force_outbound' when this feature is not set on the number?",
            "default": false
          },
          "e164_converters": {
            "type": "object",
            "properties": {},
            "description": "regular expressions to convert numbers to E164 format"
          },
          "features": {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "description": "number features a number is allowed to edit",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "fetch_account_from_ports": {
            "type": "boolean",
            "description": "should we also search ports when trying to `/identify` a number?",
            "default": true
          },
          "force_local_outbound": {
            "type": "boolean",
            "description": "default value for 'force_outbound' for local numbers only",
            "default": true
          },
          "force_port_in_outbound": {
            "type": "boolean",
            "description": "default value for 'force_outbound' for port_in numbers only",
            "default": true
          },
          "force_port_out_outbound": {
            "type": "boolean",
            "description": "default value for 'force_outbound' for port_out numbers only",
            "default": true
          },
          "local_feature_override": {
            "type": "boolean",
            "description": "overrides the filtering of external features for local numbers",
            "default": false
          },
          "maximum_search_quantity": {
            "minimum": 1,
            "type": "integer",
            "description": "maximum number of returned DIDs in a search query"
          },
          "number_search_timeout_ms": {
            "minimum": 1,
            "type": "integer",
            "description": "number manager number search timeout in milliseconds"
          },
          "parallel_jobs_count": {
            "minimum": 1,
            "type": "integer",
            "description": "number of concurrent workers that can process a migration at the same time (1=non parallel behavior, MUST be >0)"
          },
          "port_in_module_name": {
            "type": "string",
            "description": "completed port requests will create numbers with this carrier module name",
            "default": "knm_local"
          },
          "providers": {
            "type": "array",
            "description": "legacy value for number_manager.features.allow",
            "items": {
              "type": "string"
            }
          },
          "reconcile_regex": {
            "type": "string",
            "description": "if a number matches this regular expression then it is reconcilable",
            "default": "^(\\+?1)?\\d{10}$|^\\+[2-9]\\d{7,}$|^011\\d*$|^00\\d*$"
          },
          "released_state": {
            "type": "string",
            "description": "state to put numbers in when they are being released and their reserve history is empty",
            "default": "available"
          },
          "should_age": {
            "type": "boolean",
            "description": "Should numbers go through an aging period before being available?",
            "default": false
          },
          "should_permanently_delete": {
            "type": "boolean",
            "description": "when disconnecting numbers, if this flag is true they will be deleted otherwise they will go back to a pool. Local numbers are not affected by this flag",
            "default": false
          },
          "time_between_accounts_ms": {
            "minimum": 1,
            "type": "integer",
            "description": "time to pause in between the processing of accounts in milliseconds"
          },
          "time_between_db_ms": {
            "minimum": 1,
            "type": "integer",
            "description": "number_manager time_between_db_ms"
          },
          "time_between_numbers_ms": {
            "minimum": 1,
            "type": "integer",
            "description": "time to pause in between the processing of numbers in milliseconds"
          },
          "unauthorized_numbers_lookup": {
            "type": "boolean",
            "description": "should number search be allowed for unauthenticated API requests?",
            "default": false
          }
        },
        "description": "Schema for number_manager system_config"
      },
      "kapi.notifications.low_balance": {
        "required": [
          "Account-ID",
          "Current-Balance"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Current-Balance": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "low_balance"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.low_balance"
      },
      "kapi.presence.update": {
        "required": [
          "Presence-ID",
          "State"
        ],
        "type": "object",
        "properties": {
          "Call-Direction": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "update"
            ]
          },
          "Event-Package": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "State": {
            "type": "string",
            "enum": [
              "trying",
              "online",
              "offline",
              "early",
              "confirmed",
              "terminated"
            ]
          },
          "Switch-URI": {
            "type": "string"
          },
          "Target-Call-ID": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.update"
      },
      "mailbox_message": {
        "required": [
          "media_id"
        ],
        "type": "object",
        "properties": {
          "call_id": {
            "type": "string",
            "description": "The SIP call-id"
          },
          "caller_id_name": {
            "maxLength": 35,
            "type": "string",
            "description": "The reported caller id name"
          },
          "caller_id_number": {
            "maxLength": 35,
            "type": "string",
            "description": "The reported caller id number"
          },
          "folder": {
            "type": "string",
            "description": "The folder the message belongs to",
            "enum": [
              "deleted",
              "saved",
              "new"
            ]
          },
          "from": {
            "type": "string",
            "description": "The SIP from header"
          },
          "length": {
            "type": "integer"
          },
          "media_id": {
            "maxLength": 39,
            "minLength": 39,
            "type": "string",
            "description": "The ID of the message media object"
          },
          "timestamp": {
            "type": "integer",
            "description": "The UTC timestamp, in Gregorian seconds, that the message was left on"
          },
          "to": {
            "type": "string",
            "description": "The SIP to header"
          }
        },
        "description": "Schema for mailbox message"
      },
      "system_config.kazoo.pdf": {
        "type": "object",
        "properties": {
          "html2pdf": {
            "type": "string",
            "description": "kazoo.pdf html2pdf",
            "default": "/usr/bin/htmldoc --quiet --webpage -f $pdf$ $html$"
          }
        },
        "description": "Schema for kazoo.pdf system_config"
      },
      "kapi.conference.mute_participant": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Participant-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "mute_participant"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.mute_participant"
      },
      "token_restrictions": {
        "type": "object",
        "properties": {
          "restrictions": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "Schema for token restrictions"
      },
      "kapi.maintenance.req": {
        "required": [
          "Action"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": [
              "refresh_database",
              "refresh_views",
              "clean_services"
            ]
          },
          "Classification": {
            "type": "string"
          },
          "Database": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "maintenance"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "req"
            ]
          }
        },
        "description": "AMQP API for maintenance.req"
      },
      "kapi.route.resp": {
        "required": [
          "Method"
        ],
        "type": "object",
        "properties": {
          "Application-Data": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "dialplan"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "route_resp"
            ]
          },
          "From-Realm": {
            "type": "string"
          },
          "From-URI": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "Method": {
            "type": "string",
            "enum": [
              "bridge",
              "park",
              "error",
              "sms",
              "plan",
              "application"
            ]
          },
          "Plan-Data": {
            "type": "string"
          },
          "Pre-Park": {
            "type": "string",
            "enum": [
              "none",
              "ring_ready",
              "answer"
            ]
          },
          "Ringback-Media": {
            "type": "string"
          },
          "Route-Error-Code": {
            "type": "string"
          },
          "Route-Error-Message": {
            "type": "string"
          },
          "Routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/kapi.route.resp_route"
            }
          },
          "Transfer-Media": {
            "type": "string"
          }
        },
        "description": "AMQP API for route.resp"
      },
      "kapi.notifications.ported": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorized-By": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "ported"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Local-Number": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Number-State": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "Port-Request-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reason": {
            "type": "object",
            "properties": {}
          },
          "Reply-To": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.ported"
      },
      "kapi.acdc_stats.status_connected": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "connected"
            ]
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_connected"
      },
      "system_config.acdc": {
        "type": "object",
        "properties": {
          "agent_info_fields": {
            "type": "array",
            "description": "acdc agent info fields",
            "items": {
              "type": "string"
            }
          },
          "archive_period_ms": {
            "type": "integer",
            "description": "acdc archive period in milliseconds"
          },
          "archive_window_s": {
            "type": "integer",
            "description": "acdc archive window in seconds"
          },
          "cleanup_period_ms": {
            "type": "integer",
            "description": "acdc cleanup period in milliseconds"
          },
          "cleanup_window_s": {
            "type": "integer",
            "description": "acdc cleanup window in seconds"
          },
          "default_agent_pause_timeout": {
            "type": "integer",
            "description": "acdc default agent pause timeout"
          },
          "max_connect_failures": {
            "type": "integer",
            "description": "acdc maximum connect failures"
          },
          "max_result_set": {
            "type": "integer",
            "description": "acdc maximum result set"
          },
          "queue_collect_resp_timeout": {
            "type": "integer",
            "description": "acdc queue collect resp timeout"
          },
          "queue_worker_count": {
            "type": "integer",
            "description": "acdc queue worker count"
          },
          "stats_query_limits_enabled": {
            "type": "boolean",
            "description": "When enabled, prevent stats queries with limits greater than max_result_set",
            "default": true
          }
        },
        "description": "Schema for acdc system_config"
      },
      "callflows.set_variables": {
        "required": [
          "custom_application_vars"
        ],
        "type": "object",
        "properties": {
          "custom_application_vars": {
            "type": "object",
            "properties": {},
            "description": "Key-value pairs to set as custom_application_vars on the channel"
          },
          "export": {
            "type": "boolean",
            "description": "When true the provided custom_application_vars are set on the channel and any channel bridged to it later"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the set_variables callflow data object"
      },
      "account_config.number_manager": {
        "type": "object",
        "properties": {
          "unauthorized_numbers_lookup": {
            "type": "boolean",
            "description": "number_manager unauthorized numbers lookup",
            "default": false
          }
        },
        "description": "Schema for number_manager account_config"
      },
      "storage.plan": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/storage.plan.database"
          },
          "modb": {
            "$ref": "#/components/schemas/storage.plan.database"
          },
          "system": {
            "$ref": "#/components/schemas/storage.plan.database"
          }
        },
        "description": "Describes how to store documents depending on the database or document type"
      },
      "system_config.crossbar": {
        "type": "object",
        "properties": {
          "allow_tracing": {
            "type": "boolean",
            "description": "crossbar allow tracing",
            "default": false
          },
          "api_auth_tokens": {
            "type": "integer",
            "description": "crossbar api auth tokens"
          },
          "autoload_modules": {
            "type": "array",
            "description": "crossbar autoload modules",
            "items": {
              "type": "string",
              "description": "name of the crossbar module to load"
            }
          },
          "check_reverse_proxies": {
            "type": "boolean",
            "description": "If request is proxied, should Crossbar check allowed reverse proxies",
            "default": true
          },
          "compress_response_body": {
            "type": "boolean",
            "description": "crossbar compress response body",
            "default": true
          },
          "default_allow_anonymous_quickcalls": {
            "type": "boolean",
            "description": "crossbar default allow anonymous quickcalls",
            "default": true
          },
          "default_language": {
            "type": "string",
            "description": "crossbar default language",
            "default": "en-US"
          },
          "ensure_valid_schema": {
            "type": "boolean",
            "description": "crossbar ensure valid schema",
            "default": true
          },
          "idle_timeout_ms": {
            "type": "integer",
            "description": "timeout (in milliseconds) when no data is being sent"
          },
          "ip": {
            "type": "string",
            "description": "crossbar ip"
          },
          "load_view_chunk_size": {
            "minimum": 1,
            "type": "integer",
            "description": "crossbar load_view_chunk_size"
          },
          "magic_path_patterns": {
            "type": "array",
            "description": "crossbar magic path patterns",
            "items": {
              "type": "string"
            }
          },
          "max_upload_size": {
            "type": "integer",
            "description": "crossbar maximum upload size"
          },
          "maximum_chunk_size": {
            "minimum": 1,
            "type": "integer",
            "description": "crossbar maximum_chunk_size"
          },
          "maximum_range": {
            "minimum": 1,
            "type": "integer",
            "description": "crossbar maximum range"
          },
          "pagination_page_size": {
            "minimum": 1,
            "type": "integer",
            "description": "crossbar pagination page size"
          },
          "port": {
            "type": "integer",
            "description": "crossbar port"
          },
          "pretty_metrics": {
            "type": "boolean",
            "description": "crossbar pretty metrics",
            "default": true
          },
          "refresh_app_keys": {
            "type": "array",
            "description": "crossbar refresh_app_keys",
            "items": {
              "type": "string"
            }
          },
          "request_timeout_ms": {
            "type": "integer",
            "description": "crossbar request timeout in milliseconds"
          },
          "reset_id_size": {
            "type": "integer",
            "description": "crossbar reset id size"
          },
          "reverse_proxies": {
            "type": "array",
            "description": "crossbar reverse proxies",
            "items": {
              "type": "string"
            }
          },
          "schema_strict_validation": {
            "type": "boolean",
            "description": "crossbar schema strict validation",
            "default": false
          },
          "ssl_ca_cert": {
            "type": "string",
            "description": "crossbar ssl ca cert"
          },
          "ssl_cert": {
            "type": "string",
            "description": "crossbar ssl cert"
          },
          "ssl_key": {
            "type": "string",
            "description": "crossbar ssl key"
          },
          "ssl_password": {
            "type": "string",
            "description": "crossbar ssl password",
            "default": ""
          },
          "ssl_port": {
            "type": "integer",
            "description": "crossbar ssl port"
          },
          "ssl_workers": {
            "type": "integer",
            "description": "crossbar ssl workers"
          },
          "stability_level": {
            "type": "string",
            "description": "crossbar stability_level",
            "enum": [
              "alpha",
              "beta",
              "stable"
            ]
          },
          "token_costs": {
            "type": "integer",
            "description": "crossbar token costs"
          },
          "trace_path": {
            "type": "string",
            "description": "crossbar trace path",
            "default": "/tmp"
          },
          "use_plaintext": {
            "type": "boolean",
            "description": "crossbar use plaintext",
            "default": true
          },
          "use_ssl": {
            "type": "boolean",
            "description": "crossbar use ssl",
            "default": false
          },
          "user_auth_tokens": {
            "type": "integer",
            "description": "crossbar user auth tokens"
          },
          "workers": {
            "type": "integer",
            "description": "crossbar workers"
          }
        },
        "description": "Schema for crossbar system_config"
      },
      "kapi.acdc_agent.stats_resp": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Current-Calls": {
            "type": "string"
          },
          "Current-Stats": {
            "type": "string"
          },
          "Current-Statuses": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "stats_resp"
            ]
          },
          "Stats": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "AMQP API for acdc_agent.stats_resp"
      },
      "kapi.resource.eavesdrop_resp": {
        "required": [
          "Status"
        ],
        "type": "object",
        "properties": {
          "Eavesdropper-Call-ID": {
            "type": "string"
          },
          "Error-Msg": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "resource"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "eavesdrop_resp"
            ]
          },
          "Status": {
            "type": "string",
            "enum": [
              "started",
              "error"
            ]
          }
        },
        "description": "AMQP API for resource.eavesdrop_resp"
      },
      "callflows.call_forward": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "What action to perform on the caller's call forwarding",
            "enum": [
              "activate",
              "deactivate",
              "update",
              "toggle",
              "menu"
            ]
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the call_forward callflow data object"
      },
      "whitelabel": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string",
            "description": "The company name to display to users"
          },
          "domain": {
            "type": "string",
            "description": "This is the whitelabeled domain that users will be entering to reach the UI",
            "format": "uri"
          },
          "fake_api_url": {
            "type": "string",
            "description": "This is a whitelabeled API URL, primarily used by the developer application",
            "format": "uri"
          },
          "hide_credits": {
            "type": "boolean",
            "description": "When checked this hides the credits",
            "default": false
          },
          "hide_powered": {
            "type": "boolean",
            "description": "When checked this hides the powered by 2600Hz on the bottom right",
            "default": false
          },
          "hide_registration": {
            "type": "boolean",
            "description": "When checked this hides the ability to register for a new account",
            "default": false
          },
          "inbound_trunks_price": {
            "type": "string",
            "description": "The price to show for inbound trunks, this is currently only for display purposes"
          },
          "nav": {
            "type": "object",
            "properties": {
              "help": {
                "type": "string",
                "description": "The URL to use when the help link is clicked",
                "format": "uri"
              },
              "learn_more": {
                "type": "string",
                "description": "The URL to use when the 'Learn More!' link is clicked",
                "format": "uri"
              }
            },
            "description": "Properties related to navigation in the UI"
          },
          "outbound_trunks_price": {
            "type": "string",
            "description": "The price to show for outbound trunks, this is currently only for display purposes"
          },
          "port": {
            "type": "object",
            "properties": {
              "features": {
                "type": "string",
                "description": "The URL to use when the features link is clicked",
                "format": "uri"
              },
              "support_email": {
                "type": "string",
                "description": "The support email address to display to the user",
                "format": "email"
              },
              "terms": {
                "type": "string",
                "description": "The URL to use when the terms and conditions link is clicked",
                "format": "uri"
              },
              "authority": {
                "type": "object",
                "description": "The account ID(s) to be used for administrating port requests"
              },
              "resporg": {
                "type": "string",
                "description": "The URL to use when the resporg link is clicked",
                "format": "uri"
              },
              "loa": {
                "type": "string",
                "description": "The URL to use when the LOA link is clicked",
                "format": "uri"
              }
            },
            "description": "Parameters related to white-labeling port requests"
          },
          "twoway_trunks_price": {
            "type": "string",
            "description": "The price to show for twoway trunks, this is currently only for display purposes"
          }
        },
        "description": "Whitelabel settings"
      },
      "system_config.number_manager.locality": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "number_manager.locality url"
          }
        },
        "description": "Schema for number_manager.locality system_config"
      },
      "system_config.notify.voicemail_full": {
        "type": "object",
        "properties": {
          "default_enabled": {
            "type": "boolean",
            "description": "notify.voicemail_full default enabled",
            "default": false
          },
          "default_to": {
            "type": "object",
            "description": "notify.voicemail_full default to"
          }
        },
        "description": "Schema for notify.voicemail_full system_config"
      },
      "system_config.number_manager.other": {
        "type": "object",
        "properties": {
          "default_country": {
            "type": "string",
            "description": "Country to search and acquire blocks of numbers from",
            "default": "US"
          },
          "endpoints": {
            "type": "object",
            "description": "number_manager.other endpoints"
          },
          "phonebook_url": {
            "type": "string",
            "description": "number_manager.other phonebook url"
          }
        },
        "description": "Schema for number_manager.other system_config"
      },
      "domain_hosts": {
        "type": "object",
        "description": "Domain host settings for white-labelling"
      },
      "system_config.notify.password_recovery": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.password_recovery default to"
          },
          "html_content_transfer_encoding": {
            "type": "string",
            "description": "notify.password_recovery html content transfer encoding",
            "default": "7BIT"
          },
          "text_content_transfer_encoding": {
            "type": "string",
            "description": "notify.password_recovery text content transfer encoding",
            "default": "7BIT"
          }
        },
        "description": "Schema for notify.password_recovery system_config"
      },
      "kapi.hangups.query_req": {
        "required": [
          "Hangup-Cause"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "hangups"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_req"
            ]
          },
          "Hangup-Cause": {
            "type": "string"
          },
          "Raw-Data": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for hangups.query_req"
      },
      "callflows.send_dtmf": {
        "required": [
          "digits"
        ],
        "type": "object",
        "properties": {
          "digits": {
            "type": "string",
            "description": "String of DTMF tones to send"
          },
          "duration_ms": {
            "type": "object",
            "description": "How long, in milliseconds, to send each DTMF"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the Send DTMF callflow action"
      },
      "kapi.dialplan.receive_fax": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "receive_fax"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Enable-T38-Fax": {
            "type": "string"
          },
          "Enable-T38-Fax-Request": {
            "type": "string"
          },
          "Enable-T38-Gateway": {
            "type": "string"
          },
          "Enable-T38-Passthrough": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Fax-Local-Filename": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.receive_fax"
      },
      "account_config.call_command": {
        "type": "object",
        "properties": {
          "unknown_cid_name": {
            "type": "string",
            "description": "the value to use when a caller ID name is required but unknown",
            "default": "unknown"
          }
        },
        "description": "Schema for call_command account_config"
      },
      "system_config.milliwatt": {
        "type": "object",
        "properties": {
          "echo": {
            "type": "object",
            "properties": {},
            "description": "milliwatt echo"
          },
          "route_win_timeout": {
            "type": "integer",
            "description": "milliwatt route win timeout"
          },
          "tone": {
            "type": "object",
            "properties": {},
            "description": "milliwatt tone"
          }
        },
        "description": "Schema for milliwatt system_config"
      },
      "kapi.conf_participant.dialplan_req": {
        "required": [
          "Dialplan-Command"
        ],
        "type": "object",
        "properties": {
          "Conference-ID": {
            "type": "string"
          },
          "Dialplan-Command": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "dialplan_req"
            ]
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conf_participant.dialplan_req"
      },
      "system_config.whitelabel": {
        "type": "object",
        "properties": {
          "domains": {
            "type": "object",
            "properties": {},
            "description": "whitelabel domains"
          }
        },
        "description": "Schema for whitelabel system_config"
      },
      "kapi.conference.search_req": {
        "required": [
          "Conference-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "search_req"
            ]
          }
        },
        "description": "AMQP API for conference.search_req"
      },
      "kapi.presence.flush": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "flush"
            ]
          },
          "Event-Package": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "User": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.flush"
      },
      "kapi.registration.sync": {
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "directory"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reg_sync"
            ]
          }
        },
        "description": "AMQP API for registration.sync"
      },
      "user_auth_recovery_reset": {
        "required": [
          "reset_id"
        ],
        "type": "object",
        "properties": {
          "reset_id": {
            "pattern": "^[a-fA-F0-9]{40,250}$",
            "type": "string",
            "description": "The UUID that is part of the password-reset link"
          }
        },
        "description": "Request a password reset from a trusted source"
      },
      "callflows.acdc_queue": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "What action to perform on the agent for this queue",
            "enum": [
              "login",
              "logout"
            ]
          },
          "id": {
            "type": "string",
            "description": "Queue ID"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the acdc_queue callflow data object"
      },
      "callflows.notification": {
        "required": [
          "recipients"
        ],
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Text message that need to include into notification"
          },
          "notification_media": {
            "type": "array",
            "description": "What is media need to use for notification",
            "items": {
              "type": "string",
              "enum": [
                "email",
                "sms"
              ]
            }
          },
          "recipients": {
            "type": "array",
            "description": "One or more specific email addresses, Kazoo user ids or a combination of both",
            "items": {
              "required": [
                "id",
                "type"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "object",
                  "description": "The email address/user ID or the list of email addresses/user IDs based on specified type"
                },
                "type": {
                  "type": "string",
                  "description": "Controls if the ID of this object is a Kazoo user ID or an email address",
                  "enum": [
                    "user",
                    "email"
                  ]
                }
              }
            }
          },
          "send_at": {
            "type": "string",
            "description": "Defines when send customer defined notification. For `callflow_exec` value notifications is send during callflow execution. For `channel_destroy` value notification is send after channel(bridge) is destroyed",
            "default": "channel_destroy",
            "enum": [
              "callflow_exec",
              "channel_destroy"
            ]
          },
          "template_id": {
            "type": "string",
            "description": "Template ID of account defined notification"
          }
        },
        "description": "Validator for the 'notification' callflow's data object"
      },
      "kapi.acdc_queue.queue_member_remove": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "queue"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "member_remove"
            ]
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.queue_member_remove"
      },
      "system_config.ips": {
        "type": "object",
        "properties": {
          "zone_name_map": {
            "type": "object",
            "properties": {},
            "description": "ips zone_name_map"
          }
        },
        "description": "Schema for ips system_config"
      },
      "kapi.globals.query": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "globals"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query"
            ]
          },
          "Name": {
            "type": "string"
          }
        },
        "description": "AMQP API for globals.query"
      },
      "system_config.notify.port_cancel": {
        "type": "object",
        "properties": {
          "default_from": {
            "type": "string",
            "description": "notify.port_cancel default from"
          },
          "default_to": {
            "type": "object",
            "description": "notify.port_cancel default to"
          }
        },
        "description": "Schema for notify.port_cancel system_config"
      },
      "kapi.websockets.module_req": {
        "required": [
          "Action",
          "Module"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": [
              "start",
              "stop"
            ]
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "websockets"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "module_req"
            ]
          },
          "Module": {
            "type": "string"
          },
          "Persist": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for websockets.module_req"
      },
      "system_config.cdr": {
        "type": "object",
        "properties": {
          "ignore_apps": {
            "type": "array",
            "description": "cdr ignore apps",
            "items": {
              "type": "string"
            }
          },
          "ignore_loopback_bowout": {
            "type": "boolean",
            "description": "cdr ignore loopback bowout",
            "default": true
          },
          "refresh_view_enabled": {
            "type": "boolean",
            "description": "enable or disable the view refresh feature",
            "default": false
          },
          "refresh_view_threshold": {
            "type": "integer",
            "description": "number of cdrs to trigger view refresh"
          },
          "refresh_view_timeout": {
            "type": "integer",
            "description": "time in seconds to to trigger cdrs view refresh"
          },
          "store_anonymous": {
            "type": "boolean",
            "description": "cdr store anonymous",
            "default": false
          },
          "v3_migrate_num_months": {
            "type": "integer",
            "description": "cdr v3 migrate num months"
          }
        },
        "description": "Schema for cdr system_config"
      },
      "callflows.action": {
        "required": [
          "data",
          "module"
        ],
        "type": "object",
        "properties": {
          "children": {
            "type": "object",
            "properties": {},
            "description": "Children callflows"
          },
          "data": {
            "type": "object",
            "properties": {},
            "description": "The data/arguments of the callflow module"
          },
          "module": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The name of the callflow module to execute at this node"
          }
        },
        "description": "Call flows describe steps to take in order to process a phone call. They are trees of information related to a phone call such as \"answer, play file, record file\" etc. that are logically grouped together and ordered."
      },
      "callflows.nomorobo": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "password": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "Password to the NoMoRobo service"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "username": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "Username to the NoMoRobo service"
          }
        },
        "description": "Validator for the NoMoRobo callflow action"
      },
      "kapi.money.balance_resp": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "transaction"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "balance_resp"
            ]
          },
          "Inbound": {
            "type": "string"
          },
          "Max-Inbound": {
            "type": "string"
          },
          "Max-Two-Way": {
            "type": "string"
          },
          "Node": {
            "type": "string"
          },
          "Prepay": {
            "type": "string"
          },
          "Trunks": {
            "type": "string"
          },
          "Two-Way": {
            "type": "string"
          }
        },
        "description": "AMQP API for money.balance_resp"
      },
      "callflows.set_variable": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "description": "Which channel to set the variable on",
            "default": "a",
            "enum": [
              "a",
              "both"
            ]
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "value": {
            "type": "string",
            "description": "The value to set 'variable'"
          },
          "variable": {
            "type": "string",
            "description": "The variable name to set on the leg(s)"
          }
        },
        "description": "Validator for the set_variable callflow data object"
      },
      "metaflows.pivot": {
        "required": [
          "voice_url"
        ],
        "type": "object",
        "properties": {
          "cdr_url": {
            "pattern": "^https?://",
            "type": "string",
            "description": "Optional URL to send the CDR to at the end of the call"
          },
          "debug": {
            "type": "boolean",
            "description": "Store debug logs related to processing this Pivot call",
            "default": false
          },
          "method": {
            "type": "string",
            "description": "What HTTP verb to send the request(s) with",
            "default": "get",
            "enum": [
              "get",
              "post",
              "GET",
              "POST"
            ]
          },
          "req_format": {
            "type": "string",
            "description": "What format of Pivot will the your server respond with",
            "default": "kazoo",
            "enum": [
              "kazoo",
              "twiml"
            ]
          },
          "voice_url": {
            "pattern": "^https?://",
            "type": "string",
            "description": "What URL to request the initial Pivot callflow"
          }
        },
        "description": "Validator for the Pivot metaflow element"
      },
      "system_config.number_manager.bandwidth2": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "account ID for the asynchronous Bandwidth API",
            "default": ""
          },
          "api_password": {
            "type": "string",
            "description": "number_manager.bandwidth2 api password",
            "default": ""
          },
          "api_username": {
            "type": "string",
            "description": "number_manager.bandwidth2 api username",
            "default": ""
          },
          "debug": {
            "type": "boolean",
            "description": "should the debug mode be activated for the asynchronous Bandwidth API?",
            "default": false
          },
          "enable_provisioning": {
            "type": "boolean",
            "description": "number_manager.bandwidth2 enable provisioning",
            "default": true
          },
          "max_search_quantity": {
            "minimum": 1,
            "type": "integer",
            "description": "number_manager.bandwidth2 max search quantity"
          },
          "order_name_prefix": {
            "type": "string",
            "description": "number_manager.bandwidth2 order name prefix",
            "default": "Kazoo"
          },
          "sandbox_provisioning": {
            "type": "boolean",
            "description": "number_manager.bandwidth2 sandbox provisioning",
            "default": true
          },
          "sip_peer": {
            "type": "string",
            "description": "number_manager.bandwidth2 sip peer",
            "default": ""
          },
          "site_id": {
            "type": "string",
            "description": "number_manager.bandwidth2 site id",
            "default": ""
          }
        },
        "description": "Schema for number_manager.bandwidth2 system_config"
      },
      "kapi.route.win": {
        "required": [
          "Call-ID",
          "Control-Queue"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "dialplan"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "route_win"
            ]
          },
          "Switch-Hostname": {
            "type": "string"
          }
        },
        "description": "AMQP API for route.win"
      },
      "system_config.cccp": {
        "type": "object",
        "properties": {
          "allowed_callee_regex": {
            "type": "string",
            "description": "cccp allowed callee regex",
            "default": "^\\+?\\d{7,}$"
          },
          "callback_delay": {
            "type": "integer",
            "description": "cccp callback delay"
          },
          "cccp_cb_number": {
            "type": "string",
            "description": "cccp cccp cb number"
          },
          "cccp_cc_number": {
            "type": "string",
            "description": "cccp cccp cc number"
          },
          "last_number_redial_code": {
            "type": "string",
            "description": "cccp last number redial code",
            "default": "*0"
          },
          "prompt_delay": {
            "type": "integer",
            "description": "cccp prompt delay"
          }
        },
        "description": "Schema for cccp system_config"
      },
      "storage.plan.database": {
        "type": "object",
        "properties": {
          "attachments": {
            "$ref": "#/components/schemas/storage.plan.database.attachment"
          },
          "connection": {
            "type": "string"
          },
          "database": {
            "type": "object",
            "properties": {
              "create_options": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "types": {
            "type": "object",
            "properties": {
              "call_recording": {
                "$ref": "#/components/schemas/storage.plan.database.document"
              },
              "mailbox_message": {
                "$ref": "#/components/schemas/storage.plan.database.document"
              },
              "media": {
                "$ref": "#/components/schemas/storage.plan.database.document"
              },
              "fax": {
                "$ref": "#/components/schemas/storage.plan.database.document"
              }
            }
          }
        },
        "description": "schema for database storage plan"
      },
      "callflows.edr": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the edr callflow data object"
      },
      "kapi.dialplan.bridge": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Endpoints"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "bridge"
            ]
          },
          "Asserted-Identity-Name": {
            "type": "string"
          },
          "Asserted-Identity-Number": {
            "type": "string"
          },
          "Asserted-Identity-Realm": {
            "type": "string"
          },
          "B-Leg-Events": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CALL_SECURE",
                "CALL_UPDATE",
                "CHANNEL_ANSWER",
                "CHANNEL_CREATE",
                "CHANNEL_DESTROY",
                "CHANNEL_EXECUTE",
                "CHANNEL_EXECUTE_COMPLETE",
                "CHANNEL_EXECUTE_ERROR",
                "CHANNEL_FAX_STATUS",
                "CHANNEL_INTERCEPTED",
                "CHANNEL_PROGRESS_MEDIA",
                "CHANNEL_REPLACED",
                "CHANNEL_TRANSFEREE",
                "CHANNEL_TRANSFEROR",
                "CHANNEL_BRIDGE",
                "CHANNEL_UNBRIDGE",
                "CHANNEL_HOLD",
                "CHANNEL_UNHOLD",
                "DETECTED_TONE",
                "DTMF",
                "LEG_CREATED",
                "LEG_DESTROYED",
                "RECORD_START",
                "RECORD_STOP",
                "dialplan"
              ]
            }
          },
          "Bridge-Actions": {
            "type": "object",
            "properties": {}
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Confirm-Cancel-Timeout": {
            "type": "integer"
          },
          "Confirm-File": {
            "type": "string"
          },
          "Confirm-Key": {
            "type": "string"
          },
          "Continue-After": {
            "type": "boolean"
          },
          "Continue-On-Fail": {
            "type": "boolean"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Dial-Endpoint-Method": {
            "type": "string",
            "enum": [
              "single",
              "simultaneous"
            ]
          },
          "Enable-T38-Fax": {
            "type": "string"
          },
          "Enable-T38-Fax-Request": {
            "type": "string"
          },
          "Enable-T38-Gateway": {
            "type": "string",
            "enum": [
              "self",
              "peer"
            ]
          },
          "Enable-T38-Passthrough": {
            "type": "string"
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/kapi.dialplan.bridge_endpoint"
            }
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Export-Bridge-Variables": {
            "type": "string"
          },
          "Export-Variables": {
            "type": "string"
          },
          "Fail-On-Single-Reject": {
            "type": "string"
          },
          "Force-Fax": {
            "type": "string"
          },
          "Hold-Media": {
            "type": "string"
          },
          "Ignore-Completed-Elsewhere": {
            "type": "string"
          },
          "Ignore-Early-Media": {
            "type": "string"
          },
          "Ignore-Forward": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Loopback-Bowout": {
            "type": "string"
          },
          "Media": {
            "type": "string",
            "enum": [
              "process",
              "bypass",
              "auto"
            ]
          },
          "Outbound-Callee-ID-Name": {
            "type": "string"
          },
          "Outbound-Callee-ID-Number": {
            "type": "string"
          },
          "Outbound-Caller-ID-Name": {
            "type": "string"
          },
          "Outbound-Caller-ID-Number": {
            "type": "string"
          },
          "Privacy-Hide-Name": {
            "type": "string"
          },
          "Privacy-Hide-Number": {
            "type": "string"
          },
          "Privacy-Method": {
            "type": "string"
          },
          "Ringback": {
            "type": "string"
          },
          "SIP-Invite-Parameters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SIP-Transport": {
            "type": "string",
            "enum": [
              "udp",
              "tcp",
              "tls"
            ]
          },
          "Secure-RTP": {
            "type": "boolean"
          },
          "Simplify-Loopback": {
            "type": "string"
          },
          "Timeout": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.bridge"
      },
      "kapi.discovery.flush": {
        "required": [
          "Query-ID"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "discovery"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "flush"
            ]
          },
          "Query-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for discovery.flush"
      },
      "system_config.kapps_controller": {
        "type": "object",
        "properties": {
          "kapps": {
            "type": "array",
            "description": "kapps_controller kapps",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Schema for kapps_controller system_config"
      },
      "users": {
        "required": [
          "first_name",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "call_forward": {
            "type": "object",
            "properties": {
              "require_keypress": {
                "type": "boolean",
                "description": "Determines if the callee is prompted to press 1 to accept the call",
                "default": true
              },
              "keep_caller_id": {
                "type": "boolean",
                "description": "Determines if the caller id is kept when the call is forwarded, if not the devices caller id is used",
                "default": true
              },
              "number": {
                "maxLength": 35,
                "type": "string",
                "description": "The number to forward calls to"
              },
              "direct_calls_only": {
                "type": "boolean",
                "description": "Determines if the calls that are not directly sent to the device should be forwarded",
                "default": false
              },
              "failover": {
                "type": "boolean",
                "description": "Enable the call-forwarding parameters if the device is offline",
                "default": false
              },
              "enabled": {
                "type": "boolean",
                "description": "Determines if the call forwarding should be used",
                "default": false
              },
              "substitute": {
                "type": "boolean",
                "description": "Determines if the call forwarding replaces the device",
                "default": true
              },
              "ignore_early_media": {
                "type": "boolean",
                "description": "The option to determine if early media from the call forwarded number should ignored",
                "default": true
              }
            },
            "description": "The device call forward parameters"
          },
          "call_recording": {
            "$ref": "#/components/schemas/call_recording"
          },
          "call_restriction": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "If set to deny all calls of this type will be rejected.  If set to inherit the user/device rules apply",
                  "enum": [
                    "inherit",
                    "deny"
                  ]
                }
              }
            },
            "description": "Device level call restrictions for each available number classification"
          },
          "call_waiting": {
            "$ref": "#/components/schemas/call_waiting"
          },
          "caller_id": {
            "$ref": "#/components/schemas/caller_id"
          },
          "caller_id_options": {
            "type": "object",
            "properties": {
              "outbound_privacy": {
                "type": "string",
                "description": "Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing",
                "enum": [
                  "full",
                  "name",
                  "number",
                  "none"
                ]
              }
            },
            "description": "custom properties for configuring caller_id"
          },
          "contact_list": {
            "type": "object",
            "properties": {
              "exclude": {
                "type": "boolean",
                "description": "If set to true the device is excluded from the contact list"
              }
            },
            "description": "Contact List Parameters"
          },
          "dial_plan": {
            "$ref": "#/components/schemas/dialplans"
          },
          "directories": {
            "type": "object",
            "properties": {},
            "description": "Provides the mappings for what directory the user is a part of (the key), and what callflow (the value) to invoke if the user is selected by the caller."
          },
          "do_not_disturb": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Is do-not-disturb enabled for this user?"
              }
            },
            "description": "DND Parameters"
          },
          "email": {
            "maxLength": 254,
            "minLength": 3,
            "type": "string",
            "description": "The email of the user",
            "format": "email"
          },
          "enabled": {
            "type": "boolean",
            "description": "Determines if the user is currently enabled",
            "default": true
          },
          "feature_level": {
            "type": "string",
            "description": "The user level for assigning feature sets"
          },
          "first_name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The first name of the user"
          },
          "formatters": {
            "$ref": "#/components/schemas/formatters"
          },
          "hotdesk": {
            "type": "object",
            "properties": {
              "keep_logged_in_elsewhere": {
                "type": "boolean",
                "description": "Determines if user should be able to login to multiple phones simultaneously",
                "default": false
              },
              "pin": {
                "maxLength": 15,
                "minLength": 4,
                "type": "string",
                "description": "The users hotdesk pin number"
              },
              "require_pin": {
                "type": "boolean",
                "description": "Determines if user requires a pin to change the hotdesk state",
                "default": false
              },
              "id": {
                "maxLength": 15,
                "type": "string",
                "description": "The users hotdesk id"
              },
              "enabled": {
                "type": "boolean",
                "description": "Determines if the user has hotdesking enabled",
                "default": false
              }
            },
            "description": "The user hotdesk parameters"
          },
          "language": {
            "type": "string",
            "description": "The language for this user"
          },
          "last_name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The last name of the user"
          },
          "media": {
            "$ref": "#/components/schemas/endpoint.media"
          },
          "metaflows": {
            "$ref": "#/components/schemas/metaflows"
          },
          "music_on_hold": {
            "type": "object",
            "properties": {
              "media_id": {
                "maxLength": 128,
                "type": "string",
                "description": "The ID of a media object that should be used as the music on hold"
              }
            },
            "description": "The music on hold parameters used if not a property of the device owner"
          },
          "password": {
            "type": "string",
            "description": "The GUI login password"
          },
          "presence_id": {
            "type": "string",
            "description": "Static presence ID (used instead of SIP username)"
          },
          "priv_level": {
            "type": "string",
            "description": "The privilege level of the user",
            "default": "user",
            "enum": [
              "user",
              "admin"
            ]
          },
          "profile": {
            "$ref": "#/components/schemas/profile"
          },
          "pronounced_name": {
            "type": "object",
            "properties": {
              "media_id": {
                "maxLength": 128,
                "type": "string",
                "description": "The ID of a media object that should be used as the music on hold"
              }
            },
            "description": "Name pronounced by user to introduce himself to conference members"
          },
          "require_password_update": {
            "type": "boolean",
            "description": "UI flag that the user should update their password.",
            "default": false
          },
          "ringtones": {
            "type": "object",
            "properties": {
              "external": {
                "maxLength": 256,
                "type": "string",
                "description": "The alert info SIP header added when the call is from internal sources"
              },
              "internal": {
                "maxLength": 256,
                "type": "string",
                "description": "The alert info SIP header added when the call is from external sources"
              }
            },
            "description": "Ringtone Parameters"
          },
          "timezone": {
            "type": "string",
            "description": "User's timezone"
          },
          "username": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^([+@.\\w_-]+)$",
            "type": "string",
            "description": "The GUI login username - alpha-numeric, dashes, at symbol, periods, plusses, and underscores allowed"
          },
          "verified": {
            "type": "boolean",
            "description": "Determines if the user has been verified",
            "default": false
          },
          "vm_to_email_enabled": {
            "type": "boolean",
            "description": "Determines if the user would like voicemails emailed to them",
            "default": true
          },
          "voicemail": {
            "type": "object",
            "properties": {
              "notify": {
                "type": "object",
                "properties": {
                  "callback": {
                    "$ref": "#/components/schemas/notify.callback"
                  }
                }
              }
            }
          }
        },
        "description": "Schema for a user"
      },
      "system_config.tasks": {
        "type": "object",
        "properties": {
          "aging_expiry_d": {
            "minimum": 0,
            "type": "integer",
            "description": "tasks aging expiry in days"
          },
          "attempt_upload_output_times": {
            "minimum": 1,
            "type": "integer",
            "description": "how many times will the upload of the resulting CSV be attempted, cannot be zero"
          },
          "browse_dbs_interval_s": {
            "minimum": 1,
            "type": "integer",
            "description": "tasks browse dbs interval in seconds"
          },
          "crawler_delay_time_ms": {
            "type": "integer",
            "description": "tasks crawler delay time in milliseconds"
          },
          "crawler_timer_ms": {
            "minimum": 0,
            "type": "integer",
            "description": "tasks crawler timer in milliseconds"
          },
          "cycle_delay_time_ms": {
            "type": "integer",
            "description": "tasks cycle delay time in milliseconds"
          },
          "discovery_expiry_d": {
            "minimum": 0,
            "type": "integer",
            "description": "tasks discovery expiry in days"
          },
          "interaccount_delay_ms": {
            "type": "integer",
            "description": "tasks interaccount delay in milliseconds"
          },
          "low_balance_repeat_s": {
            "type": "integer",
            "description": "tasks low balance repeat in seconds"
          },
          "pause_between_upload_output_attempts_s": {
            "minimum": 0,
            "type": "integer",
            "description": "the amount of time to pause between attempts to upload resulting CSV in seconds"
          },
          "scan_rate": {
            "minimum": 0,
            "type": "integer",
            "description": "tasks scan_rate"
          },
          "send_progress_after_processed": {
            "minimum": 1,
            "type": "integer",
            "description": "tasks send progress after processed"
          },
          "should_archive_modbs": {
            "type": "boolean",
            "description": "tasks should archive modbs",
            "default": false
          },
          "should_crawl_for_first_occurrence": {
            "type": "boolean",
            "description": "tasks should crawl for first occurrence",
            "default": true
          },
          "should_crawl_for_low_balance": {
            "type": "boolean",
            "description": "tasks should crawl for low balance",
            "default": true
          },
          "soft_delete_pause_ms": {
            "type": "integer",
            "description": "tasks soft delete pause in milliseconds"
          },
          "support_billing_id": {
            "type": "boolean",
            "description": "tasks support_billing_id",
            "default": true
          },
          "sync_buffer_period": {
            "minimum": 0,
            "type": "integer",
            "description": "tasks sync_buffer_period"
          },
          "sync_services": {
            "type": "boolean",
            "description": "tasks sync_services",
            "default": false
          },
          "unfinished_port_request_lifetime_s": {
            "type": "integer",
            "description": "tasks unfinished port request lifetime in seconds"
          },
          "wait_after_row_ms": {
            "minimum": 0,
            "type": "integer",
            "description": "tasks wait after row in milliseconds"
          }
        },
        "description": "Schema for tasks system_config"
      },
      "kapi.dialplan.set": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Custom-Call-Vars",
          "Custom-Channel-Vars"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "set"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Call-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Export-All": {
            "type": "boolean"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.set"
      },
      "kapi.notifications.inbound_fax_error": {
        "required": [
          "Account-ID",
          "From-Realm",
          "From-User",
          "To-Realm",
          "To-User"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "inbound_fax_error"
            ]
          },
          "Fax-Error": {
            "type": "string"
          },
          "Fax-ID": {
            "type": "string"
          },
          "Fax-Info": {
            "type": "string"
          },
          "Fax-Notifications": {
            "type": "string"
          },
          "Fax-Result-Code": {
            "type": "string"
          },
          "Fax-Timestamp": {
            "type": "string"
          },
          "FaxBox-ID": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Owner-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.inbound_fax_error"
      },
      "kapi.dialplan.respond": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Response-Code"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "respond"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Response-Code": {
            "type": "string"
          },
          "Response-Message": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.respond"
      },
      "metaflows.tts": {
        "type": "object",
        "properties": {
          "engine": {
            "type": "string",
            "description": "What engine to use (system-dependant)",
            "default": "flite"
          },
          "language": {
            "type": "string",
            "description": "What language is the text in"
          },
          "leg": {
            "type": "string",
            "description": "What leg to say the text to",
            "default": "self"
          },
          "terminators": {
            "type": "array",
            "description": "What DTMF can terminate the TTS playback",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "*",
                "0",
                "#"
              ]
            }
          },
          "text": {
            "type": "string",
            "description": "What to say"
          },
          "voice": {
            "type": "string",
            "description": "What voice to use when speaking",
            "default": "female"
          }
        },
        "description": "Use the Text-to-speech engine to say the provided text"
      },
      "kapi.tasks.start_resp": {
        "required": [
          "Reply"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "tasks"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "start_resp"
            ]
          },
          "Reply": {
            "type": "string"
          }
        },
        "description": "AMQP API for tasks.start_resp"
      },
      "callflows.call_waiting": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "What action to perform",
            "default": "toggle",
            "enum": [
              "activate",
              "deactivate",
              "toggle"
            ]
          },
          "scope": {
            "type": "string",
            "description": "Apply the action to the calling device or user",
            "default": "device",
            "enum": [
              "device",
              "user"
            ]
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the call_waiting callflow data object"
      },
      "kapi.pusher.push_req": {
        "required": [
          "Alert-Body",
          "Token-App",
          "Token-ID",
          "Token-Type"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Alert": {
            "type": "string"
          },
          "Alert-Body": {
            "type": "string"
          },
          "Alert-Key": {
            "type": "string"
          },
          "Alert-Params": {
            "type": "string"
          },
          "Badge": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Endpoint-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "push_req"
            ]
          },
          "Expires": {
            "type": "string"
          },
          "Payload": {
            "type": "string"
          },
          "Queue": {
            "type": "string"
          },
          "Sound": {
            "type": "string"
          },
          "Token-App": {
            "type": "string"
          },
          "Token-ID": {
            "type": "string"
          },
          "Token-Reg": {
            "type": "string"
          },
          "Token-Type": {
            "type": "string"
          }
        },
        "description": "AMQP API for pusher.push_req"
      },
      "kapi.acdc_agent.logout_queue": {
        "required": [
          "Account-ID",
          "Agent-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "logout_queue"
            ]
          },
          "Presence-ID": {
            "type": "string"
          },
          "Presence-State": {
            "type": "string",
            "enum": [
              "trying",
              "online",
              "offline",
              "early",
              "confirmed",
              "terminated"
            ]
          },
          "Queue-ID": {
            "type": "string"
          },
          "Time-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_agent.logout_queue"
      },
      "callflows.page_group": {
        "required": [
          "audio",
          "endpoints"
        ],
        "type": "object",
        "properties": {
          "audio": {
            "type": "string",
            "description": "What kind of audio for the group members",
            "default": "one-way",
            "enum": [
              "one-way",
              "two-way"
            ]
          },
          "barge_calls": {
            "type": "boolean",
            "description": "Should the Endpoint be interrupted by this call"
          },
          "endpoints": {
            "minItems": 1,
            "type": "array",
            "description": "Endpoint IDs (devices, users, etc) included in the ring group",
            "items": {
              "required": [
                "endpoint_type",
                "id"
              ],
              "type": "object",
              "properties": {
                "endpoint_type": {
                  "type": "string",
                  "description": "The type (device, user, etc) of endpoint",
                  "enum": [
                    "device",
                    "user",
                    "group"
                  ]
                },
                "delay": {
                  "type": "integer",
                  "description": "How long to delay ringing the endpoint, in seconds"
                },
                "weight": {
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer",
                  "description": "Weight of endpoint, different usage in various strategies"
                },
                "id": {
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "description": "The ID of the endpoint"
                },
                "timeout": {
                  "type": "integer",
                  "description": "How long to ring the endpoint, in seconds"
                }
              },
              "description": "ID of the endpoint (device, user, etc)"
            }
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "timeout": {
            "type": "integer",
            "description": "How long to ring the ring group before continuing, in seconds"
          }
        },
        "description": "Validator for the page_group callflow data object"
      },
      "metaflows.hold": {
        "type": "object",
        "properties": {
          "moh_aleg": {
            "type": "string",
            "description": "MOH ID for the a-leg"
          },
          "moh_bleg": {
            "type": "string",
            "description": "MOH ID for the b-leg"
          },
          "unhold_key": {
            "type": "string",
            "description": "DTMF to press to unhold the call",
            "default": "1"
          }
        },
        "description": "Put the leg on hold"
      },
      "skel": {
        "type": "object",
        "description": "Skeleton JSON schema"
      },
      "system_config.camper": {
        "type": "object",
        "properties": {
          "stop_after": {
            "type": "integer",
            "description": "camper stop after"
          },
          "timeout": {
            "type": "integer",
            "description": "camper timeout"
          },
          "tries": {
            "type": "integer",
            "description": "camper tries"
          },
          "try_interval": {
            "type": "integer",
            "description": "camper try interval"
          }
        },
        "description": "Schema for camper system_config"
      },
      "kapi.notifications.customer_update": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "DataBag": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "customer_update"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Recipient-ID": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Template-ID": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "User-Type": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.customer_update"
      },
      "kapi.pivot.req": {
        "required": [
          "Call",
          "Voice-URI"
        ],
        "type": "object",
        "properties": {
          "CDR-URI": {
            "type": "string"
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Debug": {
            "type": "boolean"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "dialplan"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "pivot_req"
            ]
          },
          "HTTP-Method": {
            "type": "string"
          },
          "Request-Body-Format": {
            "type": "string"
          },
          "Request-Format": {
            "type": "string"
          },
          "Voice-URI": {
            "type": "string"
          }
        },
        "description": "AMQP API for pivot.req"
      },
      "kapi.globals.unregister": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "globals"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "unregister"
            ]
          },
          "Name": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          }
        },
        "description": "AMQP API for globals.unregister"
      },
      "callflows.do_not_disturb": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "What action to perform",
            "enum": [
              "activate",
              "deactivate",
              "toggle"
            ]
          },
          "id": {
            "type": "string",
            "description": "Document ID on which to update DND settings"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the do_not_disturb callflow data object"
      },
      "system_config.provisioner": {
        "type": "object",
        "properties": {
          "combo_keys": {
            "type": "object",
            "properties": {},
            "description": "provisioner combo keys"
          },
          "feature_keys": {
            "type": "object",
            "properties": {},
            "description": "provisioner feature keys"
          },
          "provisioning_type": {
            "type": "string",
            "description": "provisioner provisioning type"
          },
          "provisioning_url": {
            "type": "string",
            "description": "provisioner provisioning url"
          }
        },
        "description": "Schema for provisioner system_config"
      },
      "formatters.format_options": {
        "type": "object",
        "properties": {
          "direction": {
            "type": "string",
            "description": "Only apply the formatter on the relevant request direction",
            "enum": [
              "inbound",
              "outbound",
              "both"
            ]
          },
          "match_invite_format": {
            "type": "boolean",
            "description": "Applicable on fields with SIP URIs. Will format the username portion to match the invite format of the outbound request."
          },
          "prefix": {
            "type": "string",
            "description": "Prepends value against the result of a successful regex match"
          },
          "regex": {
            "type": "string",
            "description": "Matches against the value, with optional capture group",
            "format": "regex"
          },
          "strip": {
            "type": "boolean",
            "description": "If set to true, the field will be stripped from the payload"
          },
          "suffix": {
            "type": "string",
            "description": "Appends value against the result of a successful regex match"
          },
          "value": {
            "type": "string",
            "description": "Replaces the current value with the static value defined"
          }
        },
        "description": "Schema for formatter options"
      },
      "kapi.conference.discovery_resp": {
        "required": [
          "Participant-ID"
        ],
        "type": "object",
        "properties": {
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "discovery_resp"
            ]
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.discovery_resp"
      },
      "directories": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "confirm_match": {
            "type": "boolean",
            "description": "When one match is found, require caller to confirm the match before connecting",
            "default": true
          },
          "max_dtmf": {
            "minimum": 0,
            "type": "integer",
            "description": "Cap the number of DTMF characters collected from a caller, 0 for unlimited"
          },
          "min_dtmf": {
            "minimum": 1,
            "type": "integer",
            "description": "How many DTMF characters to collect from a caller before processing the directory"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the directory"
          },
          "sort_by": {
            "type": "string",
            "description": "What field to sort on in matching documents when a caller enters characters",
            "default": "last_name",
            "enum": [
              "first_name",
              "last_name"
            ]
          },
          "users": {
            "type": "array",
            "description": "The list of users associated with this directory",
            "items": {
              "type": "string",
              "description": "UserId to include in the directory"
            }
          }
        },
        "description": "Allow a caller to search for a user/device by name instead of extension/DID"
      },
      "system_config.crossbar.channels": {
        "type": "object",
        "properties": {
          "system_wide_channels_list": {
            "type": "boolean",
            "description": "crossbar.channels system wide channels list",
            "default": false
          }
        },
        "description": "Schema for crossbar.channels system_config"
      },
      "kapi.conference.add_participant": {
        "required": [
          "Call-ID",
          "Conference-ID",
          "Control-Queue"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Answered": {
            "type": "string"
          },
          "Authorizing-ID": {
            "type": "string"
          },
          "Authorizing-Type": {
            "type": "string"
          },
          "Bridge-ID": {
            "type": "string"
          },
          "Call-Direction": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Channel-Authorized": {
            "type": "string"
          },
          "Channel-Call-State": {
            "type": "string"
          },
          "Channel-Created-Time": {
            "type": "integer"
          },
          "Channel-Is-Loopback": {
            "type": "string"
          },
          "Channel-Loopback-Bowout": {
            "type": "string"
          },
          "Channel-Loopback-Bowout-Execute": {
            "type": "string"
          },
          "Channel-Loopback-Leg": {
            "type": "string"
          },
          "Channel-Loopback-Other-Leg-ID": {
            "type": "string"
          },
          "Channel-Moving": {
            "type": "string"
          },
          "Channel-Name": {
            "type": "string"
          },
          "Channel-State": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Destination": {
            "type": "string"
          },
          "Disposition": {
            "type": "string"
          },
          "Ecallmgr-Node": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "add_participant"
            ]
          },
          "From": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "Hangup-Cause": {
            "type": "string"
          },
          "Hangup-Code": {
            "type": "string"
          },
          "Is-Loopback": {
            "type": "string"
          },
          "Is-On-Hold": {
            "type": "string"
          },
          "Media-Node": {
            "type": "string"
          },
          "Media-Server": {
            "type": "string"
          },
          "Msg-ID": {
            "type": "string"
          },
          "Node": {
            "type": "string"
          },
          "Origination-Call-ID": {
            "type": "string"
          },
          "Other-Leg-Call-ID": {
            "type": "string"
          },
          "Other-Leg-Caller-ID-Name": {
            "type": "string"
          },
          "Other-Leg-Caller-ID-Number": {
            "type": "string"
          },
          "Other-Leg-Destination-Number": {
            "type": "string"
          },
          "Other-Leg-Direction": {
            "type": "string"
          },
          "Participant-Flags": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "Profile-Name": {
            "type": "string"
          },
          "Raw-Application-Data": {
            "type": "string"
          },
          "Raw-Application-Name": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "Replaced-By": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-Nodename": {
            "type": "string"
          },
          "Switch-URI": {
            "type": "string"
          },
          "Switch-URL": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "Transfer-History": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.add_participant"
      },
      "temporal_rules": {
        "required": [
          "cycle",
          "name"
        ],
        "type": "object",
        "properties": {
          "cycle": {
            "type": "string",
            "description": "The recurrence cycle for this rule",
            "enum": [
              "date",
              "daily",
              "weekly",
              "monthly",
              "yearly"
            ]
          },
          "days": {
            "type": "array",
            "description": "The recurrence days for this rule",
            "items": {
              "maximum": 31,
              "minimum": 1,
              "type": "integer"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the rule is enabled"
          },
          "interval": {
            "minimum": 1,
            "type": "integer",
            "description": "The recurrence interval for this rule"
          },
          "month": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "The recurrence month for this rule"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the temporal rule"
          },
          "ordinal": {
            "type": "string",
            "description": "The recurrence ordinal for this rule",
            "enum": [
              "every",
              "first",
              "second",
              "third",
              "fourth",
              "fifth",
              "last"
            ]
          },
          "start_date": {
            "type": "integer",
            "description": "The date that any recurrence should be calculated as starting on"
          },
          "time_window_start": {
            "maximum": 86400,
            "minimum": 0,
            "type": "integer",
            "description": "Seconds from the start of a day to consider this rule valid"
          },
          "time_window_stop": {
            "maximum": 86400,
            "minimum": 0,
            "type": "integer",
            "description": "Seconds from the start of a day to stop considering this rule valid"
          },
          "wdays": {
            "type": "array",
            "description": "The recurrence weekdays for this rule",
            "items": {
              "type": "string",
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "wensday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ]
            }
          }
        },
        "description": "Schema for a temporal rules"
      },
      "kapi.bookkeepers.sale_resp_definition": {
        "required": [
          "Status",
          "Transaction-DB",
          "Transaction-ID"
        ],
        "type": "object",
        "properties": {
          "Details": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "sale_resp"
            ]
          },
          "Message": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Transaction-DB": {
            "type": "string"
          },
          "Transaction-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.sale_resp_definition"
      },
      "menus": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "allow_record_from_offnet": {
            "type": "boolean",
            "description": "Determines if the record pin can be used by external calls",
            "default": false
          },
          "hunt": {
            "type": "boolean",
            "description": "Determines if the callers can dial internal extensions directly",
            "default": true
          },
          "hunt_allow": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "A regular expression that an extension the caller dialed must match to be allowed to continue"
          },
          "hunt_deny": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "A regular expression that if matched does not allow the caller to dial directly"
          },
          "interdigit_timeout": {
            "maximum": 10000,
            "minimum": 1,
            "type": "integer",
            "description": "The amount of time (in milliseconds) to wait for the caller to press the next digit after pressing a digit"
          },
          "max_extension_length": {
            "maximum": 6,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of digits that can be collected"
          },
          "media": {
            "type": "object",
            "properties": {
              "exit_media": {
                "type": "object",
                "description": "When a call is transferred from the menu after all retries exhausted this media can be played (prior to transfer if enabled)"
              },
              "greeting": {
                "maxLength": 2048,
                "minLength": 3,
                "type": "string",
                "description": "The ID of a media object that should be used as the menu greeting"
              },
              "transfer_media": {
                "type": "object",
                "description": "When a call is transferred from the menu, either after all retries exhausted or a successful hunt, this media can be played"
              },
              "invalid_media": {
                "type": "object",
                "description": "When the collected digits don't result in a match or hunt this media can be played"
              }
            },
            "description": "The media (prompt) parameters"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the menu"
          },
          "record_pin": {
            "maxLength": 6,
            "minLength": 3,
            "type": "string",
            "description": "The pin number used to record the menu prompt"
          },
          "retries": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "description": "The number of times a menu should be played until a valid entry is collected"
          },
          "suppress_media": {
            "type": "boolean",
            "description": "Determines if the playing of 'Invalid Entry' is suppressed.",
            "default": false
          },
          "timeout": {
            "maximum": 60000,
            "minimum": 1,
            "type": "integer",
            "description": "The amount of time (in milliseconds) to wait for the caller to begin entering digits"
          }
        },
        "description": "Schema for a menus"
      },
      "account_config.cdr": {
        "type": "object",
        "properties": {
          "ignore_loopback_bowout": {
            "type": "boolean",
            "description": "cdr ignore loopback bowout",
            "default": true
          }
        },
        "description": "Schema for cdr account_config"
      },
      "system_config.crossbar.users": {
        "type": "object",
        "properties": {
          "generate_password_if_empty": {
            "type": "boolean",
            "description": "crossbar users generate_password_if_empty",
            "default": false
          },
          "generate_username_if_empty": {
            "type": "boolean",
            "description": "crossbar users generate_username_if_empty",
            "default": true
          },
          "reset_identity_secret_on_rehash": {
            "type": "boolean",
            "description": "crossbar users reset_identity_secret_on_rehash",
            "default": true
          }
        },
        "description": "Schema for crossbar.users system_config"
      },
      "system_config.registrar": {
        "type": "object",
        "properties": {
          "device_enabled_default": {
            "type": "boolean",
            "description": "registrar device enabled default",
            "default": true
          },
          "listeners": {
            "type": "integer",
            "description": "registrar listeners"
          },
          "owner_enabled_default": {
            "type": "boolean",
            "description": "registrar owner enabled default",
            "default": true
          },
          "use_aggregate": {
            "type": "boolean",
            "description": "registrar use aggregate",
            "default": true
          }
        },
        "description": "Schema for registrar system_config"
      },
      "system_config.reorder": {
        "type": "object",
        "properties": {
          "assume_inbound_e164": {
            "type": "boolean",
            "description": "reorder assume inbound e164",
            "default": false
          },
          "known_number": {
            "type": "object",
            "properties": {
              "response_code": {
                "type": "string",
                "description": "reorder code for replies to unconfigured numbers",
                "default": "686"
              },
              "bridge_account_id": {
                "type": "string",
                "description": "the account id that the bridge_device_id belongs to"
              },
              "response_message": {
                "type": "string",
                "description": "reorder message for replies to unconfigured numbers",
                "default": "PICNIC"
              },
              "bridge_device_id": {
                "type": "string",
                "description": "the device id to bridge unconfigured numbers to"
              },
              "action": {
                "type": "string",
                "description": "the action to take for unconfigured numbers",
                "default": "respond",
                "enum": [
                  "respond",
                  "transfer",
                  "bridge"
                ]
              },
              "transfer_target": {
                "type": "string",
                "description": "on-net phone number to transfer unconfigured numbers to"
              }
            },
            "description": "setting for how to response if the number is known but unconfigured"
          },
          "unknown_number": {
            "type": "object",
            "properties": {
              "response_code": {
                "type": "string",
                "description": "reorder code for replies to unknown numbers",
                "default": "604"
              },
              "bridge_account_id": {
                "type": "string",
                "description": "the account id that the bridge_device_id belongs to"
              },
              "response_message": {
                "type": "string",
                "description": "reorder message for replies to unknown numbers",
                "default": "Nope Nope Nope"
              },
              "bridge_device_id": {
                "type": "string",
                "description": "the device id to bridge unknown numbers to"
              },
              "action": {
                "type": "string",
                "description": "the action to take for unknown numbers",
                "default": "respond",
                "enum": [
                  "respond",
                  "transfer",
                  "bridge"
                ]
              },
              "transfer_target": {
                "type": "string",
                "description": "on-net phone number to transfer unknown numbers to"
              }
            },
            "description": "setting for how to response if the number is not in the numbers database"
          }
        },
        "description": "Schema for reorder system_config"
      },
      "kapi.notifications.port_request": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorized-By": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "port_request"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Local-Number": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Number-State": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "Port-Request-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reason": {
            "type": "object",
            "properties": {}
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.port_request"
      },
      "system_config.number_manager.simwood": {
        "type": "object",
        "properties": {
          "auth_password": {
            "type": "string",
            "description": "number_manager.simwood auth password",
            "default": ""
          },
          "auth_username": {
            "type": "string",
            "description": "number_manager.simwood auth username",
            "default": ""
          },
          "numbers_api_url": {
            "type": "string",
            "description": "number_manager.simwood numbers api url",
            "default": "https://api.simwood.com/v3/numbers"
          },
          "simwood_account_id": {
            "type": "string",
            "description": "number_manager.simwood simwood account id",
            "default": ""
          }
        },
        "description": "Schema for number_manager.simwood system_config"
      },
      "callflows.group_pickup": {
        "type": "object",
        "properties": {
          "approved_device_id": {
            "type": "string",
            "description": "Restrict calling device to Device"
          },
          "approved_group_id": {
            "type": "string",
            "description": "Restrict calling device to Group"
          },
          "approved_user_id": {
            "type": "string",
            "description": "Restrict calling device to User"
          },
          "device_id": {
            "type": "string",
            "description": "Device to pickup"
          },
          "group_id": {
            "type": "string",
            "description": "Group in which to find a call to pickup"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "user_id": {
            "type": "string",
            "description": "User in which to find a call to pickup"
          }
        },
        "description": "Validator for the group_pickup callflow data object"
      },
      "kapi.bookkeepers.collect_recurring_resp_definition": {
        "required": [
          "Account-ID",
          "Bookkeeper-ID",
          "Bookkeeper-Type",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Bookkeeper-ID": {
            "type": "string"
          },
          "Bookkeeper-Type": {
            "type": "string"
          },
          "Details": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "collect_recurring_resp"
            ]
          },
          "Message": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Transaction-DB": {
            "type": "string"
          },
          "Transaction-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.collect_recurring_resp_definition"
      },
      "kapi.call.channel_status_req": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Active-Only": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "channel_status_req"
            ]
          }
        },
        "description": "AMQP API for call.channel_status_req"
      },
      "cccps": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Show's whether CID/PIN active",
            "default": false
          },
          "cid": {
            "type": "string",
            "description": "CID to authorize"
          },
          "comment": {
            "type": "string",
            "description": "Some notes regarding what this pin/cid for"
          },
          "max_concurent_calls_per_user": {
            "type": "integer",
            "description": "Calls per user limit. Counts all user's legs and compares to max_concurrent_calls_per_user multiplied by 2"
          },
          "pin": {
            "type": "string",
            "description": "PIN to authorize"
          },
          "retain_cid": {
            "type": "boolean",
            "description": "Pass initial caller number to the callee"
          },
          "user_id": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "The ID of the user object that 'owns' cid/pin"
          }
        },
        "description": "Calling cards callback platform user's info"
      },
      "allotments": {
        "type": "object",
        "description": "Create buckets of minutes per time-period"
      },
      "storage.attachment.http": {
        "required": [
          "handler",
          "settings"
        ],
        "type": "object",
        "properties": {
          "handler": {
            "type": "string",
            "description": "The handler interface to use",
            "enum": [
              "http"
            ]
          },
          "settings": {
            "required": [
              "url"
            ],
            "type": "object",
            "properties": {
              "base64_encode_data": {
                "type": "boolean",
                "description": "Toggles whether to base64-encode the attachment data",
                "default": false
              },
              "verb": {
                "type": "string",
                "description": "The HTTP verb to use when sending the data",
                "default": "put",
                "enum": [
                  "post",
                  "put"
                ]
              },
              "url": {
                "type": "string",
                "description": "The base HTTP(s) URL to use when creating the request"
              },
              "send_multipart": {
                "type": "boolean",
                "description": "Toggle whether to send multipart payload when storing attachment - will include metadata JSON if true"
              }
            },
            "description": "HTTP server settings"
          }
        },
        "description": "schema for HTTP(s) attachment entry"
      },
      "kapi.switch.fs_xml_flush": {
        "required": [
          "Username"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "switch_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "fs_xml_flush"
            ]
          },
          "Realm": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for switch.fs_xml_flush"
      },
      "callflows.cidlistmatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "CallerID List ID"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the cidlistmatch callflow data object"
      },
      "system_config.notify.fax_outbound_error_to_email": {
        "type": "object",
        "properties": {
          "default_enabled": {
            "type": "boolean",
            "description": "notify.fax_outbound_error_to_email default enabled",
            "default": true
          }
        },
        "description": "Schema for notify.fax_outbound_error_to_email system_config"
      },
      "phone_numbers": {
        "type": "object",
        "properties": {
          "carrier_name": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "cnam": {
            "type": "object",
            "properties": {
              "inbound_lookup": {
                "type": "boolean"
              },
              "display_name": {
                "maxLength": 15,
                "minLength": 1,
                "type": "string"
              }
            }
          },
          "create_with_state": {
            "type": "string",
            "description": "The state to create numbers in",
            "enum": [
              "aging",
              "available",
              "deleted",
              "discovery",
              "in_service",
              "port_in",
              "port_out",
              "released",
              "reserved"
            ]
          },
          "e911": {
            "required": [
              "locality",
              "postal_code",
              "region",
              "street_address"
            ],
            "type": "object",
            "properties": {
              "street_address": {
                "type": "string",
                "description": "The street address where the number is in service"
              },
              "activated_time": {
                "type": "string",
                "description": "The time stamp e911 was provisioned"
              },
              "latitude": {
                "type": "string",
                "description": "The e911 provisioning system calculated service address latitude"
              },
              "locality": {
                "type": "string",
                "description": "The locality (city) where the number is in service"
              },
              "location_id": {
                "type": "string",
                "description": "The e911 provisioning system internal id for this service address"
              },
              "extended_address": {
                "type": "string",
                "description": "The suit/floor/apt. address where the number is in service"
              },
              "caller_name": {
                "minLength": 3,
                "type": "string",
                "description": "The name that will show to emergency services"
              },
              "plus_four": {
                "type": "string",
                "description": "The extended zip/postal code where the number is in service"
              },
              "legacy_data": {
                "type": "object",
                "properties": {
                  "suite": {
                    "type": "string",
                    "description": "The name that will show to emergency services"
                  },
                  "predirectional": {
                    "type": "string",
                    "description": "The name that will show to emergency services"
                  },
                  "streetname": {
                    "type": "string",
                    "description": "The name that will show to emergency services"
                  },
                  "house_number": {
                    "type": "string",
                    "description": "The name that will show to emergency services"
                  }
                },
                "description": "Legacy E911 information"
              },
              "postal_code": {
                "type": "string",
                "description": "The zip/postal code where the number is in service"
              },
              "region": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "The region (state) where the number is in service"
              },
              "longitude": {
                "type": "string",
                "description": "The e911 provisioning system calculated service address longitude"
              },
              "status": {
                "type": "string",
                "description": "The e911 provisioning system status for this service address",
                "enum": [
                  "INVALID",
                  "GEOCODED",
                  "PROVISIONED",
                  "REMOVED",
                  "ERROR"
                ]
              }
            }
          },
          "porting": {
            "type": "object",
            "properties": {
              "billing_extended_address": {
                "type": "string",
                "description": "The suit/floor/apt. address the losing carrier has on file"
              },
              "billing_street_address": {
                "type": "string",
                "description": "The street address the losing carrier has on file"
              },
              "comments": {
                "type": "array",
                "description": "An array of comments",
                "items": {
                  "type": "string"
                }
              },
              "billing_account_id": {
                "type": "string",
                "description": "The account id the losing carrier has on file"
              },
              "billing_telephone_number": {
                "type": "string",
                "description": "The BTN of the account the number belongs to"
              },
              "service_provider": {
                "type": "string",
                "description": "The name of the losing carrier"
              },
              "billing_locality": {
                "type": "string",
                "description": "The locality (city) the losing carrier has on file"
              },
              "billing_name": {
                "type": "string",
                "description": "The name or company name the losing carrier has on file"
              },
              "customer_contact": {
                "type": "string",
                "description": "The phone number that can be used to contact the owner of the number"
              },
              "billing_postal_code": {
                "type": "string",
                "description": "The zip/postal code the losing carrier has on file"
              },
              "billing_region": {
                "type": "string",
                "description": "The region (state) the losing carrier has on file"
              },
              "port_id": {
                "type": "string",
                "description": "The id of the port request"
              },
              "requested_port_date": {
                "type": "string",
                "description": "The requested port date"
              }
            },
            "description": "Porting (in) information for the phone number"
          }
        },
        "description": "Schema for a number"
      },
      "kapi.money.credit": {
        "required": [
          "Account-ID",
          "Amount",
          "Transaction-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Amount": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "transaction"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "credit"
            ]
          },
          "Transaction-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for money.credit"
      },
      "kapi.authn.error": {
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "directory"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "authn_err"
            ]
          }
        },
        "description": "AMQP API for authn.error"
      },
      "kapi.fax.start_job": {
        "required": [
          "Account-ID",
          "Job-ID",
          "To-Number"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "start"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "job"
            ]
          },
          "Job-ID": {
            "type": "string"
          },
          "To-Number": {
            "type": "string"
          }
        },
        "description": "AMQP API for fax.start_job"
      },
      "kapi.frontier.flush": {
        "required": [
          "Realm"
        ],
        "type": "object",
        "properties": {
          "Device": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acl"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "acl_flush"
            ]
          },
          "Realm": {
            "type": "string"
          }
        },
        "description": "AMQP API for frontier.flush"
      },
      "callflows.audio_macro.tone": {
        "type": "object",
        "properties": {
          "duration_off": {
            "type": "integer",
            "description": "time, in milliseconds, for turning the tone off"
          },
          "duration_on": {
            "type": "integer",
            "description": "time, in milliseconds, for turning the tone on"
          },
          "frequencies": {
            "type": "array",
            "description": "The tone frequencies to play",
            "items": {
              "type": "integer",
              "description": "The tone frequency"
            }
          },
          "repeat": {
            "type": "integer",
            "description": "how many times to repeat the tone"
          },
          "volume": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Volume of the tone being played"
          }
        },
        "description": "Validator for playing a tone - TGML"
      },
      "system_config.notify.topup": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.topup default to"
          },
          "html_content_transfer_encoding": {
            "type": "string",
            "description": "notify.topup html content transfer encoding",
            "default": "7BIT"
          },
          "text_content_transfer_encoding": {
            "type": "string",
            "description": "notify.topup text content transfer encoding",
            "default": "7BIT"
          }
        },
        "description": "Schema for notify.topup system_config"
      },
      "kapi.rate.resp": {
        "type": "object",
        "properties": {
          "Base-Cost": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Discount-Percentage": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "rate"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "resp"
            ]
          },
          "Prefix": {
            "type": "string"
          },
          "Pvt-Cost": {
            "type": "string"
          },
          "Rate": {
            "type": "string"
          },
          "Rate-Description": {
            "type": "string"
          },
          "Rate-ID": {
            "type": "string"
          },
          "Rate-Increment": {
            "type": "integer"
          },
          "Rate-Minimum": {
            "type": "string"
          },
          "Rate-Name": {
            "type": "string"
          },
          "Rate-NoCharge-Time": {
            "type": "integer"
          },
          "Rate-Version": {
            "type": "string"
          },
          "Ratedeck-ID": {
            "type": "string"
          },
          "Surcharge": {
            "type": "string"
          },
          "Update-Callee-ID": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for rate.resp"
      },
      "metaflows.callflow": {
        "type": "object",
        "properties": {
          "captures": {
            "type": "string",
            "description": "Callflow extension"
          },
          "collected": {
            "type": "string",
            "description": "Callflow extension"
          },
          "flow": {
            "$ref": "#/components/schemas/callflows.action"
          },
          "id": {
            "type": "string",
            "description": "The callflow ID to run"
          }
        },
        "description": "Run a callflow on an active call"
      },
      "kapi.acdc_queue.member_connect_win": {
        "required": [
          "Call",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Agent-Process-IDs": {
            "type": "array"
          },
          "CDR-Url": {
            "type": "string"
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Caller-Exit-Key": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "connect_win"
            ]
          },
          "Notifications": {
            "type": "object",
            "properties": {}
          },
          "Process-ID": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Record-Caller": {
            "type": "boolean"
          },
          "Recording-URL": {
            "type": "string"
          },
          "Ring-Timeout": {
            "type": "integer"
          },
          "Wrapup-Timeout": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_queue.member_connect_win"
      },
      "kapi.globals.register_resp": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "globals"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "register_resp"
            ]
          },
          "Name": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Timestamp": {
            "type": "integer"
          }
        },
        "description": "AMQP API for globals.register_resp"
      },
      "kapi.dialplan.break": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "break"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.break"
      },
      "kapi.tasks.stop_resp": {
        "required": [
          "Reply"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "tasks"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "stop_resp"
            ]
          },
          "Reply": {
            "type": "string"
          }
        },
        "description": "AMQP API for tasks.stop_resp"
      },
      "callflows.privacy": {
        "type": "object",
        "properties": {
          "endpoint_strategy": {
            "type": "string",
            "description": "whether cf_privacy should overwrite or merge with the caller_id_options of the endpoint.",
            "default": "overwrite",
            "enum": [
              "overwrite",
              "merge"
            ]
          },
          "mode": {
            "type": "string",
            "description": "set caller privacy on calls, restricting the presentation some or full parts of Caller ID",
            "default": "full",
            "enum": [
              "full",
              "name",
              "number",
              "yes"
            ]
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the privacy callflow data object"
      },
      "metaflows.transfer": {
        "type": "object",
        "properties": {
          "captures": {
            "type": "array",
            "description": "Capture groups?",
            "items": {
              "type": "string"
            }
          },
          "leg": {
            "type": "string",
            "description": "Which leg to be the transfer leg"
          },
          "target": {
            "type": "string",
            "description": "The target extension/DID"
          },
          "timeout": {
            "type": "integer",
            "description": "timeout to establish call"
          },
          "transfer_type": {
            "type": "string",
            "description": "The type of transfer to perform",
            "default": "blind",
            "enum": [
              "attended",
              "blind"
            ]
          }
        },
        "description": "Perform a transfer"
      },
      "acls": {
        "required": [
          "cidr",
          "network-list-name",
          "type"
        ],
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string",
            "description": "Classless Inter-Domain Routing IP notation for use on the ACL"
          },
          "description": {
            "maxLength": 30,
            "type": "string",
            "description": "Will be added as a comment for quick identification later"
          },
          "network-list-name": {
            "type": "string",
            "description": "The trusted list should represent anything that can issue calls without authorization.  The authoritative list should indicate inter-network routing equipment (SBC, etc).",
            "enum": [
              "authoritative",
              "trusted"
            ]
          },
          "type": {
            "type": "string",
            "description": "Allow or deny this CIDR",
            "default": "allow",
            "enum": [
              "allow",
              "deny"
            ]
          }
        },
        "description": "Access Control List entries"
      },
      "callflows.branch_variable": {
        "required": [
          "variable"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "specifies where the variable is defined",
            "default": "custom_channel_vars",
            "enum": [
              "account",
              "custom_channel_vars",
              "device",
              "merged",
              "user"
            ]
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "variable": {
            "type": "string",
            "description": "specifies the name of variable/property that should be looked up",
            "default": ""
          }
        },
        "description": "Validator for the branch_variable callflow data object"
      },
      "system_config.kazoo_couch": {
        "type": "object",
        "properties": {
          "admin_port": {
            "type": "integer",
            "description": "The CouchDB API port, typically 5986"
          },
          "allow_maintenance_db_delete": {
            "type": "boolean",
            "description": "kazoo_couch allow maintenance db delete",
            "default": false
          },
          "api_port": {
            "type": "integer",
            "description": "The CouchDB API port, typically 5984"
          },
          "compact_automatically": {
            "type": "boolean",
            "description": "kazoo_couch compact automatically",
            "default": false
          },
          "default_chunk_size": {
            "type": "integer",
            "description": "kazoo_couch default chunk size"
          },
          "max_compacting_shards": {
            "type": "integer",
            "description": "kazoo_couch maximum compacting shards"
          },
          "max_compacting_views": {
            "type": "integer",
            "description": "kazoo_couch maximum compacting views"
          },
          "max_concurrent_docs_to_archive": {
            "type": "integer",
            "description": "kazoo_couch maximum concurrent docs to archive"
          },
          "max_wait_for_compaction_pids": {
            "type": "integer",
            "description": "kazoo_couch maximum wait for compaction pids"
          },
          "min_data_size": {
            "type": "integer",
            "description": "kazoo_couch minimum data size"
          },
          "min_ratio": {
            "type": "number",
            "description": "kazoo_couch minimum ratio"
          },
          "sleep_between_poll": {
            "type": "integer",
            "description": "kazoo_couch sleep between poll"
          },
          "use_bigcouch_direct": {
            "type": "boolean",
            "description": "kazoo_couch use bigcouch direct",
            "default": true
          }
        },
        "description": "Schema for kazoo_couch system_config"
      },
      "callflows.missed_call_alert": {
        "required": [
          "recipients"
        ],
        "type": "object",
        "properties": {
          "recipients": {
            "type": "array",
            "description": "One or more specific email addresses, Kazoo user ids or a combination of both",
            "items": {
              "required": [
                "id",
                "type"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "object",
                  "description": "The email address/user ID or the list of email addresses/user IDs based on specified type"
                },
                "type": {
                  "type": "string",
                  "description": "Controls if the ID of this object is a Kazoo user ID or an email address",
                  "enum": [
                    "user",
                    "email"
                  ]
                }
              }
            }
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the missed_call_alert callflow data object"
      },
      "kapi.notifications.register": {
        "required": [
          "Account-ID",
          "Realm",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorizing-ID": {
            "type": "string"
          },
          "Authorizing-Type": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "register"
            ]
          },
          "Event-Timestamp": {
            "type": "string"
          },
          "Expires": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Host": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Network-IP": {
            "type": "string"
          },
          "Network-Port": {
            "type": "string"
          },
          "Owner-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Suppress-Unregister-Notify": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Host": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.register"
      },
      "kapi.acdc_stats.status_outbound": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "outbound"
            ]
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_outbound"
      },
      "kapi.presence.mwi_unsolicited_update": {
        "required": [
          "Messages-New",
          "Messages-Saved",
          "To"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "mwi_unsolicited_update"
            ]
          },
          "Expires": {
            "type": "string"
          },
          "Extended-Presence-ID": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "Message-Account": {
            "type": "string"
          },
          "Messages-New": {
            "type": "integer"
          },
          "Messages-Saved": {
            "type": "integer"
          },
          "Messages-Urgent": {
            "type": "integer"
          },
          "Messages-Urgent-Saved": {
            "type": "integer"
          },
          "Messages-Waiting": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.mwi_unsolicited_update"
      },
      "api_auth": {
        "required": [
          "api_key"
        ],
        "type": "object",
        "properties": {
          "api_key": {
            "maxLength": 64,
            "minLength": 64,
            "type": "string",
            "description": "The Accounts API key"
          }
        },
        "description": "Provides an auth-token via an Account API key"
      },
      "kapi.dialplan.park": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "park"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Hangup-Cause": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Timeout": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.park"
      },
      "kapi.acdc_stats.status_update": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "object"
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_update"
      },
      "system_config.token_buckets": {
        "type": "object",
        "properties": {
          "default": {
            "type": "object",
            "properties": {
              "max_bucket_tokens": {
                "type": "integer",
                "description": "token_buckets maximum bucket tokens"
              }
            }
          },
          "inactivity_timeout_s": {
            "type": "integer",
            "description": "token_buckets inactivity timeout in seconds"
          },
          "tokens_fill_rate": {
            "type": "integer",
            "description": "token_buckets tokens fill rate"
          },
          "tokens_fill_time": {
            "type": "string",
            "description": "token_buckets tokens fill time",
            "default": "second"
          }
        },
        "description": "Schema for token_buckets system_config"
      },
      "kapi.delegate.delegate": {
        "required": [
          "Delegate-Message"
        ],
        "type": "object",
        "properties": {
          "Delegate-Message": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "delegate"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "job"
            ]
          }
        },
        "description": "AMQP API for delegate.delegate"
      },
      "kapi.conference.participant_volume_out": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Participant-ID",
          "Volume-Out-Level"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "participant_volume_out"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Participant-ID": {
            "type": "string"
          },
          "Volume-Out-Level": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.participant_volume_out"
      },
      "kapi.notifications.voicemail_full": {
        "required": [
          "Account-ID",
          "Max-Message-Count",
          "Message-Count",
          "Voicemail-Box"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "voicemail_full"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Max-Message-Count": {
            "type": "string"
          },
          "Message-Count": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Voicemail-Box": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.voicemail_full"
      },
      "system_config.ananke": {
        "type": "object",
        "properties": {
          "schedules": {
            "type": "array",
            "description": "ananke schedules",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "voicemail": {
            "type": "object",
            "properties": {
              "notify": {
                "type": "object",
                "properties": {
                  "callback": {
                    "type": "object",
                    "properties": {
                      "interval_s": {
                        "type": "integer",
                        "description": "ananke interval in seconds"
                      },
                      "timeout_s": {
                        "type": "integer",
                        "description": "ananke timeout in seconds"
                      },
                      "attempts": {
                        "type": "integer",
                        "description": "ananke attempts"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Schema for ananke system_config"
      },
      "callflows.prepend_cid": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Action to perform",
            "default": "prepend",
            "enum": [
              "reset",
              "prepend"
            ]
          },
          "apply_to": {
            "type": "string",
            "description": "Apply the prepend to which caller ID",
            "default": "current",
            "enum": [
              "original",
              "current"
            ]
          },
          "caller_id_name_prefix": {
            "type": "string",
            "description": "Prefix caller ID name",
            "default": ""
          },
          "caller_id_number_prefix": {
            "type": "string",
            "description": "Prefix caller ID number",
            "default": ""
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the prepend_cid callflow data object"
      },
      "kapi.resource.originate_started": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Data": {
            "type": "string"
          },
          "Application-Event": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string"
          },
          "Application-Response": {
            "type": "string"
          },
          "Billing-Seconds": {
            "type": "string"
          },
          "Bridge-Hangup-Cause": {
            "type": "string"
          },
          "Call-Debug": {
            "type": "string"
          },
          "Call-Direction": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Channel-Answer-State": {
            "type": "string"
          },
          "Channel-Call-State": {
            "type": "string"
          },
          "Channel-Created-Time": {
            "type": "integer"
          },
          "Channel-Debug": {
            "type": "string"
          },
          "Channel-Is-Loopback": {
            "type": "string"
          },
          "Channel-Loopback-Bowout": {
            "type": "string"
          },
          "Channel-Loopback-Bowout-Execute": {
            "type": "string"
          },
          "Channel-Loopback-Leg": {
            "type": "string"
          },
          "Channel-Loopback-Other-Leg-ID": {
            "type": "string"
          },
          "Channel-Moving": {
            "type": "string"
          },
          "Channel-Name": {
            "type": "string"
          },
          "Channel-State": {
            "type": "string"
          },
          "Conference-Config": {
            "type": "string"
          },
          "Conference-Name": {
            "type": "string"
          },
          "Connecting-Leg-A-UUID": {
            "type": "string"
          },
          "Connecting-Leg-B-UUID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "DTMF-Digit": {
            "type": "string"
          },
          "DTMF-Duration": {
            "type": "string"
          },
          "Detected-Tone": {
            "type": "string"
          },
          "Digits-Dialed": {
            "type": "string"
          },
          "Disposition": {
            "type": "string"
          },
          "Duration-Seconds": {
            "type": "string"
          },
          "Endpoint-Disposition": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "resource"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "originate_started"
            ]
          },
          "Fax-Info": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "From-Uri": {
            "type": "string"
          },
          "Hangup-Cause": {
            "type": "string"
          },
          "Hangup-Code": {
            "type": "string"
          },
          "Interaction-ID": {
            "type": "string"
          },
          "Intercepted-By": {
            "type": "string"
          },
          "Length": {
            "type": "string"
          },
          "Local-SDP": {
            "type": "string"
          },
          "Media-Recordings": {
            "type": "string"
          },
          "Media-Server": {
            "type": "string"
          },
          "Origination-Call-ID": {
            "type": "string"
          },
          "Other-Leg-Call-ID": {
            "type": "string"
          },
          "Other-Leg-Caller-ID-Name": {
            "type": "string"
          },
          "Other-Leg-Caller-ID-Number": {
            "type": "string"
          },
          "Other-Leg-Destination-Number": {
            "type": "string"
          },
          "Other-Leg-Direction": {
            "type": "string"
          },
          "Parking-Slot": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "Raw-Application-Data": {
            "type": "string"
          },
          "Raw-Application-Name": {
            "type": "string"
          },
          "Recording": {
            "type": "string"
          },
          "Remote-SDP": {
            "type": "string"
          },
          "Replaced-By": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Resigning-Peer-UUID": {
            "type": "string"
          },
          "Resigning-UUID": {
            "type": "string"
          },
          "Ringing-Seconds": {
            "type": "string"
          },
          "Root-Call-Interaction-ID": {
            "type": "string"
          },
          "Silence-Terminated": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-Nodename": {
            "type": "string"
          },
          "Switch-URI": {
            "type": "string"
          },
          "Switch-URL": {
            "type": "string"
          },
          "Target-Call-ID": {
            "type": "string"
          },
          "Terminator": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "To-Uri": {
            "type": "string"
          },
          "Transfer-Disposition": {
            "type": "string"
          },
          "Transfer-History": {
            "type": "string"
          },
          "Transfer-Source": {
            "type": "string"
          },
          "Transfer-To": {
            "type": "string"
          },
          "Transfer-Type": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          }
        },
        "description": "AMQP API for resource.originate_started"
      },
      "kapi.dialplan.audio_level": {
        "required": [
          "Action",
          "Application-Name",
          "Call-ID",
          "Insert-At",
          "Level",
          "Mode"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "audio_level"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Level": {
            "type": "string"
          },
          "Mode": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.audio_level"
      },
      "kapi.inspector.lookup_resp": {
        "required": [
          "Chunks"
        ],
        "type": "object",
        "properties": {
          "Analysis": {
            "type": "string"
          },
          "Chunks": {
            "type": "string"
          },
          "Dialog-Entities": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_inspector"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "lookup_resp"
            ]
          }
        },
        "description": "AMQP API for inspector.lookup_resp"
      },
      "system_config.notify.deregister": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.deregister default to"
          },
          "html_content_transfer_encoding": {
            "type": "string",
            "description": "notify.deregister html content transfer encoding",
            "default": "7BIT"
          },
          "text_content_transfer_encoding": {
            "type": "string",
            "description": "notify.deregister text content transfer encoding",
            "default": "7BIT"
          }
        },
        "description": "Schema for notify.deregister system_config"
      },
      "tasks": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Human-readable name of a task's input file"
          },
          "records": {
            "minItems": 1,
            "type": "array",
            "description": "List the rows of input data",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "description": "Input data to go through as part of a background task"
      },
      "storage.attachment.dropbox": {
        "required": [
          "handler",
          "settings"
        ],
        "type": "object",
        "properties": {
          "handler": {
            "type": "string",
            "description": "What handler module to use",
            "enum": [
              "dropbox"
            ]
          },
          "settings": {
            "required": [
              "oauth_doc_id"
            ],
            "type": "object",
            "properties": {
              "oauth_doc_id": {
                "minLength": 1,
                "type": "string",
                "description": "Doc ID in the system 'auth' database"
              }
            },
            "description": "Settings for the Dropbox account"
          }
        },
        "description": "schema for dropbox attachment entry"
      },
      "callflows.audio_macro.say": {
        "type": "object",
        "properties": {
          "gender": {
            "type": "string",
            "description": "The gender of the speaker",
            "enum": [
              "masculine",
              "feminine",
              "neuter"
            ]
          },
          "language": {
            "type": "string",
            "description": "The language of the speaker"
          },
          "method": {
            "type": "string",
            "description": "The method to use when saying the text",
            "enum": [
              "none",
              "pronounced",
              "iterated",
              "counted"
            ]
          },
          "terminators": {
            "type": "array",
            "description": "What DTMF can terminate playback of the audio",
            "items": {
              "type": "string"
            }
          },
          "text": {
            "type": "string",
            "description": "Text to say"
          },
          "type": {
            "type": "string",
            "description": "The type to use when saying the text",
            "enum": [
              "number",
              "items",
              "persons",
              "messages",
              "currency",
              "time_measurement",
              "current_date",
              "current_time",
              "current_date_time",
              "telephone_number",
              "telephone_extension",
              "url",
              "ip_address",
              "e-mail_address",
              "postal_address",
              "account_number",
              "name_spelled",
              "name_phonetic",
              "short_date_time"
            ]
          }
        },
        "description": "Validator for executing say commands"
      },
      "kapi.resource.originate_req": {
        "required": [
          "Application-Name",
          "Endpoints"
        ],
        "type": "object",
        "properties": {
          "Application-Data": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "park",
              "bridge",
              "transfer",
              "fax",
              "eavesdrop"
            ]
          },
          "Asserted-Identity-Name": {
            "type": "string"
          },
          "Asserted-Identity-Number": {
            "type": "string"
          },
          "Asserted-Identity-Realm": {
            "type": "string"
          },
          "B-Leg-Events": {
            "type": "string"
          },
          "Bridge-Actions": {
            "type": "object",
            "properties": {}
          },
          "Call-Restrictions-Enabled": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Confirm-Cancel-Timeout": {
            "type": "integer"
          },
          "Confirm-File": {
            "type": "string"
          },
          "Confirm-Key": {
            "type": "string"
          },
          "Continue-After": {
            "type": "string"
          },
          "Continue-On-Fail": {
            "type": "boolean"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Dial-Endpoint-Method": {
            "type": "string",
            "enum": [
              "single",
              "simultaneous"
            ]
          },
          "Eavesdrop-Call-ID": {
            "type": "string"
          },
          "Eavesdrop-Group-ID": {
            "type": "string"
          },
          "Eavesdrop-Mode": {
            "type": "string",
            "enum": [
              "listen",
              "whisper",
              "full"
            ]
          },
          "Enable-T38-Fax": {
            "type": "string"
          },
          "Enable-T38-Fax-Request": {
            "type": "string"
          },
          "Enable-T38-Gateway": {
            "type": "string"
          },
          "Enable-T38-Passthrough": {
            "type": "string"
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/kapi.dialplan.bridge_endpoint"
            }
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "resource"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "originate_req"
            ]
          },
          "Existing-Call-ID": {
            "type": "string"
          },
          "Export-Bridge-Variables": {
            "type": "string"
          },
          "Export-Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Export-Variables": {
            "type": "string"
          },
          "Fail-On-Single-Reject": {
            "type": "string"
          },
          "Fax-Identity-Name": {
            "type": "string"
          },
          "Fax-Identity-Number": {
            "type": "string"
          },
          "Fax-Timezone": {
            "type": "string"
          },
          "Force-Fax": {
            "type": "string"
          },
          "Hold-Media": {
            "type": "string"
          },
          "Ignore-Completed-Elsewhere": {
            "type": "string"
          },
          "Ignore-Early-Media": {
            "type": "string"
          },
          "Ignore-Forward": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string"
          },
          "Intercept-Unbridged-Only": {
            "type": "string"
          },
          "Loopback-Bowout": {
            "type": "string"
          },
          "Media": {
            "type": "string",
            "enum": [
              "process",
              "bypass",
              "auto"
            ]
          },
          "Originate-Immediate": {
            "type": "string"
          },
          "Origination-Call-ID": {
            "type": "string"
          },
          "Outbound-Call-ID": {
            "type": "string"
          },
          "Outbound-Callee-ID-Name": {
            "type": "string"
          },
          "Outbound-Callee-ID-Number": {
            "type": "string"
          },
          "Outbound-Caller-ID-Name": {
            "type": "string"
          },
          "Outbound-Caller-ID-Number": {
            "type": "string"
          },
          "Privacy-Hide-Name": {
            "type": "string"
          },
          "Privacy-Hide-Number": {
            "type": "string"
          },
          "Privacy-Method": {
            "type": "string"
          },
          "Ringback": {
            "type": "string"
          },
          "SIP-Invite-Parameters": {
            "type": "string"
          },
          "SIP-Transport": {
            "type": "string"
          },
          "Secure-RTP": {
            "type": "string"
          },
          "Simplify-Bowout": {
            "type": "boolean"
          },
          "Simplify-Loopback": {
            "type": "string"
          },
          "Start-Control-Process": {
            "type": "string"
          },
          "Timeout": {
            "type": "string"
          }
        },
        "description": "AMQP API for resource.originate_req"
      },
      "system_config.conferences": {
        "type": "object",
        "properties": {
          "bridge_password": {
            "type": "string",
            "description": "conferences bridge password"
          },
          "bridge_username": {
            "type": "string",
            "description": "conferences bridge username"
          },
          "controls": {
            "type": "object",
            "properties": {
              "default": {
                "type": "array",
                "description": "conferences controls default",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "description": "what action to assign to the star-code"
                    },
                    "digits": {
                      "type": "string",
                      "description": "what digit sequence to bind the action to"
                    }
                  }
                }
              },
              "page": {
                "type": "array",
                "description": "conferences controls page",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "description": "what action to assign to the star-code"
                    },
                    "digits": {
                      "type": "string",
                      "description": "what digit sequence to bind the action to"
                    }
                  }
                }
              }
            }
          },
          "entry_tone": {
            "type": "string",
            "description": "conferences entry tone",
            "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,659);v=-7;>=3;+=.1;%(800,0,659,783)"
          },
          "exit_tone": {
            "type": "string",
            "description": "conferences exit tone",
            "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,440);v=-7;>=3;+=.1;%(800,0,349,440)"
          },
          "moderator_entry_tone": {
            "type": "string",
            "description": "conferences moderator entry tone",
            "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,659);v=-7;>=3;+=.1;%(800,0,659,783)"
          },
          "moderator_exit_tone": {
            "type": "string",
            "description": "conferences moderator exit tone",
            "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,440);v=-7;>=3;+=.1;%(800,0,349,440)"
          },
          "number_timeout": {
            "type": "integer",
            "description": "conferences number timeout"
          },
          "participant_sanity_check_ms": {
            "type": "integer",
            "description": "conferences participant_sanity_check_ms"
          },
          "pin_timeout": {
            "type": "integer",
            "description": "conferences pin timeout"
          },
          "profiles": {
            "type": "object",
            "properties": {
              "default": {
                "type": "object",
                "properties": {},
                "description": "conferences default"
              },
              "page": {
                "type": "object",
                "properties": {},
                "description": "conferences page"
              }
            }
          },
          "review_name": {
            "type": "boolean",
            "description": "conferences review name",
            "default": false
          },
          "route_win_timeout": {
            "type": "integer",
            "description": "conferences route win timeout"
          },
          "support_name_announcement": {
            "type": "boolean",
            "description": "conferences support name announcement",
            "default": true
          }
        },
        "description": "Schema for conferences system_config"
      },
      "system_config.sysconf": {
        "type": "object",
        "properties": {
          "acl_request_timeout_fudge_ms": {
            "type": "integer",
            "description": "sysconf acl request timeout fudge in milliseconds"
          },
          "acl_request_timeout_ms": {
            "type": "integer",
            "description": "sysconf acl request timeout in milliseconds"
          }
        },
        "description": "Schema for sysconf system_config"
      },
      "kapi.dialplan.hangup": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "hangup"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Hangup-Cause": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Other-Leg-Only": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for dialplan.hangup"
      },
      "system_config.servers": {
        "type": "object",
        "properties": {
          "clock_timezone": {
            "type": "string",
            "description": "servers clock timezone",
            "default": "UTC"
          }
        },
        "description": "Schema for servers system_config"
      },
      "ip": {
        "required": [
          "host",
          "ip",
          "zone"
        ],
        "type": "object",
        "properties": {
          "host": {
            "minLength": 1,
            "type": "string",
            "description": "The hostname the IP belongs to"
          },
          "ip": {
            "type": "object",
            "description": "The IP addresses"
          },
          "zone": {
            "minLength": 1,
            "type": "string",
            "description": "The zone name the IP belongs to"
          }
        },
        "description": "IP address assigned to the cluster"
      },
      "kapi.notifications.cnam_request": {
        "required": [
          "Account-ID",
          "Cnam",
          "Number"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Acquired-For": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Cnam": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "cnam_request"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Local-Number": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Number-State": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.cnam_request"
      },
      "kapi.notifications.bill_reminder": {
        "required": [
          "Account-ID",
          "Due-Date",
          "Items",
          "Payment-Token",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "minLength": 1,
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Due-Date": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "bill_reminder"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Items": {
            "type": "string"
          },
          "Payment-Token": {
            "type": "string"
          },
          "Preview": {
            "type": "boolean"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.bill_reminder"
      },
      "system_config.callflow.dynamic_cid": {
        "type": "object",
        "properties": {
          "accept_prompt": {
            "type": "string",
            "description": "callflow.dynamic_cid accept prompt",
            "default": "tone_stream://%(250,50,440)"
          },
          "default_prompt": {
            "type": "string",
            "description": "callflow.dynamic_cid default prompt",
            "default": "dynamic-cid-enter_cid"
          },
          "max_digits": {
            "type": "integer",
            "description": "callflow.dynamic_cid max digits"
          },
          "min_digits": {
            "type": "integer",
            "description": "callflow.dynamic_cid min digits"
          },
          "reject_prompt": {
            "type": "string",
            "description": "callflow.dynamic_cid reject prompt",
            "default": "dynamic-cid-invalid_using_default"
          },
          "whitelist_regex": {
            "type": "string",
            "description": "callflow.dynamic_cid whitelist regex",
            "default": "\\d+"
          }
        },
        "description": "Schema for callflow.dynamic_cid system_config"
      },
      "kapi.conference.discovery_req": {
        "required": [
          "Call"
        ],
        "type": "object",
        "properties": {
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Conference-Doc": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Conference-Name": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "discovery_req"
            ]
          },
          "Moderator": {
            "type": "boolean"
          },
          "Play-Entry-Tone": {
            "type": "string"
          },
          "Play-Exit-Tone": {
            "type": "string"
          },
          "Play-Welcome": {
            "type": "boolean"
          },
          "Play-Welcome-Media": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.discovery_req"
      },
      "kapi.asr.resp": {
        "required": [
          "Response-Text"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "asr"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "resp"
            ]
          },
          "Response-Text": {
            "type": "string"
          }
        },
        "description": "AMQP API for asr.resp"
      },
      "kapi.acdc_stats.status_wrapup": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "wrapup"
            ]
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_wrapup"
      },
      "kapi.dialplan.say": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Language",
          "Method",
          "Say-Text",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "say"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Gender": {
            "type": "string",
            "enum": [
              "masculine",
              "feminine",
              "neuter"
            ]
          },
          "Group-ID": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Language": {
            "type": "string"
          },
          "Method": {
            "type": "string",
            "enum": [
              "none",
              "pronounced",
              "iterated",
              "counted"
            ]
          },
          "Say-Text": {
            "type": "string"
          },
          "Type": {
            "type": "string",
            "enum": [
              "number",
              "items",
              "persons",
              "messages",
              "currency",
              "time_measurement",
              "current_date",
              "current_time",
              "current_date_time",
              "telephone_number",
              "telephone_extension",
              "url",
              "ip_address",
              "e-mail_address",
              "postal_address",
              "account_number",
              "name_spelled",
              "name_phonetic",
              "short_date_time"
            ]
          }
        },
        "description": "AMQP API for dialplan.say"
      },
      "kapi.tasks.remove_req": {
        "required": [
          "Task-ID"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "tasks"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "remove_req"
            ]
          },
          "Task-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for tasks.remove_req"
      },
      "kapi.registration.query_resp": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "directory"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reg_query_resp"
            ]
          },
          "Fields": {
            "type": "string"
          },
          "Registrar-Age": {
            "type": "string"
          }
        },
        "description": "AMQP API for registration.query_resp"
      },
      "kapi.money.balance_req": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "transaction"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "balance_req"
            ]
          }
        },
        "description": "AMQP API for money.balance_req"
      },
      "callflows.response": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The SIP Hangup code to respond with"
          },
          "media": {
            "maxLength": 2048,
            "type": "string",
            "description": "Optional media file to play before responding with the hangup code/cause"
          },
          "message": {
            "type": "string",
            "description": "The SIP Hangup cause to respond with"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the Response callflow action"
      },
      "kapi.conference.event": {
        "required": [
          "Conference-ID",
          "Event",
          "Instance-ID"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Channel-Presence-ID": {
            "type": "string"
          },
          "Conference-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Conference-ID": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Event": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "event"
            ]
          },
          "Instance-ID": {
            "type": "string"
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.event"
      },
      "system_config.crossbar.acdc_call_stats": {
        "type": "object",
        "properties": {
          "maximum_bulk": {
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of call stats to load in a request"
          },
          "maximum_range": {
            "type": "integer",
            "description": "The maximum number of seconds between the start and end time of a call stats request"
          }
        },
        "description": "Schema for crossbar.acdc_call_stats system_config"
      },
      "system_config.ledgers": {
        "type": "object",
        "properties": {
          "registered_ledgers": {
            "type": "array",
            "description": "ledgers registered_ledgers",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "rollover_monthly_balance": {
            "type": "boolean",
            "description": "ledgers rollover_monthly_balance",
            "default": true
          }
        },
        "description": "Schema for ledgers system_config"
      },
      "system_config.notify.port_request": {
        "type": "object",
        "properties": {
          "default_from": {
            "type": "string",
            "description": "notify.port_request default from"
          },
          "default_to": {
            "type": "object",
            "description": "notify.port_request default to"
          }
        },
        "description": "Schema for notify.port_request system_config"
      },
      "system_configs": {
        "required": [
          "default"
        ],
        "type": "object",
        "properties": {
          "default": {
            "type": "object",
            "properties": {},
            "description": "default settings that apply to all nodes/zones if not defined"
          }
        },
        "description": "Schema for system_config documents"
      },
      "kapi.acdc_queue.member_connect_retry": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "connect_retry"
            ]
          },
          "Process-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_connect_retry"
      },
      "kapi.conf.doc_type_update": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Action": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "configuration"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "doc_type_update"
            ]
          },
          "Type": {
            "type": "string"
          }
        },
        "description": "AMQP API for conf.doc_type_update"
      },
      "system_config.crossbar.freeswitch": {
        "type": "object",
        "properties": {
          "files_to_include": {
            "type": "array",
            "description": "crossbar.freeswitch files to include",
            "items": {
              "type": "string"
            }
          },
          "offline_configuration_key": {
            "type": "string",
            "description": "crossbar.freeswitch offline configuration key"
          },
          "realm_templates_to_process": {
            "type": "array",
            "description": "crossbar.freeswitch realm templates to process",
            "items": {
              "type": "string"
            }
          },
          "templates_to_process": {
            "type": "array",
            "description": "crossbar.freeswitch templates to process",
            "items": {
              "type": "string"
            }
          },
          "work_dir": {
            "type": "string",
            "description": "crossbar.freeswitch work dir",
            "default": "/tmp/"
          }
        },
        "description": "Schema for crossbar.freeswitch system_config"
      },
      "kapi.acdc_agent.resume": {
        "required": [
          "Account-ID",
          "Agent-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "resume"
            ]
          },
          "Presence-ID": {
            "type": "string"
          },
          "Presence-State": {
            "type": "string",
            "enum": [
              "trying",
              "online",
              "offline",
              "early",
              "confirmed",
              "terminated"
            ]
          },
          "Queue-ID": {
            "type": "string"
          },
          "Time-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_agent.resume"
      },
      "system_config.callflow.resources": {
        "type": "object",
        "properties": {
          "default_asserted_identity": {
            "type": "boolean",
            "description": "When set to true, the asserted identity will have defaults and force the use of P-Asserted-Identity (instead of RPID) on all outbound offnet calls.  When set to false, P-Asserted-Identity is only used if explicitly set in the account/user/device hierarchy.",
            "default": false
          },
          "default_emit_account_id": {
            "type": "boolean",
            "description": "When set to true, all outbound offnet calls will include a SIP header X-Account-ID with a value of the Kazoo account UUID.",
            "default": false
          }
        },
        "description": "Schema for callflow.resources system_config"
      },
      "faxes": {
        "required": [
          "from_number",
          "to_number"
        ],
        "type": "object",
        "properties": {
          "attempts": {
            "maximum": 4,
            "minimum": 0,
            "type": "integer",
            "description": "The number of attempts made, this will be set by the system and reset automatically on put/post"
          },
          "document": {
            "required": [
              "url"
            ],
            "type": "object",
            "properties": {
              "referer": {
                "type": "string",
                "description": "The referer header to be used when fetching for transmission"
              },
              "content_type": {
                "type": "string",
                "description": "The content type header to be used when fetching for transmission as a post"
              },
              "method": {
                "type": "string",
                "description": "The method that should be used to retrieve the document",
                "default": "get",
                "enum": [
                  "get",
                  "post"
                ]
              },
              "host": {
                "type": "string",
                "description": "The host header to be used when fetching for transmission"
              },
              "content": {
                "maxLength": 256,
                "type": "string",
                "description": "The content provided in the body when fetching for transmission as a post"
              },
              "url": {
                "pattern": "^https?://",
                "type": "string",
                "description": "The url of the fax document"
              }
            },
            "description": "Parameters related to the storage of a fax document"
          },
          "from_name": {
            "type": "string",
            "description": "The sender name for the fax"
          },
          "from_number": {
            "type": "string",
            "description": "The sender number for the fax"
          },
          "notifications": {
            "type": "object",
            "properties": {
              "sms": {
                "type": "object",
                "properties": {
                  "send_to": {
                    "type": "object",
                    "description": "A list or string of sms recipient(s)"
                  }
                },
                "description": "SMS notifications"
              },
              "email": {
                "type": "object",
                "properties": {
                  "send_to": {
                    "type": "object",
                    "description": "A list or string of email recipient(s)"
                  }
                },
                "description": "Email notifications"
              }
            },
            "description": "Status notifications"
          },
          "retries": {
            "maximum": 4,
            "minimum": 0,
            "type": "integer",
            "description": "The number of times to retry"
          },
          "to_name": {
            "type": "string",
            "description": "The recipient name for the fax"
          },
          "to_number": {
            "type": "string",
            "description": "The recipient number for the fax"
          },
          "tx_result": {
            "type": "object",
            "properties": {
              "error_message": {
                "type": "string",
                "description": "A description of any error that occurred",
                "default": ""
              },
              "fax_error_correction": {
                "type": "boolean",
                "description": "True if fax error correction was used",
                "default": false
              },
              "fax_speed": {
                "type": "integer",
                "description": "The speed (Baud-Rate) achieved during transmission"
              },
              "fax_bad_rows": {
                "type": "integer",
                "description": "The number of bad rows"
              },
              "fax_receiver_id": {
                "type": "string",
                "description": "The receiver id reported by the remote fax device",
                "default": ""
              },
              "success": {
                "type": "boolean",
                "description": "True if the fax transmission was successful",
                "default": false
              },
              "time_elapsed": {
                "type": "integer",
                "description": "The amount of time from submission to completion"
              },
              "pages_sent": {
                "type": "integer",
                "description": "The number of pages transmitted"
              }
            },
            "description": "The result of a transmission attempt"
          }
        },
        "description": "Faxes API allows you to update and access fax jobs for both sending and receiving"
      },
      "kapi.sysconf.get_req": {
        "required": [
          "Category",
          "Key"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "string"
          },
          "Default": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "sysconf"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "get_req"
            ]
          },
          "Key": {
            "type": "string"
          },
          "Node": {
            "type": "string"
          }
        },
        "description": "AMQP API for sysconf.get_req"
      },
      "kapi.dialplan.bridge_endpoint_headers": {
        "required": [
          "Invite-Format"
        ],
        "type": "object",
        "properties": {
          "Auth-Password": {
            "type": "string"
          },
          "Auth-Realm": {
            "type": "string"
          },
          "Auth-User": {
            "type": "string"
          },
          "Bypass-Media": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Codecs": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Enable-T38-Fax": {
            "type": "string"
          },
          "Enable-T38-Fax-Request": {
            "type": "string"
          },
          "Enable-T38-Gateway": {
            "type": "string"
          },
          "Enable-T38-Passthrough": {
            "type": "string"
          },
          "Endpoint-Actions": {
            "type": "string"
          },
          "Endpoint-Delay": {
            "type": "string"
          },
          "Endpoint-Options": {
            "type": "string"
          },
          "Endpoint-Progress-Timeout": {
            "type": "integer"
          },
          "Endpoint-Timeout": {
            "type": "integer"
          },
          "Endpoint-Type": {
            "type": "string"
          },
          "Failover": {
            "type": "string"
          },
          "Force-Fax": {
            "type": "string"
          },
          "Forward-IP": {
            "type": "string"
          },
          "Hold-Media": {
            "type": "string"
          },
          "Ignore-Completed-Elsewhere": {
            "type": "string"
          },
          "Ignore-Early-Media": {
            "type": "string"
          },
          "Invite-Format": {
            "type": "string"
          },
          "Loopback-Bowout": {
            "type": "string"
          },
          "Outbound-Call-ID": {
            "type": "string"
          },
          "Outbound-Callee-ID-Name": {
            "type": "string"
          },
          "Outbound-Callee-ID-Number": {
            "type": "string"
          },
          "Outbound-Caller-ID-Name": {
            "type": "string"
          },
          "Outbound-Caller-ID-Number": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "Privacy-Hide-Name": {
            "type": "string"
          },
          "Privacy-Hide-Number": {
            "type": "string"
          },
          "Privacy-Method": {
            "type": "string"
          },
          "Proxy-IP": {
            "type": "string"
          },
          "Proxy-Zone": {
            "type": "string"
          },
          "Route": {
            "type": "string"
          },
          "SIP-Interface": {
            "type": "string"
          },
          "SIP-Invite-Parameters": {
            "type": "string"
          },
          "SIP-Transport": {
            "type": "string"
          },
          "Simplify-Loopback": {
            "type": "string"
          },
          "To-DID": {
            "type": "string"
          },
          "To-IP": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-URI": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "To-Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.bridge_endpoint_headers"
      },
      "kapi.sms.message_endpoint": {
        "type": "object",
        "properties": {
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Endpoint-Options": {
            "type": "object",
            "properties": {}
          },
          "Endpoint-Type": {
            "type": "string",
            "enum": [
              "sip",
              "xmpp",
              "smpp",
              "http",
              "amqp"
            ]
          },
          "SIP-Headers": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "AMQP API for sms.message_endpoint"
      },
      "system_config.pivot.twiml": {
        "type": "object",
        "properties": {
          "conference_moh": {
            "type": "string",
            "description": "Default MOH for conferences dialed via TwiML",
            "default": "$${hold_music}"
          }
        },
        "description": "Schema for pivot.twiml system_config"
      },
      "kapi.notifications.port_unconfirmed": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorized-By": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "port_unconfirmed"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Local-Number": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Number-State": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "Port-Request-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reason": {
            "type": "object",
            "properties": {}
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.port_unconfirmed"
      },
      "system_config.services": {
        "type": "object",
        "properties": {
          "cascade_commits_to_master_account": {
            "type": "boolean",
            "description": "services cascade_commits_to_master_account",
            "default": true
          },
          "debug_services_quantities": {
            "type": "boolean",
            "description": "services debug_services_quantities",
            "default": false
          },
          "default_allow_updates": {
            "type": "boolean",
            "description": "services default allow updates",
            "default": true
          },
          "enforce_good_standing": {
            "type": "boolean",
            "description": "services enforce_good_standing",
            "default": false
          },
          "get_items_from_quantities": {
            "type": "boolean",
            "description": "services get_items_from_quantities"
          },
          "hydrate_cascade_commits": {
            "type": "boolean",
            "description": "When an account makes a change it triggers a propagation up the account hiearchy updating the cascade quantities, if this is set to false the cascade quantities are summed with the account update deltas.  If this is set to true then the views will be invoked to fully reconcile the quantities (hydrate) during the cascade commits, a more expensive DB operation but provides self-corrective quantities.",
            "default": true
          },
          "master_account_bookkeeper": {
            "type": "string",
            "description": "services master account bookkeeper",
            "default": "kz_bookkeeper_local"
          },
          "merge_strategy_priority": {
            "type": "object",
            "properties": {},
            "description": "the object keys map to merge strategies and the values are expected to be an integer defining the merge priority between strategies"
          },
          "modules": {
            "type": "array",
            "description": "services modules",
            "items": {
              "type": "string"
            }
          },
          "reseller_bookkeeper_lookup": {
            "type": "boolean",
            "description": "allow resellers configure bookkeeper for children billing",
            "default": false
          },
          "scan_rate": {
            "type": "integer",
            "description": "services scan rate"
          },
          "should_save_master_audit_logs": {
            "type": "boolean",
            "description": "services should save master audit logs",
            "default": false
          },
          "support_billing_id": {
            "type": "boolean",
            "description": "services support billing id",
            "default": true
          },
          "sync_buffer_period": {
            "type": "integer",
            "description": "services sync buffer period"
          },
          "sync_services": {
            "type": "boolean",
            "description": "services sync services",
            "default": false
          }
        },
        "description": "Schema for services system_config"
      },
      "metaflows.play": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Media ID to play"
          },
          "leg": {
            "type": "string",
            "description": "Leg to play the media to",
            "default": "both",
            "enum": [
              "self",
              "peer",
              "both"
            ]
          }
        },
        "description": "Skeleton JSON schema"
      },
      "kapi.conference.conference_error": {
        "required": [
          "Conference-ID",
          "Error-Message",
          "Request"
        ],
        "type": "object",
        "properties": {
          "Conference-ID": {
            "type": "string"
          },
          "Error-Message": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "error"
            ]
          },
          "Request": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.conference_error"
      },
      "kapi.asr.error": {
        "required": [
          "Error-Code",
          "Error-Msg"
        ],
        "type": "object",
        "properties": {
          "Error-Code": {
            "type": "string"
          },
          "Error-Msg": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "asr"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "error"
            ]
          }
        },
        "description": "AMQP API for asr.error"
      },
      "kapi.conference.config_req": {
        "required": [
          "Profile",
          "Request"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Controls": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "config_req"
            ]
          },
          "Profile": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.config_req"
      },
      "kapi.route.resp_route": {
        "required": [
          "Invite-Format"
        ],
        "type": "object",
        "properties": {
          "Auth-Password": {
            "type": "string"
          },
          "Auth-User": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Type": {
            "type": "string",
            "enum": [
              "from",
              "rpid",
              "pid"
            ]
          },
          "Codecs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Context": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Invite-Format": {
            "type": "string",
            "enum": [
              "username",
              "e164",
              "npan",
              "1npan",
              "route",
              "loopback",
              "contact"
            ]
          },
          "Media": {
            "type": "string",
            "enum": [
              "process",
              "bypass",
              "auto"
            ]
          },
          "Progress-Timeout": {
            "type": "integer"
          },
          "Proxy-Via": {
            "type": "string"
          },
          "Rate": {
            "type": "string"
          },
          "Rate-Increment": {
            "type": "string"
          },
          "Rate-Minimum": {
            "type": "string"
          },
          "Rate-NoCharge-Time": {
            "type": "integer"
          },
          "Route": {
            "type": "string"
          },
          "Surcharge": {
            "type": "string"
          },
          "To-DID": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "Weight-Cost": {
            "type": "string"
          },
          "Weight-Location": {
            "type": "string"
          }
        },
        "description": "AMQP API for route.resp_route"
      },
      "kapi.acdc_stats.current_calls_err": {
        "required": [
          "Error-Reason"
        ],
        "type": "object",
        "properties": {
          "Error-Reason": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "current_calls_err"
            ]
          }
        },
        "description": "AMQP API for acdc_stats.current_calls_err"
      },
      "kapi.dialplan.unbridge": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "unbridge"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Leg": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "Both"
            ]
          }
        },
        "description": "AMQP API for dialplan.unbridge"
      },
      "system_config.notify.low_balance": {
        "type": "object",
        "properties": {
          "default_enabled": {
            "type": "boolean",
            "description": "notify.low_balance default enabled",
            "default": false
          },
          "threshold": {
            "type": "number",
            "description": "default threshold that will trigger a low balance notification"
          }
        },
        "description": "Schema for notify.low_balance system_config"
      },
      "system_config.sms_command": {
        "type": "object",
        "properties": {
          "application_timeout": {
            "type": "integer",
            "description": "sms_command application timeout"
          },
          "collect_timeout": {
            "type": "integer",
            "description": "sms_command collect timeout"
          },
          "message_timeout": {
            "type": "integer",
            "description": "sms_command message timeout"
          }
        },
        "description": "Schema for sms_command system_config"
      },
      "kapi.dialplan.execute_extension": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Extension"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "execute_extension"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Extension": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Reset": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.execute_extension"
      },
      "kapi.authn.resp": {
        "required": [
          "Auth-Method",
          "Auth-Password"
        ],
        "type": "object",
        "properties": {
          "Access-Group": {
            "type": "string"
          },
          "Auth-Method": {
            "type": "string",
            "enum": [
              "password",
              "ip",
              "a1-hash",
              "error",
              "gsm",
              "nonce",
              "a3a8"
            ]
          },
          "Auth-Nonce": {
            "type": "string"
          },
          "Auth-Password": {
            "type": "string"
          },
          "Auth-Username": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "directory"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "authn_resp"
            ]
          },
          "Expires": {
            "type": "string"
          },
          "Register-Overwrite-Notify": {
            "type": "string"
          },
          "Suppress-Unregister-Notifications": {
            "type": "string"
          },
          "Tenant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for authn.resp"
      },
      "system_config.crossbar.devices": {
        "type": "object",
        "properties": {
          "allow_aggregates": {
            "type": "boolean",
            "description": "crossbar.devices allow aggregates",
            "default": true
          },
          "provisioner_host": {
            "type": "string",
            "description": "crossbar.devices provisioner host"
          },
          "provisioner_referer": {
            "type": "string",
            "description": "crossbar.devices provisioner referer"
          },
          "provisioning_host": {
            "type": "string",
            "description": "crossbar.devices provisioning host"
          },
          "provisioning_referer": {
            "type": "string",
            "description": "crossbar.devices provisioning referer"
          },
          "provisioning_type": {
            "type": "string",
            "description": "crossbar.devices provisioning type"
          },
          "provisioning_url": {
            "type": "string",
            "description": "crossbar.devices provisioning url"
          }
        },
        "description": "Schema for crossbar.devices system_config"
      },
      "kapi.notifications.port_cancel": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorized-By": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "port_cancel"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Local-Number": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Number-State": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "Port-Request-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reason": {
            "type": "object",
            "properties": {}
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.port_cancel"
      },
      "vm_message_metadata": {
        "type": "object",
        "properties": {
          "call_id": {
            "type": "string",
            "description": "The SIP call-id"
          },
          "caller_id_name": {
            "maxLength": 35,
            "type": "string",
            "description": "The caller id name"
          },
          "caller_id_number": {
            "maxLength": 35,
            "type": "string",
            "description": "The caller id number"
          },
          "folder": {
            "type": "string",
            "description": "The folder the message belongs to",
            "enum": [
              "deleted",
              "saved",
              "new"
            ]
          },
          "from": {
            "type": "string",
            "description": "The SIP from header"
          },
          "length": {
            "type": "integer"
          },
          "timestamp": {
            "type": "integer",
            "description": "The UTC timestamp, in Gregorian seconds, that the voicemail was left on"
          },
          "to": {
            "type": "string",
            "description": "The SIP to header"
          }
        },
        "description": "Schema for a voicemail message metadata"
      },
      "sms": {
        "required": [
          "body",
          "to"
        ],
        "type": "object",
        "properties": {
          "body": {
            "maxLength": 700,
            "minLength": 1,
            "type": "string",
            "description": "text message"
          },
          "from": {
            "type": "string",
            "description": "caller-id-number, taken from user if absent"
          },
          "scheduled": {
            "type": "integer",
            "description": "The timestamp to start delivering the message"
          },
          "to": {
            "type": "string",
            "description": "callee-id-number"
          }
        },
        "description": "sms document"
      },
      "kapi.tasks.lookup_resp": {
        "required": [
          "Help"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "tasks"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "lookup_resp"
            ]
          },
          "Help": {
            "type": "string"
          }
        },
        "description": "AMQP API for tasks.lookup_resp"
      },
      "kapi.acdc_stats.status_paused": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "paused"
            ]
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_paused"
      },
      "kapi.tasks.stop_req": {
        "required": [
          "Task-ID"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "tasks"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "stop_req"
            ]
          },
          "Task-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for tasks.stop_req"
      },
      "callflows.set": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the set callflow data object"
      },
      "metaflows.hold_control": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "How to manipulate the hold on the call",
            "default": "toggle",
            "enum": [
              "hold",
              "unhold",
              "toggle"
            ]
          }
        },
        "description": "Control the hold on a call"
      },
      "system_config.qubicle": {
        "type": "object",
        "properties": {
          "enable_event_call_props": {
            "type": "boolean",
            "description": "qubicle enable_event_call_props",
            "default": false
          }
        },
        "description": "Schema for qubicle system_config"
      },
      "kapi.conference.recordstop": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Media-Name"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "recordstop"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Media-Name": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.recordstop"
      },
      "callflows.move": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the move callflow data object"
      },
      "kapi.fax.start_account": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "start"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "account"
            ]
          }
        },
        "description": "AMQP API for fax.start_account"
      },
      "system_config.crossbar.phone_numbers": {
        "type": "object",
        "properties": {
          "default_country": {
            "type": "string",
            "description": "crossbar.phone_numbers default country",
            "default": "US"
          },
          "phonebook_url": {
            "type": "string",
            "description": "crossbar.phone_numbers phonebook url"
          }
        },
        "description": "Schema for crossbar.phone_numbers system_config"
      },
      "system_config.notify.fax": {
        "type": "object",
        "properties": {
          "attachment_format": {
            "type": "string",
            "description": "notify.fax attachment format",
            "default": "pdf"
          },
          "tiff_to_pdf_conversion_command": {
            "type": "string",
            "description": "notify.fax tiff to pdf conversion command",
            "default": "tiff2pdf -o ~s ~s &> /dev/null && echo -n \"success\""
          }
        },
        "description": "Schema for notify.fax system_config"
      },
      "kapi.rate.req": {
        "required": [
          "To-DID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Authorizing-Type": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Direction": {
            "type": "string",
            "enum": [
              "inbound",
              "outbound"
            ]
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "rate"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "req"
            ]
          },
          "From-DID": {
            "type": "string"
          },
          "Options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Outbound-Flags": {
            "type": "string"
          },
          "Ratedeck-ID": {
            "type": "string"
          },
          "Resource-ID": {
            "type": "string"
          },
          "Resource-Type": {
            "type": "string",
            "enum": [
              "audio",
              "video",
              "sms"
            ]
          },
          "Send-Empty": {
            "type": "boolean"
          },
          "To-DID": {
            "type": "string"
          }
        },
        "description": "AMQP API for rate.req"
      },
      "kapi.conference.set": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Parameter",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "set"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Parameter": {
            "type": "string",
            "enum": [
              "Max-Members",
              "Caller-ID-Name",
              "Caller-ID-Number"
            ]
          },
          "Value": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.set"
      },
      "kapi.dialplan.event_actions": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Event-Actions"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "event_actions"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Actions": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.event_actions"
      },
      "metaflows.relate": {
        "required": [
          "conference_id",
          "other_participant",
          "participant_id"
        ],
        "type": "object",
        "properties": {
          "conference_id": {
            "type": "string",
            "description": "The ID of the conference"
          },
          "other_participant": {
            "type": "object",
            "description": "The other participant ID to relate"
          },
          "participant_id": {
            "type": "object",
            "description": "The participant ID to relate"
          },
          "relationship": {
            "type": "string",
            "description": "The relationship to establish between the two participants",
            "default": "clear",
            "enum": [
              "deaf",
              "clear",
              "mute"
            ]
          }
        },
        "description": "Relate two participants to each other in a conference"
      },
      "kapi.nodes.advertise": {
        "required": [
          "Expires"
        ],
        "type": "object",
        "properties": {
          "Channels": {
            "type": "string"
          },
          "Conferences": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "nodes"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "advertise"
            ]
          },
          "Expires": {
            "type": "string"
          },
          "Globals": {
            "type": "string"
          },
          "Media-Servers": {
            "type": "string"
          },
          "Node-Info": {
            "type": "string"
          },
          "Ports": {
            "type": "string"
          },
          "Processes": {
            "type": "string"
          },
          "Registrations": {
            "type": "string"
          },
          "Used-Memory": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "WhApps": {
            "type": "string"
          },
          "Zone": {
            "type": "string"
          },
          "md5": {
            "type": "string"
          }
        },
        "description": "AMQP API for nodes.advertise"
      },
      "callflows.user": {
        "type": "object",
        "properties": {
          "can_call_self": {
            "type": "boolean",
            "description": "Toggle whether devices of this use can call each other"
          },
          "can_text_self": {
            "type": "boolean",
            "description": "Toggle whether devices of this use can text each other"
          },
          "custom_sip_headers": {
            "type": "object",
            "properties": {},
            "description": "KV Object where the name is the SIP header and the value is the SIP field"
          },
          "delay": {
            "type": "integer",
            "description": "How long to delay the endpoint(s) before bridging"
          },
          "fail_on_single_reject": {
            "type": "boolean",
            "description": "If any leg rejects the call, cancel all other legs"
          },
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "static_invite": {
            "type": "string",
            "description": "Override the SIP Username"
          },
          "strategy": {
            "type": "string",
            "description": "Ringing strategy for the endpoint(s)",
            "default": "simultaneous",
            "enum": [
              "simultaneous",
              "single"
            ]
          },
          "suppress_clid": {
            "type": "boolean",
            "description": "Toggle whether to suppress caller ID"
          },
          "timeout": {
            "type": "integer",
            "description": "Timeout, in seconds, to wait for answer"
          }
        },
        "description": "Validator for the user callflow data object"
      },
      "kapi.globals.send": {
        "required": [
          "Message",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "globals"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "send"
            ]
          },
          "Message": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "description": "AMQP API for globals.send"
      },
      "callflows.camping_feature": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the camping_feature callflow data object"
      },
      "callflows.fax_detect": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "How long, in seconds, to try detecting fax tones"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the fax_detect callflow data object"
      },
      "webhooks": {
        "required": [
          "hook",
          "name",
          "uri"
        ],
        "type": "object",
        "properties": {
          "custom_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "These properties will be added to the event and will overwrite existing values."
          },
          "enabled": {
            "type": "boolean",
            "description": "Is the webhook enabled and running",
            "default": true
          },
          "format": {
            "type": "string",
            "description": "What Body format to use when sending the webhook. only valid for 'post' & 'put' verbs",
            "default": "form-data",
            "enum": [
              "form-data",
              "json"
            ]
          },
          "hook": {
            "type": "string",
            "description": "The trigger event for a request being made to 'callback_uri'."
          },
          "http_verb": {
            "type": "string",
            "description": "What HTTP method to use when contacting the server",
            "default": "post",
            "enum": [
              "get",
              "post",
              "put"
            ]
          },
          "include_internal_legs": {
            "type": "boolean",
            "description": "Whether to filter out call legs that are internal to the system (loopback)",
            "default": true
          },
          "include_subaccounts": {
            "type": "boolean",
            "description": "Should the webhook be fired for subaccount events."
          },
          "name": {
            "type": "string",
            "description": "A friendly name for the webhook"
          },
          "retries": {
            "maximum": 4,
            "minimum": 0,
            "type": "integer",
            "description": "Retry the request this many times (if it fails)"
          },
          "uri": {
            "type": "string",
            "description": "The 3rd party URI to call out to an event",
            "format": "uri"
          }
        },
        "description": "Web Hooks are subscriptions to allowed events that, when the event occurs, the event data is sent to the uri set in the Web Hook document."
      },
      "kapi.asr.req": {
        "required": [
          "ASR-Account-ID",
          "ASR-Account-Password",
          "ASR-Endpoint",
          "Call-ID",
          "Control-Queue"
        ],
        "type": "object",
        "properties": {
          "ASR-Account-ID": {
            "type": "string"
          },
          "ASR-Account-Password": {
            "type": "string"
          },
          "ASR-Endpoint": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "asr"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "req"
            ]
          },
          "Language": {
            "type": "string"
          },
          "Stream-Response": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for asr.req"
      },
      "kapi.conference.unlock": {
        "required": [
          "Application-Name",
          "Conference-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "unlock"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          }
        },
        "description": "AMQP API for conference.unlock"
      },
      "kapi.discovery.number_req": {
        "required": [
          "Number"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "discovery"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "number"
            ]
          },
          "Number": {
            "type": "string"
          }
        },
        "description": "AMQP API for discovery.number_req"
      },
      "kapi.notifications.system_alert": {
        "required": [
          "Message",
          "Subject"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Details": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "system_alert"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Line": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "Module": {
            "type": "string"
          },
          "Node": {
            "type": "string"
          },
          "Pid": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Request-ID": {
            "type": "string"
          },
          "Section": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.system_alert"
      },
      "kapi.conference.kick": {
        "required": [
          "Application-Name",
          "Conference-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "kick"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.kick"
      },
      "kapi.authz.authz_resp": {
        "required": [
          "Call-ID",
          "Is-Authorized"
        ],
        "type": "object",
        "properties": {
          "Account-Billing": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Call-Direction": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "authz"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "authz_resp"
            ]
          },
          "Global-Resource": {
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          "Is-Authorized": {
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          "Other-Leg-Call-ID": {
            "type": "string"
          },
          "Reseller-Billing": {
            "type": "string"
          },
          "Reseller-ID": {
            "type": "string"
          },
          "Soft-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for authz.authz_resp"
      },
      "callflows.device": {
        "type": "object",
        "properties": {
          "can_call_self": {
            "type": "boolean",
            "description": "Toggle whether devices of the same owner can call each other"
          },
          "can_text_self": {
            "type": "boolean",
            "description": "Toggle whether devices of the same owner can text each other"
          },
          "custom_sip_headers": {
            "type": "object",
            "properties": {},
            "description": "KV Object where the name is the SIP header and the value is the SIP field"
          },
          "delay": {
            "type": "integer",
            "description": "How long to delay ringing the device, in seconds"
          },
          "dial_strategy": {
            "type": "string",
            "description": "Dial strategy for the device",
            "default": "simultaneous",
            "enum": [
              "simultaneous",
              "single"
            ]
          },
          "id": {
            "type": "string",
            "description": "Device ID"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "static_invite": {
            "type": "string",
            "description": "Override the SIP Username"
          },
          "suppress_clid": {
            "type": "boolean",
            "description": "Suppress sending caller ID"
          },
          "timeout": {
            "type": "integer",
            "description": "Time, in seconds, to wait for device to bridge"
          }
        }
      },
      "kapi.acdc_queue.member_connect_resp": {
        "required": [
          "Agent-ID"
        ],
        "type": "object",
        "properties": {
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "connect_resp"
            ]
          },
          "Idle-Time": {
            "type": "integer"
          },
          "Process-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_connect_resp"
      },
      "system_config.fax": {
        "type": "object",
        "properties": {
          "allow_all_addresses_when_empty": {
            "type": "boolean",
            "description": "fax allow all addresses when empty",
            "default": false
          },
          "allowed_content_types": {
            "type": "array",
            "description": "fax allowed content types",
            "items": {
              "type": "object"
            }
          },
          "cloud_registration_pool_interval": {
            "type": "integer",
            "description": "fax cloud registration pool interval"
          },
          "default_compare_field": {
            "type": "string",
            "description": "fax default compare field",
            "default": "result_cause"
          },
          "default_retry_count": {
            "type": "integer",
            "description": "fax default retry count"
          },
          "default_retry_period": {
            "type": "integer",
            "description": "fax default retry period"
          },
          "default_smtp_domain": {
            "type": "string",
            "description": "fax default SMTP domain",
            "default": "fax.kazoo.io"
          },
          "delete_empty_faxes": {
            "type": "boolean",
            "description": "fax delete empty faxes",
            "default": false
          },
          "denied_content_types": {
            "type": "array",
            "description": "fax denied content types",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "endpoint_timeout": {
            "type": "integer",
            "description": "fax endpoint timeout"
          },
          "ensure_valid_caller_id": {
            "type": "boolean",
            "description": "fax ensure valid caller id",
            "default": true
          },
          "fax_file_path": {
            "type": "string",
            "description": "fax fax file path",
            "default": "/tmp/"
          },
          "fax_settings": {
            "type": "object",
            "properties": {},
            "description": "fax fax settings"
          },
          "file_cache_path": {
            "type": "string",
            "description": "fax file cache path",
            "default": "/tmp/"
          },
          "ignore_early_media": {
            "type": "boolean",
            "description": "fax ignore early media",
            "default": false
          },
          "image_min_size": {
            "type": "string",
            "description": "fax image minimum size",
            "default": "700x10"
          },
          "image_size_cmd_format": {
            "type": "string",
            "description": "fax image size cmd format",
            "default": "echo -n `identify -format \"%[fx:w]x%[fx:h]\" ~s`"
          },
          "inbound_t38_default": {
            "type": "string",
            "description": "fax inbound t38 default",
            "default": "true"
          },
          "log_faxbox_errors": {
            "type": "boolean",
            "description": "fax log faxbox errors",
            "default": true
          },
          "max_outbound": {
            "type": "integer",
            "description": "fax max outbound"
          },
          "max_storage_retry": {
            "type": "integer",
            "description": "fax maximum storage retry"
          },
          "port": {
            "type": "integer",
            "description": "fax port"
          },
          "report_anonymous_system_errors": {
            "type": "boolean",
            "description": "fax report anonymous system errors",
            "default": false
          },
          "report_faxbox_system_errors": {
            "type": "boolean",
            "description": "fax report faxbox system errors",
            "default": true
          },
          "report_smtp_errors": {
            "type": "boolean",
            "description": "Report SMTP-related errors via notifications",
            "default": true
          },
          "reschedule": {
            "type": "object",
            "properties": {},
            "description": "fax reschedule"
          },
          "serialize_outbound_numbers": {
            "type": "boolean",
            "description": "Serialize fax transmissions by outbound number globally",
            "default": true
          },
          "smtp_max_msg_size": {
            "type": "integer",
            "description": "fax smtp maximum msg size"
          },
          "smtp_port": {
            "type": "integer",
            "description": "fax smtp port"
          },
          "smtp_sessions": {
            "type": "integer",
            "description": "fax smtp sessions"
          },
          "store_fax_pdf": {
            "type": "boolean",
            "description": "store the post processed fax document",
            "default": true
          },
          "store_fax_tiff": {
            "type": "boolean",
            "description": "store a pdf copy of the post processed fax document",
            "default": true
          },
          "store_url_document": {
            "type": "boolean",
            "description": "store the document url result in the database",
            "default": true
          },
          "wait_for_fax_timeout_ms": {
            "type": "integer",
            "description": "fax wait for fax timeout in milliseconds"
          },
          "workers": {
            "type": "integer",
            "description": "fax workers"
          },
          "xmpp_interval": {
            "type": "integer",
            "description": "fax xmpp interval"
          }
        },
        "description": "Schema for fax system_config"
      },
      "callflows.ring_group_toggle": {
        "required": [
          "action",
          "callflow_id"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "What the module should do. Options are 'login' and 'logout'",
            "enum": [
              "login",
              "logout"
            ]
          },
          "callflow_id": {
            "type": "string",
            "description": "The callflow containing the ring group to log in and out of"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the ring_group_toggle callflow data object"
      },
      "callflows.group_pickup_feature": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "type": {
            "type": "string",
            "description": "The type of collection to pickup",
            "enum": [
              "group",
              "user",
              "device",
              "extension"
            ]
          }
        },
        "description": "Validator for the group_pickup_feature callflow data object"
      },
      "kapi.dialplan.record_call": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Record-Action"
        ],
        "type": "object",
        "properties": {
          "Additional-Headers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "record_call"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Channels-As-Stereo": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Follow-Transfer": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Media-Name": {
            "type": "string"
          },
          "Media-Recorder": {
            "type": "string"
          },
          "Media-Recording-Endpoint-ID": {
            "type": "string"
          },
          "Media-Recording-ID": {
            "type": "string"
          },
          "Media-Recording-Origin": {
            "type": "string"
          },
          "Media-Transfer-Destination": {
            "type": "string"
          },
          "Media-Transfer-Method": {
            "type": "string"
          },
          "Record-Action": {
            "type": "string",
            "enum": [
              "mask",
              "unmask",
              "start",
              "stop"
            ]
          },
          "Record-Min-Sec": {
            "type": "string"
          },
          "Record-Sample-Rate": {
            "type": "integer"
          },
          "Recording-Variables": {
            "type": "string"
          },
          "Time-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for dialplan.record_call"
      },
      "kapi.acdc_stats.current_calls_req": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "End-Range": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "current_calls_req"
            ]
          },
          "Queue-ID": {
            "type": "string"
          },
          "Start-Range": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_stats.current_calls_req"
      },
      "kapi.acdc_stats.call_abandoned": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Abandon-Reason": {
            "type": "string"
          },
          "Abandon-Timestamp": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_call_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "abandoned"
            ]
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_stats.call_abandoned"
      },
      "kapi.conference.search_resp": {
        "required": [
          "Conferences"
        ],
        "type": "object",
        "properties": {
          "Answered": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Conferences": {
            "type": "string"
          },
          "Dynamic": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "search_resp"
            ]
          },
          "Locked": {
            "type": "string"
          },
          "Participant-Count": {
            "type": "string"
          },
          "Participants": {
            "type": "string"
          },
          "Run-Time": {
            "type": "integer"
          },
          "Running": {
            "type": "string"
          },
          "Start-Time": {
            "type": "integer"
          },
          "Switch-External-IP": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-URL": {
            "type": "string"
          },
          "UUID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.search_resp"
      },
      "kapi.presence.probe": {
        "required": [
          "Event-Package",
          "Realm",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "probe"
            ]
          },
          "Event-Package": {
            "type": "string"
          },
          "Expires": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.probe"
      },
      "metaflows.record_call": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Whether to start/stop the recording",
            "default": "toggle",
            "enum": [
              "mask",
              "unmask",
              "start",
              "stop",
              "toggle"
            ]
          },
          "format": {
            "type": "string",
            "description": "What format to store the recording",
            "enum": [
              "mp3",
              "wav"
            ]
          },
          "label": {
            "type": "string",
            "description": "Add a custom label to the recording"
          },
          "media_name": {
            "type": "string",
            "description": "Name of the recording file"
          },
          "method": {
            "type": "string",
            "description": "HTTP method if using an HTTP destination",
            "enum": [
              "put",
              "post"
            ]
          },
          "origin": {
            "type": "string",
            "description": "Track how the recording was started"
          },
          "record_min_sec": {
            "type": "integer",
            "description": "Minimum number of seconds recorded to consider it a valid recording"
          },
          "record_on_answer": {
            "type": "boolean",
            "description": "Whether to start recording when the leg is answered",
            "default": false
          },
          "record_on_bridge": {
            "type": "boolean",
            "description": "Whether to start recording when the leg is bridged",
            "default": false
          },
          "record_sample_rate": {
            "type": "integer",
            "description": "Sampling rate for the recording"
          },
          "time_limit": {
            "type": "integer",
            "description": "How long to allow the recording, in seconds"
          },
          "url": {
            "type": "string",
            "description": "HTTP URL to send the finished recording"
          }
        },
        "description": "Start a call recording"
      },
      "auth.app": {
        "required": [
          "client_id",
          "provider",
          "secret"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "client_id, usually application id for OAuth providers"
          },
          "email": {
            "type": "string",
            "description": "email for application"
          },
          "provider": {
            "type": "string",
            "description": "provider"
          },
          "secret": {
            "type": "string",
            "description": "secret for application"
          }
        },
        "description": "application description for authentication providers"
      },
      "kapi.dialplan.fax_detection": {
        "required": [
          "Action",
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": [
              "start",
              "stop"
            ]
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "fax_detection"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Direction": {
            "type": "string",
            "enum": [
              "inbound",
              "outbound"
            ]
          },
          "Duration": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.fax_detection"
      },
      "system_config.number_manager.voip_innovations": {
        "type": "object",
        "properties": {
          "debug": {
            "type": "boolean",
            "description": "number_manager.voip_innovations debug",
            "default": false
          },
          "enable_provisioning": {
            "type": "boolean",
            "description": "number_manager.voip_innovations enable provisioning",
            "default": true
          },
          "endpoint_group": {
            "type": "string",
            "description": "number_manager.voip_innovations endpoint group",
            "default": ""
          },
          "login": {
            "type": "string",
            "description": "number_manager.voip_innovations login",
            "default": ""
          },
          "password": {
            "type": "string",
            "description": "number_manager.voip_innovations password",
            "default": ""
          },
          "sandbox_provisioning": {
            "type": "boolean",
            "description": "number_manager.voip_innovations sandbox provisioning",
            "default": false
          }
        },
        "description": "Schema for number_manager.voip_innovations system_config"
      },
      "callflows.lookupcidname": {
        "required": [
          "lists"
        ],
        "type": "object",
        "properties": {
          "lists": {
            "type": "array",
            "description": "Array of list ids",
            "items": {
              "type": "string"
            }
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the Lookup callflow element"
      },
      "callflows.hotdesk": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "The action to take for hotdesking",
            "enum": [
              "logout",
              "login",
              "toggle",
              "bridge"
            ]
          },
          "id": {
            "type": "string",
            "description": "Hotdesk ID"
          },
          "interdigit_timeout": {
            "type": "integer",
            "description": "How long, in seconds, to wait between keypresses"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the hotdesk callflow data object"
      },
      "metaflow": {
        "required": [
          "module"
        ],
        "type": "object",
        "properties": {
          "children": {
            "type": "object",
            "properties": {},
            "description": "Children metaflows"
          },
          "data": {
            "type": "object",
            "properties": {},
            "description": "The data/arguments of the metaflow module"
          },
          "module": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The name of the metaflow module to execute at this node"
          }
        },
        "description": "A metaflow node defines a module to execute, data to provide to that module, and one or more children to branch to"
      },
      "kapi.notifications.voicemail_new": {
        "required": [
          "Account-ID",
          "From-Realm",
          "From-User",
          "To-Realm",
          "To-User",
          "Voicemail-Box",
          "Voicemail-ID",
          "Voicemail-Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "voicemail_new"
            ]
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "Voicemail-Box": {
            "type": "string"
          },
          "Voicemail-ID": {
            "type": "string"
          },
          "Voicemail-Length": {
            "type": "string"
          },
          "Voicemail-Timestamp": {
            "type": "string"
          },
          "Voicemail-Transcription": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.voicemail_new"
      },
      "kapi.dialplan.tones_req_tone_headers": {
        "required": [
          "Duration-OFF",
          "Duration-ON",
          "Frequencies"
        ],
        "type": "object",
        "properties": {
          "Duration-OFF": {
            "type": "string"
          },
          "Duration-ON": {
            "type": "string"
          },
          "Frequencies": {
            "type": "string"
          },
          "Repeat": {
            "type": "string"
          },
          "Volume": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.tones_req_tone_headers"
      },
      "kapi.media.req": {
        "required": [
          "Media-Name"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Engine": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "media"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "media_req"
            ]
          },
          "Format": {
            "type": "string",
            "enum": [
              "mp3",
              "wav"
            ]
          },
          "Language": {
            "type": "string"
          },
          "Media-Name": {
            "type": "string"
          },
          "Protocol": {
            "type": "string",
            "enum": [
              "http",
              "https",
              "shout",
              "vlc"
            ]
          },
          "Stream-Type": {
            "type": "string",
            "enum": [
              "new",
              "extant"
            ]
          },
          "Text": {
            "type": "string"
          },
          "Voice": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          }
        },
        "description": "AMQP API for media.req"
      },
      "callflows.acdc_agent": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Set which action to perform",
            "enum": [
              "login",
              "logout",
              "paused",
              "resume"
            ]
          },
          "presence_id": {
            "type": "string",
            "description": "Static presence ID to send BLF updates to"
          },
          "presence_state": {
            "type": "string",
            "description": "Custom presence state to send",
            "enum": [
              "early",
              "confirmed",
              "terminated",
              "red_flash",
              "red_solid",
              "green"
            ]
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "timeout": {
            "type": "integer",
            "description": "Time, in seconds, for 'paused' state"
          }
        },
        "description": "Validator for the acdc_agent callflow data object"
      },
      "user_auth": {
        "required": [
          "credentials"
        ],
        "type": "object",
        "properties": {
          "account_name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The account name of the user"
          },
          "account_realm": {
            "maxLength": 253,
            "minLength": 4,
            "pattern": "^[.\\w_-]+$",
            "type": "string",
            "description": "The account realm of the user"
          },
          "credentials": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "A hash of the uses credentials"
          },
          "method": {
            "type": "string",
            "description": "The hash method",
            "default": "md5",
            "enum": [
              "md5",
              "sha"
            ]
          },
          "phone_number": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "A phone number assigned to the users account"
          }
        },
        "description": "Provides an auth-token via user credentials"
      },
      "domains": {
        "type": "object",
        "properties": {
          "A": {
            "type": "object",
            "properties": {},
            "description": "A records"
          },
          "CNAME": {
            "$ref": "#/components/schemas/domain_hosts"
          },
          "MX": {
            "type": "object",
            "properties": {},
            "description": "MX records, typically for email servers"
          },
          "NAPTR": {
            "type": "object",
            "properties": {},
            "description": "NAPTR records"
          },
          "SRV": {
            "type": "object",
            "properties": {},
            "description": "SRV records"
          },
          "TXT": {
            "type": "object",
            "properties": {},
            "description": "TXT records"
          }
        },
        "description": "Domain settings for white-labelling"
      },
      "kapi.fax.req": {
        "required": [
          "Action",
          "Call"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": [
              "receive",
              "transmit"
            ]
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "dialplan"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "fax_req"
            ]
          },
          "Fax-T38-Option": {
            "type": "string"
          },
          "FaxBox-ID": {
            "type": "string"
          },
          "Owner-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for fax.req"
      },
      "kapi.acdc_agent.end_wrapup": {
        "required": [
          "Account-ID",
          "Agent-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "end_wrapup"
            ]
          },
          "Presence-ID": {
            "type": "string"
          },
          "Presence-State": {
            "type": "string",
            "enum": [
              "trying",
              "online",
              "offline",
              "early",
              "confirmed",
              "terminated"
            ]
          },
          "Queue-ID": {
            "type": "string"
          },
          "Time-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_agent.end_wrapup"
      },
      "kapi.conference.tones": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Tones"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "tones"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Group-ID": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Terminators": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "*",
                "0",
                "#"
              ]
            }
          },
          "Tones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/kapi.dialplan.tones_req_tone_headers"
            }
          }
        },
        "description": "AMQP API for conference.tones"
      },
      "kapi.notifications.port_comment": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorized-By": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Comment": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "port_comment"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Local-Number": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Number-State": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "Port-Request-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.port_comment"
      },
      "port_requests": {
        "required": [
          "name",
          "numbers"
        ],
        "type": "object",
        "properties": {
          "bill": {
            "type": "object",
            "properties": {
              "street_post_dir": {
                "type": "string",
                "description": "Street Post-Direction"
              },
              "account_number": {
                "type": "string",
                "description": "Account Number to identify account"
              },
              "street_address": {
                "type": "string",
                "description": "The street name of the billing address the losing carrier has on record"
              },
              "locality": {
                "type": "string",
                "description": "The locality (city) of the billing address the losing carrier has on record"
              },
              "carrier": {
                "type": "string",
                "description": "The name of the losing carrier"
              },
              "pin": {
                "type": "string",
                "description": "Personal Identification Number (PIN) to identify account"
              },
              "street_pre_dir": {
                "type": "string",
                "description": "Street Pre-Direction"
              },
              "name": {
                "type": "string",
                "description": "The losing carrier billing/account name"
              },
              "street_number": {
                "type": "string",
                "description": "The street number of the billing address the losing carrier has on record"
              },
              "street_type": {
                "type": "string",
                "description": "The street type of the billing address the losing carrier has on record"
              },
              "postal_code": {
                "type": "string",
                "description": "The zip/postal code of the billing address the losing carrier has on record"
              },
              "region": {
                "type": "string",
                "description": "The region (state) of the billing address the losing carrier has on record"
              },
              "btn": {
                "type": "string",
                "description": "Billing Telephone Number (BTN) to identify account"
              }
            },
            "description": "Billing information of the losing carrier"
          },
          "comments": {
            "type": "array",
            "description": "The history of comments made on a port request",
            "items": {
              "$ref": "#/components/schemas/comment"
            }
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the port request"
          },
          "notifications": {
            "type": "object",
            "properties": {
              "email": {
                "type": "object",
                "properties": {
                  "send_to": {
                    "type": "object",
                    "description": "A list or string of email recipient(s)"
                  }
                },
                "description": "Inbound Email Notifications"
              }
            },
            "description": "Status notifications"
          },
          "numbers": {
            "type": "object",
            "properties": {},
            "description": "The numbers to port in"
          },
          "reference_number": {
            "type": "string",
            "description": "Winning carrier reference number or order ID"
          },
          "signee_name": {
            "type": "string",
            "description": "The name of the person authorizing the release of numbers from the losing carrier"
          },
          "signing_date": {
            "type": "integer",
            "description": "The date in Gregorian timestamp on which the document releasing the numbers from the losing carrier was signed"
          },
          "transfer_date": {
            "type": "integer",
            "description": "Requested transfer date in Gregorian timestamp"
          },
          "winning_carrier": {
            "type": "string",
            "description": "The name of winning carrier"
          }
        },
        "description": "Schema for a port request"
      },
      "kapi.bookkeepers.sale_req_definition": {
        "required": [
          "Account-ID",
          "Amount",
          "Bookkeeper-Type",
          "Transaction-DB",
          "Transaction-ID",
          "Vendor-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Amount": {
            "type": "string"
          },
          "Bookkeeper-Type": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "sale_req"
            ]
          },
          "Transaction-DB": {
            "type": "string"
          },
          "Transaction-ID": {
            "type": "string"
          },
          "Vendor-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.sale_req_definition"
      },
      "callflows.ring_group": {
        "required": [
          "endpoints"
        ],
        "type": "object",
        "properties": {
          "endpoints": {
            "minItems": 1,
            "type": "array",
            "description": "Endpoint IDs (devices, users, etc) included in the ring group",
            "items": {
              "required": [
                "endpoint_type",
                "id"
              ],
              "type": "object",
              "properties": {
                "endpoint_type": {
                  "type": "string",
                  "description": "The type (device, user, etc) of endpoint",
                  "enum": [
                    "device",
                    "user",
                    "group"
                  ]
                },
                "delay": {
                  "type": "integer",
                  "description": "How long to delay ringing the endpoint, in seconds"
                },
                "weight": {
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer",
                  "description": "Weight of endpoint, different usage in various strategies"
                },
                "id": {
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "description": "The ID of the endpoint"
                },
                "timeout": {
                  "type": "integer",
                  "description": "How long to ring the endpoint, in seconds"
                }
              },
              "description": "ID of the endpoint (device, user, etc)"
            }
          },
          "fail_on_single_reject": {
            "type": "boolean",
            "description": "If any leg rejects the call, cancel all other legs"
          },
          "ignore_forward": {
            "type": "boolean",
            "description": "If true, will ignore SIP redirect requests for call-forwarded devices",
            "default": true
          },
          "repeats": {
            "minimum": 1,
            "type": "integer",
            "description": "How many times to retry the ring group"
          },
          "ringback": {
            "type": "string",
            "description": "Ringback to use"
          },
          "ringtones": {
            "type": "object",
            "properties": {
              "external": {
                "type": "string",
                "description": "Ring tone for calls from external sources"
              },
              "internal": {
                "type": "string",
                "description": "Ring tone for calls from external sources"
              }
            }
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "strategy": {
            "type": "string",
            "description": "How to ring the members of the group",
            "default": "simultaneous",
            "enum": [
              "simultaneous",
              "single",
              "weighted_random"
            ]
          },
          "timeout": {
            "type": "integer",
            "description": "How long to ring the ring group before continuing, in seconds"
          }
        },
        "description": "Validator for the Ring Group callflow element"
      },
      "kapi.websockets.get_req": {
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "websockets"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "get_req"
            ]
          },
          "Socket-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for websockets.get_req"
      },
      "storage.attachments.field": {
        "type": "object",
        "description": "field used when composing destination url"
      },
      "system_config.crossbar.auth": {
        "type": "object",
        "properties": {
          "auth_modules": {
            "type": "object",
            "properties": {
              "cb_ubiquiti_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              },
              "cb_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              },
              "cb_user_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              },
              "cb_api_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              },
              "cb_ip_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              }
            },
            "description": "Default crossbar authentication modules configuration"
          },
          "available_auth_methods": {
            "type": "array",
            "description": "List of crossbar auth configurable modules",
            "items": {
              "type": "string"
            }
          },
          "basic_auth_type": {
            "type": "string",
            "description": "crossbar.auth basic auth type",
            "default": "md5",
            "enum": [
              "md5",
              "sha"
            ]
          },
          "log_failed_attempts": {
            "type": "boolean",
            "description": "Should log failed login attempts",
            "default": false
          },
          "log_failed_login_attempts": {
            "type": "boolean",
            "description": "Should log failed login attempts",
            "default": false
          },
          "log_successful_attempts": {
            "type": "boolean",
            "description": "Should log successful login attempts",
            "default": false
          },
          "token_auth_expiry_s": {
            "type": "integer",
            "description": "crossbar token auth expiry in seconds"
          }
        },
        "description": "Schema for crossbar.auth system_config"
      },
      "callflows.route_to_cid": {
        "type": "object",
        "properties": {
          "can_call_self": {
            "type": "boolean",
            "description": "Toggle whether devices of the same owner can call each other"
          },
          "can_text_self": {
            "type": "boolean",
            "description": "Toggle whether devices of the same owner can text each other"
          },
          "cid_types": {
            "minItems": 1,
            "type": "array",
            "description": "CID types to perform search: internal, external, custom",
            "items": {
              "type": "string"
            }
          },
          "delay": {
            "type": "integer",
            "description": "How long to delay ringing the device, in seconds"
          },
          "endpoint_types": {
            "type": "array",
            "description": "Endpoint types to perform search: user, device",
            "items": {
              "type": "string"
            }
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "static_invite": {
            "type": "string",
            "description": "Override the SIP Username"
          },
          "suppress_clid": {
            "type": "boolean",
            "description": "Suppress sending caller ID"
          },
          "timeout": {
            "type": "integer",
            "description": "Time, in seconds, to wait for device to bridge"
          }
        },
        "description": "Endpoints lookup by cid number"
      },
      "lists": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly list description"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly match list name"
          },
          "org": {
            "type": "string",
            "description": "Full legal name of the organization"
          }
        },
        "description": "Schema for a match list"
      },
      "kapi.call.query_account_channels_resp": {
        "type": "object",
        "properties": {
          "Channels": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_account_channels_resp"
            ]
          }
        },
        "description": "AMQP API for call.query_account_channels_resp"
      },
      "account_config.media": {
        "type": "object",
        "properties": {
          "call_recording": {
            "type": "object",
            "properties": {
              "extension": {
                "type": "string",
                "description": "Default media file format",
                "default": "mp3"
              },
              "storage_retry_times": {
                "type": "integer",
                "description": "media storage retry times"
              },
              "workers": {
                "type": "integer",
                "description": "media call_recording workers"
              }
            }
          }
        },
        "description": "Schema for media account_config"
      },
      "kapi.xmpp.event": {
        "required": [
          "JID"
        ],
        "type": "object",
        "properties": {
          "Application-Data": {
            "type": "string"
          },
          "Application-Event": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "xmpp_event"
            ]
          },
          "JID": {
            "type": "string"
          }
        },
        "description": "AMQP API for xmpp.event"
      },
      "system_config.crossbar.call_inspector": {
        "type": "object",
        "properties": {
          "maximum_bulk": {
            "minimum": 1,
            "type": "integer",
            "description": "crossbar call_inspector maximum_bulk"
          }
        },
        "description": "Schema for crossbar.call_inspector system_config"
      },
      "system_config.callflow.hotdesk": {
        "type": "object",
        "properties": {
          "max_hotdesk_id_length": {
            "type": "integer",
            "description": "callflow.hotdesk maximum hotdesk id length"
          },
          "max_login_attempts": {
            "type": "integer",
            "description": "callflow.hotdesk maximum login attempts"
          },
          "max_pin_length": {
            "type": "integer",
            "description": "callflow.hotdesk maximum pin length"
          }
        },
        "description": "Schema for callflow.hotdesk system_config"
      },
      "kapi.hangups.query_resp": {
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "hangups"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_resp"
            ]
          },
          "account_id": {
            "type": "string"
          },
          "count": {
            "type": "string"
          },
          "day": {
            "type": "string"
          },
          "fifteen": {
            "type": "string"
          },
          "five": {
            "type": "string"
          },
          "five_to_fifteen": {
            "type": "string"
          },
          "hangup_cause": {
            "type": "string"
          },
          "mean": {
            "type": "string"
          },
          "meters": {
            "type": "string"
          },
          "one": {
            "type": "string"
          },
          "one_to_fifteen": {
            "type": "string"
          },
          "one_to_five": {
            "type": "string"
          },
          "start_time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for hangups.query_resp"
      },
      "callflows.acdc_wait_time": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Queue ID"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "window": {
            "type": "integer",
            "description": "Window over which average wait time is calculated (in seconds)"
          }
        },
        "description": "Validator for the acdc_wait_time callflow data object"
      },
      "kapi.presence.search_partial_resp": {
        "required": [
          "Subscriptions"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "search_partial_resp"
            ]
          },
          "Subscriptions": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.search_partial_resp"
      },
      "callflows.play": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "boolean",
            "description": "Whether to answer an unanswered call"
          },
          "endless_playback": {
            "type": "boolean",
            "description": "Loop the media continuously",
            "default": false
          },
          "id": {
            "type": "string",
            "description": "Media ID or URL of the media to play"
          },
          "loop_count": {
            "minimum": 1,
            "type": "integer",
            "description": "How many times to loop the media"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "terminators": {
            "type": "array",
            "description": "What DTMF can terminate playback of the audio",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Validator for the play callflow data object"
      },
      "kapi.dialplan.sleep": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Time"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "sleep"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Time": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.sleep"
      },
      "resource_selectors": {
        "required": [
          "name",
          "resource",
          "selector"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Selector name"
          },
          "resource": {
            "type": "string",
            "description": "Resource ID"
          },
          "selector": {
            "type": "string",
            "description": "Selector data"
          },
          "start_time": {
            "type": "integer",
            "description": "Start time (Gregorian seconds)"
          },
          "stop_time": {
            "type": "integer",
            "description": "Stop time (Gregorian seconds)"
          },
          "value": {
            "type": "string",
            "description": "Extra selector data"
          }
        },
        "description": "Schema for resource selector document"
      },
      "kapi.metaflow.bind_req": {
        "required": [
          "Account-ID",
          "Binding-Leg"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Authorizing-ID": {
            "type": "string"
          },
          "Authorizing-Type": {
            "type": "string"
          },
          "Binding-Leg": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "CallFlow-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "metaflow"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "bind_req"
            ]
          },
          "Resource-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for metaflow.bind_req"
      },
      "kapi.authz.balance_check_req": {
        "required": [
          "Accounts"
        ],
        "type": "object",
        "properties": {
          "Accounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "authz"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "balance_check_req"
            ]
          }
        },
        "description": "AMQP API for authz.balance_check_req"
      },
      "auth.provider": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "description": "provider settings for authentication"
      },
      "kapi.acdc_queue.member_call_failure": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "call_fail"
            ]
          },
          "Failure-Reason": {
            "type": "string"
          },
          "Process-ID": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_call_failure"
      },
      "kapi.acdc_stats.call_handled": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_call_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "handled"
            ]
          },
          "Handled-Timestamp": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_stats.call_handled"
      },
      "media": {
        "required": [
          "media_source",
          "name"
        ],
        "type": "object",
        "properties": {
          "content_length": {
            "maximum": 11534336,
            "minimum": 1,
            "type": "integer",
            "description": "Length, in bytes, of the file"
          },
          "content_type": {
            "type": "string",
            "description": "Used to override the automatic upload type",
            "enum": [
              "audio/mp3",
              "audio/mpeg",
              "audio/mpeg3",
              "audio/x-wav",
              "audio/wav",
              "audio/ogg",
              "video/x-flv",
              "video/h264",
              "video/mpeg",
              "video/quicktime",
              "video/mp4",
              "video/webm"
            ]
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A brief description of the media update, usually the original file name"
          },
          "language": {
            "type": "string",
            "description": "The language of the media file or text",
            "default": "en-us"
          },
          "media_source": {
            "type": "string",
            "description": "Defines the source of the media",
            "default": "upload",
            "enum": [
              "recording",
              "upload",
              "tts"
            ]
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the media"
          },
          "prompt_id": {
            "type": "string",
            "description": "The prompt this media file represents"
          },
          "source_id": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "If the media was generated from a callflow module, this is ID of the properties"
          },
          "source_type": {
            "type": "string",
            "description": "If the media was generated from a callflow module, this is the module name"
          },
          "streamable": {
            "type": "boolean",
            "description": "Determines if the media can be streamed",
            "default": true
          },
          "tts": {
            "type": "object",
            "properties": {
              "voice": {
                "type": "string",
                "description": "The voice to be used during the conversion",
                "default": "female/en-US",
                "enum": [
                  "female/en-US",
                  "male/en-US",
                  "female/en-CA",
                  "female/en-AU",
                  "female/en-GB",
                  "male/en-GB",
                  "female/es-US",
                  "male/es-US",
                  "female/us-US",
                  "female/zh-CN",
                  "male/zh-CN",
                  "female/zh-HK",
                  "female/zh-TW",
                  "female/ja-JP",
                  "male/ja-JP",
                  "female/ko-KR",
                  "male/ko-KR",
                  "female/da-DK",
                  "female/de-DE",
                  "male/de-DE",
                  "female/ca-ES",
                  "female/es-ES",
                  "male/es-ES",
                  "female/fi-FI",
                  "female/fr-CA",
                  "male/fr-CA",
                  "female/fr-FR",
                  "male/fr-FR",
                  "female/it-IT",
                  "male/it-IT",
                  "female/nb-NO",
                  "female/nl-NL",
                  "female/pl-PL",
                  "female/pt-BR",
                  "female/pt-PT",
                  "male/pt-PT",
                  "female/ru-RU",
                  "male/ru-RU",
                  "female/sv-SE",
                  "female/hu-HU",
                  "female/cs-CZ",
                  "female/tr-TR",
                  "male/tr-TR",
                  "male/ru-RU/Vladimir",
                  "female/ru-RU/Julia",
                  "female/ru-RU/Anna",
                  "female/ru-RU/Viktoria",
                  "male/ru-RU/Alexander",
                  "female/ru-RU/Maria",
                  "female/ru-RU/Lidia",
                  "es-ES-Standard-A",
                  "it-IT-Standard-A",
                  "ja-JP-Standard-A",
                  "ko-KR-Standard-A",
                  "pt-BR-Standard-A",
                  "tr-TR-Standard-A",
                  "sv-SE-Standard-A",
                  "nl-NL-Standard-A",
                  "en-US-Wavenet-D",
                  "de-DE-Wavenet-A",
                  "de-DE-Wavenet-B",
                  "de-DE-Wavenet-C",
                  "de-DE-Wavenet-D",
                  "en-AU-Wavenet-A",
                  "en-AU-Wavenet-B",
                  "en-AU-Wavenet-C",
                  "en-AU-Wavenet-D",
                  "en-GB-Wavenet-A",
                  "en-GB-Wavenet-B",
                  "en-GB-Wavenet-C",
                  "en-GB-Wavenet-D",
                  "en-US-Wavenet-A",
                  "en-US-Wavenet-B",
                  "en-US-Wavenet-C",
                  "en-US-Wavenet-E",
                  "en-US-Wavenet-F",
                  "fr-FR-Wavenet-A",
                  "fr-FR-Wavenet-B",
                  "fr-FR-Wavenet-C",
                  "fr-FR-Wavenet-D",
                  "it-IT-Wavenet-A",
                  "ja-JP-Wavenet-A",
                  "nl-NL-Wavenet-A",
                  "en-GB-Standard-A",
                  "en-GB-Standard-B",
                  "en-GB-Standard-C",
                  "en-GB-Standard-D",
                  "en-US-Standard-B",
                  "en-US-Standard-C",
                  "en-US-Standard-D",
                  "en-US-Standard-E",
                  "de-DE-Standard-A",
                  "de-DE-Standard-B",
                  "en-AU-Standard-A",
                  "en-AU-Standard-B",
                  "en-AU-Standard-C",
                  "en-AU-Standard-D",
                  "fr-CA-Standard-A",
                  "fr-CA-Standard-B",
                  "fr-CA-Standard-C",
                  "fr-CA-Standard-D",
                  "fr-FR-Standard-A",
                  "fr-FR-Standard-B",
                  "fr-FR-Standard-C",
                  "fr-FR-Standard-D"
                ]
              },
              "text": {
                "minLength": 1,
                "type": "string",
                "description": "The text to be converted into audio"
              }
            },
            "description": "Text-to-speech options used to create audio files from text"
          }
        },
        "description": "Schema for media"
      },
      "storage": {
        "type": "object",
        "properties": {
          "attachments": {
            "$ref": "#/components/schemas/storage.attachments"
          },
          "connections": {
            "$ref": "#/components/schemas/storage.connections"
          },
          "id": {
            "type": "string",
            "description": "ID of the storage document"
          },
          "plan": {
            "$ref": "#/components/schemas/storage.plan"
          }
        }
      },
      "kapi.notifications.new_account": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-API-Key": {
            "type": "string"
          },
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Account-Name": {
            "type": "string"
          },
          "Account-Realm": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "new_account"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.new_account"
      },
      "callflows.set_cid": {
        "type": "object",
        "properties": {
          "caller_id_name": {
            "type": "string",
            "description": "Set caller ID Name",
            "default": ""
          },
          "caller_id_number": {
            "type": "string",
            "description": "Set caller ID number",
            "default": ""
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the set_cid callflow data object"
      },
      "system_config.call_inspector": {
        "type": "object",
        "properties": {
          "startup_parsers": {
            "type": "object",
            "properties": {},
            "description": "parser specifications. Will be started on app startup"
          }
        },
        "description": "Schema for call_inspector system_config"
      },
      "system_config.epmd": {
        "type": "object",
        "properties": {
          "check_every_s": {
            "type": "integer",
            "description": "epmd check_every_s"
          }
        },
        "description": "Schema for epmd system_config"
      },
      "kapi.notifications.account_zone_change": {
        "required": [
          "Account-ID",
          "Zones"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "account_zone_change"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Zones": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.account_zone_change"
      },
      "storage.connection.couchdb": {
        "required": [
          "driver",
          "settings"
        ],
        "type": "object",
        "properties": {
          "driver": {
            "type": "string",
            "enum": [
              "kazoo_couch"
            ]
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "required": [
              "ip",
              "port"
            ],
            "type": "object",
            "properties": {
              "connect_timeout": {
                "type": "integer"
              },
              "credentials": {
                "required": [
                  "password",
                  "username"
                ],
                "type": "object",
                "properties": {
                  "password": {
                    "type": "integer"
                  },
                  "username": {
                    "type": "string"
                  }
                }
              },
              "max_sessions": {
                "type": "integer"
              },
              "port": {
                "type": "integer"
              },
              "ip": {
                "type": "string"
              },
              "pool": {
                "required": [
                  "name",
                  "size"
                ],
                "type": "object",
                "properties": {
                  "size": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "connect_options": {
                "type": "object",
                "properties": {
                  "keepalive": {
                    "type": "boolean"
                  }
                }
              },
              "max_pipeline_size": {
                "type": "integer"
              }
            }
          }
        },
        "description": "schema for CouchDB connection entry"
      },
      "metaflows.move": {
        "type": "object",
        "properties": {
          "auto_answer": {
            "type": "boolean",
            "description": "Whether to auto-answer the new leg",
            "default": false
          },
          "can_call_self": {
            "type": "boolean",
            "description": "Can intercept devices of the same targeted user",
            "default": true
          },
          "device_id": {
            "type": "string",
            "description": "Move the call to a specific device"
          },
          "dial_strategy": {
            "type": "string",
            "description": "How to ring the endpoints, if multiple",
            "default": "simultaneous"
          },
          "owner_id": {
            "type": "string",
            "description": "User ID to use for finding endpoints"
          }
        },
        "description": "Move a call from one device to another"
      },
      "system_config.braintree": {
        "type": "object",
        "properties": {
          "client_token_version": {
            "type": "string",
            "description": "braintree client token version",
            "default": "2"
          },
          "debug": {
            "type": "boolean",
            "description": "braintree debug",
            "default": false
          },
          "default_environment": {
            "type": "string",
            "description": "braintree default environment",
            "default": ""
          },
          "default_merchant_id": {
            "type": "string",
            "description": "braintree default merchant id",
            "default": ""
          },
          "default_private_key": {
            "type": "string",
            "description": "braintree default private key",
            "default": ""
          },
          "default_public_key": {
            "type": "string",
            "description": "braintree default public key",
            "default": ""
          },
          "max_amount": {
            "type": "number",
            "description": "braintree maximum amount"
          },
          "min_amount": {
            "type": "number",
            "description": "braintree minimum amount"
          },
          "should_prorate": {
            "type": "boolean",
            "description": "braintree should prorate",
            "default": true
          }
        },
        "description": "Schema for braintree system_config"
      },
      "kapi.acdc_queue.member_call_success": {
        "required": [
          "Account-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "call_success"
            ]
          },
          "Process-ID": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_call_success"
      },
      "system_config.blackhole": {
        "type": "object",
        "properties": {
          "acceptors": {
            "type": "integer",
            "description": "blackhole acceptors"
          },
          "autoload_modules": {
            "type": "array",
            "description": "blackhole autoload modules",
            "items": {
              "type": "string"
            }
          },
          "bindings": {
            "type": "object",
            "properties": {},
            "description": "blackhole bindings"
          },
          "compress_response_body": {
            "type": "boolean",
            "description": "blackhole compress_response_body",
            "default": true
          },
          "ip": {
            "type": "string",
            "description": "blackhole ip"
          },
          "port": {
            "type": "integer",
            "description": "blackhole port"
          },
          "request_timeout_ms": {
            "type": "integer",
            "description": "blackhole request_timeout_ms"
          },
          "ssl_ca_cert": {
            "type": "string",
            "description": "blackhole ssl_ca_cert"
          },
          "ssl_cert": {
            "type": "string",
            "description": "blackhole ssl_cert"
          },
          "ssl_key": {
            "type": "string",
            "description": "blackhole ssl_key"
          },
          "ssl_password": {
            "type": "string",
            "description": "blackhole ssl_password",
            "default": ""
          },
          "ssl_port": {
            "type": "integer",
            "description": "blackhole ssl_port"
          },
          "ssl_workers": {
            "type": "integer",
            "description": "blackhole ssl_workers"
          },
          "use_plaintext": {
            "type": "boolean",
            "description": "blackhole use_plaintext",
            "default": true
          },
          "use_ssl": {
            "type": "boolean",
            "description": "blackhole use_ssl",
            "default": false
          }
        },
        "description": "Schema for blackhole system_config"
      },
      "kapi.conference.record": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Media-Name"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "record"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Media-Name": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.record"
      },
      "system_config.crossbar.onboard": {
        "type": "object",
        "properties": {
          "default_callflow_start_exten": {
            "type": "integer",
            "description": "crossbar.onboard default callflow start exten"
          },
          "default_extension_callflow": {
            "type": "string",
            "description": "crossbar.onboard default extension callflow",
            "default": "{\"data\": { \"id\": \"~s\" }, \"module\": \"user\", \"children\": { \"_\": { \"data\": { \"id\": \"~s\" }, \"module\": \"voicemail\", \"children\": {}}}}"
          },
          "default_vm_start_exten": {
            "type": "integer",
            "description": "crossbar.onboard default vm start exten"
          },
          "device_pwd_strength": {
            "type": "integer",
            "description": "crossbar.onboard device pwd strength"
          },
          "device_username_strength": {
            "type": "integer",
            "description": "crossbar.onboard device username strength"
          }
        },
        "description": "Schema for crossbar.onboard system_config"
      },
      "kapi.authz.authz_req": {
        "required": [
          "Call-Direction",
          "Call-ID",
          "Caller-ID-Name",
          "Caller-ID-Number",
          "From",
          "Request",
          "To"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call-Direction": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "authz"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "authz_req"
            ]
          },
          "From": {
            "type": "string"
          },
          "From-Network-Addr": {
            "type": "string"
          },
          "From-Network-Port": {
            "type": "string"
          },
          "Other-Leg-Call-ID": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Usage": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "AMQP API for authz.authz_req"
      },
      "comments": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "description": "The history of comments made on a object",
            "items": {
              "$ref": "#/components/schemas/comment"
            }
          }
        },
        "description": "Schema for comments"
      },
      "kapi.bookkeepers.standing_req_definition": {
        "required": [
          "Account-ID",
          "Bookkeeper-ID",
          "Bookkeeper-Type",
          "Estimated-Withdrawal",
          "Items",
          "Vendor-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Bookkeeper-ID": {
            "type": "string"
          },
          "Bookkeeper-Type": {
            "type": "string"
          },
          "Estimated-Withdrawal": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "standing_req"
            ]
          },
          "Items": {
            "type": "string"
          },
          "Vendor-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.standing_req_definition"
      },
      "blacklists": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the temporal rule set"
          },
          "numbers": {
            "type": "object",
            "properties": {},
            "description": "Map of caller id number to block"
          },
          "should_block_anonymous": {
            "type": "boolean",
            "description": "Should block Anonymous call"
          }
        },
        "description": "Schema for a blacklists"
      },
      "kapi.pivot.failed": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "pivot"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "failed"
            ]
          }
        },
        "description": "AMQP API for pivot.failed"
      },
      "rates": {
        "required": [
          "prefix",
          "rate_cost"
        ],
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Reseller's account ID"
          },
          "caller_id_numbers": {
            "type": "string",
            "description": "String of caller id prefixes separated by ':'"
          },
          "carrier": {
            "type": "string",
            "description": "Friendly name for the carrier providing this rate"
          },
          "description": {
            "type": "string",
            "description": "Friendly description of the rate"
          },
          "direction": {
            "type": "array",
            "description": "Apply this rate based on the direction of the call (relative to FreeSWITCH)",
            "items": {
              "type": "string",
              "enum": [
                "inbound",
                "outbound"
              ]
            }
          },
          "internal_rate_cost": {
            "minimum": 0,
            "type": "number",
            "description": "The per-min rate charged by the upstream provider"
          },
          "iso_country_code": {
            "type": "string",
            "description": "Country code this rate applies to"
          },
          "options": {
            "type": "array",
            "description": "List of options this rate is good for, to be matched against a customer's options",
            "items": {
              "type": "string"
            }
          },
          "prefix": {
            "type": "integer",
            "description": "E.164 prefix (ignoring the +)"
          },
          "rate_cost": {
            "minimum": 0,
            "type": "number",
            "description": "The per-min rate charged to the downstream customer"
          },
          "rate_increment": {
            "minimum": 1,
            "type": "integer",
            "description": "The time slice, in seconds, to bill in."
          },
          "rate_minimum": {
            "minimum": 1,
            "type": "integer",
            "description": "The minimum time slice, in seconds to bill a call"
          },
          "rate_name": {
            "type": "string",
            "description": "Friendly name of the rate"
          },
          "rate_nocharge_time": {
            "minimum": 0,
            "type": "integer",
            "description": "If the call duration is shorter than this threshold (seconds), the call is not billed"
          },
          "rate_suffix": {
            "type": "string",
            "description": "Suffix applied to rate name"
          },
          "rate_surcharge": {
            "minimum": 0,
            "type": "number",
            "description": "The upfront cost of connecting the call"
          },
          "rate_version": {
            "type": "string",
            "description": "Rate version"
          },
          "ratedeck_id": {
            "type": "string",
            "description": "ID of the ratedeck this rate belongs to"
          },
          "routes": {
            "type": "array",
            "description": "List of regexps that match valid DIDs for this rate",
            "items": {
              "type": "string"
            }
          },
          "weight": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "Ordering against other rates, 1 being most preferred, 100 being least preferred"
          }
        },
        "description": "Defines a rate for a given prefix"
      },
      "callflows.set_alert_info": {
        "required": [
          "alert_info"
        ],
        "type": "object",
        "properties": {
          "alert_info": {
            "type": "string",
            "description": "Set `Alert-Info` header inside b-leg channel. Used for distinctive ring."
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the set_alert_info callflow data object"
      },
      "kapi.acdc_agent.sync_req": {
        "required": [
          "Account-ID",
          "Agent-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "sync_req"
            ]
          },
          "Process-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_agent.sync_req"
      },
      "kapi.dialplan.play_and_collect_digits": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Digits-Regex",
          "Maximum-Digits",
          "Media-Name",
          "Media-Tries",
          "Minimum-Digits",
          "Terminators",
          "Timeout"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "play_and_collect_digits"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Digits-Regex": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Failed-Media-Name": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Maximum-Digits": {
            "type": "string"
          },
          "Media-Name": {
            "type": "string"
          },
          "Media-Tries": {
            "type": "string"
          },
          "Minimum-Digits": {
            "type": "string"
          },
          "Terminators": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "*",
                "0",
                "#"
              ]
            }
          },
          "Timeout": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.play_and_collect_digits"
      },
      "system_config.speech.google": {
        "required": [
          "asr_api_key"
        ],
        "type": "object",
        "properties": {
          "asr_api_key": {
            "type": "string",
            "description": "API key for Google Cloud Speech",
            "default": ""
          },
          "asr_enable_word_time_offsets": {
            "type": "boolean",
            "description": "top result includes a list of words and the start and end time offsets"
          },
          "asr_profanity_filter": {
            "type": "boolean",
            "description": "server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisk"
          },
          "asr_url": {
            "type": "string",
            "description": "Google Cloud Speech API url",
            "default": "https://speech.googleapis.com/v1/speech:recognize"
          },
          "tts_api_key": {
            "type": "string",
            "description": "speech google tts_api_key",
            "default": ""
          },
          "tts_url": {
            "type": "string",
            "description": "speech google tts_url",
            "default": "https://texttospeech.googleapis.com/v1/text:synthesize"
          }
        },
        "description": "Schema for speech.google system_config"
      },
      "kapi.dialplan.media_macro": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Media-Macros"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "media_macro"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "now"
            ]
          },
          "Media-Macros": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "AMQP API for dialplan.media_macro"
      },
      "kapi.dialplan.store_vm": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Media-Name",
          "Media-Transfer-Destination",
          "Media-Transfer-Method"
        ],
        "type": "object",
        "properties": {
          "Additional-Headers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "store_vm"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Media-Name": {
            "type": "string"
          },
          "Media-Transfer-Destination": {
            "type": "string"
          },
          "Media-Transfer-Method": {
            "type": "string",
            "enum": [
              "stream",
              "put",
              "post"
            ]
          },
          "Suppress-Error-Report": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for dialplan.store_vm"
      },
      "metaflows.intercept": {
        "type": "object",
        "properties": {
          "auto_answer": {
            "type": "boolean",
            "description": "Auto-answer the leg",
            "default": false
          },
          "can_call_self": {
            "type": "boolean",
            "description": "Can intercept devices of the same targeted user",
            "default": true
          },
          "target_id": {
            "type": "string",
            "description": "ID of the target (device or user)"
          },
          "target_type": {
            "type": "string",
            "description": "Type of entity of the target",
            "enum": [
              "device",
              "user",
              "number"
            ]
          },
          "unbridged_only": {
            "type": "boolean",
            "description": "Only intercept if the a-leg is unbridged",
            "default": true
          }
        },
        "description": "Skeleton JSON schema"
      },
      "custom_sip_headers": {
        "type": "object",
        "description": "Custom SIP headers applied to an INVITE"
      },
      "account_config.privacy": {
        "type": "object",
        "properties": {
          "block_anonymous_caller_id": {
            "type": "boolean",
            "description": "Controls blocking of anonymous calls",
            "default": false
          },
          "privacy_mode": {
            "type": "string",
            "description": "Default privacy mode for anonymous calls",
            "default": "kazoo"
          }
        },
        "description": "Schema for privacy account_config"
      },
      "kapi.inspector.filter_resp": {
        "type": "object",
        "properties": {
          "Call-IDs": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_inspector"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "filter_resp"
            ]
          }
        },
        "description": "AMQP API for inspector.filter_resp"
      },
      "system_config.notify.cnam_request": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.cnam_request default to"
          }
        },
        "description": "Schema for notify.cnam_request system_config"
      },
      "call_recording.source": {
        "type": "object",
        "properties": {
          "any": {
            "$ref": "#/components/schemas/call_recording.parameters"
          },
          "offnet": {
            "$ref": "#/components/schemas/call_recording.parameters"
          },
          "onnet": {
            "$ref": "#/components/schemas/call_recording.parameters"
          }
        }
      },
      "kapi.notifications.port_scheduled": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorized-By": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "port_scheduled"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Local-Number": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Number-State": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "Port-Request-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reason": {
            "type": "object",
            "properties": {}
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.port_scheduled"
      },
      "kapi.dialplan.playstop": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "playstop"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.playstop"
      },
      "kapi.registration.flush": {
        "required": [
          "Realm"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "directory"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reg_flush"
            ]
          },
          "Realm": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for registration.flush"
      },
      "kapi.sms.delivery": {
        "required": [
          "Call-ID",
          "Message-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Contact-IP": {
            "type": "string"
          },
          "Contact-Port": {
            "type": "string"
          },
          "Contact-Username": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Delivery-Failure": {
            "type": "string"
          },
          "Delivery-Result-Code": {
            "type": "string"
          },
          "Delivery-Result-Text": {
            "type": "string"
          },
          "Error-Code": {
            "type": "string"
          },
          "Error-Message": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "message"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "delivery"
            ]
          },
          "Event-Queue": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Network-Addr": {
            "type": "string"
          },
          "Geo-Location": {
            "type": "string"
          },
          "Message-ID": {
            "type": "string"
          },
          "Orig-IP": {
            "type": "string"
          },
          "Orig-Port": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-Nodename": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          }
        },
        "description": "AMQP API for sms.delivery"
      },
      "kapi.globals.query_resp": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "globals"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_resp"
            ]
          },
          "Name": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Timestamp": {
            "type": "integer"
          }
        },
        "description": "AMQP API for globals.query_resp"
      },
      "service_plan.item": {
        "type": "object",
        "properties": {
          "activation_charge": {
            "type": "number",
            "description": "What to charge when activating an Item"
          },
          "as": {
            "type": "string",
            "description": "Count Item as if it was another Item"
          },
          "cascade": {
            "type": "boolean",
            "description": "Whether to count quantities among all sub-accounts or just the account",
            "default": false
          },
          "discounts": {
            "type": "object",
            "properties": {
              "single": {
                "type": "object",
                "properties": {
                  "rate": {
                    "type": "number",
                    "description": "A single discount amount to apply if there are more than 0 units and no match in rates"
                  },
                  "rates": {
                    "type": "object",
                    "properties": {},
                    "description": "Takes precedence over rate, sets the discount based on the billable quantity"
                  }
                }
              },
              "cumulative": {
                "type": "object",
                "properties": {
                  "rate": {
                    "type": "number",
                    "description": "The discount to apply, up to maximum Items (if applicable)"
                  },
                  "rates": {
                    "type": "object",
                    "properties": {},
                    "description": "Takes precedence over rate, sets the discount based on the billable quantity"
                  },
                  "maximum": {
                    "type": "integer",
                    "description": "The most number of Items to apply discount to"
                  }
                }
              }
            }
          },
          "flat_rate": {
            "type": "number",
            "description": "Takes precedence over rates and rate, charges only the provided amount"
          },
          "flat_rates": {
            "type": "object",
            "properties": {},
            "description": "Takes precedence over flat_rate, rates and rate, charges only the provided amount"
          },
          "markup_type": {
            "type": "string",
            "description": "How rate for this usage is calculated",
            "enum": [
              "fixed_price",
              "percentage",
              "rate"
            ]
          },
          "maximum": {
            "type": "integer",
            "description": "The maximum quantity of items to bill for"
          },
          "minimum": {
            "type": "integer",
            "description": "The minimum quantity of items to bill for"
          },
          "name": {
            "type": "string",
            "description": "Friendly name for this Item"
          },
          "prorate": {
            "type": "object",
            "properties": {
              "additions": {
                "type": "boolean",
                "description": "Should this item be prorated during additions",
                "default": true
              },
              "removals": {
                "type": "boolean",
                "description": "Should this item be prorated during removals",
                "default": false
              }
            },
            "description": "Should this item be prorated"
          },
          "rate": {
            "type": "number",
            "description": "Used if no flat_rates, flat_rate or rates apply, resulting charges is billable quantity multipled with rate"
          },
          "rates": {
            "type": "object",
            "properties": {},
            "description": "Takes precedence over rate, resulting charges is billable quantity multipled with tiered rate"
          },
          "step": {
            "type": "integer",
            "description": "Step size for quantity"
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "rate": {
                  "type": "number",
                  "description": "The tax rate as a percentage"
                },
                "name": {
                  "type": "string",
                  "description": "The display name to use when generating invoices/reports"
                },
                "tax_id": {
                  "type": "string",
                  "description": "The tax number/id (optional)"
                }
              }
            }
          }
        },
        "description": "Describes a service plan item"
      },
      "kapi.conference.say": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Text"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "say",
              "tts"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Endless-Playback": {
            "type": "boolean"
          },
          "Engine": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Group-ID": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Language": {
            "type": "string"
          },
          "Leg": {
            "type": "string"
          },
          "Loop-Count": {
            "minimum": 1,
            "type": "integer"
          },
          "Terminators": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "*",
                "0",
                "#"
              ]
            }
          },
          "Text": {
            "type": "string"
          },
          "Voice": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.say"
      },
      "storage.attachment.azure": {
        "required": [
          "handler",
          "settings"
        ],
        "type": "object",
        "properties": {
          "handler": {
            "type": "string",
            "description": "What handler module to use",
            "enum": [
              "azure"
            ]
          },
          "settings": {
            "required": [
              "account",
              "container",
              "key"
            ],
            "type": "object",
            "properties": {
              "container": {
                "type": "string",
                "description": "the azure container where the files should be saved"
              },
              "account": {
                "type": "string",
                "description": "the azure account name"
              },
              "key": {
                "type": "string",
                "description": "the azure api key"
              }
            },
            "description": "Settings for the Azure account"
          }
        },
        "description": "schema for azure attachment entry"
      },
      "system_config.crossbar.media": {
        "type": "object",
        "properties": {
          "normalization_format": {
            "type": "string",
            "description": "crossbar.media normalization format",
            "default": "mp3"
          },
          "normalize_media": {
            "type": "boolean",
            "description": "crossbar.media normalize media",
            "default": false
          }
        },
        "description": "Schema for crossbar.media system_config"
      },
      "system_config.crossbar.notifications": {
        "type": "object",
        "properties": {
          "inherit_default_values": {
            "type": "boolean",
            "description": "crossbar.notifications use parent notifications doc as default values, to be overridden by request data (prior to validation)",
            "default": false
          },
          "notification_timeout_ms": {
            "type": "integer",
            "description": "crossbar.notifications notification timeout in milliseconds"
          }
        },
        "description": "Schema for crossbar.notifications system_config"
      },
      "callflows.language": {
        "required": [
          "language"
        ],
        "type": "object",
        "properties": {
          "language": {
            "pattern": "^[A-Za-z]{2}(-[A-Za-z]{2})?$",
            "type": "string",
            "description": "The language to default to for the rest of the call"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the Language callflow element"
      },
      "kapi.registration.success": {
        "required": [
          "Contact",
          "Event-Timestamp",
          "Expires",
          "Realm",
          "Username"
        ],
        "type": "object",
        "properties": {
          "AOR": {
            "type": "string"
          },
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Authorizing-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "directory"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reg_success"
            ]
          },
          "Event-Timestamp": {
            "type": "string"
          },
          "Expires": {
            "type": "string"
          },
          "First-Registration": {
            "type": "string"
          },
          "FreeSWITCH-Hostname": {
            "type": "string"
          },
          "FreeSWITCH-Nodename": {
            "type": "string"
          },
          "From-Host": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "Network-IP": {
            "type": "string"
          },
          "Network-Port": {
            "type": "string"
          },
          "Original-Contact": {
            "type": "string"
          },
          "Presence-Hosts": {
            "type": "string"
          },
          "Profile-Name": {
            "type": "string"
          },
          "Proxy-IP": {
            "type": "string"
          },
          "Proxy-Path": {
            "type": "string"
          },
          "Proxy-Port": {
            "type": "string"
          },
          "Proxy-Protocol": {
            "type": "string"
          },
          "RPid": {
            "type": "string"
          },
          "RUID": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "Register-Overwrite-Notify": {
            "type": "string"
          },
          "Registrar-Node": {
            "type": "string"
          },
          "Source-IP": {
            "type": "string"
          },
          "Source-Port": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Suppress-Unregister-Notify": {
            "type": "string"
          },
          "To-Host": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for registration.success"
      },
      "callflows.branch_bnumber": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the branch_bnumber callflow data object"
      },
      "kapi.acdc_stats.status_logged_out": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "logged_out"
            ]
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_logged_out"
      },
      "kapi.conference.config_resp": {
        "required": [
          "Profiles"
        ],
        "type": "object",
        "properties": {
          "Advertise": {
            "type": "string"
          },
          "Caller-Controls": {
            "type": "string"
          },
          "Chat-Permissions": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "config_resp"
            ]
          },
          "Profiles": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.config_resp"
      },
      "devices.combo_key": {
        "type": "object",
        "description": "Device provisioner Combo/Feature Key"
      },
      "kapi.bookkeepers.update_req_definition": {
        "required": [
          "Account-ID",
          "Bookkeeper-ID",
          "Bookkeeper-Type",
          "Invoice",
          "Vendor-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Audit-ID": {
            "type": "string"
          },
          "Audit-Log": {
            "type": "string"
          },
          "Bookkeeper-ID": {
            "type": "string"
          },
          "Bookkeeper-Type": {
            "type": "string"
          },
          "Dry-Run": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "update_req"
            ]
          },
          "Invoice": {
            "type": "string"
          },
          "Vendor-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.update_req_definition"
      },
      "system_config.callflow.menu": {
        "type": "object",
        "properties": {
          "min_greeting_length": {
            "type": "integer",
            "description": "callflow.menu minimum greeting length"
          }
        },
        "description": "Schema for callflow.menu system_config"
      },
      "kapi.registration.query_err": {
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "directory"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reg_query_error"
            ]
          },
          "Registrar-Age": {
            "type": "string"
          }
        },
        "description": "AMQP API for registration.query_err"
      },
      "kapi.acdc_stats.status_err": {
        "required": [
          "Error-Reason"
        ],
        "type": "object",
        "properties": {
          "Error-Reason": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "status_err"
            ]
          }
        },
        "description": "AMQP API for acdc_stats.status_err"
      },
      "kapi.call.query_user_channels_resp": {
        "type": "object",
        "properties": {
          "Channels": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_user_channels_resp"
            ]
          }
        },
        "description": "AMQP API for call.query_user_channels_resp"
      },
      "storage.attachment.google_storage": {
        "required": [
          "handler",
          "settings"
        ],
        "type": "object",
        "properties": {
          "handler": {
            "type": "string",
            "description": "What handler module to use",
            "enum": [
              "google_storage"
            ]
          },
          "settings": {
            "type": "object",
            "properties": {},
            "description": "Settings for the Google Storage account"
          }
        },
        "description": "schema for google storage attachment entry"
      },
      "system_config.notify.voicemail_to_email": {
        "type": "object",
        "properties": {
          "html_content_transfer_encoding": {
            "type": "string",
            "description": "notify.voicemail_to_email html content transfer encoding",
            "default": "7BIT"
          },
          "text_content_transfer_encoding": {
            "type": "string",
            "description": "notify.voicemail_to_email text content transfer encoding",
            "default": "7BIT"
          }
        },
        "description": "Schema for notify.voicemail_to_email system_config"
      },
      "kapi.self.build": {
        "type": "object",
        "description": "AMQP API for self.build"
      },
      "account_config.webhooks": {
        "type": "object",
        "properties": {
          "attempt_failure_count": {
            "type": "integer",
            "description": "webhooks attempt failure count"
          },
          "attempt_failure_expiry_ms": {
            "type": "integer",
            "description": "webhooks attempt failure expiry in milliseconds"
          }
        },
        "description": "Schema for webhooks account_config"
      },
      "faxbox": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "attempts": {
            "maximum": 4,
            "minimum": 0,
            "type": "integer",
            "description": "The number of attempts made, this will be set by the system and reset automatically on put/post"
          },
          "caller_id": {
            "type": "string",
            "description": "The Caller-ID-Number"
          },
          "caller_name": {
            "type": "string",
            "description": "The Caller-ID-Name",
            "default": "Kazoo Fax Printer"
          },
          "custom_smtp_email_address": {
            "type": "string",
            "description": "custom smtp address"
          },
          "fax_header": {
            "type": "string",
            "description": "The name printed at the top of the fax",
            "default": "Kazoo Fax Printer"
          },
          "fax_identity": {
            "type": "string",
            "description": "The number printed at the top of the fax"
          },
          "fax_timezone": {
            "type": "string",
            "description": "The timezone announced"
          },
          "media": {
            "type": "object",
            "properties": {
              "fax_option": {
                "type": "boolean",
                "description": "Is T.38 Supported?"
              }
            },
            "description": "The faxbox media parameters"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the faxbox"
          },
          "notifications": {
            "type": "object",
            "properties": {
              "inbound": {
                "type": "object",
                "properties": {
                  "sms": {
                    "type": "object",
                    "properties": {
                      "send_to": {
                        "type": "object",
                        "description": "A list or string of sms recipient(s)"
                      }
                    },
                    "description": "SMS notifications"
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string",
                        "description": "The http method to use when sending the results",
                        "enum": [
                          "post",
                          "put"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "description": "The content-type to use when sending the results",
                        "enum": [
                          "json",
                          "www-url-form-encoded"
                        ]
                      },
                      "url": {
                        "pattern": "^https?://",
                        "type": "string",
                        "description": "The URL to call back with the results"
                      }
                    },
                    "description": "A URL to send results to"
                  },
                  "email": {
                    "type": "object",
                    "properties": {
                      "send_to": {
                        "type": "object",
                        "description": "A list or string of email recipient(s)"
                      }
                    },
                    "description": "Inbound Email Notifications"
                  }
                },
                "description": "Inbound Status notifications"
              },
              "outbound": {
                "type": "object",
                "properties": {
                  "sms": {
                    "type": "object",
                    "properties": {
                      "send_to": {
                        "type": "object",
                        "description": "A list or string of sms recipient(s)"
                      }
                    },
                    "description": "SMS notifications"
                  },
                  "callback": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string",
                        "description": "The http method to use when sending the results",
                        "enum": [
                          "post",
                          "put"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "description": "The content-type to use when sending the results",
                        "enum": [
                          "json",
                          "www-url-form-encoded"
                        ]
                      },
                      "url": {
                        "pattern": "^https?://",
                        "type": "string",
                        "description": "The URL to call back with the results"
                      }
                    },
                    "description": "A URL to send results to"
                  },
                  "email": {
                    "type": "object",
                    "properties": {
                      "send_to": {
                        "type": "object",
                        "description": "A list or string of email recipient(s)"
                      }
                    },
                    "description": "Email notifications"
                  }
                },
                "description": "Outbound Status notifications"
              }
            },
            "description": "Status notifications"
          },
          "retries": {
            "maximum": 4,
            "minimum": 0,
            "type": "integer",
            "description": "The number of times to retry"
          },
          "smtp_permission_list": {
            "type": "array",
            "description": "smtp permission list. accepts regular expressions",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "FaxBoxes allow configuration of individual fax virtual machines"
      },
      "kapi.call.query_channels_resp": {
        "required": [
          "Channels"
        ],
        "type": "object",
        "properties": {
          "Channels": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_channels_resp"
            ]
          }
        },
        "description": "AMQP API for call.query_channels_resp"
      },
      "kapi.presence.subscribe": {
        "required": [
          "Expires",
          "User"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "subscription"
            ]
          },
          "Event-Package": {
            "type": "string"
          },
          "Expires": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "Queue": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "User": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.subscribe"
      },
      "trunkstore": {
        "required": [
          "account",
          "type"
        ],
        "type": "object",
        "properties": {
          "account": {
            "required": [
              "auth_realm",
              "credits",
              "trunks"
            ],
            "type": "object",
            "properties": {
              "trunks": {
                "minimum": 0,
                "type": "integer",
                "description": "The number of two-way trunks this account has purchased"
              },
              "auth_realm": {
                "minLength": 1,
                "type": "string",
                "description": "The realm any device in the account will use to authenticate with"
              },
              "credits": {
                "required": [
                  "prepay"
                ],
                "type": "object",
                "properties": {
                  "prepay": {
                    "type": "number"
                  }
                }
              },
              "caller_id": {
                "required": [
                  "cid_name",
                  "cid_number"
                ],
                "type": "object",
                "properties": {
                  "cid_name": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "cid_number": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  }
                }
              },
              "emergency_caller_id": {
                "required": [
                  "cid_name",
                  "cid_number"
                ],
                "type": "object",
                "properties": {
                  "cid_name": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "cid_number": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  }
                }
              }
            },
            "description": "Information that applies to the account as a whole"
          },
          "call_restriction": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "If set to deny all calls of this type will be rejected.",
                  "enum": [
                    "inherit",
                    "deny"
                  ]
                }
              }
            },
            "description": "Trunk level call restrictions for each available number classification"
          },
          "name": {
            "type": "string",
            "description": "Human-friendly name of the trunkstore account"
          },
          "servers": {
            "type": "array",
            "description": "What servers will be allowed to make/receive calls via this account",
            "items": {
              "required": [
                "auth"
              ],
              "type": "object",
              "properties": {
                "DIDs": {
                  "type": "object",
                  "properties": {}
                },
                "auth": {
                  "required": [
                    "auth_method",
                    "auth_password",
                    "auth_user"
                  ],
                  "type": "object",
                  "properties": {
                    "auth_method": {
                      "type": "string",
                      "description": "What type of auth mechanism to use",
                      "enum": [
                        "password"
                      ]
                    },
                    "auth_user": {
                      "minLength": 1,
                      "type": "string",
                      "description": "Username for authentication"
                    },
                    "auth_password": {
                      "minLength": 1,
                      "type": "string",
                      "description": "Password of the user@auth_realm"
                    }
                  }
                },
                "name": {
                  "minLength": 1,
                  "type": "string",
                  "description": "Human-friendly name of the server"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "inbound_format": {
                      "type": "string",
                      "description": "Determines how the INVITE is sent to the server",
                      "default": "npan",
                      "enum": [
                        "e164",
                        "npan",
                        "1npan",
                        "username"
                      ]
                    },
                    "sip_headers": {
                      "type": "array",
                      "description": "List of arbitrary SIP headers to add to the INVITE",
                      "items": {
                        "type": "object",
                        "properties": {}
                      }
                    },
                    "delay": {
                      "type": "integer",
                      "description": "The time, in seconds, to wait before attempting to call the server"
                    },
                    "force_outbound": {
                      "type": "boolean",
                      "description": "If true, will send the call over configured carriers instead of to the server (as opposed to the 'enabled' flag, which will reject the calls)",
                      "default": false
                    },
                    "failover": {
                      "type": "object",
                      "properties": {
                        "e164": {
                          "type": "string",
                          "description": "An E.164 formatted DID to dial for failover"
                        },
                        "sip": {
                          "type": "string",
                          "description": "A SIP URI (sip:user@host) to call for failover"
                        }
                      },
                      "description": "Route inbound call to another destination if this server fails to handle the call"
                    },
                    "caller_id": {
                      "required": [
                        "cid_name",
                        "cid_number"
                      ],
                      "type": "object",
                      "properties": {
                        "cid_name": {
                          "maxLength": 35,
                          "minLength": 1,
                          "type": "string"
                        },
                        "cid_number": {
                          "maxLength": 35,
                          "minLength": 1,
                          "type": "string"
                        }
                      }
                    },
                    "progress_timeout": {
                      "minimum": 1,
                      "type": "integer",
                      "description": "The time, in seconds, to wait for the server to progress in the call, before trying an optionally defined failover route or terminating the call"
                    },
                    "media_handling": {
                      "type": "string",
                      "description": "Determine whether the switch should be in the media path or not",
                      "default": "bypass",
                      "enum": [
                        "process",
                        "bypass"
                      ]
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Is the server ready for sending and receiving calls",
                      "default": true
                    },
                    "timeout": {
                      "type": "integer",
                      "description": "The time, in seconds, to wait for an answer from the server"
                    },
                    "ignore_early_media": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "The type of the document (pvt_type in Crossbar docs)",
            "enum": [
              "sys_info"
            ]
          }
        },
        "description": "Trunkstore configuration document - this is old stuff; do not recommend building off this if possible"
      },
      "kapi.acdc_stats.call_waiting": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Caller-Priority": {
            "type": "string"
          },
          "Entered-Timestamp": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_call_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "waiting"
            ]
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_stats.call_waiting"
      },
      "kapi.acdc_stats.status_ready": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "ready"
            ]
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_ready"
      },
      "kapi.notifications.port_rejected": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorized-By": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "port_rejected"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Local-Number": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Number-State": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "Port-Request-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reason": {
            "type": "object",
            "properties": {}
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.port_rejected"
      },
      "conferences.dial": {
        "required": [
          "endpoints"
        ],
        "type": "object",
        "properties": {
          "caller_id_name": {
            "type": "string",
            "description": "Caller ID Name to use when dialing out to endpoints"
          },
          "caller_id_number": {
            "type": "string",
            "description": "Caller ID Number to use when dialing out to endpoints"
          },
          "endpoints": {
            "minItems": 1,
            "type": "array",
            "description": "Endpoints to dial out to and join to the conference",
            "items": {
              "type": "object"
            }
          },
          "participant_flags": {
            "type": "array",
            "description": "Participant flags applied to each endpoint when it joins the conference",
            "items": {
              "type": "string",
              "description": "Participant flag",
              "enum": [
                "mute",
                "deaf",
                "distribute_dtmf",
                "is_moderator",
                "disable_moh",
                "ghost",
                "join_existing",
                "video_mute"
              ]
            }
          },
          "profile_name": {
            "type": "string",
            "description": "The profile name to use for configuration"
          },
          "target_call_id": {
            "type": "string",
            "description": "Existing UUID to use as a hint for where to start the conference"
          },
          "timeout": {
            "minimum": 1,
            "type": "integer",
            "description": "How long to try to reach the endpoint(s)"
          }
        },
        "description": "Schema for conference dial API command"
      },
      "kapi.resource.eavesdrop_req": {
        "required": [
          "Account-ID",
          "Endpoint-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Application-Data": {
            "type": "string"
          },
          "Asserted-Identity-Name": {
            "type": "string"
          },
          "Asserted-Identity-Number": {
            "type": "string"
          },
          "Asserted-Identity-Realm": {
            "type": "string"
          },
          "B-Leg-Events": {
            "type": "string"
          },
          "Bridge-Actions": {
            "type": "object",
            "properties": {}
          },
          "Call-Restrictions-Enabled": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Confirm-Cancel-Timeout": {
            "type": "integer"
          },
          "Confirm-File": {
            "type": "string"
          },
          "Confirm-Key": {
            "type": "string"
          },
          "Continue-After": {
            "type": "string"
          },
          "Continue-On-Fail": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Dial-Endpoint-Method": {
            "type": "string"
          },
          "Eavesdrop-Call-ID": {
            "type": "string"
          },
          "Eavesdrop-Group-ID": {
            "type": "string"
          },
          "Eavesdrop-Mode": {
            "type": "string",
            "enum": [
              "listen",
              "whisper",
              "full"
            ]
          },
          "Enable-T38-Fax": {
            "type": "string"
          },
          "Enable-T38-Fax-Request": {
            "type": "string"
          },
          "Enable-T38-Gateway": {
            "type": "string"
          },
          "Enable-T38-Passthrough": {
            "type": "string"
          },
          "Endpoint-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "resource"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "eavesdrop_req"
            ]
          },
          "Existing-Call-ID": {
            "type": "string"
          },
          "Export-Bridge-Variables": {
            "type": "string"
          },
          "Export-Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Export-Variables": {
            "type": "string"
          },
          "Fail-On-Single-Reject": {
            "type": "string"
          },
          "Fax-Identity-Name": {
            "type": "string"
          },
          "Fax-Identity-Number": {
            "type": "string"
          },
          "Fax-Timezone": {
            "type": "string"
          },
          "Force-Fax": {
            "type": "string"
          },
          "Hold-Media": {
            "type": "string"
          },
          "Ignore-Completed-Elsewhere": {
            "type": "string"
          },
          "Ignore-Early-Media": {
            "type": "string"
          },
          "Ignore-Forward": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string"
          },
          "Intercept-Unbridged-Only": {
            "type": "string"
          },
          "Loopback-Bowout": {
            "type": "string"
          },
          "Media": {
            "type": "string"
          },
          "Originate-Immediate": {
            "type": "string"
          },
          "Origination-Call-ID": {
            "type": "string"
          },
          "Outbound-Call-ID": {
            "type": "string"
          },
          "Outbound-Callee-ID-Name": {
            "type": "string"
          },
          "Outbound-Callee-ID-Number": {
            "type": "string"
          },
          "Outbound-Caller-ID-Name": {
            "type": "string"
          },
          "Outbound-Caller-ID-Number": {
            "type": "string"
          },
          "Privacy-Hide-Name": {
            "type": "string"
          },
          "Privacy-Hide-Number": {
            "type": "string"
          },
          "Privacy-Method": {
            "type": "string"
          },
          "Ringback": {
            "type": "string"
          },
          "SIP-Invite-Parameters": {
            "type": "string"
          },
          "SIP-Transport": {
            "type": "string"
          },
          "Secure-RTP": {
            "type": "string"
          },
          "Simplify-Loopback": {
            "type": "string"
          },
          "Start-Control-Process": {
            "type": "string"
          },
          "Timeout": {
            "type": "string"
          }
        },
        "description": "AMQP API for resource.eavesdrop_req"
      },
      "system_config.notify.new_account": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.new_account default to"
          },
          "html_content_transfer_encoding": {
            "type": "string",
            "description": "notify.new_account html content transfer encoding",
            "default": "7BIT"
          },
          "text_content_transfer_encoding": {
            "type": "string",
            "description": "notify.new_account text content transfer encoding",
            "default": "7BIT"
          }
        },
        "description": "Schema for notify.new_account system_config"
      },
      "app": {
        "required": [
          "api_url",
          "author",
          "i18n",
          "icon",
          "license",
          "name",
          "price",
          "version"
        ],
        "type": "object",
        "properties": {
          "allowed_users": {
            "type": "string",
            "description": "User type allowed to access the app",
            "enum": [
              "specific",
              "all",
              "admins"
            ]
          },
          "api_url": {
            "type": "string",
            "description": "Application api url",
            "format": "uri"
          },
          "author": {
            "maxLength": 64,
            "minLength": 2,
            "type": "string",
            "description": "Application author"
          },
          "i18n": {
            "type": "object",
            "properties": {},
            "description": "Application translation"
          },
          "icon": {
            "type": "string",
            "description": "Application icon"
          },
          "license": {
            "type": "string",
            "description": "Application license"
          },
          "masqueradable": {
            "type": "boolean",
            "description": "Whether an application is masqueradable or not",
            "default": true
          },
          "name": {
            "maxLength": 64,
            "minLength": 3,
            "type": "string",
            "description": "Application name"
          },
          "phase": {
            "type": "string",
            "description": "Application test phase",
            "enum": [
              "alpha",
              "beta",
              "gold"
            ]
          },
          "price": {
            "minimum": 0,
            "type": "number",
            "description": "Application price"
          },
          "published": {
            "type": "boolean",
            "description": "is the app published"
          },
          "screenshots": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "source_url": {
            "type": "string",
            "description": "Application source url",
            "format": "uri"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "urls": {
            "type": "object",
            "properties": {}
          },
          "users": {
            "type": "array",
            "description": "User IDs authorized to use the app (when allowed_users = 'specific')",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string",
            "description": "Application version"
          }
        },
        "description": "Appstore applications"
      },
      "system_config.crossbar.phonebook": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "phonebook integration enabled",
            "default": false
          },
          "phonebook_url": {
            "type": "string",
            "description": "the phonebook api url"
          }
        },
        "description": "Schema for crossbar.phonebook system_config"
      },
      "system_config.privacy": {
        "type": "object",
        "properties": {
          "anonymous_cid_names": {
            "type": "array",
            "description": "Additional CID name patterns to match for anonymous call rejection",
            "items": {
              "type": "string"
            }
          },
          "anonymous_cid_numbers": {
            "type": "array",
            "description": "Additional CID number/userpart patterns to match for anonymous call rejection",
            "items": {
              "type": "string"
            }
          },
          "block_anonymous_caller_id": {
            "type": "boolean",
            "description": "Controls blocking of anonymous calls",
            "default": false
          },
          "check_additional_anonymous_cid_names": {
            "type": "boolean",
            "description": "use the anonymous_cid_names values to check if a number is anonymous",
            "default": false
          },
          "check_additional_anonymous_cid_numbers": {
            "type": "boolean",
            "description": "use the anonymous_cid_numbers values to check if a name is anonymous",
            "default": false
          },
          "default_privacy_name": {
            "type": "string",
            "description": "privacy default_privacy_name",
            "default": "Anonymous"
          },
          "default_privacy_number": {
            "type": "string",
            "description": "privacy default_privacy_number",
            "default": "anonymous"
          },
          "method": {
            "type": "string",
            "description": "privacy method",
            "default": "kazoo"
          },
          "privacy_mode": {
            "type": "string",
            "description": "Default privacy mode for anonymous calls",
            "default": "kazoo"
          },
          "privacy_name": {
            "type": "string",
            "description": "Default Caller ID Name should be shown for anonymous calls",
            "default": "anonymous"
          },
          "privacy_number": {
            "type": "string",
            "description": "Default Caller ID Number should be shown for anonymous calls",
            "default": "0000000000"
          }
        },
        "description": "Schema for privacy system_config"
      },
      "call_waiting": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determines if server side call waiting is enabled/disabled"
          }
        },
        "description": "Parameters for server-side call waiting"
      },
      "kapi.acdc_stats.status_resp": {
        "required": [
          "Agents"
        ],
        "type": "object",
        "properties": {
          "Agents": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "status_resp"
            ]
          }
        },
        "description": "AMQP API for acdc_stats.status_resp"
      },
      "callflows.resources": {
        "type": "object",
        "properties": {
          "bypass_e164": {
            "type": "boolean",
            "description": "Use the original requested number instead of normalizing to E164"
          },
          "caller_id_type": {
            "type": "string",
            "description": "Which configured caller-id to use (key in the 'caller_id' object)",
            "default": "external"
          },
          "custom_sip_headers": {
            "type": "object",
            "properties": {},
            "description": "A property list of SIP headers"
          },
          "do_not_normalize": {
            "type": "boolean",
            "description": "Use the original requested number instead of normalizing; otherwise try to apply the endpoint's dialplan to the requested number"
          },
          "dynamic_flags": {
            "type": "array",
            "description": "List of function names (or 'zone') that are called on the Call record to populate the 'flags' array sent to the resource(s) for matching",
            "items": {
              "type": "string"
            }
          },
          "emit_account_id": {
            "type": "boolean",
            "description": "Toggles whether to put the account id in the SIP packets"
          },
          "format_from_uri": {
            "type": "boolean",
            "description": "If true, puts the account realm in the From header"
          },
          "from_uri_realm": {
            "type": "string",
            "description": "Override the From realm in the SIP packets"
          },
          "hunt_account_id": {
            "type": "string",
            "description": "When using local resources, use this account instead of the account making the call (useful for resellers)"
          },
          "ignore_early_media": {
            "type": "boolean",
            "description": "Toggle whether to ignore early media",
            "default": false
          },
          "outbound_flags": {
            "type": "array",
            "description": "List of flags to use when matching resources to route the call",
            "items": {
              "type": "string"
            }
          },
          "resource_type": {
            "type": "string",
            "description": "sets a custom resource type for the published amqp message"
          },
          "ringback": {
            "type": "string",
            "description": "Tone or file to play while waiting for the leg to be answered"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "timeout": {
            "type": "integer",
            "description": "How long, in seconds, to wait for the call to be answered"
          },
          "to_did": {
            "type": "string",
            "description": "Statically set the DID to dial"
          },
          "use_local_resources": {
            "type": "boolean",
            "description": "Toggle whether to use the account's (or hunt_account_id's) resources vs the system resources",
            "default": true
          }
        },
        "description": "Validator for the resources callflow data object"
      },
      "kapi.notifications.service_added": {
        "required": [
          "Account-ID",
          "Audit-Log",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Audit-Log": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "service_added"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.service_added"
      },
      "kapi.acdc_queue.member_connect_satisfied": {
        "required": [
          "Call",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Agent-Process-IDs": {
            "type": "array"
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "connect_satisfied"
            ]
          },
          "Process-ID": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_connect_satisfied"
      },
      "metaflows.break": {
        "type": "object",
        "description": "Break out of media being sent to a channel"
      },
      "kapi.offnet_resource.req": {
        "required": [
          "Application-Name",
          "Resource-Type",
          "To-DID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Account-Realm": {
            "type": "string"
          },
          "Application-Data": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "bridge",
              "eavesdrop",
              "fax",
              "park",
              "sms",
              "transfer"
            ]
          },
          "Asserted-Identity-Name": {
            "type": "string"
          },
          "Asserted-Identity-Number": {
            "type": "string"
          },
          "Asserted-Identity-Realm": {
            "type": "string"
          },
          "B-Leg-Events": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CALL_SECURE",
                "CALL_UPDATE",
                "CHANNEL_ANSWER",
                "CHANNEL_CREATE",
                "CHANNEL_DESTROY",
                "CHANNEL_EXECUTE",
                "CHANNEL_EXECUTE_COMPLETE",
                "CHANNEL_EXECUTE_ERROR",
                "CHANNEL_FAX_STATUS",
                "CHANNEL_INTERCEPTED",
                "CHANNEL_PROGRESS_MEDIA",
                "CHANNEL_REPLACED",
                "CHANNEL_TRANSFEREE",
                "CHANNEL_TRANSFEROR",
                "CHANNEL_BRIDGE",
                "CHANNEL_UNBRIDGE",
                "CHANNEL_HOLD",
                "CHANNEL_UNHOLD",
                "DETECTED_TONE",
                "DTMF",
                "LEG_CREATED",
                "LEG_DESTROYED",
                "RECORD_START",
                "RECORD_STOP",
                "dialplan"
              ]
            }
          },
          "Body": {
            "type": "string"
          },
          "Bypass-E164": {
            "type": "boolean"
          },
          "Call-ID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Denied-Call-Restrictions": {
            "type": "object",
            "properties": {}
          },
          "Emergency-Caller-ID-Name": {
            "type": "string"
          },
          "Emergency-Caller-ID-Number": {
            "type": "string"
          },
          "Enable-T38-Fax": {
            "type": "string"
          },
          "Enable-T38-Fax-Request": {
            "type": "string"
          },
          "Enable-T38-Gateway": {
            "type": "string"
          },
          "Enable-T38-Passthrough": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "resource"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "offnet_req"
            ]
          },
          "Fax-Identity-Name": {
            "type": "string"
          },
          "Fax-Identity-Number": {
            "type": "string"
          },
          "Fax-T38-Enabled": {
            "type": "string"
          },
          "Fax-Timezone": {
            "type": "string"
          },
          "Flags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Force-Fax": {
            "type": "boolean"
          },
          "Force-Outbound": {
            "type": "boolean"
          },
          "Format-From-URI": {
            "type": "string"
          },
          "From-URI-Realm": {
            "type": "string"
          },
          "Group-ID": {
            "type": "string"
          },
          "Hold-Media": {
            "type": "string"
          },
          "Hunt-Account-ID": {
            "type": "string"
          },
          "Ignore-Early-Media": {
            "type": "string"
          },
          "Inception": {
            "type": "string"
          },
          "Media": {
            "type": "string",
            "enum": [
              "process",
              "bypass",
              "auto"
            ]
          },
          "Message-ID": {
            "type": "string"
          },
          "Mode": {
            "type": "string",
            "enum": [
              "full",
              "listen",
              "whisper"
            ]
          },
          "Original-Resource-Type": {
            "type": "string"
          },
          "Origination-Call-ID": {
            "type": "string"
          },
          "Outbound-Actions": {
            "type": "object",
            "properties": {}
          },
          "Outbound-Call-ID": {
            "type": "string"
          },
          "Outbound-Caller-ID-Name": {
            "type": "string"
          },
          "Outbound-Caller-ID-Number": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "Privacy-Hide-Name": {
            "type": "string"
          },
          "Privacy-Hide-Number": {
            "type": "string"
          },
          "Privacy-Method": {
            "type": "string"
          },
          "Requestor-Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Requestor-Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Resource-Type": {
            "type": "string",
            "enum": [
              "audio",
              "video",
              "originate",
              "sms"
            ]
          },
          "Ringback": {
            "type": "string"
          },
          "Timeout": {
            "type": "string"
          },
          "To-DID": {
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "AMQP API for offnet_resource.req"
      },
      "kapi.conference.dial": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Endpoints"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "dial"
            ]
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Endpoints": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/kapi.dialplan.bridge_endpoint"
            }
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Outbound-Call-ID": {
            "type": "string"
          },
          "Participant-Flags": {
            "type": "string"
          },
          "Profile-Name": {
            "type": "string"
          },
          "Target-Call-ID": {
            "type": "string"
          },
          "Timeout": {
            "type": "integer"
          }
        },
        "description": "AMQP API for conference.dial"
      },
      "kapi.notifications.outbound_smtp_fax_error": {
        "required": [
          "Account-ID",
          "Errors",
          "Fax-From-Email"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Errors": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "outbound_smtp_fax_error"
            ]
          },
          "Fax-From-Email": {
            "type": "string"
          },
          "Fax-To-Email": {
            "type": "string"
          },
          "FaxBox-ID": {
            "type": "string"
          },
          "FaxBox-Name": {
            "type": "string"
          },
          "FaxBox-Timezone": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Original-Number": {
            "type": "string"
          },
          "Owner-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.outbound_smtp_fax_error"
      },
      "kapi.acdc_queue.sync_resp": {
        "required": [
          "Account-ID",
          "Current-Strategy",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Current-Strategy": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "queue"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "sync_resp"
            ]
          },
          "Process-ID": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Strategy-State": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.sync_resp"
      },
      "kapi.notifications.webhook": {
        "required": [
          "Data",
          "Hook"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Data": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "webhook"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Hook": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.webhook"
      },
      "kapi.dialplan.originate_ready": {
        "required": [
          "Call-ID",
          "Control-Queue"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "dialplan"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "originate_ready"
            ]
          }
        },
        "description": "AMQP API for dialplan.originate_ready"
      },
      "system_config.hangups": {
        "type": "object",
        "properties": {
          "hangups_to_monitor": {
            "type": "array",
            "description": "hangups hangups to monitor",
            "items": {
              "type": "string"
            }
          },
          "ignore_hangup_causes": {
            "type": "array",
            "description": "hangups ignore hangup causes",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Schema for hangups system_config"
      },
      "device_rate_limits": {
        "required": [
          "per_minute",
          "per_second"
        ],
        "type": "object",
        "properties": {
          "per_minute": {
            "required": [
              "total_packets"
            ],
            "type": "object",
            "properties": {
              "registrations": {
                "type": "integer",
                "description": "Count for the specified SIP method"
              },
              "invites": {
                "type": "integer",
                "description": "Count for the specified SIP method"
              },
              "total_packets": {
                "type": "integer",
                "description": "Summary count for all of the SIP methods"
              }
            },
            "description": "The limits to apply by a minute"
          },
          "per_second": {
            "required": [
              "total_packets"
            ],
            "type": "object",
            "properties": {
              "registrations": {
                "type": "integer",
                "description": "Count for the specified SIP method"
              },
              "invites": {
                "type": "integer",
                "description": "Count for the specified SIP method"
              },
              "total_packets": {
                "type": "integer",
                "description": "Summary count for all of the SIP methods"
              }
            },
            "description": "The limits to apply by a second"
          }
        },
        "description": "describe limits for SIP requests"
      },
      "kapi.presence.search_resp": {
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "search_resp"
            ]
          },
          "Subscriptions": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.search_resp"
      },
      "system_config.crossbar.sms": {
        "type": "object",
        "properties": {
          "api_e164_convert_from": {
            "type": "boolean",
            "description": "crossbar.sms api e164 convert from",
            "default": false
          },
          "api_e164_convert_to": {
            "type": "boolean",
            "description": "crossbar.sms api e164 convert to",
            "default": false
          }
        },
        "description": "Schema for crossbar.sms system_config"
      },
      "kapi.sysconf.set_resp": {
        "required": [
          "Category",
          "Key",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "sysconf"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "set_resp"
            ]
          },
          "Key": {
            "type": "string"
          },
          "Node": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "description": "AMQP API for sysconf.set_resp"
      },
      "system_config.keys": {
        "type": "object",
        "properties": {
          "voicemail": {
            "$ref": "#/components/schemas/voicemail_keys"
          }
        },
        "description": "Schema for DTMF keys system_config"
      },
      "system_config.tasks.notify_resend": {
        "type": "object",
        "properties": {
          "cycle_delay_time_ms": {
            "type": "integer",
            "description": "Timeout in milliseconds between each cycle"
          },
          "max_doc_read": {
            "type": "integer",
            "description": "Max number of notifications to read from database for each cycle"
          },
          "max_retries": {
            "type": "integer",
            "description": "Default max retries to re-publish"
          },
          "publish_timeout_ms": {
            "minimum": 1,
            "type": "integer",
            "description": "Timeout in milliseconds for publishing notification"
          },
          "reschedule_rules": {
            "type": "object",
            "properties": {},
            "description": "Re-schedule rules for each notification type to apply"
          },
          "retry_after_fudge_s": {
            "type": "integer",
            "description": "Constant time in seconds which would be multiplied with attempts to set retry time"
          }
        },
        "description": "Schema for tasks.notify_resend system_config"
      },
      "account_config.doodle": {
        "type": "object",
        "properties": {
          "api_preserve_caller_id": {
            "type": "boolean",
            "description": "doodle.api preserve caller id",
            "default": true
          },
          "reschedule": {
            "type": "object",
            "properties": {},
            "description": "doodle reschedule"
          }
        },
        "description": "Schema for doodle account_config"
      },
      "kapi.discovery.req": {
        "required": [
          "Offset",
          "Prefix",
          "Quantity",
          "Query-ID"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "discovery"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "request"
            ]
          },
          "Offset": {
            "type": "integer"
          },
          "Prefix": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          },
          "Query-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for discovery.req"
      },
      "callflows.acdc_member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the ACDc Queue"
          },
          "priority": {
            "type": "integer",
            "description": "assign a priority to the caller"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the acdc_member callflow data object"
      },
      "callflows.webhook": {
        "type": "object",
        "properties": {
          "custom_data": {
            "type": "object",
            "properties": {},
            "description": "JSON object of custom data included on the HTTP request"
          },
          "http_verb": {
            "type": "string",
            "description": "What HTTP verb to use when sending the request",
            "enum": [
              "post",
              "get"
            ]
          },
          "retries": {
            "type": "integer",
            "description": "How many times to retry the request if the host isn't available"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "uri": {
            "type": "string",
            "description": "The HTTP URI to send the request"
          }
        },
        "description": "Validator for the webhook callflow data object"
      },
      "kapi.acdc_queue.member_call": {
        "required": [
          "Account-ID",
          "Call",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Member-Priority": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_call"
      },
      "kapi.presence.dialog": {
        "required": [
          "From",
          "To"
        ],
        "type": "object",
        "properties": {
          "Call-Cookie": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Direction": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "dialog_update"
            ]
          },
          "Event-Package": {
            "type": "string"
          },
          "Expires": {
            "type": "string"
          },
          "Flush-Level": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "From-URI": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "Presentity": {
            "type": "string"
          },
          "Presentity-Realm": {
            "type": "string"
          },
          "Presentity-User": {
            "type": "string"
          },
          "State": {
            "type": "string",
            "enum": [
              "early",
              "confirmed",
              "terminated"
            ]
          },
          "Switch-URI": {
            "type": "string"
          },
          "Target-Call-ID": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "To-URI": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.dialog"
      },
      "account_rate_limits": {
        "required": [
          "account",
          "device"
        ],
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/device_rate_limits"
          },
          "device": {
            "$ref": "#/components/schemas/device_rate_limits"
          }
        },
        "description": "describe limits for SIP requests"
      },
      "kapi.call.query_channels_req": {
        "type": "object",
        "properties": {
          "Active-Only": {
            "type": "boolean"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_channels_req"
            ]
          },
          "Fields": {
            "type": "string"
          }
        },
        "description": "AMQP API for call.query_channels_req"
      },
      "system_config.webhooks": {
        "type": "object",
        "properties": {
          "attempt_failure_count": {
            "type": "integer",
            "description": "webhooks attempt failure count"
          },
          "attempt_failure_expiry_ms": {
            "type": "integer",
            "description": "webhooks attempt failure expiry in milliseconds"
          },
          "connect_timeout_ms": {
            "type": "integer",
            "description": "webhooks connect timeout in milliseconds"
          },
          "disable_disabler": {
            "type": "boolean",
            "description": "if true webhooks will not be automatically disabled",
            "default": false
          },
          "log_successful_attempts": {
            "type": "boolean",
            "description": "webhooks log successful attempts",
            "default": false
          },
          "object_types": {
            "type": "array",
            "description": "webhooks object types",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Schema for webhooks system_config"
      },
      "callflows.eavesdrop": {
        "type": "object",
        "properties": {
          "approved_device_id": {
            "type": "string",
            "description": "Restricts the calling device to this Device"
          },
          "approved_group_id": {
            "type": "string",
            "description": "Requires the calling device to be part of the Group"
          },
          "approved_user_id": {
            "type": "string",
            "description": "Requires the calling device to be part of the User"
          },
          "device_id": {
            "type": "string",
            "description": "Device ID to eavesdrop"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "user_id": {
            "type": "string",
            "description": "User ID to eavesdrop"
          }
        },
        "description": "Validator for the eavesdrop callflow data object"
      },
      "kapi.switch.fs_reply": {
        "required": [
          "Command",
          "Result"
        ],
        "type": "object",
        "properties": {
          "Command": {
            "type": "string"
          },
          "Error": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "switch_event"
            ]
          },
          "Event-Data": {
            "type": "string"
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reply"
            ]
          },
          "FreeSWITCH-Node": {
            "type": "string"
          },
          "Response": {
            "type": "string"
          },
          "Result": {
            "type": "string"
          }
        },
        "description": "AMQP API for switch.fs_reply"
      },
      "system_config.notify.system_alert": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.system_alert default to"
          },
          "enable_email_alerts": {
            "type": "boolean",
            "description": "notify.system_alert enable email alerts",
            "default": true
          },
          "html_content_transfer_encoding": {
            "type": "string",
            "description": "notify.system_alert html content transfer encoding",
            "default": "7BIT"
          },
          "subscriber_url": {
            "type": "string",
            "description": "notify.system_alert subscriber url"
          },
          "text_content_transfer_encoding": {
            "type": "string",
            "description": "notify.system_alert text content transfer encoding",
            "default": "7BIT"
          }
        },
        "description": "Schema for notify.system_alert system_config"
      },
      "cdrs": {
        "required": [
          "call_id"
        ],
        "type": "object",
        "properties": {
          "app_name": {
            "type": "string",
            "description": "The Kazoo application that issued the CDR"
          },
          "app_version": {
            "type": "string",
            "description": "The internal Kazoo version number of the application that issued the CDR"
          },
          "billing_seconds": {
            "type": "integer",
            "description": "The number of seconds the call leg can be billed for (typically from when the call leg is answered"
          },
          "call_direction": {
            "type": "string",
            "description": "Direction of the call, relative to the media switch",
            "enum": [
              "inbound",
              "outbound"
            ]
          },
          "call_id": {
            "type": "string",
            "description": "Unique identifier of the call leg"
          },
          "callee_id_name": {
            "type": "string",
            "description": "The indicated name of the callee"
          },
          "callee_id_number": {
            "type": "string",
            "description": "The indicated number of the callee"
          },
          "caller_id_name": {
            "type": "string",
            "description": "The indicated name of the caller"
          },
          "caller_id_number": {
            "type": "string",
            "description": "The indicated number of the caller"
          },
          "custom_application_vars": {
            "type": "object",
            "properties": {},
            "description": "Any custom-set values"
          },
          "custom_channel_vars": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Kazoo-specific key/value pairs set on the channel"
          },
          "custom_sip_headers": {
            "type": "object",
            "properties": {},
            "description": "A property list of SIP headers"
          },
          "digits_dialed": {
            "type": "string",
            "description": "All the DTMF tones detected on this leg of the call"
          },
          "disposition": {
            "type": "string",
            "description": "Who sent the SIP BYE message"
          },
          "duration_seconds": {
            "type": "integer",
            "description": "The duration of the call leg, in seconds"
          },
          "fax_bad_rows": {
            "type": "string"
          },
          "fax_ecm_used": {
            "type": "string"
          },
          "fax_result_code": {
            "type": "string"
          },
          "fax_result_text": {
            "type": "string"
          },
          "fax_success": {
            "type": "string"
          },
          "fax_total_pages": {
            "type": "string"
          },
          "fax_transfer_rate": {
            "type": "string"
          },
          "fax_transferred_pages": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "description": "Built by Kazoo, depending on direction, to represent the From user"
          },
          "from_tag": {
            "type": "string",
            "description": "SIP From TAG"
          },
          "from_uri": {
            "type": "string",
            "description": "The From SIP URI"
          },
          "hangup_cause": {
            "type": "string",
            "description": "The reason for the call leg's termination"
          },
          "hangup_code": {
            "type": "string",
            "description": "The SIP hangup code, if available"
          },
          "interaction_id": {
            "type": "string",
            "description": "correlating ID among related call legs"
          },
          "local_sdp": {
            "type": "string",
            "description": "The SDP negotiated by the local agent"
          },
          "media_server": {
            "type": "string",
            "description": "The hostname of the media server that processed the call"
          },
          "node": {
            "type": "string",
            "description": "The ecallmgr which issued the CDR"
          },
          "other_leg_call_id": {
            "type": "string",
            "description": "If this leg was bridged, the call-id of the opposite leg"
          },
          "other_leg_caller_id_name": {
            "type": "string",
            "description": "Caller ID name of the bridged leg"
          },
          "other_leg_caller_id_number": {
            "type": "string",
            "description": "Caller ID number of the bridged leg"
          },
          "other_leg_destination_number": {
            "type": "string",
            "description": "Dialed number of the other leg"
          },
          "other_leg_direction": {
            "type": "string",
            "description": "direction of the other leg, relative to the media server"
          },
          "presence_id": {
            "type": "string",
            "description": "ID used in NOTIFY SIP messages"
          },
          "remote_sdp": {
            "type": "string",
            "description": "The SDP negotiated by the remote agent"
          },
          "request": {
            "type": "string",
            "description": "Built by Kazoo this is the processed request URI"
          },
          "ringing_seconds": {
            "type": "integer",
            "description": "How many seconds the leg was ringing (pre-answer)"
          },
          "timestamp": {
            "type": "integer",
            "description": "UTC timestamp, in Gregorian seconds, of when the CDR was generated"
          },
          "to": {
            "type": "string",
            "description": "Built by Kazoo, depending on direction, to represent the To user"
          },
          "to_tag": {
            "type": "string",
            "description": "SIP TO Tag"
          },
          "to_uri": {
            "type": "string",
            "description": "The To SIP URI"
          },
          "user_agent": {
            "type": "string",
            "description": "User agent header from SIP packet"
          }
        },
        "description": "Call Detail Records"
      },
      "kapi.offnet_resource.resp": {
        "required": [
          "Response-Message"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Error-Message": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "resource"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "offnet_resp"
            ]
          },
          "Resource-Response": {
            "type": "string"
          },
          "Response-Code": {
            "type": "string"
          },
          "Response-Message": {
            "type": "string"
          }
        },
        "description": "AMQP API for offnet_resource.resp"
      },
      "kapi.acdc_agent.pause": {
        "required": [
          "Account-ID",
          "Agent-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "pause"
            ]
          },
          "Presence-ID": {
            "type": "string"
          },
          "Presence-State": {
            "type": "string",
            "enum": [
              "trying",
              "online",
              "offline",
              "early",
              "confirmed",
              "terminated"
            ]
          },
          "Queue-ID": {
            "type": "string"
          },
          "Time-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_agent.pause"
      },
      "kapi.dialplan.recv_dtmf": {
        "required": [
          "Application-Name",
          "Call-ID",
          "DTMFs"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "recv_dtmf"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "DTMFs": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.recv_dtmf"
      },
      "kapi.presence.mwi_query": {
        "required": [
          "Realm",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "mwi_query"
            ]
          },
          "Realm": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.mwi_query"
      },
      "kapi.acdc_agent.login_queue": {
        "required": [
          "Account-ID",
          "Agent-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "login_queue"
            ]
          },
          "Presence-ID": {
            "type": "string"
          },
          "Presence-State": {
            "type": "string",
            "enum": [
              "trying",
              "online",
              "offline",
              "early",
              "confirmed",
              "terminated"
            ]
          },
          "Queue-ID": {
            "type": "string"
          },
          "Time-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_agent.login_queue"
      },
      "callflows.after_bridge": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "What action to perform after a call is bridged",
            "enum": [
              "park",
              "transfer",
              "hangup"
            ]
          },
          "data": {
            "type": "object",
            "description": "The number to transfer to, or a boolean, depending on the 'action'"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the after_bridge callflow data object"
      },
      "kapi.call.usurp_publisher": {
        "required": [
          "Call-ID",
          "Reference"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "usurp_publisher"
            ]
          },
          "Media-Node": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          },
          "Reference": {
            "type": "string"
          }
        },
        "description": "AMQP API for call.usurp_publisher"
      },
      "resource_selectors.rules": {
        "type": "object",
        "description": "Schema for resource selector rules"
      },
      "system_config.alerts": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alerts enabled",
            "default": true
          }
        },
        "description": "Schema for alerts system_config"
      },
      "conferences": {
        "type": "object",
        "properties": {
          "bridge_password": {
            "type": "string",
            "description": "the password used for a conference bridge"
          },
          "bridge_username": {
            "type": "string",
            "description": "the username used for a conference bridge"
          },
          "caller_controls": {
            "type": "string",
            "description": "caller controls (config settings)"
          },
          "conference_numbers": {
            "uniqueItems": true,
            "type": "array",
            "description": "Defines conference numbers that can be used by members or moderators",
            "items": {
              "pattern": "^[0-9]+$",
              "type": "string"
            }
          },
          "controls": {
            "type": "object",
            "properties": {},
            "description": "controls"
          },
          "domain": {
            "type": "string",
            "description": "domain"
          },
          "focus": {
            "type": "string",
            "description": "This is a read-only property indicating the media server hosting the conference"
          },
          "language": {
            "type": "string",
            "description": "Prompt language to play in the conference"
          },
          "max_members_media": {
            "type": "string",
            "description": "Media to play when the conference is full"
          },
          "max_participants": {
            "type": "integer",
            "description": "The maximum number of participants that can join"
          },
          "member": {
            "type": "object",
            "properties": {
              "join_muted": {
                "type": "boolean",
                "description": "Determines if a member will join muted",
                "default": true
              },
              "numbers": {
                "minItems": 0,
                "uniqueItems": true,
                "type": "array",
                "description": "Defines the conference (call in) number(s) for members",
                "items": {
                  "pattern": "^[0-9]+$",
                  "type": "string"
                }
              },
              "play_entry_prompt": {
                "type": "boolean",
                "description": "Whether to play the entry prompt on member join"
              },
              "pins": {
                "type": "array",
                "description": "Defines the pin number(s) for members",
                "items": {
                  "pattern": "^[0-9]+$",
                  "type": "string"
                }
              },
              "join_deaf": {
                "type": "boolean",
                "description": "Determines if a member will join deaf",
                "default": false
              }
            },
            "description": "Defines the discovery (call in) properties for a member"
          },
          "moderator": {
            "type": "object",
            "properties": {
              "join_muted": {
                "type": "boolean",
                "description": "Determines if a moderator will join muted",
                "default": false
              },
              "numbers": {
                "uniqueItems": true,
                "type": "array",
                "description": "Defines the conference (call in) number(s) for moderators",
                "items": {
                  "pattern": "^[0-9]+$",
                  "type": "string"
                }
              },
              "pins": {
                "type": "array",
                "description": "Defines the pin number(s) for moderators",
                "items": {
                  "pattern": "^[0-9]+$",
                  "type": "string"
                }
              },
              "join_deaf": {
                "type": "boolean",
                "description": "Determines if a moderator will join deaf",
                "default": false
              }
            },
            "description": "Defines the discovery (call in) properties for a moderator"
          },
          "moderator_controls": {
            "type": "string",
            "description": "profile on the switch for controlling the conference as a moderator"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the conference"
          },
          "owner_id": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "The user ID who manages this conference"
          },
          "play_entry_tone": {
            "type": "object",
            "description": "Whether to play an entry tone, or the entry tone to play"
          },
          "play_exit_tone": {
            "type": "object",
            "description": "Whether to play an exit tone, or the exit tone to play"
          },
          "play_name": {
            "type": "boolean",
            "description": "Do we need to announce new conference members?",
            "default": false
          },
          "play_welcome": {
            "type": "boolean",
            "description": "Whether to play the welcome prompt"
          },
          "profile": {
            "$ref": "#/components/schemas/conferences.profile"
          },
          "profile_name": {
            "type": "string",
            "description": "conference profile name"
          },
          "require_moderator": {
            "type": "boolean",
            "description": "does the conference require a moderator"
          },
          "wait_for_moderator": {
            "type": "boolean",
            "description": "should members wait for a moderator before joining the conference"
          }
        },
        "description": "Schema for conferences"
      },
      "limits": {
        "type": "object",
        "properties": {
          "allow_prepay": {
            "type": "boolean",
            "description": "Determines if the account would like to allow per-minute calls if they have no available credit",
            "default": true
          },
          "authz_resource_types": {
            "type": "array",
            "description": "List of Resource-Types that will authorize the call; bypassing limit checks and billing",
            "items": {
              "type": "string"
            }
          },
          "burst_trunks": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of two-way, flat-rate trunks used only if no other trunks are available"
          },
          "calls": {
            "minimum": 0,
            "type": "integer",
            "description": "A hard limit for the total number calls"
          },
          "inbound_trunks": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of inbound, flat-rate trunks"
          },
          "outbound_trunks": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of outbound, flat-rate trunks"
          },
          "resource_consuming_calls": {
            "minimum": 0,
            "type": "integer",
            "description": "A hard limit for the number of resource consuming calls"
          },
          "twoway_trunks": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of two-way, flat-rate trunks"
          }
        },
        "description": "Limit an account's ability to place concurrent calls using flat rate trunks"
      },
      "account_config.callflow": {
        "type": "object",
        "properties": {
          "dialog_subscribed_mwi_prefix": {
            "type": "string",
            "description": "callflow dialog_subscribed_mwi_prefix"
          }
        },
        "description": "Schema for callflow account_config"
      },
      "kapi.conf.doc_update": {
        "required": [
          "Database",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Database": {
            "type": "string"
          },
          "Date-Created": {
            "type": "string"
          },
          "Date-Modified": {
            "type": "string"
          },
          "Doc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "configuration"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "doc_edited",
              "doc_created",
              "doc_deleted",
              "db_edited",
              "db_created",
              "db_deleted"
            ]
          },
          "ID": {
            "type": "string"
          },
          "Is-Soft-Deleted": {
            "type": "boolean"
          },
          "Origin-Cache": {
            "type": "string"
          },
          "Rev": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "description": "AMQP API for conf.doc_update"
      },
      "kapi.dialplan.tones_req_tone": {
        "type": "object",
        "description": "AMQP API for dialplan.tones_req_tone"
      },
      "kapi.notifications.denied_emergency_bridge": {
        "required": [
          "Account-ID",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Emergency-Caller-ID-Name": {
            "type": "string"
          },
          "Emergency-Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "denied_emergency_bridge"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Outbound-Caller-ID-Name": {
            "type": "string"
          },
          "Outbound-Caller-ID-Number": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.denied_emergency_bridge"
      },
      "callflows.conference": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/conferences"
          },
          "id": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "Kazoo ID of the conference"
          },
          "moderator": {
            "type": "boolean",
            "description": "Is the caller entering the conference as a moderator"
          },
          "play_entry_tone": {
            "type": "object",
            "description": "Should the Entry Tone be played"
          },
          "play_exit_tone": {
            "type": "object",
            "description": "Should the Exit Tone be played"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "welcome_prompt": {
            "type": "object",
            "properties": {
              "play": {
                "type": "boolean",
                "description": "Should the Welcome Prompt be played",
                "default": true
              },
              "media_id": {
                "type": "string",
                "description": "Media to play, either Kazoo media ID or URL"
              }
            },
            "description": "Describes how the caller is greeted on entering a conference"
          }
        },
        "description": "Validator for the Conference callflow element"
      },
      "kapi.notifications.new_user": {
        "required": [
          "Account-ID",
          "User-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "new_user"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "User-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.new_user"
      },
      "system_config.trunkstore": {
        "type": "object",
        "properties": {
          "default_caller_id_number": {
            "type": "string",
            "description": "trunkstore default caller id number"
          },
          "default_hunt_non_reconcilable": {
            "type": "boolean",
            "description": "trunkstore default hunt non reconcilable",
            "default": false
          },
          "ensure_valid_caller_id": {
            "type": "boolean",
            "description": "trunkstore ensure valid caller id",
            "default": false
          },
          "honor_diversions_by_cid_validation": {
            "type": "boolean",
            "description": "trunkstore honor diversions by cid validation",
            "default": false
          },
          "pool_overflow": {
            "type": "integer",
            "description": "trunkstore pool_overflow"
          },
          "pool_server_confirms": {
            "type": "boolean",
            "description": "trunkstore pool_server_confirms",
            "default": false
          },
          "pool_size": {
            "type": "integer",
            "description": "trunkstore pool_size"
          },
          "pool_threshold": {
            "type": "integer",
            "description": "trunkstore pool_threshold"
          },
          "ring_ready_offnet": {
            "type": "boolean",
            "description": "trunkstore ring ready offnet",
            "default": true
          }
        },
        "description": "Schema for trunkstore system_config"
      },
      "kapi.tasks.remove_resp": {
        "required": [
          "Reply"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "tasks"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "remove_resp"
            ]
          },
          "Reply": {
            "type": "string"
          }
        },
        "description": "AMQP API for tasks.remove_resp"
      },
      "kapi.notifications.webhook_disabled": {
        "required": [
          "Account-ID",
          "Hook-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "webhook_disabled"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Hook-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.webhook_disabled"
      },
      "kapi.blackhole.module_req": {
        "required": [
          "Action",
          "Module"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": [
              "start",
              "stop"
            ]
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "blackhole"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "module_req"
            ]
          },
          "Module": {
            "type": "string"
          },
          "Persist": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for blackhole.module_req"
      },
      "kapi.dialplan.connect_leg": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Target-Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "connect_leg"
            ]
          },
          "B-Leg-Events": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CALL_SECURE",
                "CALL_UPDATE",
                "CHANNEL_ANSWER",
                "CHANNEL_CREATE",
                "CHANNEL_DESTROY",
                "CHANNEL_EXECUTE",
                "CHANNEL_EXECUTE_COMPLETE",
                "CHANNEL_EXECUTE_ERROR",
                "CHANNEL_FAX_STATUS",
                "CHANNEL_INTERCEPTED",
                "CHANNEL_PROGRESS_MEDIA",
                "CHANNEL_REPLACED",
                "CHANNEL_TRANSFEREE",
                "CHANNEL_TRANSFEROR",
                "CHANNEL_BRIDGE",
                "CHANNEL_UNBRIDGE",
                "CHANNEL_HOLD",
                "CHANNEL_UNHOLD",
                "DETECTED_TONE",
                "DTMF",
                "LEG_CREATED",
                "LEG_DESTROYED",
                "RECORD_START",
                "RECORD_STOP",
                "dialplan"
              ]
            }
          },
          "Call-ID": {
            "type": "string"
          },
          "Continue-On-Cancel": {
            "type": "string"
          },
          "Continue-On-Fail": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Hangup-After-Pickup": {
            "type": "boolean"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Move-Channel-If-Necessary": {
            "type": "boolean"
          },
          "Other-Leg": {
            "type": "string"
          },
          "Park-After-Pickup": {
            "type": "boolean"
          },
          "Publish-Usurp": {
            "type": "boolean"
          },
          "Target-Call-ID": {
            "type": "string"
          },
          "Unanswered-Only": {
            "type": "string"
          },
          "Unbridged-Only": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.connect_leg"
      },
      "system_config.pusher": {
        "type": "object",
        "properties": {
          "User-Agents": {
            "type": "object",
            "properties": {},
            "description": "pusher User-Agents"
          },
          "apple": {
            "type": "object",
            "properties": {
              "apns_topic": {
                "type": "string",
                "description": "APNs topic for push notifications payload"
              },
              "headers": {
                "type": "object",
                "properties": {},
                "description": "pusher apple headers"
              },
              "certificate": {
                "type": "string",
                "description": "PEM-encoded key and certificate"
              },
              "host": {
                "type": "string",
                "description": "APNs server host",
                "default": "api.push.apple.com"
              }
            },
            "description": "pusher apple"
          },
          "firebase": {
            "type": "object",
            "properties": {
              "headers": {
                "type": "object",
                "properties": {},
                "description": "pusher firebase headers"
              },
              "api_key": {
                "type": "string",
                "description": "API Key for firebase"
              }
            },
            "description": "pusher firebase"
          },
          "google": {
            "type": "object",
            "properties": {
              "headers": {
                "type": "object",
                "properties": {},
                "description": "pusher google headers"
              },
              "api_key": {
                "type": "string",
                "description": "API Key for gcm"
              }
            },
            "description": "pusher google"
          },
          "modules": {
            "type": "array",
            "description": "pusher modules",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Schema for pusher system_config"
      },
      "kapi.frontier.ratelimits_req": {
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "rate_limit"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query"
            ]
          },
          "With-Realm": {
            "type": "object"
          }
        },
        "description": "AMQP API for frontier.ratelimits_req"
      },
      "storage.attachment.google_drive": {
        "required": [
          "handler",
          "settings"
        ],
        "type": "object",
        "properties": {
          "handler": {
            "type": "string",
            "description": "What handler module to use",
            "enum": [
              "google_drive"
            ]
          },
          "settings": {
            "required": [
              "oauth_doc_id"
            ],
            "type": "object",
            "properties": {
              "oauth_doc_id": {
                "minLength": 1,
                "type": "string",
                "description": "Doc ID in the system 'auth' database"
              },
              "folder_id": {
                "type": "string",
                "description": "Folder ID in which to store the file, if any"
              }
            },
            "description": "Settings for the Google Drive account"
          }
        },
        "description": "schema for google drive attachment entry"
      },
      "kapi.acdc_agent.login_resp": {
        "required": [
          "Status"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "login_resp"
            ]
          },
          "Status": {
            "type": "string",
            "enum": [
              "success",
              "failed"
            ]
          }
        },
        "description": "AMQP API for acdc_agent.login_resp"
      },
      "kapi.dialplan.store_http_resp": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Media-Name",
          "Media-Transfer-Method",
          "Media-Transfer-Results"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "store"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "response"
            ]
          },
          "Media-Name": {
            "type": "string"
          },
          "Media-Transfer-Method": {
            "type": "string",
            "enum": [
              "put",
              "post"
            ]
          },
          "Media-Transfer-Results": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "AMQP API for dialplan.store_http_resp"
      },
      "kapi.notifications.transaction": {
        "required": [
          "Account-ID",
          "Amount",
          "Response",
          "Success",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Add-Ons": {
            "type": "string"
          },
          "Amount": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Billing-Address": {
            "type": "string"
          },
          "Card-Last-Four": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Currency-Code": {
            "type": "string"
          },
          "Discounts": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "transaction"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Purchase-Order": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Response": {
            "type": "string"
          },
          "Service-Plan": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Success": {
            "type": "string"
          },
          "Tax-Amount": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.transaction"
      },
      "kapi.sysconf.get_resp": {
        "required": [
          "Category",
          "Key",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "sysconf"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "get_resp"
            ]
          },
          "Key": {
            "type": "string"
          },
          "Node": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "description": "AMQP API for sysconf.get_resp"
      },
      "system_config.callflow": {
        "type": "object",
        "properties": {
          "allow_authz_context_overrides": {
            "type": "boolean",
            "description": "callflow allow_authz_context_overrides",
            "default": false
          },
          "authz_contexts": {
            "type": "array",
            "description": "callflow authz_contexts",
            "items": {
              "type": "string"
            }
          },
          "call_recording": {
            "type": "object",
            "properties": {
              "extension": {
                "type": "string",
                "description": "Default media file format for Callflow modules",
                "default": "mp3"
              }
            }
          },
          "calls_consume_tokens": {
            "type": "boolean",
            "description": "callflow calls consume tokens",
            "default": true
          },
          "default_pin_length": {
            "type": "integer",
            "description": "callflow default pin length"
          },
          "default_use_account_caller_id": {
            "type": "boolean",
            "description": "callflow default use account caller id",
            "default": true
          },
          "dialog_subscribed_mwi_prefix": {
            "type": "string",
            "description": "callflow dialog_subscribed_mwi_prefix"
          },
          "ensure_valid_caller_id": {
            "type": "boolean",
            "description": "callflow ensure valid caller id",
            "default": false
          },
          "fax_detect_duration_s": {
            "type": "integer",
            "description": "callflow fax detect duration in seconds"
          },
          "max_branch_count": {
            "type": "integer",
            "description": "callflow maximum branch count"
          },
          "min_bucket_cost": {
            "type": "integer",
            "description": "callflow minimum bucket cost"
          },
          "mwi_send_unsolicited_updates": {
            "type": "boolean",
            "description": "callflow mwi send unsolicited updates",
            "default": true
          },
          "operator_key": {
            "type": "string",
            "description": "callflow operator key",
            "default": "0"
          },
          "pool_overflow": {
            "type": "integer",
            "description": "callflow pool_overflow"
          },
          "pool_server_confirms": {
            "type": "boolean",
            "description": "callflow pool_server_confirms",
            "default": false
          },
          "pool_size": {
            "type": "integer",
            "description": "callflow pool_size"
          },
          "pool_threshold": {
            "type": "integer",
            "description": "callflow pool_threshold"
          },
          "post_answer_delay": {
            "type": "integer",
            "description": "callflow post answer delay"
          },
          "ring_ready_offnet": {
            "type": "boolean",
            "description": "callflow ring ready offnet",
            "default": true
          },
          "route_win_timeout": {
            "type": "integer",
            "description": "callflow route win timeout"
          },
          "should_dry_run_token_restrictions": {
            "type": "boolean",
            "description": "callflow should_dry_run_token_restrictions",
            "default": false
          },
          "singular_call_hook_url": {
            "type": "string",
            "description": "callflow singular call hook url",
            "default": ""
          },
          "voicemail": {
            "type": "object",
            "properties": {
              "max_pin_length": {
                "type": "integer",
                "description": "callflow maximum pin length"
              },
              "extension": {
                "type": "string",
                "description": "Default media file format for Callflow modules",
                "default": "mp3"
              },
              "is_voicemail_ff_rw_enabled": {
                "type": "boolean",
                "description": "callflow allow fastforward and rewind during voicemail message playback",
                "default": false
              },
              "seek_duration_ms": {
                "minimum": 0,
                "type": "integer",
                "description": "callflow fastforward and rewind seek duration"
              },
              "save_after_notify": {
                "type": "boolean",
                "description": "callflow save after notify",
                "default": false
              },
              "max_message_count": {
                "type": "integer",
                "description": "callflow maximum message count"
              },
              "message_retention_duration": {
                "type": "integer",
                "description": "Voicemail message retention duration in days"
              },
              "max_login_attempts": {
                "type": "integer",
                "description": "callflow max login attempts"
              },
              "vm_message_forward_type": {
                "type": "string",
                "description": "Enable or disable the ability to prepend a message when forwarding a voicemail message",
                "default": "only_forward",
                "enum": [
                  "only_forward",
                  "prepend_forward"
                ]
              },
              "max_box_number_length": {
                "type": "integer",
                "description": "callflow maximum box number length"
              },
              "force_require_pin": {
                "type": "boolean",
                "description": "If true, ignore the setting on the vmbox and require all users to enter a pin",
                "default": false
              },
              "delete_after_notify": {
                "type": "boolean",
                "description": "callflow delete after notify",
                "default": false
              },
              "migrate_max_worker": {
                "type": "integer",
                "description": "callflow migrate max worker"
              },
              "max_message_length": {
                "type": "integer",
                "description": "callflow maximum message length"
              },
              "min_message_size": {
                "type": "integer",
                "description": "callflow minimum message size"
              },
              "migrate_max_bulk_insert": {
                "type": "integer",
                "description": "callflow migrate maximum bulk insert"
              },
              "migrate_interaccount_delay_ms": {
                "type": "integer",
                "description": "callflow migrate interaccount delay in milliseconds"
              }
            }
          }
        },
        "description": "Schema for callflow system_config"
      },
      "kapi.metaflow.binding": {
        "required": [
          "Call"
        ],
        "type": "object",
        "properties": {
          "Binding-Digit": {
            "type": "string",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "*",
              "0",
              "#"
            ]
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Call-ID": {
            "type": "string"
          },
          "Digit-Timeout": {
            "minimum": 0,
            "type": "integer"
          },
          "Endpoint-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "metaflow"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "bind"
            ]
          },
          "Listen-On": {
            "type": "string",
            "enum": [
              "both",
              "self",
              "peer",
              "aleg",
              "bleg"
            ]
          },
          "Numbers": {
            "type": "object",
            "properties": {}
          },
          "Patterns": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "AMQP API for metaflow.binding"
      },
      "kapi.presence.register_overwrite": {
        "required": [
          "Contact",
          "Previous-Contact",
          "Realm",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Contact": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "register_overwrite"
            ]
          },
          "Previous-Contact": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.register_overwrite"
      },
      "kapi.acdc_agent.stats_req": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "stats_req"
            ]
          }
        },
        "description": "AMQP API for acdc_agent.stats_req"
      },
      "kapi.notifications.outbound_fax_error": {
        "required": [
          "Fax-ID",
          "Fax-JobId"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "outbound_fax_error"
            ]
          },
          "Fax-Error": {
            "type": "string"
          },
          "Fax-ID": {
            "type": "string"
          },
          "Fax-Info": {
            "type": "string"
          },
          "Fax-JobId": {
            "type": "string"
          },
          "Fax-Notifications": {
            "type": "string"
          },
          "Fax-Timestamp": {
            "type": "string"
          },
          "FaxBox-ID": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Owner-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.outbound_fax_error"
      },
      "system_config.crossbar.accounts": {
        "type": "object",
        "properties": {
          "account_realm_suffix": {
            "type": "string",
            "description": "crossbar.accounts account realm suffix",
            "default": "sip.2600hz.com"
          },
          "allow_move": {
            "type": "string",
            "description": "crossbar.accounts allow move",
            "default": "superduper_admin"
          },
          "allow_sibling_listing": {
            "type": "boolean",
            "description": "crossbar.accounts allow sibling listing",
            "default": true
          },
          "default_parent": {
            "type": "string",
            "description": "crossbar.accounts default parent",
            "default": ""
          },
          "ensure_unique_name": {
            "type": "boolean",
            "description": "crossbar.accounts ensure unique name",
            "default": true
          },
          "expose_api_key": {
            "type": "boolean",
            "description": "crossbar.accounts expose api key",
            "default": false
          },
          "new_account_notify_delay_s": {
            "type": "integer",
            "description": "crossbar.accounts new account notify delay in seconds"
          },
          "random_realm_strength": {
            "type": "integer",
            "description": "crossbar.accounts random realm strength"
          },
          "trial_time": {
            "type": "integer",
            "description": "crossbar.accounts trial time"
          }
        },
        "description": "Schema for crossbar.accounts system_config"
      },
      "kapi.dialplan.playseek": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Direction",
          "Duration"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "playseek"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Direction": {
            "type": "string"
          },
          "Duration": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.playseek"
      },
      "kapi.conference.play": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Media-Name"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "play"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Media-Name": {
            "type": "string"
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.play"
      },
      "kapi.conference.play_macro_req": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Media-Macro"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Media-Macro": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.play_macro_req"
      },
      "callflows.receive_fax": {
        "type": "object",
        "properties": {
          "media": {
            "type": "object",
            "properties": {
              "fax_option": {
                "type": "object",
                "description": "Caller flag for T38 settings"
              }
            }
          },
          "owner_id": {
            "type": "string",
            "description": "User ID to send fax to"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the receive_fax callflow data object"
      },
      "system_config.crossbar.voicemail": {
        "type": "object",
        "properties": {
          "normalization_format": {
            "type": "string",
            "description": "Voicemail default audio format",
            "default": "mp3"
          },
          "normalize_media": {
            "type": "boolean",
            "description": "Whether or not normalize voicemail audio file",
            "default": false
          },
          "transcribe_format": {
            "type": "string",
            "description": "crossbar voicemail transcribe_format"
          }
        },
        "description": "Schema for crossbar.voicemail system_config"
      },
      "kapi.dialplan.transfer": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Transfer-To",
          "Transfer-Type"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "transfer"
            ]
          },
          "Attended-Transfer-Keys": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Transfer-Context": {
            "type": "string"
          },
          "Transfer-Leg": {
            "type": "string",
            "enum": [
              "bleg",
              "both"
            ]
          },
          "Transfer-To": {
            "type": "string"
          },
          "Transfer-Type": {
            "type": "string",
            "enum": [
              "blind",
              "attended"
            ]
          }
        },
        "description": "AMQP API for dialplan.transfer"
      },
      "system_config.call_command": {
        "type": "object",
        "properties": {
          "application_timeout": {
            "type": "integer",
            "description": "call_command application timeout"
          },
          "bridge_timeout_extended_ms": {
            "type": "integer",
            "description": "call_command extended bridge timeout in ms"
          },
          "collect_timeout": {
            "type": "integer",
            "description": "call_command collect timeout"
          },
          "digit_timeout": {
            "type": "integer",
            "description": "call_command digit timeout"
          },
          "export_bridge_variables": {
            "type": "array",
            "description": "call_command export_bridge_variables",
            "items": {
              "type": "string"
            }
          },
          "interdigit_timeout": {
            "type": "integer",
            "description": "call_command interdigit timeout"
          },
          "message_timeout": {
            "type": "integer",
            "description": "call_command message timeout"
          },
          "reserved_ccv_keys": {
            "type": "array",
            "description": "call_command reserved_ccv_keys",
            "items": {
              "type": "string"
            }
          },
          "unknown_cid_name": {
            "type": "string",
            "description": "the value to use when a caller ID name is required but unknown",
            "default": "unknown"
          }
        },
        "description": "Schema for call_command system_config"
      },
      "metaflows": {
        "type": "object",
        "properties": {
          "binding_digit": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "What DTMF will trigger the collection and analysis of the subsequent DTMF sequence",
            "default": "*",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "*",
              "#"
            ]
          },
          "digit_timeout": {
            "minimum": 0,
            "type": "integer",
            "description": "How long to wait between DTMF presses before processing the collected sequence (milliseconds)"
          },
          "listen_on": {
            "type": "string",
            "description": "Which leg(s) of the call to listen for DTMF",
            "enum": [
              "both",
              "self",
              "peer"
            ]
          },
          "numbers": {
            "type": "object",
            "properties": {},
            "description": "A list of static numbers with their flows"
          },
          "patterns": {
            "type": "object",
            "properties": {},
            "description": "A list of patterns with their flows"
          }
        },
        "description": "Actions applied to a call outside of the normal callflow, initiated by the caller(s)"
      },
      "system_config.ecallmgr": {
        "type": "object",
        "properties": {
          "acl_request_timeout_fudge_ms": {
            "type": "integer",
            "description": "ecallmgr acl_request_timeout_fudge_ms"
          },
          "acl_request_timeout_ms": {
            "type": "integer",
            "description": "ecallmgr acl_request_timeout_ms"
          },
          "acls": {
            "type": "object",
            "properties": {},
            "description": "ecallmgr acls"
          },
          "allow_endless_recording": {
            "type": "boolean",
            "description": "ecallmgr allow_endless_recording",
            "default": false
          },
          "authz_default_action": {
            "type": "string",
            "description": "ecallmgr authz default action",
            "default": "deny"
          },
          "authz_dry_run": {
            "type": "boolean",
            "description": "ecallmgr authz dry run",
            "default": false
          },
          "authz_enabled": {
            "type": "boolean",
            "description": "ecallmgr authz enabled",
            "default": false
          },
          "authz_local_resources": {
            "type": "boolean",
            "description": "ecallmgr authz local resources",
            "default": false
          },
          "balance_crawler_cycle_ms": {
            "type": "integer",
            "description": "ecallmgr balance crawler cycle in milliseconds"
          },
          "balance_crawler_enabled": {
            "type": "boolean",
            "description": "ecallmgr balance crawler enabled",
            "default": false
          },
          "balance_crawler_fetch_timeout_ms": {
            "type": "integer",
            "description": "ecallmgr balance crawler fetch timeout in milliseconds"
          },
          "balance_crawler_interaccount_delay_ms": {
            "type": "integer",
            "description": "ecallmgr balance crawler interaccount delay in milliseconds"
          },
          "call_control": {
            "type": "object",
            "properties": {
              "pool_overflow": {
                "type": "integer",
                "description": "ecallmgr call_control pool_overflow"
              },
              "pool_threshold": {
                "type": "integer",
                "description": "ecallmgr call_control pool_threshold"
              },
              "pool_size": {
                "type": "integer",
                "description": "ecallmgr call_control pool_size"
              },
              "pool_server_confirms": {
                "type": "boolean",
                "description": "ecallmgr call_control pool_server_confirms",
                "default": false
              },
              "use_pool": {
                "type": "boolean",
                "description": "ecallmgr call_control use_pool",
                "default": false
              }
            }
          },
          "call_control_listeners": {
            "type": "integer",
            "description": "ecallmgr call_control_listeners"
          },
          "call_routing_bindings": {
            "type": "array",
            "description": "ecallmgr call routing bindings",
            "items": {
              "type": "string"
            }
          },
          "capabilities": {
            "type": "array",
            "description": "ecallmgr capabilities",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "debug_channel": {
            "type": "boolean",
            "description": "ecallmgr debug channel",
            "default": false
          },
          "default_fax_extension": {
            "type": "string",
            "description": "ecallmgr default fax extension",
            "default": ".tiff"
          },
          "default_realm": {
            "type": "string",
            "description": "ecallmgr default realm",
            "default": "nodomain.com"
          },
          "default_recording_extension": {
            "type": "string",
            "description": "ecallmgr default recording extension",
            "default": ".mp3"
          },
          "default_ringback": {
            "type": "string",
            "description": "ecallmgr default ringback",
            "default": "%(2000,4000,440,480)"
          },
          "event_stream_idle_alert": {
            "type": "integer",
            "description": "ecallmgr event stream idle alert"
          },
          "expandable_macros": {
            "type": "object",
            "properties": {},
            "description": "macros that will be expanded at call-time, for use in custom SIP headers"
          },
          "expires_deviation_time": {
            "type": "integer",
            "description": "ecallmgr expires deviation time"
          },
          "failover_when_all_unreg": {
            "type": "boolean",
            "description": "failover only when all devices are offline",
            "default": false
          },
          "fax_file_path": {
            "type": "string",
            "description": "ecallmgr fax file path",
            "default": "/tmp/"
          },
          "fetch_timeout": {
            "type": "integer",
            "description": "ecallmgr fetch timeout"
          },
          "freeswitch_context": {
            "type": "string",
            "description": "ecallmgr freeswitch context",
            "default": "context_2"
          },
          "fs_cmds": {
            "type": "array",
            "description": "ecallmgr fs cmds",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "fs_cmds_wait_ms": {
            "type": "integer",
            "description": "ecallmgr fs cmds wait in milliseconds"
          },
          "fs_node_uptime_s": {
            "type": "integer",
            "description": "ecallmgr fs node uptime in seconds"
          },
          "fs_nodes": {
            "type": "array",
            "description": "ecallmgr fs nodes",
            "items": {
              "type": "string"
            }
          },
          "fs_profiles": {
            "type": "object",
            "properties": {},
            "description": "ecallmgr fs profiles"
          },
          "fs_reconnect_cmds": {
            "type": "array",
            "description": "ecallmgr fs reconnect cmds",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "gateways": {
            "type": "object",
            "properties": {},
            "description": "ecallmgr gateways"
          },
          "insert_fetched_registration_locally": {
            "type": "boolean",
            "description": "ecallmgr insert fetched registration locally",
            "default": false
          },
          "max_channel_cleanup_timeout_ms": {
            "type": "integer",
            "description": "ecallmgr maximum channel cleanup timeout in milliseconds"
          },
          "max_channel_uptime_s": {
            "type": "integer",
            "description": "ecallmgr maximum channel uptime in seconds"
          },
          "max_timeout_for_node_restart": {
            "type": "integer",
            "description": "ecallmgr maximum timeout for node restart"
          },
          "multivar_separator": {
            "type": "string",
            "description": "ecallmgr multivar_separator",
            "default": null
          },
          "network_map": {
            "type": "object",
            "properties": {},
            "description": "ecallmgr network map"
          },
          "node_commands": {
            "type": "object",
            "properties": {
              "send_http": {
                "type": "object",
                "properties": {
                  "delete_on_success": {
                    "type": "boolean",
                    "description": "ecallmgr delete on success",
                    "default": false
                  }
                }
              }
            }
          },
          "node_down_grace_period": {
            "type": "integer",
            "description": "ecallmgr node down grace period"
          },
          "process_gateways": {
            "type": "boolean",
            "description": "ecallmgr process gateways",
            "default": false
          },
          "publish_channel_reconnect": {
            "type": "boolean",
            "description": "ecallmgr publish channel reconnect",
            "default": false
          },
          "publish_channel_state": {
            "type": "boolean",
            "description": "ecallmgr publish channel state",
            "default": true
          },
          "publish_conference_event": {
            "type": "array",
            "description": "ecallmgr publish conference event",
            "items": {
              "type": "string"
            }
          },
          "record_sample_rate": {
            "type": "integer",
            "description": "ecallmgr record sample rate"
          },
          "record_stereo_sample_rate": {
            "type": "integer",
            "description": "ecallmgr record stereo sample rate"
          },
          "record_waste_resources": {
            "type": "boolean",
            "description": "ecallmgr record waste resources",
            "default": false
          },
          "recording_file_path": {
            "type": "string",
            "description": "ecallmgr recording file path",
            "default": "/tmp/"
          },
          "recording_software_name": {
            "type": "string",
            "description": "ecallmgr recording software name",
            "default": "2600Hz, Inc.'s Kazoo"
          },
          "redirect_via_proxy": {
            "type": "boolean",
            "description": "ecallmgr redirect via proxy",
            "default": true
          },
          "restrict_channel_event_publisher": {
            "type": "boolean",
            "description": "ecallmgr restrict_channel_event_publisher",
            "default": true
          },
          "restrict_channel_state_publisher": {
            "type": "boolean",
            "description": "ecallmgr restrict channel state publisher",
            "default": false
          },
          "sanitize_fs_value_regex": {
            "type": "string",
            "description": "ecallmgr sanitize_fs_value_regex",
            "default": "[^0-9\\w\\s-]"
          },
          "should_detect_inband_dtmf": {
            "type": "boolean",
            "description": "ecallmgr should detect inband dtmf",
            "default": false
          },
          "sofia_conf": {
            "type": "boolean",
            "description": "ecallmgr sofia conf",
            "default": false
          },
          "tcp_packet_type": {
            "type": "integer",
            "description": "ecallmgr tcp packet type"
          },
          "text_routing_bindings": {
            "type": "array",
            "description": "ecallmgr text routing bindings",
            "items": {
              "type": "string"
            }
          },
          "use_bypass_media_after_bridge": {
            "type": "boolean",
            "description": "ecallmgr use bypass media after bridge",
            "default": false
          },
          "use_http_cache": {
            "type": "boolean",
            "description": "ecallmgr use http cache",
            "default": true
          },
          "use_shout": {
            "type": "boolean",
            "description": "ecallmgr use shout",
            "default": false
          },
          "use_vlc": {
            "type": "boolean",
            "description": "ecallmgr use vlc",
            "default": false
          },
          "user_cache_time_in_ms": {
            "type": "integer",
            "description": "ecallmgr user cache time in in milliseconds"
          }
        },
        "description": "Schema for ecallmgr system_config"
      },
      "callflows.park": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Action to take for the caller",
            "default": "park",
            "enum": [
              "direct_park",
              "park",
              "retrieve",
              "auto"
            ]
          },
          "custom_presence_id": {
            "type": "boolean",
            "description": "use configured presence_id and fallback to request",
            "default": false
          },
          "default_callback_timeout": {
            "type": "integer",
            "description": "How long, in seconds, to wait before calling back the parker"
          },
          "default_presence_type": {
            "type": "string",
            "description": "Type of presence to update",
            "enum": [
              "early",
              "terminated",
              "confirmed"
            ]
          },
          "default_ringback_timeout": {
            "type": "integer",
            "description": "How long, in milliseconds, before ringing back"
          },
          "max_slot_number": {
            "type": "integer",
            "description": "Continue past this module if the selected slot number exceeds this number. Used to restrict the max number of auto-generated slot numbers"
          },
          "presence_id": {
            "type": "string",
            "description": "use this presence_id"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "slot": {
            "type": "string",
            "description": "Static slot number to use"
          },
          "slots": {
            "type": "object",
            "properties": {},
            "description": "Statically define slots and their configuration"
          }
        },
        "description": "Validator for the park callflow data object"
      },
      "storage.attachments": {
        "type": "object",
        "description": "Defines where and how to store attachments. Keys are 32-character identifiers to be used in storage plans"
      },
      "callflows.sleep": {
        "type": "object",
        "properties": {
          "duration": {
            "maximum": 86400000,
            "minimum": 0,
            "type": "integer",
            "description": "How long to pause before continuing the callflow"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "unit": {
            "type": "string",
            "description": "What time unit is 'duration' in",
            "default": "s",
            "enum": [
              "ms",
              "s",
              "m",
              "h"
            ]
          }
        },
        "description": "Validator for the sleep callflow data object"
      },
      "kapi.resource.originate_resp": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Data": {
            "type": "string"
          },
          "Application-Event": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string"
          },
          "Application-Response": {
            "type": "string"
          },
          "Billing-Seconds": {
            "type": "string"
          },
          "Bridge-Hangup-Cause": {
            "type": "string"
          },
          "Call-Debug": {
            "type": "string"
          },
          "Call-Direction": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Channel-Answer-State": {
            "type": "string"
          },
          "Channel-Call-State": {
            "type": "string"
          },
          "Channel-Created-Time": {
            "type": "integer"
          },
          "Channel-Debug": {
            "type": "string"
          },
          "Channel-Is-Loopback": {
            "type": "string"
          },
          "Channel-Loopback-Bowout": {
            "type": "string"
          },
          "Channel-Loopback-Bowout-Execute": {
            "type": "string"
          },
          "Channel-Loopback-Leg": {
            "type": "string"
          },
          "Channel-Loopback-Other-Leg-ID": {
            "type": "string"
          },
          "Channel-Moving": {
            "type": "string"
          },
          "Channel-Name": {
            "type": "string"
          },
          "Channel-State": {
            "type": "string"
          },
          "Conference-Config": {
            "type": "string"
          },
          "Conference-Name": {
            "type": "string"
          },
          "Connecting-Leg-A-UUID": {
            "type": "string"
          },
          "Connecting-Leg-B-UUID": {
            "type": "string"
          },
          "Control-Queue": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "DTMF-Digit": {
            "type": "string"
          },
          "DTMF-Duration": {
            "type": "string"
          },
          "Detected-Tone": {
            "type": "string"
          },
          "Digits-Dialed": {
            "type": "string"
          },
          "Disposition": {
            "type": "string"
          },
          "Duration-Seconds": {
            "type": "string"
          },
          "Endpoint-Disposition": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "resource"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "originate_resp"
            ]
          },
          "Fax-Info": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "From-Uri": {
            "type": "string"
          },
          "Hangup-Cause": {
            "type": "string"
          },
          "Hangup-Code": {
            "type": "string"
          },
          "Interaction-ID": {
            "type": "string"
          },
          "Intercepted-By": {
            "type": "string"
          },
          "Length": {
            "type": "string"
          },
          "Local-SDP": {
            "type": "string"
          },
          "Media-Recordings": {
            "type": "string"
          },
          "Media-Server": {
            "type": "string"
          },
          "Origination-Call-ID": {
            "type": "string"
          },
          "Other-Leg-Call-ID": {
            "type": "string"
          },
          "Other-Leg-Caller-ID-Name": {
            "type": "string"
          },
          "Other-Leg-Caller-ID-Number": {
            "type": "string"
          },
          "Other-Leg-Destination-Number": {
            "type": "string"
          },
          "Other-Leg-Direction": {
            "type": "string"
          },
          "Parking-Slot": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "Raw-Application-Data": {
            "type": "string"
          },
          "Raw-Application-Name": {
            "type": "string"
          },
          "Recording": {
            "type": "string"
          },
          "Remote-SDP": {
            "type": "string"
          },
          "Replaced-By": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Resigning-Peer-UUID": {
            "type": "string"
          },
          "Resigning-UUID": {
            "type": "string"
          },
          "Ringing-Seconds": {
            "type": "string"
          },
          "Root-Call-Interaction-ID": {
            "type": "string"
          },
          "Silence-Terminated": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-Nodename": {
            "type": "string"
          },
          "Switch-URI": {
            "type": "string"
          },
          "Switch-URL": {
            "type": "string"
          },
          "Target-Call-ID": {
            "type": "string"
          },
          "Terminator": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "To-Uri": {
            "type": "string"
          },
          "Transfer-Disposition": {
            "type": "string"
          },
          "Transfer-History": {
            "type": "string"
          },
          "Transfer-Source": {
            "type": "string"
          },
          "Transfer-To": {
            "type": "string"
          },
          "Transfer-Type": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          }
        },
        "description": "AMQP API for resource.originate_resp"
      },
      "kapi.omnipresence.notify": {
        "required": [
          "From",
          "To"
        ],
        "type": "object",
        "properties": {
          "Body": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "notify"
            ]
          },
          "Event-Package": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          }
        },
        "description": "AMQP API for omnipresence.notify"
      },
      "system_config.notify.fax_inbound_error_to_email": {
        "type": "object",
        "properties": {
          "default_enabled": {
            "type": "boolean",
            "description": "notify.fax_inbound_error_to_email default enabled",
            "default": false
          },
          "filter_error_codes": {
            "type": "array",
            "description": "notify.fax_inbound_error_to_email filter error codes",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Schema for notify.fax_inbound_error_to_email system_config"
      },
      "system_config.media": {
        "type": "object",
        "properties": {
          "authenticated_playback": {
            "type": "boolean",
            "description": "media authenticated playback",
            "default": false
          },
          "authenticated_store": {
            "type": "boolean",
            "description": "media authenticated store",
            "default": true
          },
          "call_recording": {
            "type": "object",
            "properties": {
              "extension": {
                "type": "string",
                "description": "Default media file format",
                "default": "mp3"
              },
              "storage_retry_times": {
                "type": "integer",
                "description": "media storage retry times"
              },
              "workers": {
                "type": "integer",
                "description": "media call_recording workers"
              }
            }
          },
          "default_language": {
            "type": "string",
            "description": "media default language"
          },
          "distributed_proxy": {
            "type": "object",
            "properties": {},
            "description": "media distributed_proxy"
          },
          "fix_media_names": {
            "type": "boolean",
            "description": "media fix media names",
            "default": true
          },
          "max_recording_time_limit": {
            "type": "integer",
            "description": "media maximum recording time limit"
          },
          "normalize_destination_args": {
            "type": "string",
            "description": "media normalize destination args",
            "default": "-r 8000"
          },
          "normalize_executable": {
            "type": "string",
            "description": "media normalize executable",
            "default": "sox"
          },
          "normalize_source_args": {
            "type": "string",
            "description": "media normalize source args",
            "default": ""
          },
          "proxy_hostname": {
            "type": "string",
            "description": "media proxy hostname to be used with HAProxy"
          },
          "proxy_ip": {
            "type": "string",
            "description": "media proxy ip"
          },
          "proxy_listeners": {
            "type": "integer",
            "description": "media proxy listeners"
          },
          "proxy_password": {
            "type": "string",
            "description": "media proxy password",
            "default": ""
          },
          "proxy_port": {
            "type": "integer",
            "description": "media proxy port"
          },
          "proxy_store_acls": {
            "type": "array",
            "description": "media proxy store acls",
            "items": {
              "type": "string"
            }
          },
          "proxy_store_authenticate": {
            "type": "boolean",
            "description": "media proxy store authenticate",
            "default": true
          },
          "proxy_username": {
            "type": "string",
            "description": "media proxy username",
            "default": ""
          },
          "record_min_sec": {
            "type": "integer",
            "description": "media record minimum sec"
          },
          "ssl_cert": {
            "type": "string",
            "description": "media ssl cert"
          },
          "ssl_key": {
            "type": "string",
            "description": "media ssl key"
          },
          "ssl_password": {
            "type": "string",
            "description": "media ssl password",
            "default": ""
          },
          "ssl_port": {
            "type": "integer",
            "description": "media ssl port"
          },
          "store_recordings": {
            "type": "boolean",
            "description": "media store recordings",
            "default": false
          },
          "support_account_overrides": {
            "type": "boolean",
            "description": "media support account overrides",
            "default": true
          },
          "use_https": {
            "type": "boolean",
            "description": "media use https",
            "default": false
          },
          "use_plaintext": {
            "type": "boolean",
            "description": "media use plaintext",
            "default": true
          },
          "use_ssl_proxy": {
            "type": "boolean",
            "description": "media use ssl proxy",
            "default": false
          }
        },
        "description": "Schema for media system_config"
      },
      "kapi.acdc_queue.agent_change": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Change",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Change": {
            "type": "string",
            "enum": [
              "available",
              "ringing",
              "busy",
              "unavailable"
            ]
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "queue"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "agent_change"
            ]
          },
          "Process-ID": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.agent_change"
      },
      "kapi.frontier.acls_req": {
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "acl"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query"
            ]
          },
          "With-Realm": {
            "type": "object"
          }
        },
        "description": "AMQP API for frontier.acls_req"
      },
      "kapi.notifications.topup": {
        "required": [
          "Account-ID",
          "Amount",
          "Response",
          "Success",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Add-Ons": {
            "type": "string"
          },
          "Amount": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Billing-Address": {
            "type": "string"
          },
          "Card-Last-Four": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Currency-Code": {
            "type": "string"
          },
          "Discounts": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "topup"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Purchase-Order": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Response": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Success": {
            "type": "string"
          },
          "Tax-Amount": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.topup"
      },
      "system_config.stepswitch": {
        "type": "object",
        "properties": {
          "assume_inbound_e164": {
            "type": "boolean",
            "description": "stepswitch assume inbound destination DID is e164 format",
            "default": false
          },
          "assume_inbound_origination_e164": {
            "type": "boolean",
            "description": "stepswitch assume inbound origination DID is e164 format",
            "default": false
          },
          "cid_rules_honor_diversions": {
            "type": "boolean",
            "description": "stepswitch cid rules honor diversions",
            "default": false
          },
          "default_audio_codecs": {
            "type": "array",
            "description": "stepswitch default audio codecs",
            "items": {
              "type": "string"
            }
          },
          "default_bypass_media": {
            "type": "boolean",
            "description": "stepswitch default bypass media",
            "default": false
          },
          "default_caller_id_type": {
            "type": "string",
            "description": "stepswitch default caller id type",
            "default": "external"
          },
          "default_codecs": {
            "type": "array",
            "description": "stepswitch default codecs",
            "items": {
              "type": "string"
            }
          },
          "default_emergency_cid_number": {
            "type": "string",
            "description": "stepswitch default emergency cid number"
          },
          "default_formatters": {
            "type": "array",
            "description": "stepswitch default formatters",
            "items": {
              "$ref": "#/components/schemas/formatters"
            }
          },
          "default_prefix": {
            "type": "string",
            "description": "stepswitch default prefix",
            "default": ""
          },
          "default_progress_timeout": {
            "type": "integer",
            "description": "stepswitch default progress timeout"
          },
          "default_route": {
            "type": "string",
            "description": "stepswitch default route"
          },
          "default_rtcp_mux": {
            "type": "string",
            "description": "RTCP protocol messages mixed with RTP data"
          },
          "default_suffix": {
            "type": "string",
            "description": "stepswitch default suffix",
            "default": ""
          },
          "default_video_codecs": {
            "type": "array",
            "description": "stepswitch default video codecs",
            "items": {
              "type": "string"
            }
          },
          "default_weight": {
            "type": "integer",
            "description": "stepswitch default weight"
          },
          "deny_emergency_bridge_cause": {
            "type": "string",
            "description": "stepswitch deny emergency bridge cause",
            "default": "Emergency service not configured"
          },
          "deny_emergency_bridge_code": {
            "type": "integer",
            "description": "stepswitch deny emergency bridge code"
          },
          "deny_emergency_bridge_media": {
            "type": "string",
            "description": "stepswitch deny emergency bridge media",
            "default": "prompt://system_media/stepswitch-emergency_not_configured/"
          },
          "deny_invalid_emergency_cid": {
            "type": "boolean",
            "description": "stepswitch deny invalid emergency cid",
            "default": false
          },
          "ensure_valid_emergency_cid": {
            "type": "boolean",
            "description": "stepswitch ensure valid emergency cid",
            "default": false
          },
          "fixed_length_shortdial_correction": {
            "minimum": 1,
            "type": "integer",
            "description": "stepswitch fixed_length_shortdial_correction"
          },
          "format_from_uri": {
            "type": "boolean",
            "description": "stepswitch format from uri",
            "default": false
          },
          "inbound_user_field": {
            "type": "string",
            "description": "stepswitch inbound destination user field",
            "default": "Request"
          },
          "inbound_user_origination_field": {
            "type": "string",
            "description": "stepswitch inbound origination user field",
            "default": "From"
          },
          "max_shortdial_correction": {
            "minimum": 1,
            "type": "integer",
            "description": "stepswitch maximum shortdial correction"
          },
          "min_shortdial_correction": {
            "minimum": 1,
            "type": "integer",
            "description": "stepswitch minimum shortdial correction"
          },
          "route_by": {
            "type": "string",
            "description": "stepswitch route by",
            "default": "stepswitch_resources"
          },
          "use_first_dedicated_proxy_only": {
            "type": "boolean",
            "description": "If gateways are generated for assigned dedicated IPs, only generate one for the first IP (usually local to the call).",
            "default": true
          }
        },
        "description": "Schema for stepswitch system_config"
      },
      "auth.callback": {
        "required": [
          "client_id",
          "code",
          "provider",
          "redirect_uri"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "client id, usually application id for OAuth providers"
          },
          "code": {
            "type": "string",
            "description": "access code emitted by provider"
          },
          "provider": {
            "type": "string",
            "description": "provider"
          },
          "redirect_uri": {
            "type": "string",
            "description": "redirect URI"
          },
          "state": {
            "type": "string",
            "description": "state"
          }
        },
        "description": "callback for authentication providers"
      },
      "kapi.dialplan.send_dtmf": {
        "required": [
          "Application-Name",
          "Call-ID",
          "DTMFs"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "send_dtmf"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "DTMFs": {
            "type": "string"
          },
          "Duration": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.send_dtmf"
      },
      "account_config.conferences": {
        "type": "object",
        "properties": {
          "controls": {
            "type": "object",
            "properties": {
              "default": {
                "type": "array",
                "description": "conferences controls default",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "description": "what action to assign to the star-code"
                    },
                    "digits": {
                      "type": "string",
                      "description": "what digit sequence to bind the action to"
                    }
                  }
                }
              },
              "page": {
                "type": "array",
                "description": "conferences controls page",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "description": "what action to assign to the star-code"
                    },
                    "digits": {
                      "type": "string",
                      "description": "what digit sequence to bind the action to"
                    }
                  }
                }
              }
            }
          },
          "entry_tone": {
            "type": "string",
            "description": "conferences entry tone",
            "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,659);v=-7;>=3;+=.1;%(800,0,659,783)"
          },
          "exit_tone": {
            "type": "string",
            "description": "conferences exit tone",
            "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,440);v=-7;>=3;+=.1;%(800,0,349,440)"
          },
          "moderator_entry_tone": {
            "type": "string",
            "description": "conferences moderator entry tone",
            "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,659);v=-7;>=3;+=.1;%(800,0,659,783)"
          },
          "moderator_exit_tone": {
            "type": "string",
            "description": "conferences moderator exit tone",
            "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,440);v=-7;>=3;+=.1;%(800,0,349,440)"
          },
          "number_timeout": {
            "type": "integer",
            "description": "conferences number timeout"
          },
          "pin_timeout": {
            "type": "integer",
            "description": "conferences pin timeout"
          },
          "support_name_announcement": {
            "type": "boolean",
            "description": "conferences support name announcement",
            "default": true
          }
        },
        "description": "Schema for conferences account_config"
      },
      "kapi.notifications.missed_call": {
        "required": [
          "Account-ID",
          "Call-Bridged",
          "Call-ID",
          "Message-Left"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-Bridged": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "missed_call"
            ]
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Message-Left": {
            "type": "integer"
          },
          "Notify": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.missed_call"
      },
      "kapi.dialplan.hold_control": {
        "required": [
          "Action",
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": [
              "hold",
              "unhold",
              "toggle"
            ]
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "hold_control"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.hold_control"
      },
      "system_config.notify.ported": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.ported default to"
          },
          "send_from_admin_email": {
            "type": "boolean",
            "description": "notify.ported send from admin email",
            "default": true
          }
        },
        "description": "Schema for notify.ported system_config"
      },
      "system_config.tasks.bill_early": {
        "type": "object",
        "properties": {
          "bill_early_enabled": {
            "type": "boolean",
            "description": "Controls whether we should bill early the accounts",
            "default": false
          },
          "how_many_early_days": {
            "type": "integer",
            "description": "How many days before first of the next month this task should start processing accounts"
          },
          "reminder_enabled": {
            "type": "boolean",
            "description": "Controls whether we should send bill reminder for the accounts a few days before due date",
            "default": false
          }
        },
        "description": "Schema for tasks.bill_early system_config"
      },
      "callflows.intercept_feature": {
        "type": "object",
        "properties": {
          "approved_device_id": {
            "type": "string",
            "description": "Restricts the calling device to this Device"
          },
          "approved_group_id": {
            "type": "string",
            "description": "Requires the calling device to be part of the Group"
          },
          "approved_user_id": {
            "type": "string",
            "description": "Requires the calling device to be part of the User"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "type": {
            "type": "string",
            "description": "The scope of devices to intercept",
            "enum": [
              "user",
              "device",
              "extension"
            ]
          }
        },
        "description": "Validator for the intercept_feature callflow data object"
      },
      "kapi.dialplan.record": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Media-Name"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "record"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Media-Name": {
            "type": "string"
          },
          "Silence-Hits": {
            "type": "string"
          },
          "Silence-Threshold": {
            "type": "string"
          },
          "Terminators": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "*",
                "0",
                "#"
              ]
            }
          },
          "Time-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for dialplan.record"
      },
      "kapi.notifications.deregister": {
        "required": [
          "Account-ID",
          "Realm",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorizing-ID": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "deregister"
            ]
          },
          "Event-Timestamp": {
            "type": "string"
          },
          "Expires": {
            "type": "string"
          },
          "FreeSWITCH-Hostname": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Host": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Network-IP": {
            "type": "string"
          },
          "Network-Port": {
            "type": "string"
          },
          "Presence-Hosts": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Profile-Name": {
            "type": "string"
          },
          "RPid": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Suppress-Unregister-Notify": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Host": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.deregister"
      },
      "metaflows.sound_touch": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Whether to start or stop touching the sound",
            "enum": [
              "start",
              "stop"
            ]
          },
          "adjust_in_octaves": {
            "maximum": 1,
            "minimum": -1,
            "type": "number",
            "description": "Adjust the pitch in octaves"
          },
          "adjust_in_semitones": {
            "maximum": 14,
            "minimum": -14,
            "type": "number",
            "description": "Adjust the pitch in semitones"
          },
          "hook_dtmf": {
            "type": "boolean",
            "description": "Enable DTMF control of audio modifications",
            "default": false
          },
          "pitch": {
            "minimum": 1,
            "type": "number",
            "description": "Set the pitch directly (lower number = lower tone)"
          },
          "rate": {
            "minimum": 1,
            "type": "number",
            "description": "Set the rate directly"
          },
          "sending_leg": {
            "type": "boolean",
            "description": "Apply the filter to the sending leg",
            "default": false
          },
          "tempo": {
            "minimum": 1,
            "type": "number",
            "description": "Set the tempo directly"
          }
        },
        "description": "Pitch-shift and other audio effects"
      },
      "kapi.notifications.notify_update": {
        "required": [
          "Status"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "notify_update"
            ]
          },
          "Failure-Message": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Metadata": {
            "type": "string"
          },
          "Preview": {
            "type": "boolean"
          },
          "Reply-To": {
            "type": "string"
          },
          "Status": {
            "type": "string",
            "enum": [
              "completed",
              "disabled",
              "failed",
              "ignored",
              "pending"
            ]
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.notify_update"
      },
      "kapi.bookkeepers.standing_resp_definition": {
        "required": [
          "Status"
        ],
        "type": "object",
        "properties": {
          "Details": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "standing_resp"
            ]
          },
          "Message": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.standing_resp_definition"
      },
      "callflows.collect_dtmf": {
        "type": "object",
        "properties": {
          "collection_name": {
            "type": "string",
            "description": "Store collected DTMF in a named key"
          },
          "interdigit_timeout": {
            "minimum": 1,
            "type": "integer",
            "description": "How long, in milliseconds, to wait for the next DTMF"
          },
          "max_digits": {
            "minimum": 1,
            "type": "integer",
            "description": "How many DTMFs to collect from the caller"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "terminator": {
            "type": "string",
            "description": "What DTMF will terminate collection before the timeout occurs",
            "default": "#",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "#",
              "*"
            ]
          },
          "terminators": {
            "uniqueItems": true,
            "type": "array",
            "description": "What DTMFs will terminate collection before the timeout occurs",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "0",
                "#",
                "*"
              ]
            }
          },
          "timeout": {
            "minimum": 1,
            "type": "integer",
            "description": "How long, in milliseconds, to wait for the first DTMF"
          }
        },
        "description": "Validator for the Collect DTMF callflow element"
      },
      "kapi.authn.req": {
        "required": [
          "Auth-Realm",
          "Auth-User",
          "From",
          "To"
        ],
        "type": "object",
        "properties": {
          "Auth-Nonce": {
            "type": "string"
          },
          "Auth-Realm": {
            "type": "string"
          },
          "Auth-Response": {
            "type": "string"
          },
          "Auth-User": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "directory"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "authn_req"
            ]
          },
          "Expires": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "Method": {
            "type": "string"
          },
          "Orig-IP": {
            "type": "string"
          },
          "Orig-Port": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          }
        },
        "description": "AMQP API for authn.req"
      },
      "queue_update": {
        "required": [
          "action",
          "queue_id"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Action to perform",
            "enum": [
              "login",
              "logout"
            ]
          },
          "queue_id": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Queue Identifier"
          }
        },
        "description": "Schema for queue update request"
      },
      "kapi.inspector.lookup_req": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_inspector"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "lookup_req"
            ]
          }
        },
        "description": "AMQP API for inspector.lookup_req"
      },
      "kapi.acdc_agent.logout": {
        "required": [
          "Account-ID",
          "Agent-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "logout"
            ]
          },
          "Presence-ID": {
            "type": "string"
          },
          "Presence-State": {
            "type": "string",
            "enum": [
              "trying",
              "online",
              "offline",
              "early",
              "confirmed",
              "terminated"
            ]
          },
          "Queue-ID": {
            "type": "string"
          },
          "Time-Limit": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_agent.logout"
      },
      "system_config.kazoo_directory": {
        "type": "object",
        "properties": {
          "restrict_to_known_types": {
            "type": "boolean",
            "description": "kazoo_directory restrict_to_known_types",
            "default": false
          }
        },
        "description": "Schema for kazoo_directory system_config"
      },
      "system_config.mobile_manager": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "mobile_manager url"
          }
        },
        "description": "Schema for mobile_manager system_config"
      },
      "kapi.dialplan.play": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Media-Name"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "play"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Endless-Playback": {
            "type": "boolean"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Format": {
            "type": "string"
          },
          "Group-ID": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Language": {
            "type": "string"
          },
          "Leg": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "Both"
            ]
          },
          "Loop-Count": {
            "minimum": 1,
            "type": "integer"
          },
          "Media-Name": {
            "type": "string"
          },
          "Terminators": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "*",
                "0",
                "#"
              ]
            }
          },
          "Voice": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.play"
      },
      "kapi.tasks.lookup_req": {
        "type": "object",
        "properties": {
          "Action": {
            "type": "string"
          },
          "Category": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "tasks"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "lookup_req"
            ]
          }
        },
        "description": "AMQP API for tasks.lookup_req"
      },
      "kapi.bookkeepers.collect_recurring_req_definition": {
        "required": [
          "Account-ID",
          "Bookkeeper-ID",
          "Bookkeeper-Type",
          "Vendor-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Audit-Log": {
            "type": "string"
          },
          "Bookkeeper-ID": {
            "type": "string"
          },
          "Bookkeeper-Type": {
            "type": "string"
          },
          "Due-Timestamp": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "collect_recurring_req"
            ]
          },
          "Vendor-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.collect_recurring_req_definition"
      },
      "kapi.frontier.acls_resp": {
        "type": "object",
        "properties": {
          "Device": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acl"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_resp"
            ]
          },
          "Realm": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "AMQP API for frontier.acls_resp"
      },
      "kapi.konami.transferred": {
        "required": [
          "Call",
          "Target",
          "Transferee"
        ],
        "type": "object",
        "properties": {
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "konami"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "transferred"
            ]
          },
          "Target": {
            "type": "string"
          },
          "Transferee": {
            "type": "string"
          },
          "Transferor": {
            "type": "string"
          }
        },
        "description": "AMQP API for konami.transferred"
      },
      "kapi.bookkeepers.refund_resp_definition": {
        "required": [
          "Status",
          "Transaction-DB",
          "Transaction-ID"
        ],
        "type": "object",
        "properties": {
          "Details": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "refund_resp"
            ]
          },
          "Message": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Transaction-DB": {
            "type": "string"
          },
          "Transaction-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.refund_resp_definition"
      },
      "callflows.callflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Callflow ID to branch to"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the callflow callflow data object"
      },
      "system_config.cluster": {
        "type": "object",
        "properties": {
          "cluster_id": {
            "type": "string",
            "description": "provisioner cluster id"
          },
          "zones": {
            "type": "object",
            "properties": {},
            "description": "cluster zones"
          }
        },
        "description": "Schema for cluster system_config"
      },
      "vmboxes": {
        "required": [
          "mailbox",
          "name"
        ],
        "type": "object",
        "properties": {
          "check_if_owner": {
            "type": "boolean",
            "description": "Determines if when the user calls their own voicemail they should be prompted to sign in",
            "default": true
          },
          "delete_after_notify": {
            "type": "boolean",
            "description": "Move the voicemail to delete folder after the notification has been sent",
            "default": false
          },
          "is_setup": {
            "type": "boolean",
            "description": "Determines if the user has completed the initial configuration",
            "default": false
          },
          "is_voicemail_ff_rw_enabled": {
            "type": "boolean",
            "description": "callflow allow fastforward and rewind during voicemail message playback",
            "default": false
          },
          "mailbox": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "The voicemail box number"
          },
          "media": {
            "type": "object",
            "properties": {
              "unavailable": {
                "maxLength": 32,
                "minLength": 32,
                "type": "string",
                "description": "The ID of a media object that should be used as the unavailable greeting"
              }
            },
            "description": "The media (prompt) parameters"
          },
          "media_extension": {
            "type": "string",
            "description": "Voicemail audio format",
            "default": "mp3",
            "enum": [
              "mp3",
              "mp4",
              "wav"
            ]
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the voicemail box"
          },
          "not_configurable": {
            "type": "boolean",
            "description": "Determines if the user can configure this voicemail.",
            "default": false
          },
          "notify": {
            "type": "object",
            "properties": {
              "callback": {
                "$ref": "#/components/schemas/notify.callback"
              }
            }
          },
          "notify_email_addresses": {
            "type": "array",
            "description": "List of email addresses to send notifications to (in addition to owner's email, if any)",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "oldest_message_first": {
            "type": "boolean",
            "description": "Play older voicemail messages before new ones",
            "default": false
          },
          "owner_id": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "The ID of the user object that 'owns' the voicemail box"
          },
          "pin": {
            "maxLength": 15,
            "minLength": 4,
            "type": "string",
            "description": "The pin number for the voicemail box"
          },
          "require_pin": {
            "type": "boolean",
            "description": "Determines if a pin is required to check the voicemail from the users devices",
            "default": false
          },
          "save_after_notify": {
            "type": "boolean",
            "description": "Move the voicemail to save folder after the notification has been sent (This setting will override delete_after_notify)",
            "default": false
          },
          "seek_duration_ms": {
            "minimum": 0,
            "type": "integer",
            "description": "callflow fastforward and rewind seek duration"
          },
          "skip_envelope": {
            "type": "boolean",
            "description": "Determines if the envelope should be skipped",
            "default": false
          },
          "skip_greeting": {
            "type": "boolean",
            "description": "Determines if the greeting should be skipped",
            "default": false
          },
          "skip_instructions": {
            "type": "boolean",
            "description": "Determines if the instructions after the greeting and prior to composing a message should be played",
            "default": false
          },
          "timezone": {
            "maxLength": 32,
            "minLength": 5,
            "type": "string",
            "description": "The default timezone"
          }
        },
        "description": "Schema for a voicemail box"
      },
      "call_recording.parameters": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "is recording enabled"
          },
          "format": {
            "type": "string",
            "description": "What format to store the recording on disk",
            "enum": [
              "mp3",
              "wav"
            ]
          },
          "record_min_sec": {
            "type": "integer",
            "description": "The minimum length, in seconds, the recording must be to be considered successful. Otherwise it is deleted"
          },
          "record_on_answer": {
            "type": "boolean",
            "description": "Recording should start on answer"
          },
          "record_on_bridge": {
            "type": "boolean",
            "description": "Recording should start on bridge"
          },
          "record_sample_rate": {
            "type": "integer",
            "description": "What sampling rate to use on the recording"
          },
          "time_limit": {
            "maximum": 10800,
            "minimum": 5,
            "type": "integer",
            "description": "Time limit, in seconds, for the recording"
          },
          "url": {
            "type": "string",
            "description": "The URL to use when sending the recording for storage",
            "format": "uri"
          }
        }
      },
      "kapi.money.debit": {
        "required": [
          "Account-ID",
          "Amount",
          "Transaction-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Amount": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "transaction"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "debit"
            ]
          },
          "Transaction-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for money.debit"
      },
      "system_config.frontier": {
        "type": "object",
        "properties": {
          "rate_limits": {
            "type": "object",
            "properties": {},
            "description": "frontier rate limits"
          }
        },
        "description": "Schema for frontier system_config"
      },
      "kapi.notifications.skel": {
        "required": [
          "Account-ID",
          "User-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "skel"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "User-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.skel"
      },
      "kapi.dialplan.conference": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Conference-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Deaf": {
            "type": "boolean"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Member-Nospeak": {
            "type": "string"
          },
          "Moderator": {
            "type": "boolean"
          },
          "Mute": {
            "type": "boolean"
          },
          "Nospeak-Check": {
            "type": "string"
          },
          "Profile": {
            "type": "string"
          },
          "Reinvite": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for dialplan.conference"
      },
      "kapi.dialplan.fetch": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "fetch"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "From-Other-Leg": {
            "type": "boolean"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.fetch"
      },
      "system_config.number_manager.vitelity": {
        "type": "object",
        "properties": {
          "api_uri": {
            "type": "string",
            "description": "number_manager.vitelity api uri",
            "default": "http://api.vitelity.net/api.php"
          },
          "routesip": {
            "type": "object",
            "description": "number_manager.vitelity routesip"
          },
          "use_stepswitch_cnam": {
            "type": "boolean",
            "description": "number_manager.vitelity use_stepswitch_cnam",
            "default": false
          }
        },
        "description": "Schema for number_manager.vitelity system_config"
      },
      "system_config.tasks.numbers": {
        "type": "object",
        "properties": {
          "db_page_size": {
            "type": "integer",
            "description": "maximum count of numbers read from db at once"
          },
          "import_defaults_to_carrier": {
            "type": "string",
            "description": "carrier module to use if none provided during numbers import",
            "default": "knm_local"
          }
        },
        "description": "Schema for tasks.numbers system_config"
      },
      "account_config.notify": {
        "type": "object",
        "properties": {
          "notify_persist_exceptions": {
            "type": "array",
            "description": "notify notify_persist_exceptions",
            "items": {
              "type": "string"
            }
          },
          "should_persist_for_retry": {
            "type": "boolean",
            "description": "notify should_persist_for_retry",
            "default": true
          }
        },
        "description": "Schema for notify account_config"
      },
      "callflows.tts": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "endless_playback": {
            "type": "boolean",
            "description": "Loop the media until canceled"
          },
          "engine": {
            "type": "string",
            "description": "What TTS engine to use",
            "enum": [
              "flite",
              "google",
              "ispeech",
              "voicefabric"
            ]
          },
          "language": {
            "type": "string",
            "description": "The language of the speaker"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "terminators": {
            "type": "array",
            "description": "What DTMF can terminate playback of the audio",
            "items": {
              "type": "string"
            }
          },
          "text": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "The text to speak"
          },
          "voice": {
            "type": "string",
            "description": "What voice to use when speaking the text",
            "default": "female"
          }
        },
        "description": "Validator for the TTS (Text-to-speech) callflow action"
      },
      "kapi.dialplan.store_fax": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Media-Transfer-Destination",
          "Media-Transfer-Method"
        ],
        "type": "object",
        "properties": {
          "Additional-Headers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "store_fax"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Fax-Local-Filename": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Media-Transfer-Destination": {
            "type": "string"
          },
          "Media-Transfer-Method": {
            "type": "string",
            "enum": [
              "put"
            ]
          }
        },
        "description": "AMQP API for dialplan.store_fax"
      },
      "shared_auth": {
        "required": [
          "shared_auth"
        ],
        "type": "object",
        "properties": {
          "shared_auth": {
            "maxLength": 64,
            "minLength": 64,
            "type": "string",
            "description": "The shared token"
          }
        },
        "description": "Provides a local auth-token via a shared auth-token"
      },
      "clicktocall": {
        "required": [
          "extension",
          "name"
        ],
        "type": "object",
        "properties": {
          "auth_required": {
            "type": "boolean",
            "description": "Determines if this click to call requires valid auth-tokens when invoked",
            "default": true
          },
          "bypass_media": {
            "type": "object",
            "description": "Default bypass media mode (The string type is deprecated, please use this as a boolean)"
          },
          "caller_id_number": {
            "type": "string",
            "description": "Explicitly set caller id number"
          },
          "custom_application_vars": {
            "type": "object",
            "properties": {},
            "description": "Key-value pairs to set as custom_application_vars on the channel"
          },
          "custom_sip_headers": {
            "type": "object",
            "properties": {},
            "description": "A property list of SIP headers"
          },
          "dial_first": {
            "type": "string",
            "description": "Determines what will be dialed first: extension or contact",
            "enum": [
              "extension",
              "contact"
            ]
          },
          "extension": {
            "type": "string",
            "description": "The extension to connect to when the click to call is invoked"
          },
          "media": {
            "type": "object",
            "properties": {
              "ignore_early_media": {
                "type": "boolean",
                "description": "The option to determine if early media from the endpoint should always be ignored"
              }
            }
          },
          "music_on_hold": {
            "type": "object",
            "properties": {
              "media_id": {
                "maxLength": 2048,
                "type": "string",
                "description": "The ID of a media object that should be used as the music on hold"
              }
            },
            "description": "The music on hold parameters used if not a property of the device owner"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the click to call"
          },
          "outbound_callee_id_name": {
            "type": "string",
            "description": "Callee ID Name of the device calling out to the contact number"
          },
          "outbound_callee_id_number": {
            "type": "string",
            "description": "Callee ID Number of the device calling out to the contact number"
          },
          "presence_id": {
            "type": "string",
            "description": "Static presence ID (used instead of SIP username)"
          },
          "ringback": {
            "type": "string",
            "description": "Ringback to use"
          },
          "throttle": {
            "type": "integer",
            "description": "The rate that this click to call can be invoked"
          },
          "timeout": {
            "type": "integer",
            "description": "How long, in seconds, to wait for the call to progress"
          },
          "whitelist": {
            "type": "array",
            "description": "A list of regular expressions that the click to call can dial to",
            "items": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "description": "Click-to-call allows you to create URLs that can be POSTed to with a phone number or SIP URI and create a phone call from the provided contact information to a destination you have pre-determined."
      },
      "kapi.blackhole.module_resp": {
        "required": [
          "Persisted",
          "Started"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "blackhole"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "module_resp"
            ]
          },
          "Persisted": {
            "type": "boolean"
          },
          "Started": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for blackhole.module_resp"
      },
      "ubiquiti_auth": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "password": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "Ubiquiti SSO Password"
          },
          "username": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "Ubiquiti SSO Username"
          }
        },
        "description": "Provides an auth-token via Ubiquiti's SSO"
      },
      "callflows.transfer": {
        "type": "object",
        "properties": {
          "captures": {
            "type": "array",
            "description": "What to default to using if no capture group is present",
            "items": {
              "type": "string"
            }
          },
          "leg": {
            "type": "string",
            "description": "Which leg to transfer (transferee)",
            "enum": [
              "self",
              "bleg"
            ]
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "target": {
            "type": "string",
            "description": "The target destination (extension or DID)"
          },
          "transfer_type": {
            "type": "string",
            "description": "The type of transfer to perform",
            "default": "blind",
            "enum": [
              "attended",
              "blind"
            ]
          }
        },
        "description": "Validator for the transfer callflow data object"
      },
      "call_recordings": {
        "type": "object",
        "properties": {
          "call_id": {
            "type": "string",
            "description": "call_id"
          },
          "callee_id_name": {
            "type": "string",
            "description": "callee_id_name"
          },
          "callee_id_number": {
            "type": "string",
            "description": "callee_id_number"
          },
          "caller_id_name": {
            "type": "string",
            "description": "caller_id_name"
          },
          "caller_id_number": {
            "type": "string",
            "description": "caller_id_number"
          },
          "cdr_id": {
            "type": "string",
            "description": "cdr_id"
          },
          "content_type": {
            "type": "string",
            "description": "content_type"
          },
          "custom_channel_vars": {
            "type": "object",
            "properties": {},
            "description": "custom_channel_vars"
          },
          "description": {
            "type": "string",
            "description": "description"
          },
          "direction": {
            "type": "string",
            "description": "direction"
          },
          "duration": {
            "minimum": 0,
            "type": "integer",
            "description": "duration"
          },
          "duration_ms": {
            "minimum": 0,
            "type": "integer",
            "description": "duration_ms"
          },
          "from": {
            "type": "string",
            "description": "from"
          },
          "interaction_id": {
            "type": "string",
            "description": "interaction_id"
          },
          "media_source": {
            "type": "string",
            "description": "media_source"
          },
          "media_type": {
            "type": "string",
            "description": "media_type"
          },
          "name": {
            "type": "string",
            "description": "name"
          },
          "origin": {
            "type": "string",
            "description": "origin"
          },
          "owner_id": {
            "type": "string",
            "description": "owner_id"
          },
          "request": {
            "type": "string",
            "description": "request"
          },
          "source_type": {
            "type": "string",
            "description": "source_type"
          },
          "start": {
            "type": "integer",
            "description": "start timestamp, in Gregorian seconds"
          },
          "to": {
            "type": "string",
            "description": "to"
          },
          "url": {
            "type": "string",
            "description": "url"
          }
        },
        "description": "endpoint recording settings"
      },
      "kapi.notifications.voicemail_saved": {
        "required": [
          "Account-ID",
          "From-Realm",
          "From-User",
          "To-Realm",
          "To-User",
          "Voicemail-Box",
          "Voicemail-ID",
          "Voicemail-Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "voicemail_saved"
            ]
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "Voicemail-Box": {
            "type": "string"
          },
          "Voicemail-ID": {
            "type": "string"
          },
          "Voicemail-Length": {
            "type": "string"
          },
          "Voicemail-Timestamp": {
            "type": "string"
          },
          "Voicemail-Transcription": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.voicemail_saved"
      },
      "kapi.dialplan.noop": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "noop"
            ]
          },
          "B-Leg-Events": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CALL_SECURE",
                "CALL_UPDATE",
                "CHANNEL_ANSWER",
                "CHANNEL_CREATE",
                "CHANNEL_DESTROY",
                "CHANNEL_EXECUTE",
                "CHANNEL_EXECUTE_COMPLETE",
                "CHANNEL_EXECUTE_ERROR",
                "CHANNEL_FAX_STATUS",
                "CHANNEL_INTERCEPTED",
                "CHANNEL_PROGRESS_MEDIA",
                "CHANNEL_REPLACED",
                "CHANNEL_TRANSFEREE",
                "CHANNEL_TRANSFEROR",
                "CHANNEL_BRIDGE",
                "CHANNEL_UNBRIDGE",
                "CHANNEL_HOLD",
                "CHANNEL_UNHOLD",
                "DETECTED_TONE",
                "DTMF",
                "LEG_CREATED",
                "LEG_DESTROYED",
                "RECORD_START",
                "RECORD_STOP",
                "dialplan"
              ]
            }
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Filter-Applications": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.noop"
      },
      "callflows.record_caller": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "What format to store the recording on disk",
            "enum": [
              "mp3",
              "wav"
            ]
          },
          "method": {
            "type": "string",
            "description": "What HTTP method to use when sending the recording",
            "default": "put",
            "enum": [
              "put",
              "post"
            ]
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "time_limit": {
            "maximum": 10800,
            "minimum": 5,
            "type": "integer",
            "description": "Time limit, in seconds, for the recording"
          },
          "url": {
            "type": "string",
            "description": "The URL to use when sending the recording for storage",
            "format": "uri"
          }
        },
        "description": "Record the caller's audio stream"
      },
      "kapi.dialplan.tone_detect": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Frequencies",
          "Tone-Detect-Name"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "tone_detect"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Frequencies": {
            "type": "string"
          },
          "Hits-Needed": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "On-Success": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Sniff-Direction": {
            "type": "string",
            "enum": [
              "read",
              "write"
            ]
          },
          "Timeout": {
            "minimum": 0,
            "type": "integer"
          },
          "Tone-Detect-Name": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.tone_detect"
      },
      "system_config.crossbar.cdrs": {
        "type": "object",
        "properties": {
          "cdr_stale_view": {
            "type": "boolean",
            "description": "force cdr to return stale records only",
            "default": false
          },
          "maximum_bulk": {
            "minimum": 1,
            "type": "integer",
            "description": "crossbar.cdrs maximum bulk"
          },
          "maximum_range": {
            "minimum": 1,
            "type": "integer",
            "description": "maximum range (in seconds) prior to the current date allowed for CDR requests"
          }
        },
        "description": "Schema for crossbar.cdrs system_config"
      },
      "kapi.dialplan.originate_execute": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "dialplan"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "originate_execute"
            ]
          }
        },
        "description": "AMQP API for dialplan.originate_execute"
      },
      "queues": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "agent_ring_timeout": {
            "minimum": 1,
            "type": "integer",
            "description": "In seconds, how long to ring an agent before progressing to the next agent available"
          },
          "agent_wrapup_time": {
            "minimum": 0,
            "type": "integer",
            "description": "Pre-defined wait period applied after an agent handles a customer call"
          },
          "announce": {
            "type": "string",
            "description": "Media ID (or appropriate media URI) of media to play when caller is about to be connected."
          },
          "announcements": {
            "type": "object",
            "properties": {
              "wait_time_announcements_enabled": {
                "type": "boolean",
                "description": "Whether announcements of the estimated wait time in the queue should be played"
              },
              "interval": {
                "minimum": 15,
                "type": "integer",
                "description": "Time between announcements"
              },
              "media": {
                "required": [
                  "in_the_queue",
                  "increase_in_call_volume",
                  "the_estimated_wait_time_is",
                  "you_are_at_position"
                ],
                "type": "object",
                "properties": {
                  "you_are_at_position": {
                    "type": "string",
                    "description": "Played before the numeric position"
                  },
                  "the_estimated_wait_time_is": {
                    "type": "string",
                    "description": "Played before the estimated wait time media"
                  },
                  "increase_in_call_volume": {
                    "type": "string",
                    "description": "Played if the estimated wait time has increased since the previous wait time announcement"
                  },
                  "in_the_queue": {
                    "type": "string",
                    "description": "Played after the numeric position"
                  }
                },
                "description": "Custom prompts to be played for the announcements"
              },
              "position_announcements_enabled": {
                "type": "boolean",
                "description": "Whether announcements of the caller's position in the queue should be played"
              }
            },
            "description": "Configuration for periodic announcements to callers waiting in the queue"
          },
          "caller_exit_key": {
            "type": "string",
            "description": "Key caller can press while on hold to exit the queue and continue in the callflow",
            "default": "#",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "*",
              "0",
              "#"
            ]
          },
          "cdr_url": {
            "type": "string",
            "description": "An optional HTTP URL to POST the CDR",
            "format": "uri"
          },
          "connection_timeout": {
            "minimum": 0,
            "type": "integer",
            "description": "In seconds, how long to try to connect the caller before progressing past the queue callflow action"
          },
          "enter_when_empty": {
            "type": "boolean",
            "description": "Allows a caller to enter a queue and wait when no agents are available",
            "default": true
          },
          "max_priority": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "description": "Maximum possible priority level queue will support. Can not be redefined for existing queue."
          },
          "max_queue_size": {
            "type": "integer",
            "description": "How many callers are allowed to wait on hold in the queue (0 for no limit)"
          },
          "moh": {
            "type": "string",
            "description": "Media ID (or appropriate media URI) of media to play while caller is on hold."
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the queue"
          },
          "record_caller": {
            "type": "boolean",
            "description": "When enabled, a caller's audio will be recorded",
            "default": false
          },
          "recording_url": {
            "type": "string",
            "description": "An optional HTTP URL to PUT the call recording after the call ends (and should respond to GET for retrieving the audio data)",
            "format": "uri"
          },
          "ring_simultaneously": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of agents to try in parallel when connecting a caller"
          },
          "strategy": {
            "type": "string",
            "description": "The queue strategy for connecting agents to callers",
            "default": "round_robin",
            "enum": [
              "round_robin",
              "most_idle"
            ]
          }
        },
        "description": "Call Queues - FIFO call queues for serializing callers connecting to agents"
      },
      "kapi.resource.originate_uuid": {
        "required": [
          "Outbound-Call-ID"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "resource"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "originate_uuid"
            ]
          },
          "Outbound-Call-Control-Queue": {
            "type": "string"
          },
          "Outbound-Call-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for resource.originate_uuid"
      },
      "system_config.crossbar.braintree": {
        "type": "object",
        "properties": {
          "max_account_credit": {
            "type": "number",
            "description": "crossbar.braintree maximum account credit"
          }
        },
        "description": "Schema for crossbar.braintree system_config"
      },
      "comment": {
        "required": [
          "author",
          "content",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID of the commenter."
          },
          "action_required": {
            "type": "boolean",
            "description": "Specified if an action is required by the user.",
            "default": false
          },
          "author": {
            "type": "string",
            "description": "Full name of the author"
          },
          "content": {
            "type": "string",
            "description": "Content of the comment"
          },
          "is_private": {
            "type": "boolean",
            "description": "Specified if this comment is private",
            "default": false
          },
          "timestamp": {
            "type": "integer"
          },
          "user_id": {
            "type": "string",
            "description": "User ID of the commenter"
          }
        },
        "description": "Schema for a single comment"
      },
      "metaflows.say": {
        "type": "object",
        "properties": {
          "gender": {
            "type": "string",
            "description": "The gender of the voice to say the text",
            "enum": [
              "feminine",
              "masculine",
              "neuter"
            ]
          },
          "language": {
            "type": "string",
            "description": "Language of the text"
          },
          "method": {
            "type": "string",
            "description": "Toggle the way the text is read to the caller",
            "enum": [
              "pronounced",
              "iterated",
              "counted"
            ]
          },
          "text": {
            "type": "string",
            "description": "The text to say to the caller"
          },
          "type": {
            "type": "string",
            "description": "The type of text to say",
            "enum": [
              "account_number",
              "currency",
              "current_date",
              "current_date_time",
              "current_time",
              "email_address",
              "ip_address",
              "items",
              "messages",
              "name_phonetic",
              "name_spelled",
              "number",
              "persons",
              "postal_address",
              "short_date_time",
              "telephone_extension",
              "telephone_number",
              "time_measurement",
              "url"
            ]
          }
        },
        "description": "Say the provided text"
      },
      "system_config.tasks.modb_creation": {
        "type": "object",
        "properties": {
          "create_in_parallel": {
            "type": "integer",
            "description": "How many accounts to process per pass (in parallel)."
          },
          "creation_day": {
            "type": "integer",
            "description": "Which day of the month (of current month) to create next month's MODBs on"
          }
        },
        "description": "Schema for tasks.modb_creation system_config"
      },
      "access_lists": {
        "required": [
          "cidrs",
          "order"
        ],
        "type": "object",
        "properties": {
          "cidrs": {
            "type": "array",
            "description": "Classless Inter-Domain Routing IP notation for use on the access lists",
            "items": {
              "type": "string",
              "description": "CIDR IP to use on access lists"
            }
          },
          "order": {
            "type": "string",
            "description": "Allow-Deny or Deny-Allow?",
            "enum": [
              "allow,deny",
              "deny,allow"
            ]
          },
          "user_agent": {
            "type": "string",
            "description": "Regexp to match valid user agent strings"
          }
        },
        "description": "Access Control List entries for device or account"
      },
      "kapi.resource.originate_req_endpoint": {
        "type": "object",
        "properties": {
          "Bypass-Media": {
            "type": "boolean"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Endpoint-Options": {
            "type": "object",
            "properties": {}
          },
          "Endpoint-Type": {
            "type": "string",
            "enum": [
              "sip",
              "freetdm"
            ]
          },
          "Ignore-Early-Media": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for resource.originate_req_endpoint"
      },
      "call_recording": {
        "type": "object",
        "properties": {
          "any": {
            "$ref": "#/components/schemas/call_recording.source"
          },
          "inbound": {
            "$ref": "#/components/schemas/call_recording.source"
          },
          "outbound": {
            "$ref": "#/components/schemas/call_recording.source"
          }
        },
        "description": "endpoint recording settings"
      },
      "dialplans": {
        "type": "object",
        "properties": {
          "system": {
            "type": "array",
            "description": "List of system dial plans",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": {
          "type": "object",
          "properties": {
            "prefix": {
              "type": "string",
              "description": "Prefix the prepend to the capture group after applying the regex"
            },
            "description": {
              "type": "string",
              "description": "Friendly name for this regex dialplan"
            },
            "suffix": {
              "type": "string",
              "description": "Suffix the append to the capture group after applying the regex"
            }
          }
        },
        "description": "Permit local dialing by converting the dialed number to a routable form"
      },
      "kapi.sysconf.set_req": {
        "required": [
          "Category",
          "Key",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "sysconf"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "set_req"
            ]
          },
          "Key": {
            "type": "string"
          },
          "Node": {
            "type": "string"
          },
          "Node-Specific": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "description": "AMQP API for sysconf.set_req"
      },
      "kapi.notifications.password_recovery": {
        "required": [
          "Account-ID",
          "Email",
          "Password-Reset-Link"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "password_recovery"
            ]
          },
          "First-Name": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Last-Name": {
            "type": "string"
          },
          "Password-Reset-Link": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Timezone": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "User-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.password_recovery"
      },
      "system_config.jonny5": {
        "type": "object",
        "properties": {
          "check_service_standing": {
            "type": "boolean",
            "description": "jonny5 check_service_standing",
            "default": true
          },
          "default_allow_postpay": {
            "type": "boolean",
            "description": "jonny5 default_allow_postpay"
          },
          "default_inbound_trunks": {
            "type": "integer",
            "description": "jonny5 default inbound trunks"
          },
          "default_max_postpay_amount": {
            "type": "number",
            "description": "jonny5 default_max_postpay_amount"
          },
          "default_twoway_trunks": {
            "type": "integer",
            "description": "jonny5 default twoway trunks"
          },
          "flat_rate_blacklist": {
            "type": "string",
            "description": "jonny5 flat rate blacklist",
            "default": "^\\+1(684|264|268|242|246|441|284|345|767|809|829|849|473|671|876|664|670|787|939|869|758|784|721|868|649|340|900|800|888|877|866|855|844)\\d{7}$"
          },
          "flat_rate_whitelist": {
            "type": "string",
            "description": "jonny5 flat rate whitelist",
            "default": "^\\+1\\d{10}$"
          },
          "resource_flat_rate_lookup": {
            "type": "boolean",
            "description": "lookup flat rate regexps per resource",
            "default": false
          },
          "service_standing_cache_acceptable": {
            "type": "boolean",
            "description": "jonny5 service_standing_cache_acceptable",
            "default": true
          },
          "service_standing_cache_expiration_s": {
            "type": "integer",
            "description": "jonny5 service_standing_cache_expiration_s"
          }
        },
        "description": "Schema for jonny5 system_config"
      },
      "ledgers": {
        "required": [
          "source",
          "usage"
        ],
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Account name"
              },
              "id": {
                "type": "string",
                "description": "Account ID"
              }
            },
            "description": "Account info"
          },
          "amount": {
            "minimum": 1,
            "type": "number",
            "description": "Ledger amount, in currency amount"
          },
          "description": {
            "type": "string",
            "description": "Useful description for ledger"
          },
          "metadata": {
            "type": "object",
            "properties": {},
            "description": "Metadata for ledger document"
          },
          "period": {
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "description": "Period start"
              },
              "end": {
                "type": "integer",
                "description": "Period end"
              }
            },
            "description": "Period of ledger"
          },
          "source": {
            "required": [
              "id",
              "service"
            ],
            "type": "object",
            "properties": {
              "service": {
                "type": "string",
                "description": "Source service"
              },
              "id": {
                "type": "string",
                "description": "Source ID"
              }
            },
            "description": "Origin of ledger"
          },
          "usage": {
            "required": [
              "quantity",
              "type",
              "unit"
            ],
            "type": "object",
            "properties": {
              "unit": {
                "type": "string",
                "description": "Usage unit"
              },
              "quantity": {
                "type": "integer",
                "description": "Usage quantity"
              },
              "type": {
                "type": "string",
                "description": "Usage type"
              }
            },
            "description": "Usage for ledger"
          }
        },
        "description": "ledgers document"
      },
      "system_config.crossbar.token_restrictions": {
        "type": "object",
        "properties": {
          "_": {
            "type": "object",
            "properties": {},
            "description": "crossbar.token_restrictions  "
          },
          "default_priv_level": {
            "type": "string",
            "description": "crossbar.token_restrictions default priv level",
            "default": "admin"
          }
        },
        "description": "Schema for crossbar.token_restrictions system_config"
      },
      "callflows.dynamic_cid": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "What action to perform",
            "enum": [
              "list",
              "lists",
              "manual",
              "static"
            ]
          },
          "caller_id": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "Caller ID Number"
              },
              "name": {
                "type": "string",
                "description": "Caller ID Name"
              }
            },
            "description": "Static Caller ID settings"
          },
          "enforce_call_restriction": {
            "type": "boolean",
            "description": "Check classification restrictions against endpoint",
            "default": true
          },
          "id": {
            "type": "string",
            "description": "List ID for caller IDs when 'action' is 'list'"
          },
          "idx_name": {
            "type": "string",
            "description": "Named capture group to use"
          },
          "interdigit_timeout": {
            "type": "integer",
            "description": "How long, in seconds, to wait for keypresses"
          },
          "max_digits": {
            "type": "integer",
            "description": "Max number of digits allowed when collecting Caller ID Number"
          },
          "media_id": {
            "type": "string",
            "description": "Prompt to play to caller to enter Caller ID Number"
          },
          "min_digits": {
            "type": "integer",
            "description": "Minimum number of digits that must match the regex to collected DTMF"
          },
          "permit_custom_callflow": {
            "type": "boolean",
            "description": "Permit a custom callflow to be accepted instead of restricting to no_match only when looking up callflows",
            "default": false
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "whitelist_regex": {
            "type": "string",
            "description": "Regex to match collected Caller ID Number"
          }
        },
        "description": "Validator for the dynamic_cid callflow data object"
      },
      "system_config.doodle": {
        "type": "object",
        "properties": {
          "api_preserve_caller_id": {
            "type": "boolean",
            "description": "doodle.api preserve caller id",
            "default": true
          },
          "connections": {
            "type": "object",
            "properties": {},
            "description": "doodle connections"
          },
          "default_test_from_number": {
            "type": "string",
            "description": "doodle default test from number",
            "default": "15552220001"
          },
          "default_test_route_id": {
            "type": "string",
            "description": "doodle default test route id",
            "default": "syneverse"
          },
          "inbound_broker": {
            "type": "string",
            "description": "doodle inbound broker"
          },
          "inbound_exchange": {
            "type": "string",
            "description": "doodle inbound exchange",
            "default": "sms"
          },
          "inbound_exchange_options": {
            "type": "object",
            "properties": {},
            "description": "doodle inbound exchange options"
          },
          "inbound_exchange_type": {
            "type": "string",
            "description": "doodle inbound exchange type",
            "default": "topic"
          },
          "inbound_queue_name": {
            "type": "string",
            "description": "doodle inbound queue name"
          },
          "min_bucket_cost": {
            "type": "integer",
            "description": "doodle minimum bucket cost"
          },
          "reschedule": {
            "type": "object",
            "properties": {},
            "description": "doodle reschedule"
          },
          "route_win_timeout": {
            "type": "integer",
            "description": "doodle route win timeout"
          },
          "unavailable_message": {
            "type": "object",
            "properties": {},
            "description": "doodle unavailable message"
          }
        },
        "description": "Schema for doodle system_config"
      },
      "system_config.kazoo_endpoint.mobile": {
        "type": "object",
        "properties": {
          "codecs": {
            "type": "array",
            "description": "kazoo_endpoint.mobile codecs",
            "items": {
              "type": "string"
            }
          },
          "create_sip_endpoint": {
            "type": "boolean",
            "description": "kazoo_endpoint.mobile create sip endpoint",
            "default": false
          },
          "custom_sip_interface": {
            "type": "string",
            "description": "kazoo_endpoint.mobile custom sip interface"
          },
          "formatter": {
            "type": "string",
            "description": "kazoo_endpoint.mobile formatter",
            "default": "^\\+?1?([2-9][0-9]{2}[2-9][0-9]{6})$"
          },
          "path": {
            "type": "string",
            "description": "kazoo_endpoint.mobile path",
            "default": ""
          },
          "prefix": {
            "type": "string",
            "description": "kazoo_endpoint.mobile prefix",
            "default": ""
          },
          "realm": {
            "type": "string",
            "description": "kazoo_endpoint.mobile realm",
            "default": "mobile.k.zswitch.net"
          },
          "sms": {
            "type": "object",
            "properties": {
              "connections": {
                "type": "object",
                "properties": {},
                "description": "kazoo_endpoint.mobile connections"
              }
            }
          },
          "sms_interface": {
            "type": "string",
            "description": "kazoo_endpoint.mobile sms interface",
            "default": "amqp"
          },
          "suffix": {
            "type": "string",
            "description": "kazoo_endpoint.mobile suffix",
            "default": ""
          }
        },
        "description": "Schema for kazoo_endpoint.mobile system_config"
      },
      "kapi.dialplan.queue": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Commands"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "queue"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Commands": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.queue"
      },
      "account_config.keys": {
        "type": "object",
        "properties": {
          "voicemail": {
            "$ref": "#/components/schemas/voicemail_keys"
          }
        },
        "description": "Schema for DTMF keys account_config"
      },
      "connectivity": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "properties": {
              "trunks": {
                "minimum": 0,
                "type": "integer",
                "description": "The number of two-way trunks this account has purchased"
              },
              "auth_realm": {
                "minLength": 1,
                "type": "string",
                "description": "The realm any device in the account will use to authenticate with"
              },
              "caller_id": {
                "type": "object",
                "properties": {
                  "cid_name": {
                    "maxLength": 35,
                    "type": "string"
                  },
                  "cid_number": {
                    "maxLength": 35,
                    "type": "string"
                  }
                }
              },
              "emergency_caller_id": {
                "type": "object",
                "properties": {
                  "cid_name": {
                    "maxLength": 35,
                    "type": "string"
                  },
                  "cid_number": {
                    "maxLength": 35,
                    "type": "string"
                  }
                }
              }
            },
            "description": "Information that applies to the account as a whole"
          },
          "name": {
            "type": "string",
            "description": "Human-friendly name of the trunkstore account"
          },
          "servers": {
            "type": "array",
            "description": "What servers will be allowed to make/receive calls via this account",
            "items": {
              "required": [
                "auth"
              ],
              "type": "object",
              "properties": {
                "DIDs": {
                  "type": "object",
                  "properties": {}
                },
                "auth": {
                  "required": [
                    "auth_method"
                  ],
                  "type": "object",
                  "properties": {
                    "auth_method": {
                      "type": "string",
                      "description": "What type of auth mechanism to use",
                      "default": "password",
                      "enum": [
                        "password",
                        "Password",
                        "IP",
                        "ip"
                      ]
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port to send SIP traffic for the remote device"
                    },
                    "auth_user": {
                      "minLength": 1,
                      "type": "string",
                      "description": "Username for authentication"
                    },
                    "ip": {
                      "type": "string",
                      "description": "IP (sip) address for this device"
                    },
                    "auth_password": {
                      "minLength": 1,
                      "type": "string",
                      "description": "Password of the user@auth_realm"
                    }
                  }
                },
                "name": {
                  "minLength": 1,
                  "type": "string",
                  "description": "Human-friendly name of the server"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "sip_headers": {
                      "type": "array",
                      "description": "List of arbitrary SIP headers to add to the INVITE",
                      "items": {
                        "type": "object",
                        "properties": {}
                      }
                    },
                    "force_outbound": {
                      "type": "boolean",
                      "description": "If true, will send the call over configured carriers instead of to the server (as opposed to the 'enabled' flag, which will reject the calls)",
                      "default": false
                    },
                    "ip": {
                      "type": "string",
                      "description": "IP (sip) address for this device"
                    },
                    "flags": {
                      "type": "array",
                      "description": "List of flags to use when matching resources to route the call",
                      "items": {
                        "type": "string"
                      }
                    },
                    "emergency_caller_id": {
                      "type": "object",
                      "properties": {
                        "cid_name": {
                          "maxLength": 35,
                          "type": "string"
                        },
                        "cid_number": {
                          "maxLength": 35,
                          "type": "string"
                        }
                      }
                    },
                    "media_handling": {
                      "type": "string",
                      "description": "Determine whether the switch should be in the media path or not",
                      "default": "bypass",
                      "enum": [
                        "process",
                        "bypass"
                      ]
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Is the server ready for sending and receiving calls",
                      "default": true
                    },
                    "timeout": {
                      "type": "integer",
                      "description": "The time, in seconds, to wait for an answer from the server"
                    },
                    "inbound_format": {
                      "type": "string",
                      "description": "Determines how the INVITE is sent to the server",
                      "default": "npan",
                      "enum": [
                        "e164",
                        "npan",
                        "1npan",
                        "username"
                      ]
                    },
                    "hunt_account_id": {
                      "type": "string",
                      "description": "When using local resources, use this account instead of the account making the call (useful for resellers)"
                    },
                    "delay": {
                      "type": "integer",
                      "description": "The time, in seconds, to wait before attempting to call the server"
                    },
                    "dynamic_flags": {
                      "type": "array",
                      "description": "List of function names (or 'zone') that are called on the Call record to populate the 'flags' array sent to the resource(s) for matching",
                      "items": {
                        "type": "string"
                      }
                    },
                    "failover": {
                      "type": "object",
                      "properties": {
                        "e164": {
                          "type": "string",
                          "description": "An E.164 formatted DID to dial for failover"
                        },
                        "sip": {
                          "type": "string",
                          "description": "A SIP URI (sip:user@host) to call for failover"
                        }
                      },
                      "description": "Route inbound call to another destination if this server fails to handle the call"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port to send SIP traffic for the remote device"
                    },
                    "caller_id": {
                      "type": "object",
                      "properties": {
                        "cid_name": {
                          "maxLength": 35,
                          "minLength": 1,
                          "type": "string"
                        },
                        "cid_number": {
                          "maxLength": 35,
                          "minLength": 1,
                          "type": "string"
                        }
                      }
                    },
                    "progress_timeout": {
                      "minimum": 1,
                      "type": "integer",
                      "description": "The time, in seconds, to wait for the server to progress in the call, before trying an optionally defined failover route or terminating the call"
                    },
                    "hunt_non_reconcilable": {
                      "type": "boolean",
                      "description": "Whether to allow routing to continue on a non-reconcilable TO number",
                      "default": false
                    },
                    "ignore_early_media": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Trunkstore configuration document - this is old stuff; do not recommend building off this if possible"
      },
      "temporal_rules_sets": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the temporal rule set"
          },
          "temporal_rules": {
            "minItems": 1,
            "type": "array",
            "description": "Temporal Rules",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Schema for a temporal rules sets"
      },
      "kapi.presence.reset": {
        "required": [
          "Realm",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reset"
            ]
          },
          "Event-Package": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.reset"
      },
      "account_config.crossbar.auth": {
        "required": [
          "auth_modules"
        ],
        "type": "object",
        "properties": {
          "auth_modules": {
            "type": "object",
            "properties": {
              "cb_ubiquiti_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              },
              "cb_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              },
              "cb_user_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              },
              "cb_api_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              },
              "cb_ip_auth": {
                "$ref": "#/components/schemas/auth_module_config"
              }
            },
            "description": "Default crossbar authentication modules configuration"
          }
        },
        "description": "Schema for crossbar.auth account_config"
      },
      "account_config.ledgers": {
        "type": "object",
        "properties": {
          "registered_ledgers": {
            "type": "array",
            "description": "ledgers registered_ledgers",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "description": "Schema for ledgers account_config"
      },
      "kapi.sms.message_endpoint_headers": {
        "required": [
          "Invite-Format"
        ],
        "type": "object",
        "properties": {
          "Auth-Password": {
            "type": "string"
          },
          "Auth-Realm": {
            "type": "string"
          },
          "Auth-User": {
            "type": "string"
          },
          "Bypass-Media": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Codecs": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Enable-T38-Fax": {
            "type": "string"
          },
          "Enable-T38-Fax-Request": {
            "type": "string"
          },
          "Enable-T38-Gateway": {
            "type": "string"
          },
          "Enable-T38-Passthrough": {
            "type": "string"
          },
          "Endpoint-Actions": {
            "type": "string"
          },
          "Endpoint-Delay": {
            "type": "string"
          },
          "Endpoint-Options": {
            "type": "string"
          },
          "Endpoint-Progress-Timeout": {
            "type": "integer"
          },
          "Endpoint-Timeout": {
            "type": "integer"
          },
          "Endpoint-Type": {
            "type": "string"
          },
          "Failover": {
            "type": "string"
          },
          "Force-Fax": {
            "type": "string"
          },
          "Forward-IP": {
            "type": "string"
          },
          "Hold-Media": {
            "type": "string"
          },
          "Ignore-Completed-Elsewhere": {
            "type": "string"
          },
          "Ignore-Early-Media": {
            "type": "string"
          },
          "Invite-Format": {
            "type": "string"
          },
          "Loopback-Bowout": {
            "type": "string"
          },
          "Outbound-Call-ID": {
            "type": "string"
          },
          "Outbound-Callee-ID-Name": {
            "type": "string"
          },
          "Outbound-Callee-ID-Number": {
            "type": "string"
          },
          "Outbound-Caller-ID-Name": {
            "type": "string"
          },
          "Outbound-Caller-ID-Number": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "Privacy-Hide-Name": {
            "type": "string"
          },
          "Privacy-Hide-Number": {
            "type": "string"
          },
          "Privacy-Method": {
            "type": "string"
          },
          "Proxy-IP": {
            "type": "string"
          },
          "Proxy-Zone": {
            "type": "string"
          },
          "Route": {
            "type": "string"
          },
          "SIP-Interface": {
            "type": "string"
          },
          "SIP-Invite-Parameters": {
            "type": "string"
          },
          "SIP-Transport": {
            "type": "string"
          },
          "Simplify-Loopback": {
            "type": "string"
          },
          "To-DID": {
            "type": "string"
          },
          "To-IP": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-URI": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "To-Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for sms.message_endpoint_headers"
      },
      "callflows.menu": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Menu ID to use"
          },
          "interdigit_timeout": {
            "type": "integer",
            "description": "Amount of time, in milliseconds, to wait between keypresses"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the menu callflow data object"
      },
      "kapi.blackhole.get_resp": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "blackhole"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "get_resp"
            ]
          }
        },
        "description": "AMQP API for blackhole.get_resp"
      },
      "callflows.manual_presence": {
        "required": [
          "presence_id"
        ],
        "type": "object",
        "properties": {
          "presence_id": {
            "type": "string",
            "description": "The Presence ID to send a presence notification about"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "status": {
            "type": "string",
            "description": "The status to update to",
            "default": "idle",
            "enum": [
              "idle",
              "ringing",
              "busy"
            ]
          }
        },
        "description": "Validator for the Manual Presence callflow action"
      },
      "kapi.conference.participant_energy": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Energy-Level",
          "Participant-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "participant_energy"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Energy-Level": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.participant_energy"
      },
      "system_config.kazoo_convert.convertapi": {
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "description": "convertapi api_url",
            "default": "https://v2.convertapi.com"
          },
          "pdf_version": {
            "type": "string",
            "description": "Which pdf version files will be produced by convertapi service",
            "default": "1.7",
            "enum": [
              "1.2",
              "1.3",
              "1.4",
              "1.5",
              "1.6",
              "1.7"
            ]
          },
          "resolution": {
            "maximum": 2400,
            "minimum": 10,
            "type": "integer",
            "description": "Which document resolution is used for converted files"
          },
          "secret": {
            "type": "string",
            "description": "convertapi secret"
          },
          "timeout": {
            "maximum": 1200,
            "minimum": 10,
            "type": "integer",
            "description": "Document conversion timeout"
          },
          "try_openoffice": {
            "type": "string",
            "description": "For which files types may be called openoffice",
            "default": "for_msoffice_files_also",
            "enum": [
              "for_msoffice_files_also",
              "for_openoffice_files_only",
              "never"
            ]
          }
        },
        "description": "Schema for kazoo_convert.convertapi system_config"
      },
      "callflows.hangup": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the hangup callflow data object"
      },
      "system_config.speech": {
        "type": "object",
        "properties": {
          "asr_api_key": {
            "type": "string",
            "description": "speech asr API key",
            "default": ""
          },
          "asr_locale": {
            "type": "string",
            "description": "speech asr default locale",
            "default": "en-us"
          },
          "asr_mime_type": {
            "type": "string",
            "description": "speech asr mime type",
            "default": "application/wav"
          },
          "asr_preferred_content_type": {
            "type": "string",
            "description": "speech asr preferred content type",
            "default": "application/wav"
          },
          "asr_provider": {
            "type": "string",
            "description": "speech asr provider",
            "default": "ispeech"
          },
          "asr_url": {
            "type": "string",
            "description": "speech asr url",
            "default": "http://api.ispeech.org/api/json"
          },
          "temporary_storage_path": {
            "type": "string",
            "description": "speech temporary storage path",
            "default": "/tmp"
          },
          "tts_api_key": {
            "type": "string",
            "description": "speech tts api key",
            "default": ""
          },
          "tts_args_encode": {
            "type": "string",
            "description": "speech tts args encode",
            "default": "multipart"
          },
          "tts_cache": {
            "type": "integer",
            "description": "How long, in milliseconds, to cache TTS media files"
          },
          "tts_end_padding": {
            "type": "integer",
            "description": "speech tts end padding"
          },
          "tts_language": {
            "type": "string",
            "description": "speech tts language",
            "default": "en-us"
          },
          "tts_provider": {
            "type": "string",
            "description": "speech tts provider",
            "default": "flite"
          },
          "tts_speed": {
            "type": "integer",
            "description": "speech tts speed"
          },
          "tts_start_padding": {
            "type": "integer",
            "description": "speech tts start padding"
          },
          "tts_url_ispeech": {
            "type": "string",
            "description": "speech TTS URL for iSpeech provider",
            "default": "http://api.ispeech.org/api/json"
          },
          "tts_url_voicefabric": {
            "type": "string",
            "description": "speech TTS URL for VoiceFabric provider",
            "default": "https://voicefabric.ru/WSServer/ws/tts"
          },
          "tts_voice": {
            "type": "string",
            "description": "speech tts voice",
            "default": "male"
          }
        },
        "description": "Schema for speech system_config"
      },
      "kapi.dialplan.tts": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Text"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "tts"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Endless-Playback": {
            "type": "boolean"
          },
          "Engine": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Group-ID": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Language": {
            "type": "string"
          },
          "Leg": {
            "type": "string"
          },
          "Loop-Count": {
            "minimum": 1,
            "type": "integer"
          },
          "Terminators": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "*",
                "0",
                "#"
              ]
            }
          },
          "Text": {
            "type": "string"
          },
          "Voice": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          }
        },
        "description": "AMQP API for dialplan.tts"
      },
      "kapi.notifications.cf_notification": {
        "required": [
          "Account-ID",
          "Template-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-Bridged": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "cf_notification"
            ]
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Message-Left": {
            "type": "integer"
          },
          "Notification-Media": {
            "type": "string",
            "enum": [
              "email",
              "sms"
            ]
          },
          "Notify": {
            "type": "string"
          },
          "Preview": {
            "type": "boolean"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Template-ID": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.cf_notification"
      },
      "kapi.sysconf.flush_req": {
        "required": [
          "Category"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "sysconf"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "flush_req"
            ]
          },
          "Key": {
            "type": "string"
          },
          "Node": {
            "type": "string"
          }
        },
        "description": "AMQP API for sysconf.flush_req"
      },
      "system_config.number_manager.bandwidth": {
        "type": "object",
        "properties": {
          "debug": {
            "type": "boolean",
            "description": "should debug mode be activated for the legacy knm_bandwidth?",
            "default": false
          },
          "developer_key": {
            "type": "string",
            "description": "developer key for the legacy Bandwidth API",
            "default": ""
          },
          "enable_provisioning": {
            "type": "boolean",
            "description": "number_manager.bandwidth enable provisioning",
            "default": true
          },
          "endpoints": {
            "type": "object",
            "description": "number_manager.bandwidth endpoints"
          },
          "numbers_api_url": {
            "type": "string",
            "description": "number_manager.bandwidth numbers api url",
            "default": "https://api.bandwidth.com/public/v2/numbers.api"
          },
          "order_name_prefix": {
            "type": "string",
            "description": "number_manager.bandwidth order name prefix",
            "default": "Kazoo"
          },
          "sandbox_provisioning": {
            "type": "boolean",
            "description": "number_manager.bandwidth sandbox provisioning",
            "default": true
          }
        },
        "description": "Schema for number_manager.bandwidth system_config"
      },
      "callflows.disa": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the DISA callflow data object"
      },
      "system_config.metaflows": {
        "type": "object",
        "properties": {
          "binding_digit": {
            "type": "string",
            "description": "metaflows binding digit",
            "default": "*"
          },
          "default_metaflow": {
            "type": "object",
            "properties": {},
            "description": "metaflows default metaflow"
          },
          "digit_timeout_ms": {
            "type": "integer",
            "description": "metaflows digit timeout in milliseconds"
          },
          "listen_on": {
            "type": "string",
            "description": "metaflows listen on",
            "default": "a"
          },
          "numbers": {
            "type": "object",
            "properties": {},
            "description": "metaflows numbers"
          },
          "patterns": {
            "type": "object",
            "properties": {},
            "description": "metaflows patterns"
          }
        },
        "description": "Schema for metaflows system_config"
      },
      "callflows.check_cid": {
        "type": "object",
        "properties": {
          "caller_id": {
            "type": "object",
            "properties": {
              "external": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string",
                    "description": "Update external Caller ID Number"
                  },
                  "name": {
                    "type": "string",
                    "description": "Update external Caller ID Name"
                  }
                }
              }
            }
          },
          "regex": {
            "type": "string",
            "description": "Determine match/nomatch when use_absolute_mode is false",
            "default": ".*"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "use_absolute_mode": {
            "type": "boolean",
            "description": "If true, direct call down a branch that matches the caller ID",
            "default": false
          },
          "user_id": {
            "type": "string",
            "description": "kazoo User ID to use as owner_id instead of detected owner_id"
          }
        },
        "description": "Validator for the check_cid callflow data object"
      },
      "kapi.acdc_stats.status_req": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "End-Range": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "status_req"
            ]
          },
          "Limit": {
            "type": "string"
          },
          "Start-Range": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_stats.status_req"
      },
      "kapi.metaflow.action": {
        "required": [
          "Action",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "enum": [
              "transfer",
              "hangup",
              "callflow",
              "break",
              "intercept",
              "move",
              "park",
              "unpark",
              "play",
              "say",
              "audio_level",
              "hold",
              "record_call",
              "resume",
              "tts"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Data": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "metaflow"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "action"
            ]
          }
        },
        "description": "AMQP API for metaflow.action"
      },
      "kapi.acdc_queue.member_call_cancel": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "call_cancel"
            ]
          },
          "Queue-ID": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_call_cancel"
      },
      "kapi.dialplan.tones": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Tones"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "tones"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Group-ID": {
            "type": "string"
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Terminators": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "*",
                "0",
                "#"
              ]
            }
          },
          "Tones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/kapi.dialplan.tones_req_tone_headers"
            }
          }
        },
        "description": "AMQP API for dialplan.tones"
      },
      "kapi.dialplan.echo": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "echo"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.echo"
      },
      "multi_factor_provider": {
        "required": [
          "enabled",
          "name",
          "provider_name"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "whether or not this configuration is enabled or not"
          },
          "name": {
            "type": "string",
            "description": "A friendly name for the configuration"
          },
          "provider_name": {
            "type": "string",
            "description": "multi factor provider name"
          },
          "settings": {
            "type": "object",
            "properties": {},
            "description": "provider configuration"
          }
        },
        "description": "multi factor provider configuration"
      },
      "notifications": {
        "required": [
          "from",
          "subject",
          "to"
        ],
        "type": "object",
        "properties": {
          "bcc": {
            "type": "object",
            "properties": {
              "email_addresses": {
                "type": "array",
                "description": "BCC Email Addresses",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              },
              "type": {
                "maxLength": 253,
                "minLength": 2,
                "type": "string",
                "enum": [
                  "original",
                  "specified",
                  "admins"
                ]
              }
            },
            "description": "Bcc email field"
          },
          "category": {
            "minLength": 1,
            "type": "string",
            "description": "Category of the template, for grouping purposes"
          },
          "cc": {
            "type": "object",
            "properties": {
              "email_addresses": {
                "type": "array",
                "description": "CC Email Addresses",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "original",
                  "specified",
                  "admins"
                ]
              }
            },
            "description": "CC email field"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable notification",
            "default": true
          },
          "friendly_name": {
            "minLength": 1,
            "type": "string",
            "description": "Friendly name of the template"
          },
          "from": {
            "type": "string",
            "description": "From: email address",
            "format": "email"
          },
          "macros": {
            "type": "object",
            "properties": {}
          },
          "reply_to": {
            "type": "string",
            "description": "Reply-To: email address",
            "format": "email"
          },
          "subject": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Email subject"
          },
          "template_charset": {
            "minLength": 1,
            "type": "string",
            "default": "utf-8"
          },
          "to": {
            "type": "object",
            "properties": {
              "email_addresses": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              },
              "type": {
                "maxLength": 253,
                "minLength": 2,
                "type": "string",
                "enum": [
                  "original",
                  "specified",
                  "admins"
                ]
              }
            },
            "description": "To email field"
          }
        },
        "description": "Notifications templates"
      },
      "kapi.dialplan.soft_hold": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Unhold-Key"
        ],
        "type": "object",
        "properties": {
          "A-MOH": {
            "type": "string"
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "soft_hold"
            ]
          },
          "B-MOH": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Unhold-Key": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.soft_hold"
      },
      "kapi.fax.query_status": {
        "required": [
          "Job-ID"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "fax"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_status"
            ]
          },
          "Job-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for fax.query_status"
      },
      "kapi.leader.req": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          }
        },
        "description": "AMQP API for leader.req"
      },
      "kapi.tasks.start_req": {
        "required": [
          "Task-ID"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "tasks"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "start_req"
            ]
          },
          "Task-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for tasks.start_req"
      },
      "system_config.tasks.ledger_rollover": {
        "type": "object",
        "properties": {
          "refresh_in_parallel": {
            "type": "integer",
            "description": "tasks ledger_rollover refresh_in_parallel"
          },
          "refresh_view_enabled": {
            "type": "boolean",
            "description": "tasks ledger_rollover refresh_view_enabled",
            "default": false
          },
          "rollover_in_parallel": {
            "type": "integer",
            "description": "How many accounts to rollover per-pass (in parallel)"
          }
        },
        "description": "Schema for tasks.ledger_rollover system_config"
      },
      "user_auth_recovery": {
        "required": [
          "ui_url",
          "username"
        ],
        "type": "object",
        "properties": {
          "account_name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The account name of the user"
          },
          "account_realm": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The account realm of the user"
          },
          "phone_number": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "A phone number assigned to the user's account"
          },
          "ui_url": {
            "maxLength": 2000,
            "minLength": 14,
            "type": "string",
            "description": "The UI's root URL"
          },
          "username": {
            "maxLength": 254,
            "minLength": 1,
            "type": "string",
            "description": "The user's username"
          }
        },
        "description": "Send a reset-your-password email via user credentials"
      },
      "kapi.acdc_stats.status_connecting": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "connecting"
            ]
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_connecting"
      },
      "kapi.conference.stop_play": {
        "required": [
          "Application-Name",
          "Conference-ID"
        ],
        "type": "object",
        "properties": {
          "Affects": {
            "type": "string",
            "enum": [
              "current",
              "all"
            ]
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "stop_play"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.stop_play"
      },
      "audit_logs": {
        "required": [
          "audit",
          "tree"
        ],
        "type": "object",
        "properties": {
          "audit": {
            "type": "object",
            "properties": {},
            "description": "Contains the accounts involved in the billable event (initial account and resellers)"
          },
          "authenticating_user": {
            "required": [
              "account_id",
              "account_name"
            ],
            "type": "object",
            "properties": {
              "account_id": {
                "type": "string"
              },
              "user_id": {
                "type": "string"
              },
              "account_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              }
            },
            "description": "Information about the requestor who caused the billing event"
          },
          "tree": {
            "type": "array",
            "description": "The account's tree (including the account), ordered from ancestor to account",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Audit log of what caused a billing event to occur"
      },
      "kapi.conference.dial_resp": {
        "required": [
          "Endpoint-Responses"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "dial_resp"
            ]
          },
          "Endpoint-Responses": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          }
        },
        "description": "AMQP API for conference.dial_resp"
      },
      "kapi.acdc_stats.call_flush": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_call_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "flush"
            ]
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_stats.call_flush"
      },
      "kapi.conference.deaf_participant": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Participant-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "deaf_participant"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.deaf_participant"
      },
      "kapi.acdc_queue.queue_member_add": {
        "required": [
          "Account-ID",
          "Call",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "queue"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "member_add"
            ]
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.queue_member_add"
      },
      "kapi.presence.mwi_update": {
        "required": [
          "Messages-New",
          "Messages-Saved",
          "To"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "mwi_update"
            ]
          },
          "Expires": {
            "type": "string"
          },
          "Extended-Presence-ID": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "Message-Account": {
            "type": "string"
          },
          "Messages-New": {
            "type": "integer"
          },
          "Messages-Saved": {
            "type": "integer"
          },
          "Messages-Urgent": {
            "type": "integer"
          },
          "Messages-Urgent-Saved": {
            "type": "integer"
          },
          "Messages-Waiting": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.mwi_update"
      },
      "kapi.acdc_stats.average_wait_time_err": {
        "required": [
          "Error-Reason"
        ],
        "type": "object",
        "properties": {
          "Error-Reason": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "average_wait_time_err"
            ]
          }
        },
        "description": "AMQP API for acdc_stats.average_wait_time_err"
      },
      "account_config.kazoo_endpoint": {
        "type": "object",
        "properties": {
          "default_can_text_self": {
            "type": "boolean",
            "description": "kazoo_endpoint default can text self",
            "default": true
          }
        },
        "description": "Schema for kazoo_endpoint account_config"
      },
      "callflows": {
        "type": "object",
        "properties": {
          "featurecode": {
            "type": "object",
            "properties": {
              "number": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string"
              },
              "name": {
                "maxLength": 128,
                "minLength": 1,
                "type": "string"
              }
            },
            "description": "When the callflow is used as a featurecode this object tracks the intended match of the pattern and name of the feature"
          },
          "flow": {
            "$ref": "#/components/schemas/callflows.action"
          },
          "metaflow": {
            "$ref": "#/components/schemas/metaflows"
          },
          "numbers": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of static numbers that the callflow should execute for",
            "items": {
              "maxLength": 36,
              "minLength": 1,
              "type": "string"
            }
          },
          "patterns": {
            "type": "array",
            "description": "A list of regular expressions that the callflow should execute for, with optional capture groups",
            "items": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "description": "Call flows describe steps to take in order to process a phone call. They are trees of information related to a phone call such as \"answer, play file, record file\" etc. that are logically grouped together and ordered."
      },
      "kapi.media.error": {
        "required": [
          "Error-Code",
          "Media-Name"
        ],
        "type": "object",
        "properties": {
          "Error-Code": {
            "type": "string",
            "enum": [
              "not_found",
              "no_data",
              "other"
            ]
          },
          "Error-Msg": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "media"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "media_error"
            ]
          },
          "Media-Name": {
            "type": "string"
          }
        },
        "description": "AMQP API for media.error"
      },
      "callflows.group": {
        "type": "object",
        "properties": {
          "endpoints": {
            "type": "array",
            "description": "List of endpoint (device/user/group) IDs",
            "items": {
              "type": "string",
              "description": "ID of the endpoint"
            }
          },
          "fail_on_single_reject": {
            "type": "boolean",
            "description": "If any leg rejects the call, cancel all other legs"
          },
          "id": {
            "type": "string",
            "description": "Group ID"
          },
          "ignore_forward": {
            "type": "boolean",
            "description": "Whether to ignore forwarded phones",
            "default": true
          },
          "repeats": {
            "type": "integer",
            "description": "How many times to repeat dialing the group"
          },
          "ringback": {
            "type": "string",
            "description": "Ringback to use"
          },
          "ringtones": {
            "type": "object",
            "properties": {
              "external": {
                "type": "string",
                "description": "Ring tone for calls from external sources"
              },
              "internal": {
                "type": "string",
                "description": "Ring tone for calls from external sources"
              }
            }
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "strategy": {
            "type": "string",
            "description": "How to ring the endpoints",
            "default": "simultaneous",
            "enum": [
              "single",
              "simultaneous"
            ]
          },
          "timeout": {
            "type": "integer",
            "description": "How long to attempt the group"
          }
        },
        "description": "Validator for the group callflow data object"
      },
      "voicemail_keys": {
        "type": "object",
        "properties": {
          "configure": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "continue": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "delete": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "exit": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "fastforward": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "hear_new": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "hear_saved": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "keep": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "listen": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "login": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "next": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "operator": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "prev": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "rec_name": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "rec_unavailable": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "record": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "replay": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "return_main": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "rewind": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "save": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          },
          "set_pin": {
            "$ref": "#/components/schemas/voicemail_keys.dtmf_key"
          }
        },
        "description": "DTMF keys for voicemail callflow module"
      },
      "system_config.hotornot": {
        "type": "object",
        "properties": {
          "default_rate_cost": {
            "type": "number",
            "description": "default cost per minute for rate"
          },
          "default_rate_increment": {
            "type": "integer",
            "description": "default increment time for rate"
          },
          "default_rate_internal_cost": {
            "type": "number",
            "description": "default internal cost per minute for rate"
          },
          "default_rate_minimum": {
            "type": "integer",
            "description": "default minimal duration for rate"
          },
          "default_rate_nocharge_time": {
            "type": "integer",
            "description": "default nocharge time for rate"
          },
          "default_rate_surcharge": {
            "type": "number",
            "description": "default surcharge amount for rate"
          },
          "default_ratedeck": {
            "type": "string",
            "description": "default ratedeck database to use",
            "default": "ratedeck"
          },
          "filter_list": {
            "type": "array",
            "description": "List of filters for rates",
            "items": {
              "type": "string"
            }
          },
          "mobile_rate": {
            "type": "object",
            "properties": {},
            "description": "Object defining rate for Kazoo mobile"
          },
          "rate_version": {
            "type": "string",
            "description": "If defined, use rates with this version"
          },
          "should_publish_system_alert": {
            "type": "object",
            "properties": {
              "inbound": {
                "type": "boolean",
                "description": "hotornot should_publish_system_alert if inbound rate is missing",
                "default": true
              },
              "outbound": {
                "type": "boolean",
                "description": "hotornot should_publish_system_alert if outbound rate is missing",
                "default": true
              },
              "both": {
                "type": "boolean",
                "description": "hotornot should_publish_system_alert if a rate is missing",
                "default": true
              }
            }
          },
          "sort_by_weight": {
            "type": "boolean",
            "description": "sort rates by weight (true) or cost (false)",
            "default": true
          },
          "trie_build_timeout_ms": {
            "type": "integer",
            "description": "build timeout (ms) for trie"
          },
          "trie_lru_expires_s": {
            "type": "integer",
            "description": "How long an entry in the LRU trie can remain"
          },
          "trie_module": {
            "type": "string",
            "description": "Which trie module to use",
            "default": "hon_trie"
          },
          "use_trie": {
            "type": "boolean",
            "description": "whether to use the trie to store rates in the VM",
            "default": false
          }
        },
        "description": "Schema for hotornot system_config"
      },
      "system_config.crossbar.ubiquiti": {
        "type": "object",
        "properties": {
          "api_secret": {
            "type": "string",
            "description": "crossbar.ubiquiti api secret"
          },
          "api_token_expires_s": {
            "type": "integer",
            "description": "crossbar.ubiquiti api token expires in seconds"
          },
          "production": {
            "type": "object",
            "properties": {
              "sso_url": {
                "type": "string",
                "description": "crossbar.ubiquiti sso url",
                "default": "https://sso.ubnt.com/api/sso/v1/"
              }
            }
          },
          "salt_length": {
            "type": "integer",
            "description": "crossbar.ubiquiti salt length"
          },
          "sso_environment": {
            "type": "string",
            "description": "crossbar.ubiquiti sso environment",
            "default": "staging"
          },
          "sso_provider_id": {
            "type": "string",
            "description": "crossbar.ubiquiti sso provider id"
          },
          "staging": {
            "type": "object",
            "properties": {
              "sso_url": {
                "type": "string",
                "description": "crossbar.ubiquiti sso url",
                "default": "https://sso-stage.ubnt.com/api/sso/v1/"
              }
            }
          },
          "tokens_per_request": {
            "type": "integer",
            "description": "crossbar.ubiquiti tokens per request"
          }
        },
        "description": "Schema for crossbar.ubiquiti system_config"
      },
      "kapi.blackhole.get_req": {
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "blackhole"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "get_req"
            ]
          },
          "Socket-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for blackhole.get_req"
      },
      "storage.connections": {
        "type": "object",
        "description": "Describes alternative connections to use (such as alternative CouchDB instances"
      },
      "kapi.acdc_agent.sync_resp": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "sync_resp"
            ]
          },
          "Process-ID": {
            "type": "string"
          },
          "Status": {
            "type": "string",
            "enum": [
              "init",
              "sync",
              "ready",
              "waiting",
              "ringing",
              "answered",
              "wrapup",
              "paused"
            ]
          },
          "Time-Left": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_agent.sync_resp"
      },
      "kapi.acdc_stats.call_missed": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_call_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "missed"
            ]
          },
          "Miss-Reason": {
            "type": "string"
          },
          "Miss-Timestamp": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_stats.call_missed"
      },
      "kapi.acdc_stats.current_calls_resp": {
        "required": [
          "Query-Time"
        ],
        "type": "object",
        "properties": {
          "Abandoned": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "current_calls_resp"
            ]
          },
          "Handled": {
            "type": "string"
          },
          "Processed": {
            "type": "string"
          },
          "Query-Time": {
            "type": "integer"
          },
          "Waiting": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_stats.current_calls_resp"
      },
      "system_config.kapps_maintenance": {
        "type": "object",
        "properties": {
          "migrate_current_version": {
            "type": "string",
            "description": "kapps_maintenance migrate current version",
            "default": "3.22"
          }
        },
        "description": "Schema for kapps_maintenance system_config"
      },
      "system_config.kazoo_endpoint": {
        "type": "object",
        "properties": {
          "custom_sip_interface": {
            "type": "string",
            "description": "kazoo_endpoint custom sip interface"
          },
          "default_caller_id_name": {
            "type": "string",
            "description": "kazoo_endpoint default caller id name"
          },
          "default_caller_id_number": {
            "type": "string",
            "description": "kazoo_endpoint default caller id number"
          },
          "default_can_text_self": {
            "type": "boolean",
            "description": "kazoo_endpoint default can text self",
            "default": true
          },
          "default_ignore_completed_elsewhere": {
            "type": "boolean",
            "description": "kazoo_endpoint default ignore completed elsewhere",
            "default": true
          },
          "restrict_to_known_types": {
            "type": "boolean",
            "description": "kazoo_endpoint restrict to known types",
            "default": false
          },
          "should_add_diversion_header": {
            "type": "boolean",
            "description": "kazoo_endpoint should add diversion header",
            "default": false
          },
          "sip_transport": {
            "type": "string",
            "description": "kazoo_endpoint sip transport"
          }
        },
        "description": "Schema for kazoo_endpoint system_config"
      },
      "callflows.audio_macro.prompt": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Prompt ID"
          },
          "language": {
            "type": "string",
            "description": "The language of the speaker"
          },
          "terminators": {
            "type": "array",
            "description": "What DTMF can terminate playback of the audio",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Validator for playing prompts"
      },
      "accounts": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "call_recording": {
            "type": "object",
            "properties": {
              "endpoint": {
                "$ref": "#/components/schemas/call_recording"
              },
              "account": {
                "$ref": "#/components/schemas/call_recording"
              }
            },
            "description": "call recording configuration"
          },
          "call_restriction": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "If set to deny all calls of this type will be rejected.  If set to inherit the user/device rules apply",
                  "enum": [
                    "inherit",
                    "deny"
                  ]
                }
              }
            },
            "description": "Account level call restrictions for each available number classification"
          },
          "call_waiting": {
            "$ref": "#/components/schemas/call_waiting"
          },
          "caller_id": {
            "$ref": "#/components/schemas/caller_id"
          },
          "caller_id_options": {
            "type": "object",
            "properties": {
              "outbound_privacy": {
                "type": "string",
                "description": "Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing",
                "enum": [
                  "full",
                  "name",
                  "number",
                  "none"
                ]
              },
              "show_rate": {
                "type": "boolean",
                "description": "Whether to show the rate"
              }
            },
            "description": "custom properties for configuring caller_id"
          },
          "dial_plan": {
            "$ref": "#/components/schemas/dialplans"
          },
          "do_not_disturb": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "The default value for do-not-disturb"
              }
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Determines if the account is currently enabled",
            "default": true
          },
          "formatters": {
            "$ref": "#/components/schemas/formatters"
          },
          "language": {
            "type": "string",
            "description": "The language for this account"
          },
          "metaflows": {
            "$ref": "#/components/schemas/metaflows"
          },
          "music_on_hold": {
            "type": "object",
            "properties": {
              "media_id": {
                "maxLength": 2048,
                "type": "string",
                "description": "The ID of a media object that should be used as the default music on hold"
              }
            },
            "description": "The default music on hold parameters"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the account"
          },
          "notifications": {
            "type": "object",
            "properties": {
              "first_occurrence": {
                "type": "object",
                "properties": {
                  "sent_initial_call": {
                    "type": "boolean",
                    "description": "has the account made their first call",
                    "default": false
                  },
                  "sent_initial_registration": {
                    "type": "boolean",
                    "description": "has the account registered their first device",
                    "default": false
                  }
                },
                "description": "send emails on these account-firsts"
              },
              "low_balance": {
                "type": "object",
                "properties": {
                  "sent_low_balance": {
                    "type": "boolean",
                    "description": "has the alert been sent (avoids duplication/spamming)"
                  },
                  "threshold": {
                    "type": "number",
                    "description": "account balance to send alert on"
                  },
                  "last_notification": {
                    "type": "integer",
                    "description": "Timestamp, in Gregorian seconds, of when the last low_balance alert was sent"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "should the account be checked for this alert"
                  }
                },
                "description": "Low balance settings"
              }
            },
            "description": "account notification settings"
          },
          "org": {
            "type": "string",
            "description": "Full legal name of the organization"
          },
          "preflow": {
            "type": "object",
            "properties": {
              "always": {
                "type": "string",
                "description": "The ID of a callflow to always execute prior to processing the callflow with numbers/patterns matching the request"
              }
            },
            "description": "Each property provides functionality that can be applied to calls using the callflow application"
          },
          "realm": {
            "maxLength": 253,
            "minLength": 4,
            "pattern": "^[.\\w-]+$",
            "type": "string",
            "description": "The realm of the account, ie: 'account1.2600hz.com'"
          },
          "ringtones": {
            "type": "object",
            "properties": {
              "external": {
                "maxLength": 256,
                "type": "string",
                "description": "The alert info SIP header added when the call is from internal sources"
              },
              "internal": {
                "maxLength": 256,
                "type": "string",
                "description": "The alert info SIP header added when the call is from external sources"
              }
            },
            "description": "Ringtone Parameters"
          },
          "timezone": {
            "maxLength": 32,
            "minLength": 5,
            "type": "string",
            "description": "The default timezone"
          },
          "topup": {
            "type": "object",
            "properties": {
              "threshold": {
                "type": "number",
                "description": "The account balance when topup occurs"
              }
            },
            "description": "Topup settings for the account"
          },
          "voicemail": {
            "type": "object",
            "properties": {
              "notify": {
                "type": "object",
                "properties": {
                  "callback": {
                    "$ref": "#/components/schemas/notify.callback"
                  }
                }
              }
            }
          },
          "zones": {
            "type": "object",
            "properties": {},
            "description": "A priority ordered mapping of zones for the account"
          }
        },
        "description": "Accounts represent tenants or customers on the system. Each account represents an individual dataset or sandbox that only one tenant can access. The data set is architecturally independent from other tenants."
      },
      "kapi.qubicle_session.delete_session": {
        "required": [
          "Account-ID",
          "Call",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Call-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for qubicle_session.delete_session"
      },
      "callflows.faxbox": {
        "type": "object",
        "properties": {
          "faxbox_id": {
            "type": "string",
            "description": "ID of the faxbox"
          },
          "id": {
            "type": "string",
            "description": "ID of the faxbox"
          },
          "media": {
            "type": "object",
            "properties": {
              "fax_option": {
                "type": "object",
                "description": "Caller flag for T38 settings"
              }
            }
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the faxbox callflow data object"
      },
      "kapi.acdc_queue.member_connect_req": {
        "required": [
          "Account-ID",
          "Call-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "connect_req"
            ]
          },
          "Process-ID": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_connect_req"
      },
      "system_config.auth": {
        "type": "object",
        "properties": {
          "default_multi_factor_provider": {
            "type": "string",
            "description": "Default multi factor authentication provider name",
            "default": "duo"
          },
          "secret_for_user_signature": {
            "type": "string",
            "description": "auth secret for user signature"
          },
          "system_key": {
            "type": "string",
            "description": "auth system key"
          }
        },
        "description": "Schema for auth system_config"
      },
      "system_config.tasks.services_rollover": {
        "type": "object",
        "properties": {
          "rollover_in_parallel": {
            "type": "integer",
            "description": "How many accounts to rollover services for per pass (in parallel)"
          }
        },
        "description": "Schema for tasks.services_rollover system_config"
      },
      "kapi.bookkeepers.update_resp_definition": {
        "required": [
          "Status"
        ],
        "type": "object",
        "properties": {
          "Details": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "bookkeepers"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "update_resp"
            ]
          },
          "Message": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        },
        "description": "AMQP API for bookkeepers.update_resp_definition"
      },
      "kapi.presence.search_req": {
        "required": [
          "Realm"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "presence"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "search_req"
            ]
          },
          "Event-Package": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "Search-Type": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for presence.search_req"
      },
      "kapi.qubicle_session.create_session": {
        "required": [
          "Account-ID",
          "Call",
          "Call-ID",
          "Session-Type"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Call-ID": {
            "type": "string"
          },
          "Session-Type": {
            "type": "string"
          }
        },
        "description": "AMQP API for qubicle_session.create_session"
      },
      "kapi.acdc_stats.average_wait_time_resp": {
        "required": [
          "Average-Wait-Time"
        ],
        "type": "object",
        "properties": {
          "Average-Wait-Time": {
            "type": "integer"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "average_wait_time_resp"
            ]
          }
        },
        "description": "AMQP API for acdc_stats.average_wait_time_resp"
      },
      "auth_module_config": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "whether or not this authenticator module is enabled"
          },
          "log_failed_attempts": {
            "type": "boolean",
            "description": "should log failed logging attempts"
          },
          "log_successful_attempts": {
            "type": "boolean",
            "description": "should log successful logging attempts"
          },
          "multi_factor": {
            "type": "object",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "ID of the account that contains the multi factor configuration"
              },
              "configuration_id": {
                "type": "string",
                "description": "document ID that contains the multi factor configuration"
              },
              "enabled": {
                "type": "boolean",
                "description": "turn on/off multi factor authentications for this module"
              },
              "include_subaccounts": {
                "type": "boolean",
                "description": "should this multi factor authentication settings be applied when used by sub-accounts"
              }
            },
            "description": "control multi factor authentications for this module"
          },
          "token_auth_expiry_s": {
            "type": "integer",
            "description": "expiration period of the JWT token (seconds)"
          }
        },
        "description": "crossbar authenticator module configuration"
      },
      "callflows.audio_macro": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "The language of the speaker"
          },
          "macros": {
            "minItems": 1,
            "type": "array",
            "description": "The audio macro data",
            "items": {
              "required": [
                "macro"
              ],
              "type": "object",
              "properties": {
                "macro": {
                  "type": "string",
                  "description": "the macro type to process",
                  "enum": [
                    "play",
                    "prompt",
                    "say",
                    "tts",
                    "tone"
                  ]
                }
              },
              "description": "The individual media to play"
            }
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          },
          "terminators": {
            "type": "array",
            "description": "What DTMF can terminate playback of the audio",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Validator for the audio_macro callflow data object"
      },
      "kapi.acdc_queue.sync_req": {
        "required": [
          "Account-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "queue"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "sync_req"
            ]
          },
          "Process-ID": {
            "type": "string"
          },
          "Queue-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.sync_req"
      },
      "kapi.callflow.resume": {
        "required": [
          "Call",
          "Flow"
        ],
        "type": "object",
        "properties": {
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "callflow"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "resume"
            ]
          },
          "Flow": {
            "type": "string"
          }
        },
        "description": "AMQP API for callflow.resume"
      },
      "kapi.fax.status": {
        "required": [
          "Job-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Cloud-Job-ID": {
            "type": "string"
          },
          "Cloud-Printer-ID": {
            "type": "string"
          },
          "Direction": {
            "type": "string",
            "enum": [
              "incoming",
              "outgoing"
            ]
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "fax"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "status"
            ]
          },
          "Fax-Info": {
            "type": "string"
          },
          "Fax-State": {
            "type": "string",
            "enum": [
              "start",
              "prepare",
              "send",
              "receive",
              "end",
              "error"
            ]
          },
          "FaxBox-ID": {
            "type": "string"
          },
          "Job-ID": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "Stage": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        },
        "description": "AMQP API for fax.status"
      },
      "kapi.acdc_stats.average_wait_time_req": {
        "required": [
          "Account-ID",
          "Queue-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "minLength": 1,
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "average_wait_time_req"
            ]
          },
          "Queue-ID": {
            "minLength": 1,
            "type": "string"
          },
          "Window": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.average_wait_time_req"
      },
      "kapi.conference.relate_participants": {
        "required": [
          "Application-Name",
          "Conference-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "relate_participants"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Relationship": {
            "type": "string",
            "enum": [
              "deaf",
              "mute",
              "clear"
            ]
          }
        },
        "description": "AMQP API for conference.relate_participants"
      },
      "kapi.dialplan.answer": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "answer"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          }
        },
        "description": "AMQP API for dialplan.answer"
      },
      "storage.attachment.onedrive": {
        "required": [
          "handler",
          "settings"
        ],
        "type": "object",
        "properties": {
          "handler": {
            "type": "string",
            "description": "What handler module to use",
            "enum": [
              "onedrive"
            ]
          },
          "settings": {
            "required": [
              "oauth_doc_id"
            ],
            "type": "object",
            "properties": {
              "oauth_doc_id": {
                "minLength": 1,
                "type": "string",
                "description": "Doc ID in the system 'auth' database"
              }
            },
            "description": "Settings for the OneDrive account"
          }
        },
        "description": "schema for OneDrive attachment entry"
      },
      "list_entries": {
        "required": [
          "list_id"
        ],
        "type": "object",
        "properties": {
          "displayname": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Display name"
          },
          "firstname": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly firstname"
          },
          "lastname": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly lastname"
          },
          "list_id": {
            "type": "string",
            "description": "List id"
          },
          "number": {
            "type": "string",
            "description": "Phone number"
          },
          "pattern": {
            "type": "string",
            "description": "Match pattern"
          },
          "profile": {
            "$ref": "#/components/schemas/profile"
          },
          "type": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "Schema for a match list entries"
      },
      "kapi.metaflow.flow": {
        "required": [
          "Call-ID",
          "Flow"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "metaflow"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "flow"
            ]
          },
          "Flow": {
            "type": "object",
            "properties": {}
          }
        },
        "description": "AMQP API for metaflow.flow"
      },
      "system_config.callflow.park": {
        "type": "object",
        "properties": {
          "db_doc_name": {
            "type": "string",
            "description": "callflow.park db doc name",
            "default": "parked_calls"
          },
          "default_callback_timeout": {
            "type": "integer",
            "description": "callflow.park default callback timeout"
          },
          "default_ringback_timeout": {
            "type": "integer",
            "description": "callflow.park default ringback timeout"
          },
          "parked_presence_type": {
            "type": "string",
            "description": "callflow.park parked presence type",
            "default": "early"
          },
          "valet_reservation_cleanup_time_ms": {
            "type": "integer",
            "description": "callflow park valet_reservation_cleanup_time_ms"
          }
        },
        "description": "Schema for callflow.park system_config"
      },
      "kapi.call.query_auth_id_req": {
        "required": [
          "Auth-ID"
        ],
        "type": "object",
        "properties": {
          "Auth-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_auth_id_req"
            ]
          }
        },
        "description": "AMQP API for call.query_auth_id_req"
      },
      "kapi.conference.participant_event": {
        "required": [
          "Call-ID",
          "Caller-ID-Name",
          "Caller-ID-Number",
          "Channel-Presence-ID",
          "Conference-ID",
          "Current-Energy",
          "Custom-Channel-Vars",
          "Energy-Level",
          "Event",
          "Floor",
          "Focus",
          "Hear",
          "Instance-ID",
          "Mute-Detect",
          "Participant-ID",
          "Speak",
          "Talking",
          "Video"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Channel-Presence-ID": {
            "type": "string"
          },
          "Conference-ID": {
            "type": "string"
          },
          "Current-Energy": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Energy-Level": {
            "type": "string"
          },
          "Event": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "participant_event"
            ]
          },
          "Floor": {
            "type": "string"
          },
          "Focus": {
            "type": "string"
          },
          "Hear": {
            "type": "string"
          },
          "Instance-ID": {
            "type": "string"
          },
          "Mute-Detect": {
            "type": "string"
          },
          "Participant-ID": {
            "type": "string"
          },
          "Speak": {
            "type": "string"
          },
          "Talking": {
            "type": "string"
          },
          "Video": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.participant_event"
      },
      "system_config.smtp_client": {
        "type": "object",
        "properties": {
          "auth": {
            "type": "string",
            "description": "smtp_client auth",
            "default": "never"
          },
          "no_mx_lookups": {
            "type": "boolean",
            "description": "smtp_client no mx lookups",
            "default": true
          },
          "password": {
            "type": "string",
            "description": "smtp_client password",
            "default": ""
          },
          "port": {
            "type": "integer",
            "description": "smtp_client port"
          },
          "relay": {
            "type": "string",
            "description": "smtp_client relay",
            "default": "localhost"
          },
          "retries": {
            "type": "integer",
            "description": "smtp_client retries"
          },
          "send_timeout_ms": {
            "minimum": 1,
            "type": "integer",
            "description": "Timeout in milliseconds waiting for response from SMTP server"
          },
          "tls": {
            "type": "string",
            "description": "smtp_client tls"
          },
          "use_ssl": {
            "type": "boolean",
            "description": "smtp_client use SSL",
            "default": false
          },
          "username": {
            "type": "string",
            "description": "smtp_client username",
            "default": ""
          }
        },
        "description": "Schema for smtp_client system_config"
      },
      "kapi.conference.participant_volume_in": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Participant-ID",
          "Volume-In-Level"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "participant_volume_in"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Participant-ID": {
            "type": "string"
          },
          "Volume-In-Level": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.participant_volume_in"
      },
      "system_config.accounts": {
        "type": "object",
        "properties": {
          "allow_subaccounts_for_direct": {
            "type": "boolean",
            "description": "accounts allow subaccounts for direct",
            "default": true
          },
          "default_timezone": {
            "type": "string",
            "description": "accounts default timezone",
            "default": "America/Los_Angeles"
          },
          "master_account_id": {
            "type": "string",
            "description": "accounts master account id"
          }
        },
        "description": "Schema for accounts system_config"
      },
      "system_config.crossbar.callflows": {
        "type": "object",
        "properties": {
          "default_reconcile_numbers": {
            "type": "boolean",
            "description": "crossbar.callflows default reconcile numbers",
            "default": false
          }
        },
        "description": "Schema for crossbar.callflows system_config"
      },
      "endpoint.media": {
        "type": "object",
        "properties": {
          "audio": {
            "type": "object",
            "properties": {
              "codecs": {
                "uniqueItems": true,
                "type": "array",
                "description": "A list of audio codecs the endpoint supports",
                "items": {
                  "type": "string",
                  "enum": [
                    "OPUS",
                    "CELT@32000h",
                    "G7221@32000h",
                    "G7221@16000h",
                    "G722",
                    "speex@32000h",
                    "speex@16000h",
                    "PCMU",
                    "PCMA",
                    "G729",
                    "GSM",
                    "CELT@48000h",
                    "CELT@64000h",
                    "G722_16",
                    "G722_32",
                    "CELT_48",
                    "CELT_64",
                    "Speex",
                    "speex"
                  ]
                }
              }
            },
            "description": "The audio media parameters"
          },
          "bypass_media": {
            "type": "object",
            "description": "Default bypass media mode (The string type is deprecated, please use this as a boolean)"
          },
          "encryption": {
            "type": "object",
            "properties": {
              "methods": {
                "type": "array",
                "description": "Supported Encryption Types",
                "items": {
                  "type": "string",
                  "enum": [
                    "zrtp",
                    "srtp"
                  ]
                }
              },
              "enforce_security": {
                "type": "boolean",
                "description": "Is Encryption Enabled?",
                "default": false
              }
            },
            "description": "Encryption Parameters"
          },
          "fax_option": {
            "type": "boolean",
            "description": "Is T.38 Supported?"
          },
          "ignore_early_media": {
            "type": "boolean",
            "description": "The option to determine if early media from the endpoint should always be ignored"
          },
          "progress_timeout": {
            "type": "integer",
            "description": "The progress timeout to apply to the endpoint (seconds)"
          },
          "video": {
            "type": "object",
            "properties": {
              "codecs": {
                "uniqueItems": true,
                "type": "array",
                "description": "A list of video codecs the endpoint supports",
                "items": {
                  "type": "string",
                  "enum": [
                    "H261",
                    "H263",
                    "H264",
                    "VP8"
                  ]
                }
              }
            },
            "description": "The video media parameters"
          }
        },
        "description": "Schema for endpoint media options"
      },
      "kapi.acdc_stats.status_logged_in": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "logged_in"
            ]
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_logged_in"
      },
      "kapi.acdc_queue.member_hungup": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "member"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "hungup"
            ]
          },
          "Process-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for acdc_queue.member_hungup"
      },
      "kapi.dialplan.page": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Endpoints"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "page"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/kapi.dialplan.bridge_endpoint"
            }
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Page-Options": {
            "type": "string"
          },
          "Timeout": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.page"
      },
      "system_config.notify.first_occurrence": {
        "type": "object",
        "properties": {
          "default_to": {
            "type": "object",
            "description": "notify.first_occurrence default to"
          },
          "html_content_transfer_encoding": {
            "type": "string",
            "description": "notify.first_occurrence html content transfer encoding",
            "default": "7BIT"
          },
          "text_content_transfer_encoding": {
            "type": "string",
            "description": "notify.first_occurrence text content transfer encoding",
            "default": "7BIT"
          }
        },
        "description": "Schema for notify.first_occurrence system_config"
      },
      "system_config.pivot": {
        "type": "object",
        "properties": {
          "tts_texts_size": {
            "type": "integer",
            "description": "pivot tts texts size"
          }
        },
        "description": "Schema for pivot system_config"
      },
      "kapi.notifications.first_occurrence": {
        "required": [
          "Account-ID",
          "Occurrence"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "first_occurrence"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Occurrence": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.first_occurrence"
      },
      "formatters": {
        "type": "object",
        "description": "Schema for request formatters"
      },
      "kapi.notifications.inbound_fax": {
        "required": [
          "Account-ID",
          "Fax-ID",
          "From-Realm",
          "From-User",
          "To-Realm",
          "To-User"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "inbound_fax"
            ]
          },
          "Fax-ID": {
            "type": "string"
          },
          "Fax-Info": {
            "type": "string"
          },
          "Fax-Notifications": {
            "type": "string"
          },
          "Fax-Timestamp": {
            "type": "string"
          },
          "FaxBox-ID": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Realm": {
            "type": "string"
          },
          "From-User": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Owner-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.inbound_fax"
      },
      "callflows.dead_air": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the dead_air callflow data object"
      },
      "system_config.crossbar.local_resources": {
        "type": "object",
        "properties": {
          "allow_peers": {
            "type": "boolean",
            "description": "crossbar.local_resources allow peers",
            "default": false
          }
        },
        "description": "Schema for crossbar.local_resources system_config"
      },
      "system_config.crossbar.resources": {
        "type": "object",
        "properties": {
          "job_recovery_threshold_s": {
            "type": "integer",
            "description": "crossbar.resources job recovery threshold in seconds"
          },
          "job_recovery_timeout_s": {
            "type": "integer",
            "description": "crossbar.resources job recovery timeout in seconds"
          }
        },
        "description": "Schema for crossbar.resources system_config"
      },
      "caller_id": {
        "type": "object",
        "properties": {
          "asserted": {
            "type": "object",
            "properties": {
              "number": {
                "maxLength": 35,
                "type": "string",
                "description": "The asserted identity number for the object type"
              },
              "name": {
                "maxLength": 35,
                "type": "string",
                "description": "The asserted identity name for the object type"
              },
              "realm": {
                "type": "string",
                "description": "The asserted identity realm for the object type"
              }
            },
            "description": "Used to convey the proven identity of the originator of a request within a trusted network."
          },
          "emergency": {
            "type": "object",
            "properties": {
              "number": {
                "maxLength": 35,
                "type": "string",
                "description": "The caller id number for the object type"
              },
              "name": {
                "maxLength": 35,
                "type": "string",
                "description": "The caller id name for the object type"
              }
            },
            "description": "The caller ID used when a resource is flagged as 'emergency'"
          },
          "external": {
            "type": "object",
            "properties": {
              "number": {
                "maxLength": 35,
                "type": "string",
                "description": "The caller id number for the object type"
              },
              "name": {
                "maxLength": 35,
                "type": "string",
                "description": "The caller id name for the object type"
              }
            },
            "description": "The default caller ID used when dialing external numbers"
          },
          "internal": {
            "type": "object",
            "properties": {
              "number": {
                "maxLength": 35,
                "type": "string",
                "description": "The caller id number for the object type"
              },
              "name": {
                "maxLength": 35,
                "type": "string",
                "description": "The caller id name for the object type"
              }
            },
            "description": "The default caller ID used when dialing internal extensions"
          }
        },
        "description": "Defines caller ID settings based on the type of call being made"
      },
      "port_requests.to_scheduled": {
        "type": "object",
        "properties": {
          "schedule_on": {
            "required": [
              "date_time",
              "timezone"
            ],
            "type": "object",
            "properties": {
              "date_time": {
                "pattern": "^2\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d$",
                "type": "string"
              },
              "timezone": {
                "type": "object"
              }
            },
            "description": "date-time at which to perform the porting"
          },
          "scheduled_date": {
            "type": "integer",
            "description": "Gregorian timestamp at which to perform the porting"
          }
        },
        "description": "Schema for a port request to be transitioned to the 'scheduled' state"
      },
      "kapi.switch.notify": {
        "required": [
          "Realm",
          "Username"
        ],
        "type": "object",
        "properties": {
          "Body": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          },
          "Event": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "switch_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "notify"
            ]
          },
          "Realm": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for switch.notify"
      },
      "resource_jobs": {
        "required": [
          "numbers",
          "resource_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the job, if you like"
          },
          "numbers": {
            "minItems": 1,
            "type": "array",
            "description": "The listing of numbers to import to the account",
            "items": {
              "type": "string",
              "description": "The number to import"
            }
          },
          "resource_id": {
            "type": "string",
            "description": "The Resource ID the numbers are coming from"
          }
        },
        "description": "Schema for resource jobs (bulk number uploads)"
      },
      "system_config.limits": {
        "type": "object",
        "properties": {
          "allow_postpay": {
            "type": "boolean",
            "description": "Permit postpay settings on accounts by default",
            "default": false
          },
          "allow_prepay": {
            "type": "boolean",
            "description": "Permit prepay settings on accounts by default",
            "default": true
          },
          "authz_resource_types": {
            "type": "array",
            "description": "List of Resource-Types that will authorize the call; bypassing limit checks and billing per account by default",
            "items": {
              "type": "string"
            }
          },
          "burst_trunks": {
            "minimum": -1,
            "type": "integer",
            "description": "A hard limit for number of burst trunks permitted per account by default"
          },
          "calls": {
            "minimum": 0,
            "type": "integer",
            "description": "A hard limit for the total number calls per account by default"
          },
          "enabled": {
            "type": "boolean",
            "description": "Determines if the limits should be enforced on accounts by default",
            "default": true
          },
          "inbound_trunks": {
            "minimum": -1,
            "type": "integer",
            "description": "A hard limit for the number of inbound trunks per account by default"
          },
          "max_postpay_ammount": {
            "minimum": 0,
            "type": "integer",
            "description": "A hard limit for the postpay before limiting calls per account by default"
          },
          "outbound_trunks": {
            "minimum": -1,
            "type": "integer",
            "description": "A hard limit for the number of outbound trunks per account by default"
          },
          "reserve_ammount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount to hold in reserve per account by default"
          },
          "resource_consuming_calls": {
            "minimum": 0,
            "type": "integer",
            "description": "A hard limit for the number of resource consuming calls per account by default"
          },
          "soft_limit_inbound": {
            "type": "boolean",
            "description": "Permit calls on inbound calls accounts which have exceeded the limit per account by default",
            "default": false
          },
          "soft_limit_outbound": {
            "type": "boolean",
            "description": "Permit calls on outbound calls for accounts which have exceeded the limit per account by default",
            "default": false
          },
          "twoway_trunks": {
            "minimum": -1,
            "type": "integer",
            "description": "A hard limit for the number of twoway trunks per account by default"
          }
        },
        "description": "Global limits ability to place concurrent calls using flat rate trunks"
      },
      "system_config.omnipresence": {
        "type": "object",
        "properties": {
          "dialog_subscribed_mwi_prefix": {
            "type": "string",
            "description": "prefix used when subscribing vm updates for dialog",
            "default": "*98"
          },
          "expire_check_ms": {
            "type": "integer",
            "description": "omnipresence expire check in milliseconds"
          },
          "expires_fudge_s": {
            "type": "integer",
            "description": "omnipresence expires fudge in seconds"
          },
          "subscriptions_sync_enabled": {
            "type": "boolean",
            "description": "omnipresence subscriptions sync enabled",
            "default": false
          }
        },
        "description": "Schema for omnipresence system_config"
      },
      "callflows.skel": {
        "type": "object",
        "properties": {
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the skel callflow data object"
      },
      "kapi.pivot.processing": {
        "required": [
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "pivot"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "processing"
            ]
          }
        },
        "description": "AMQP API for pivot.processing"
      },
      "kapi.resource.originate_req_endpoint_headers": {
        "required": [
          "Invite-Format"
        ],
        "type": "object",
        "properties": {
          "Auth-Password": {
            "type": "string"
          },
          "Auth-Realm": {
            "type": "string"
          },
          "Auth-User": {
            "type": "string"
          },
          "Bypass-Media": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Codecs": {
            "type": "string"
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Enable-T38-Fax": {
            "type": "string"
          },
          "Enable-T38-Fax-Request": {
            "type": "string"
          },
          "Enable-T38-Gateway": {
            "type": "string"
          },
          "Enable-T38-Passthrough": {
            "type": "string"
          },
          "Endpoint-Actions": {
            "type": "string"
          },
          "Endpoint-Delay": {
            "type": "string"
          },
          "Endpoint-Options": {
            "type": "string"
          },
          "Endpoint-Progress-Timeout": {
            "type": "integer"
          },
          "Endpoint-Timeout": {
            "type": "integer"
          },
          "Endpoint-Type": {
            "type": "string"
          },
          "Failover": {
            "type": "string"
          },
          "Force-Fax": {
            "type": "string"
          },
          "Forward-IP": {
            "type": "string"
          },
          "Hold-Media": {
            "type": "string"
          },
          "Ignore-Completed-Elsewhere": {
            "type": "string"
          },
          "Ignore-Early-Media": {
            "type": "string"
          },
          "Invite-Format": {
            "type": "string"
          },
          "Loopback-Bowout": {
            "type": "string"
          },
          "Outbound-Call-ID": {
            "type": "string"
          },
          "Outbound-Callee-ID-Name": {
            "type": "string"
          },
          "Outbound-Callee-ID-Number": {
            "type": "string"
          },
          "Outbound-Caller-ID-Name": {
            "type": "string"
          },
          "Outbound-Caller-ID-Number": {
            "type": "string"
          },
          "Presence-ID": {
            "type": "string"
          },
          "Privacy-Hide-Name": {
            "type": "string"
          },
          "Privacy-Hide-Number": {
            "type": "string"
          },
          "Privacy-Method": {
            "type": "string"
          },
          "Proxy-IP": {
            "type": "string"
          },
          "Proxy-Zone": {
            "type": "string"
          },
          "Route": {
            "type": "string"
          },
          "SIP-Interface": {
            "type": "string"
          },
          "SIP-Invite-Parameters": {
            "type": "string"
          },
          "SIP-Transport": {
            "type": "string"
          },
          "Simplify-Loopback": {
            "type": "string"
          },
          "To-DID": {
            "type": "string"
          },
          "To-IP": {
            "type": "string"
          },
          "To-Realm": {
            "type": "string"
          },
          "To-URI": {
            "type": "string"
          },
          "To-User": {
            "type": "string"
          },
          "To-Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for resource.originate_req_endpoint_headers"
      },
      "account_config.omnipresence": {
        "type": "object",
        "properties": {
          "dialog_subscribed_mwi_prefix": {
            "type": "string",
            "description": "prefix used when subscribing vm updates for dialog",
            "default": "*98"
          }
        },
        "description": "Schema for omnipresence account_config"
      },
      "kapi.conference.undeaf_participant": {
        "required": [
          "Application-Name",
          "Conference-ID",
          "Participant-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "undeaf_participant"
            ]
          },
          "Conference-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "conference"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Participant-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for conference.undeaf_participant"
      },
      "system_config.sms": {
        "type": "object",
        "properties": {
          "outbound": {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "properties": {},
                "description": "sms options"
              }
            }
          }
        },
        "description": "Schema for sms system_config"
      },
      "kapi.qubicle_session.join_queue": {
        "required": [
          "Account-ID",
          "Call",
          "Call-ID",
          "Join-Queue-ID",
          "Session-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Call": {
            "type": "object",
            "properties": {}
          },
          "Call-ID": {
            "type": "string"
          },
          "Join-Queue-ID": {
            "type": "string"
          },
          "Session-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for qubicle_session.join_queue"
      },
      "notify.callback": {
        "type": "object",
        "properties": {
          "attempts": {
            "type": "integer",
            "description": "How many attempts without answer will system do"
          },
          "disabled": {
            "type": "boolean",
            "description": "Determines if the system will call to callback number"
          },
          "interval_s": {
            "type": "integer",
            "description": "How long will system wait between call back notification attempts"
          },
          "number": {
            "type": "string",
            "description": "Number for callback notifications about new messages"
          },
          "schedule": {
            "type": "array",
            "description": "Schedules interval between callbacks",
            "items": {
              "type": "integer",
              "description": "callbacks interval"
            }
          },
          "timeout_s": {
            "type": "integer",
            "description": "How long will system wait for answer to callback"
          }
        },
        "description": "Schema for a callback options"
      },
      "system_config.number_manager.dash_e911": {
        "type": "object",
        "properties": {
          "auth_password": {
            "type": "string",
            "description": "number_manager.dash_e911 auth password",
            "default": ""
          },
          "auth_username": {
            "type": "string",
            "description": "number_manager.dash_e911 auth username",
            "default": ""
          },
          "debug": {
            "type": "boolean",
            "description": "number_manager.dash_e911 debug",
            "default": false
          },
          "emergency_provisioning_url": {
            "type": "string",
            "description": "number_manager.dash_e911 emergency provisioning url",
            "default": "https://service.dashcs.com/dash-api/xml/emergencyprovisioning/v1"
          }
        },
        "description": "Schema for number_manager.dash_e911 system_config"
      },
      "kapi.registration.query_req": {
        "type": "object",
        "properties": {
          "Count-Only": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "directory"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reg_query"
            ]
          },
          "Fields": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          }
        },
        "description": "AMQP API for registration.query_req"
      },
      "kapi.switch.reload_gateways": {
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "switch_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "reload_gateways"
            ]
          }
        },
        "description": "AMQP API for switch.reload_gateways"
      },
      "kapi.call.query_account_channels_req": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Active-Only": {
            "type": "boolean"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_account_channels_req"
            ]
          },
          "Username": {
            "type": "string"
          },
          "Usernames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "AMQP API for call.query_account_channels_req"
      },
      "kapi.dialplan.play_macro": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Media-Macro"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "play_macro"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "now"
            ]
          },
          "Media-Macro": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.play_macro"
      },
      "account_config.fax": {
        "type": "object",
        "properties": {
          "default_smtp_domain": {
            "type": "string",
            "description": "fax defaultsmtp domain",
            "default": "fax.kazoo.io"
          },
          "log_faxbox_errors": {
            "type": "boolean",
            "description": "fax log faxbox errors",
            "default": true
          },
          "max_outbound": {
            "type": "integer",
            "description": "fax max outbound"
          }
        },
        "description": "Schema for fax account_config"
      },
      "kapi.dialplan.ring": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "ring"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Ringback": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.ring"
      },
      "kapi.maintenance.resp": {
        "required": [
          "Code"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "integer"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "maintenance"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "resp"
            ]
          },
          "Message": {
            "type": "string"
          }
        },
        "description": "AMQP API for maintenance.resp"
      },
      "kapi.dialplan.error": {
        "required": [
          "Error-Message"
        ],
        "type": "object",
        "properties": {
          "Call-ID": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Error-Message": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "error"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "dialplan"
            ]
          },
          "Request": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.error"
      },
      "kapi.camping.req": {
        "required": [
          "Account-ID",
          "Camping-Request"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Camping-Request": {
            "type": "object",
            "properties": {}
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "camping"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "request"
            ]
          }
        },
        "description": "AMQP API for camping.req"
      },
      "kapi.dialplan.store": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Media-Name",
          "Media-Transfer-Destination",
          "Media-Transfer-Method"
        ],
        "type": "object",
        "properties": {
          "Additional-Headers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Application-Name": {
            "type": "string",
            "enum": [
              "store"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Media-Name": {
            "type": "string"
          },
          "Media-Transfer-Destination": {
            "type": "string"
          },
          "Media-Transfer-Method": {
            "type": "string",
            "enum": [
              "stream",
              "put",
              "post"
            ]
          },
          "Suppress-Error-Report": {
            "type": "boolean"
          }
        },
        "description": "AMQP API for dialplan.store"
      },
      "kapi.dialplan.eavesdrop": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Target-Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "eavesdrop"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Continue-On-Cancel": {
            "type": "string"
          },
          "Continue-On-Fail": {
            "type": "string"
          },
          "Enable-DTMF": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Move-Channel-If-Necessary": {
            "type": "boolean"
          },
          "Other-Leg": {
            "type": "string"
          },
          "Target-Call-ID": {
            "type": "string"
          }
        },
        "description": "AMQP API for dialplan.eavesdrop"
      },
      "kapi.acdc_stats.status_pending_logged_out": {
        "required": [
          "Account-ID",
          "Agent-ID",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Agent-ID": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "acdc_status_stat"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "pending_logged_out"
            ]
          },
          "Pause-Time": {
            "type": "integer"
          },
          "Queue-ID": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Wait-Time": {
            "type": "integer"
          }
        },
        "description": "AMQP API for acdc_stats.status_pending_logged_out"
      },
      "kapi.call.query_user_channels_req": {
        "type": "object",
        "properties": {
          "Active-Only": {
            "type": "boolean"
          },
          "Authorizing-IDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "query_user_channels_req"
            ]
          },
          "Realm": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          },
          "Usernames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "AMQP API for call.query_user_channels_req"
      },
      "callflows.voicemail": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Whether to check voicemail box or compose a new voicemail message",
            "default": "compose",
            "enum": [
              "check",
              "compose"
            ]
          },
          "callerid_match_login": {
            "type": "boolean",
            "description": "Whether to match the caller ID to a voicemail box",
            "default": false
          },
          "id": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "The ID of the voicemail box"
          },
          "interdigit_timeout": {
            "type": "integer",
            "description": "The amount of time (in milliseconds) to wait for the caller to press the next digit after pressing a digit"
          },
          "max_message_length": {
            "type": "integer",
            "description": "Max length of the message that caller can leave in voicemail box"
          },
          "single_mailbox_login": {
            "type": "boolean",
            "description": "Allow login if caller has a single mailbox",
            "default": false
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the Voicemail callflow element"
      },
      "system_config.callflow.call_forward": {
        "type": "object",
        "properties": {
          "callfwd_number_timeout": {
            "type": "integer",
            "description": "callflow.call_forward callfwd number timeout"
          },
          "keys": {
            "type": "object",
            "properties": {
              "menu_change_number": {
                "type": "string",
                "description": "callflow.call_forward menu change number",
                "default": "2"
              },
              "menu_toggle_option": {
                "type": "string",
                "description": "callflow.call_forward menu toggle option",
                "default": "1"
              }
            }
          },
          "max_callfwd_number_length": {
            "type": "integer",
            "description": "callflow.call_forward maximum callfwd number length"
          },
          "min_callfwd_number_length": {
            "type": "integer",
            "description": "callflow.call_forward minimum callfwd number length"
          }
        },
        "description": "Schema for callflow.call_forward system_config"
      },
      "devices_notify": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "required": [
              "event"
            ],
            "type": "object",
            "properties": {
              "body": {
                "required": [
                  "content_type",
                  "data"
                ],
                "type": "object",
                "properties": {
                  "content_type": {
                    "type": "string",
                    "description": "The Content-Type of the data in the content body"
                  },
                  "data": {
                    "type": "string",
                    "description": "The data in the content body"
                  }
                },
                "description": "Parameters of content body of SIP NOTIFY"
              },
              "event": {
                "type": "string",
                "description": "Event header value for SIP NOTIFY"
              }
            },
            "description": "Action-specific parameters"
          }
        },
        "description": "Schema for Crossbar devices notify API"
      },
      "kapi.dialplan.privacy": {
        "required": [
          "Application-Name",
          "Call-ID"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "privacy"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "Insert-At": {
            "type": "string",
            "enum": [
              "head",
              "tail",
              "flush",
              "now"
            ]
          },
          "Privacy-Mode": {
            "type": "string",
            "enum": [
              "full",
              "name",
              "number"
            ]
          }
        },
        "description": "AMQP API for dialplan.privacy"
      },
      "kapi.route.req": {
        "required": [
          "Call-ID",
          "From",
          "Request",
          "To"
        ],
        "type": "object",
        "properties": {
          "Body": {
            "type": "string"
          },
          "Call-Direction": {
            "type": "string"
          },
          "Call-ID": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Codecs": {
            "type": "string"
          },
          "Context": {
            "type": "string"
          },
          "Cost-Parameters": {
            "type": "object",
            "properties": {
              "Max-Incremental-Cost": {
                "type": "integer"
              },
              "Min-Increment-Cost": {
                "type": "integer"
              },
              "Max-Setup-Cost": {
                "type": "integer"
              },
              "Min-Setup-Cost": {
                "type": "integer"
              }
            }
          },
          "Custom-Application-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-Routing-Headers": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Destination-Number": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "dialplan"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "route_req"
            ]
          },
          "Event-Queue": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Network-Addr": {
            "type": "string"
          },
          "From-Network-Port": {
            "type": "string"
          },
          "From-Tag": {
            "type": "string"
          },
          "Geo-Location": {
            "type": "string"
          },
          "Max-Call-Length": {
            "type": "string"
          },
          "Media": {
            "type": "string",
            "enum": [
              "process",
              "proxy",
              "bypass"
            ]
          },
          "Message-ID": {
            "type": "string"
          },
          "Orig-IP": {
            "type": "string"
          },
          "Orig-Port": {
            "type": "string"
          },
          "Origination-Call-ID": {
            "type": "string"
          },
          "Prepend-CID-Name": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Resource-Type": {
            "type": "string",
            "enum": [
              "mms",
              "sms",
              "audio",
              "video",
              "chat",
              "metaflow"
            ]
          },
          "Ringback-Media": {
            "type": "string"
          },
          "SIP-Request-Host": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-Nodename": {
            "type": "string"
          },
          "Switch-URI": {
            "type": "string"
          },
          "Switch-URL": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "To-Tag": {
            "type": "string"
          },
          "Transcode": {
            "type": "string"
          },
          "Transfer-Media": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          }
        },
        "description": "AMQP API for route.req"
      },
      "kapi.notifications.port_pending": {
        "required": [
          "Account-ID"
        ],
        "type": "object",
        "properties": {
          "Account-DB": {
            "type": "string"
          },
          "Account-ID": {
            "type": "string"
          },
          "Attachment-URL": {
            "type": "string"
          },
          "Authorized-By": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "notification"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "port_pending"
            ]
          },
          "From": {
            "type": "string"
          },
          "HTML": {
            "type": "string"
          },
          "Local-Number": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Number-State": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "Port-Request-ID": {
            "type": "string"
          },
          "Preview": {
            "type": "string"
          },
          "Reason": {
            "type": "object",
            "properties": {}
          },
          "Reply-To": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "description": "AMQP API for notifications.port_pending"
      },
      "groups": {
        "required": [
          "endpoints",
          "name"
        ],
        "type": "object",
        "properties": {
          "endpoints": {
            "type": "object",
            "properties": {},
            "description": "Endpoints included into group"
          },
          "music_on_hold": {
            "type": "object",
            "properties": {
              "media_id": {
                "maxLength": 128,
                "type": "string",
                "description": "The ID of a media object that should be used as music on hold"
              }
            },
            "description": "The music on hold parameters"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the group"
          }
        },
        "description": "Validator for the group"
      },
      "resources": {
        "required": [
          "gateways",
          "name"
        ],
        "type": "object",
        "properties": {
          "emergency": {
            "type": "boolean",
            "description": "Determines if the resource represents emergency services",
            "default": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Determines if the resource is currently enabled",
            "default": true
          },
          "flags": {
            "type": "array",
            "description": "A list of flags that can be provided on the request and must match for the resource to be eligible",
            "items": {
              "type": "string"
            }
          },
          "flat_rate_blacklist": {
            "type": "string",
            "description": "Regex for determining if a number should not be eligible for flat-rate trunking"
          },
          "flat_rate_whitelist": {
            "type": "string",
            "description": "Regex for determining if the number is eligible for flat-rate trunking"
          },
          "format_from_uri": {
            "type": "boolean",
            "description": "When set to true requests to this resource will have a reformatted SIP From Header"
          },
          "formatters": {
            "$ref": "#/components/schemas/formatters"
          },
          "from_uri_realm": {
            "type": "string",
            "description": "When formatting SIP From on outbound requests this can be used to override the realm"
          },
          "gateways": {
            "type": "array",
            "description": "A list of gateways available for this resource",
            "items": {
              "required": [
                "server"
              ],
              "type": "object",
              "properties": {
                "server": {
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "description": "This resource gateway server"
                },
                "bypass_media": {
                  "type": "boolean",
                  "description": "The resource gateway bypass media mode"
                },
                "prefix": {
                  "maxLength": 64,
                  "type": "string",
                  "description": "A string to prepend to the dialed number or capture group of the matching rule"
                },
                "from_uri_realm": {
                  "type": "string",
                  "description": "When formatting SIP From on outbound requests this can be used to override the realm"
                },
                "media": {
                  "type": "object",
                  "properties": {
                    "fax_option": {
                      "type": "boolean",
                      "description": "Is T.38 Supported?"
                    },
                    "rtcp_mux": {
                      "type": "boolean",
                      "description": "RTCP protocol messages mixed with RTP data"
                    }
                  },
                  "description": "The media parameters for the resource gateway"
                },
                "skype_interface": {
                  "type": "string",
                  "description": "The name of the Skype interface to route the call over"
                },
                "suffix": {
                  "maxLength": 64,
                  "type": "string",
                  "description": "A string to append to the dialed number or capture group of the matching rule"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "Determines if the resource gateway is currently enabled",
                  "default": true
                },
                "password": {
                  "maxLength": 32,
                  "type": "string",
                  "description": "SIP authentication password"
                },
                "force_port": {
                  "type": "boolean",
                  "description": "Allow request only from this port",
                  "default": false
                },
                "format_from_uri": {
                  "type": "boolean",
                  "description": "When set to true requests to this resource gateway will have a reformatted SIP From Header"
                },
                "codecs": {
                  "uniqueItems": true,
                  "type": "array",
                  "description": "A list of single list codecs supported by this gateway (to support backward compatibility)",
                  "items": {
                    "type": "string",
                    "enum": [
                      "G729",
                      "PCMU",
                      "PCMA",
                      "G722_16",
                      "G722_32",
                      "CELT_48",
                      "CELT_64",
                      "Speex",
                      "GSM",
                      "OPUS",
                      "H261",
                      "H263",
                      "H264",
                      "VP8"
                    ]
                  }
                },
                "invite_format": {
                  "type": "string",
                  "description": "The format of the DID needed by the underlying hardware/gateway",
                  "default": "route",
                  "enum": [
                    "route",
                    "username",
                    "e164",
                    "npan",
                    "1npan"
                  ]
                },
                "channel_selection": {
                  "type": "string",
                  "description": "Automatic selection of the channel within the span: ascending starts at 1 and moves up; descending is the opposite",
                  "default": "ascending",
                  "enum": [
                    "ascending",
                    "descending"
                  ]
                },
                "custom_sip_interface": {
                  "type": "string",
                  "description": "The name of a custom SIP interface"
                },
                "custom_sip_headers": {
                  "type": "object",
                  "properties": {},
                  "description": "A property list of SIP headers"
                },
                "endpoint_type": {
                  "type": "string",
                  "description": "What type of endpoint is this gateway",
                  "default": "sip",
                  "enum": [
                    "sip",
                    "freetdm",
                    "skype",
                    "amqp"
                  ]
                },
                "route": {
                  "type": "string",
                  "description": "A statically configured SIP URI to route all call to"
                },
                "caller_id_type": {
                  "type": "string",
                  "description": "The type of caller id to use",
                  "enum": [
                    "internal",
                    "external",
                    "emergency"
                  ]
                },
                "port": {
                  "type": "integer",
                  "description": "This resource gateway port"
                },
                "progress_timeout": {
                  "type": "integer",
                  "description": "The progress timeout to apply to the resource gateway"
                },
                "realm": {
                  "maxLength": 64,
                  "type": "string",
                  "description": "This resource gateway authentication realm"
                },
                "skype_rr": {
                  "type": "boolean",
                  "description": "Determines whether to round-robin calls amongst all interfaces (overrides \"skype_interface\" setting)",
                  "default": true
                },
                "invite_parameters": {
                  "type": "object",
                  "properties": {
                    "static": {
                      "type": "array",
                      "description": "A list of static values that should be added as INVITE parameters",
                      "items": {
                        "type": "string"
                      }
                    },
                    "dynamic": {
                      "type": "array",
                      "description": "A list of properties that, if found on the inbound call, should be added as an INVITE parameter",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                },
                "span": {
                  "type": "string",
                  "description": "The identity of the hardware on the media server"
                },
                "username": {
                  "maxLength": 32,
                  "type": "string",
                  "description": "SIP authentication username"
                }
              }
            }
          },
          "grace_period": {
            "maximum": 20,
            "minimum": 1,
            "type": "integer",
            "description": "The amount of time, in seconds, to wait before starting another resource"
          },
          "ignore_flags": {
            "type": "boolean",
            "description": "When set to true this resource is used if the rules/classifiers match regardless of flags"
          },
          "media": {
            "$ref": "#/components/schemas/endpoint.media"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A friendly name for the resource"
          },
          "require_flags": {
            "type": "boolean",
            "description": "When set to true this resource is ignored if the request does not specify outbound flags"
          },
          "rules": {
            "type": "array",
            "description": "A list of regular expressions of which one must match for the rule to be eligible, they can optionally contain capture groups",
            "items": {
              "type": "string"
            }
          },
          "weight_cost": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "A value between 0 and 100 that determines the order of resources when multiple can be used"
          }
        },
        "description": "Schema for resources"
      },
      "system_config.kazoo_convert": {
        "type": "object",
        "properties": {
          "fax": {
            "type": "object",
            "properties": {
              "serialize_openoffice": {
                "type": "boolean",
                "description": "Enable Serialization of openoffice compatible document conversions",
                "default": true
              },
              "convert_pdf_command": {
                "type": "string",
                "description": "The command to convert pdf documents to tiff",
                "default": "/usr/bin/gs -q -r200x200 -g1728x2200 -dNOPAUSE -dBATCH -dSAFER -sDEVICE=tiffg4 -sOutputFile=$TO -- $FROM"
              },
              "validate_pdf_command": {
                "type": "string",
                "description": "The command to verify a PDF file is valid",
                "default": "gs -dNOPAUSE -dBATCH -sDEVICE=nullpage $FILE"
              },
              "attachment_format": {
                "type": "string",
                "description": "Format to use for receipt email messages and api responses",
                "default": "pdf"
              },
              "convert_command_timeout": {
                "type": "integer",
                "description": "Timeout value in ms for how long a convert command can run before being killed"
              },
              "large_tiff_command": {
                "type": "string",
                "description": "The command to resize large tiffs to standard dimensions",
                "default": "convert $FROM -resample 200x200 -units PixelsPerInch -resize 1728\\!x2200 -compress group4 $TO"
              },
              "resample_image_command": {
                "type": "string",
                "description": "The command to resample an image file into a fax compliant formatted tiff",
                "default": "convert $FROM -resample 200x200 -page +0+0 -compress group4 $TO"
              },
              "small_tiff_command": {
                "type": "string",
                "description": "The command to format small tiffs to a fax compatible format",
                "default": "convert $FROM -gravity center -resample 200x200 -units PixelsPerInch -extent 1728x2200 -compress group4 $TO"
              },
              "convert_openoffice_command": {
                "type": "string",
                "description": "The command to convert open office documents to pdf",
                "default": "libreoffice --headless --convert-to pdf $FROM --outdir $WORKDIR  2>&1 |egrep 'parser error|Error' && exit 1 || exit 0"
              },
              "validate_tiff_command": {
                "type": "string",
                "description": "The command to verify a TIFF file is valid",
                "default": "tiffinfo $FILE"
              },
              "convert_tiff_command": {
                "type": "string",
                "description": "The command to convert a tiff file to PDF",
                "default": "tiff2pdf -o $TO $FROM"
              },
              "enable_openoffice": {
                "type": "boolean",
                "description": "Enables the conversion of openoffice compatible documents",
                "default": true
              },
              "convert_image_command": {
                "type": "string",
                "description": "The command to resample a tiff file to a fax compatible format or convert a supported image/* format to a tiff",
                "default": "convert $FROM -resample 200x200 -units PixelsPerInch -resize 1728x2200 -compress group4 $TO"
              }
            }
          },
          "fax_converter": {
            "type": "string",
            "description": "Module to use for fax related file conversions",
            "default": "fax_converter"
          },
          "file_cache_path": {
            "type": "string",
            "description": "The default working directory to use when converting files",
            "default": "/tmp/"
          }
        },
        "description": "Schema for kazoo_convert system_config"
      },
      "callflows.intercom": {
        "type": "object",
        "properties": {
          "barge_calls": {
            "type": "boolean",
            "description": "Whether to barge in on the callee"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the intercom callflow data object"
      },
      "kapi.media.resp": {
        "required": [
          "Media-Name",
          "Stream-URL"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "media"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "media_resp"
            ]
          },
          "Media-Name": {
            "type": "string"
          },
          "Stream-URL": {
            "type": "string"
          }
        },
        "description": "AMQP API for media.resp"
      },
      "callflows.directory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Directory ID"
          },
          "skip_module": {
            "type": "boolean",
            "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)"
          }
        },
        "description": "Validator for the directory callflow data object"
      },
      "kapi.discovery.resp": {
        "required": [
          "Results"
        ],
        "type": "object",
        "properties": {
          "Event-Category": {
            "type": "string",
            "enum": [
              "discovery"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "response"
            ]
          },
          "Query-ID": {
            "type": "string"
          },
          "Results": {
            "type": "string"
          }
        },
        "description": "AMQP API for discovery.resp"
      },
      "system_config.modb": {
        "type": "object",
        "properties": {
          "active_modbs": {
            "type": "integer",
            "description": "modb active modbs"
          },
          "routines": {
            "type": "array",
            "description": "modb routines",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Schema for modb system_config"
      },
      "kapi.inspector.filter_req": {
        "required": [
          "Call-IDs"
        ],
        "type": "object",
        "properties": {
          "Call-IDs": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "call_inspector"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "filter_req"
            ]
          }
        },
        "description": "AMQP API for inspector.filter_req"
      },
      "system_config.crossbar.shared_auth": {
        "type": "object",
        "properties": {
          "authoritative_crossbar": {
            "type": "string",
            "description": "crossbar.shared_auth authoritative crossbar"
          }
        },
        "description": "Schema for crossbar.shared_auth system_config"
      },
      "voicemail_keys.dtmf_key": {
        "maxLength": 1,
        "minLength": 1,
        "type": "string",
        "enum": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "0",
          "*",
          "#"
        ]
      },
      "kapi.dialplan.store_amqp_resp": {
        "required": [
          "Application-Name",
          "Call-ID",
          "Media-Content",
          "Media-Name",
          "Media-Transfer-Method"
        ],
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string",
            "enum": [
              "store"
            ]
          },
          "Call-ID": {
            "type": "string"
          },
          "Media-Content": {
            "type": "string"
          },
          "Media-Name": {
            "type": "string"
          },
          "Media-Sequence-ID": {
            "type": "string"
          },
          "Media-Transfer-Method": {
            "type": "string",
            "enum": [
              "stream"
            ]
          }
        },
        "description": "AMQP API for dialplan.store_amqp_resp"
      },
      "kapi.switch.fs_command": {
        "required": [
          "Args",
          "Command"
        ],
        "type": "object",
        "properties": {
          "Args": {
            "type": "string"
          },
          "Command": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "switch_event"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "command"
            ]
          },
          "FreeSWITCH-Node": {
            "type": "string"
          }
        },
        "description": "AMQP API for switch.fs_command"
      },
      "find_numbers": {
        "required": [
          "prefix"
        ],
        "type": "object",
        "properties": {
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "default": "US"
          },
          "prefix": {
            "maxLength": 10,
            "minLength": 3,
            "type": "string"
          },
          "quantity": {
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      "system_config.services.http_sync": {
        "type": "object",
        "properties": {
          "authorization_header": {
            "type": "string",
            "description": "services http sync authorization header",
            "default": ""
          },
          "connect_timeout_ms": {
            "type": "integer",
            "description": "services http sync connect timeout in milliseconds"
          },
          "http_url": {
            "type": "string",
            "description": "services http sync http url",
            "default": ""
          }
        },
        "description": "Schema for services.http_sync system_config"
      },
      "system_config.teletype": {
        "type": "object",
        "properties": {
          "iterate_over_bcc": {
            "type": "boolean",
            "description": "teletype iterate over bcc",
            "default": true
          },
          "notice_enabled_by_default": {
            "type": "boolean",
            "description": "Specify if template is considered enabled by default when teletype tries to process that notification",
            "default": true
          },
          "render_farm_workers": {
            "type": "integer",
            "description": "teletype render farm workers"
          }
        },
        "description": "Schema for teletype system_config"
      },
      "kapi.sms.inbound": {
        "required": [
          "Body",
          "Callee-ID-Number",
          "Caller-ID-Number",
          "Message-ID",
          "Route-ID"
        ],
        "type": "object",
        "properties": {
          "Account-ID": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "Callee-ID-Name": {
            "type": "string"
          },
          "Callee-ID-Number": {
            "type": "string"
          },
          "Caller-ID-Name": {
            "type": "string"
          },
          "Caller-ID-Number": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Contact-IP": {
            "type": "string"
          },
          "Contact-Port": {
            "type": "string"
          },
          "Contact-Username": {
            "type": "string"
          },
          "Custom-Channel-Vars": {
            "type": "object",
            "properties": {}
          },
          "Custom-SIP-Headers": {
            "type": "object",
            "properties": {}
          },
          "Delivery-Failure": {
            "type": "string"
          },
          "Delivery-Result-Code": {
            "type": "string"
          },
          "Event-Category": {
            "type": "string",
            "enum": [
              "message"
            ]
          },
          "Event-Name": {
            "type": "string",
            "enum": [
              "inbound"
            ]
          },
          "Event-Queue": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "From-Network-Addr": {
            "type": "string"
          },
          "Geo-Location": {
            "type": "string"
          },
          "Message-ID": {
            "type": "string"
          },
          "Orig-IP": {
            "type": "string"
          },
          "Orig-Port": {
            "type": "string"
          },
          "Request": {
            "type": "string"
          },
          "Route-ID": {
            "type": "string"
          },
          "Route-Type": {
            "type": "string",
            "enum": [
              "on-net",
              "off-net"
            ]
          },
          "Status": {
            "type": "string"
          },
          "Switch-Hostname": {
            "type": "string"
          },
          "Switch-Nodename": {
            "type": "string"
          },
          "System-ID": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "User-Agent": {
            "type": "string"
          }
        },
        "description": "AMQP API for sms.inbound"
      },
      "storage.plan.database.document": {
        "type": "object",
        "properties": {
          "attachments": {
            "$ref": "#/components/schemas/storage.plan.database.attachment"
          },
          "connection": {
            "type": "string"
          }
        },
        "description": "schema for document type storage plan"
      }
    },
    "parameters": {
      "auth_token_header_or_none": {
        "name": "X-Auth-Token",
        "in": "header",
        "description": "request authentication token",
        "schema": {
          "minLength": 32,
          "type": "string"
        }
      },
      "INTERACTION_ID": {
        "name": "INTERACTION_ID",
        "in": "path",
        "description": "request INTERACTION_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "STORAGE_PLAN_ID": {
        "name": "STORAGE_PLAN_ID",
        "in": "path",
        "description": "request STORAGE_PLAN_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "VM_MSG_ID": {
        "name": "VM_MSG_ID",
        "in": "path",
        "description": "request VM_MSG_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "WEBHOOK_ID": {
        "name": "WEBHOOK_ID",
        "in": "path",
        "description": "request WEBHOOK_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "MEDIA_ID": {
        "name": "MEDIA_ID",
        "in": "path",
        "description": "request MEDIA_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "ACCOUNT_ID": {
        "name": "ACCOUNT_ID",
        "in": "path",
        "description": "request ACCOUNT_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "RESOURCE_ID": {
        "name": "RESOURCE_ID",
        "in": "path",
        "description": "request RESOURCE_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "RESOURCE_TEMPLATE_ID": {
        "name": "RESOURCE_TEMPLATE_ID",
        "in": "path",
        "description": "request RESOURCE_TEMPLATE_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "CONNECTIVITY_ID": {
        "name": "CONNECTIVITY_ID",
        "in": "path",
        "description": "request CONNECTIVITY_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "USER_ID": {
        "name": "USER_ID",
        "in": "path",
        "description": "request USER_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "EXTENSION": {
        "name": "EXTENSION",
        "in": "path",
        "description": "request EXTENSION parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "MENU_ID": {
        "name": "MENU_ID",
        "in": "path",
        "description": "request MENU_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "ERROR_ID": {
        "name": "ERROR_ID",
        "in": "path",
        "description": "request ERROR_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "REPORT_ID": {
        "name": "REPORT_ID",
        "in": "path",
        "description": "request REPORT_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 39,
          "minLength": 39,
          "pattern": "^report\\-[0-9a-f]+$",
          "type": "string"
        }
      },
      "THING": {
        "name": "THING",
        "in": "path",
        "description": "request THING parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ALERT_ID": {
        "name": "ALERT_ID",
        "in": "path",
        "description": "request ALERT_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "ATTEMPT_ID": {
        "name": "ATTEMPT_ID",
        "in": "path",
        "description": "request ATTEMPT_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "QUEUE_ID": {
        "name": "QUEUE_ID",
        "in": "path",
        "description": "request QUEUE_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "DIRECTORY_ID": {
        "name": "DIRECTORY_ID",
        "in": "path",
        "description": "request DIRECTORY_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "COMMENT_ID": {
        "name": "COMMENT_ID",
        "in": "path",
        "description": "request COMMENT_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "USERNAME": {
        "name": "USERNAME",
        "in": "path",
        "description": "request USERNAME parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "UUID": {
        "name": "UUID",
        "in": "path",
        "description": "request UUID parameter",
        "required": true,
        "schema": {
          "pattern": "^[a-f0-9-]+$",
          "type": "string"
        }
      },
      "CONFIG_ID": {
        "name": "CONFIG_ID",
        "in": "path",
        "description": "request CONFIG_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "LANGUAGE": {
        "name": "LANGUAGE",
        "in": "path",
        "description": "request LANGUAGE parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CCCP_ID": {
        "name": "CCCP_ID",
        "in": "path",
        "description": "request CCCP_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "NUMBER": {
        "name": "NUMBER",
        "in": "path",
        "description": "request NUMBER parameter",
        "required": true,
        "schema": {
          "pattern": "^\\+?[0-9]+",
          "type": "string"
        }
      },
      "PARTICIPANT_ID": {
        "name": "PARTICIPANT_ID",
        "in": "path",
        "description": "request PARTICIPANT_ID parameter",
        "required": true,
        "schema": {
          "pattern": "^[0-9]+$",
          "type": "string"
        }
      },
      "SYSTEM_CONFIG_ID": {
        "name": "SYSTEM_CONFIG_ID",
        "in": "path",
        "description": "request SYSTEM_CONFIG_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "LIST_ENTRY_ID": {
        "name": "LIST_ENTRY_ID",
        "in": "path",
        "description": "request LIST_ENTRY_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "ENDPOINT_ID": {
        "name": "ENDPOINT_ID",
        "in": "path",
        "description": "request ENDPOINT_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "NODE": {
        "name": "NODE",
        "in": "path",
        "description": "request NODE parameter",
        "required": true,
        "schema": {
          "pattern": "^[a-zA-Z0-9]+@[a-zA-Z0-9]+$",
          "type": "string"
        }
      },
      "auth_token_header": {
        "name": "X-Auth-Token",
        "in": "header",
        "description": "request authentication token",
        "required": true,
        "schema": {
          "minLength": 32,
          "type": "string"
        }
      },
      "PLAN_ID": {
        "name": "PLAN_ID",
        "in": "path",
        "description": "request PLAN_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PORT_REQUEST_ID": {
        "name": "PORT_REQUEST_ID",
        "in": "path",
        "description": "request PORT_REQUEST_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "FAX_ID": {
        "name": "FAX_ID",
        "in": "path",
        "description": "request FAX_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "FUNCTION": {
        "name": "FUNCTION",
        "in": "path",
        "description": "request FUNCTION parameter",
        "required": true,
        "schema": {
          "pattern": "^[a-zA-Z0-9]+$",
          "type": "string"
        }
      },
      "GROUP_ID": {
        "name": "GROUP_ID",
        "in": "path",
        "description": "request GROUP_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "SOURCE_SERVICE": {
        "name": "SOURCE_SERVICE",
        "in": "path",
        "description": "request SOURCE_SERVICE parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CDR_ID": {
        "name": "CDR_ID",
        "in": "path",
        "description": "request CDR_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 39,
          "minLength": 39,
          "pattern": "^[0-9a-f-]+$",
          "type": "string"
        }
      },
      "RATE_ID": {
        "name": "RATE_ID",
        "in": "path",
        "description": "request RATE_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "SCHEMA_NAME": {
        "name": "SCHEMA_NAME",
        "in": "path",
        "description": "request SCHEMA_NAME parameter",
        "required": true,
        "schema": {
          "pattern": "^[a-z0-9._-]+$",
          "type": "string"
        }
      },
      "MODULE": {
        "name": "MODULE",
        "in": "path",
        "description": "request MODULE parameter",
        "required": true,
        "schema": {
          "pattern": "^[a-zA-Z0-9]+$",
          "type": "string"
        }
      },
      "SMTP_LOG_ID": {
        "name": "SMTP_LOG_ID",
        "in": "path",
        "description": "request SMTP_LOG_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SOCKET_ID": {
        "name": "SOCKET_ID",
        "in": "path",
        "description": "request SOCKET_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PHONE_NUMBER": {
        "name": "PHONE_NUMBER",
        "in": "path",
        "description": "request PHONE_NUMBER parameter",
        "required": true,
        "schema": {
          "minLength": 13,
          "pattern": "^%2[Bb][0-9]+$",
          "type": "string"
        }
      },
      "DEVICE_ID": {
        "name": "DEVICE_ID",
        "in": "path",
        "description": "request DEVICE_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "HANDLER_ID": {
        "name": "HANDLER_ID",
        "in": "path",
        "description": "request HANDLER_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "TASK_ID": {
        "name": "TASK_ID",
        "in": "path",
        "description": "request TASK_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 15,
          "minLength": 15,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "SAMPLE_ID": {
        "name": "SAMPLE_ID",
        "in": "path",
        "description": "request SAMPLE_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "BLACKLIST_ID": {
        "name": "BLACKLIST_ID",
        "in": "path",
        "description": "request BLACKLIST_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "JOB_ID": {
        "name": "JOB_ID",
        "in": "path",
        "description": "request JOB_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ARGS": {
        "name": "ARGS",
        "in": "path",
        "description": "request ARGS parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "FAXBOX_ID": {
        "name": "FAXBOX_ID",
        "in": "path",
        "description": "request FAXBOX_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "AUDIT_ID": {
        "name": "AUDIT_ID",
        "in": "path",
        "description": "request AUDIT_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "TEMPORAL_RULE_SET": {
        "name": "TEMPORAL_RULE_SET",
        "in": "path",
        "description": "request TEMPORAL_RULE_SET parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "PROVIDER_ID": {
        "name": "PROVIDER_ID",
        "in": "path",
        "description": "request PROVIDER_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "TEMPLATE_ID": {
        "name": "TEMPLATE_ID",
        "in": "path",
        "description": "request TEMPLATE_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "C2C_ID": {
        "name": "C2C_ID",
        "in": "path",
        "description": "request C2C_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "PROMPT_ID": {
        "name": "PROMPT_ID",
        "in": "path",
        "description": "request PROMPT_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ATTACHMENT_ID": {
        "name": "ATTACHMENT_ID",
        "in": "path",
        "description": "request ATTACHMENT_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "LINK_ID": {
        "name": "LINK_ID",
        "in": "path",
        "description": "request LINK_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "SELECTOR_NAME": {
        "name": "SELECTOR_NAME",
        "in": "path",
        "description": "request SELECTOR_NAME parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "MODB_SUFFIX": {
        "name": "MODB_SUFFIX",
        "in": "path",
        "description": "request MODB_SUFFIX parameter",
        "required": true,
        "schema": {
          "maxLength": 6,
          "minLength": 6,
          "pattern": "^[0-9]{6}",
          "type": "string"
        }
      },
      "APP_ID": {
        "name": "APP_ID",
        "in": "path",
        "description": "request APP_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "AUTH_TOKEN": {
        "name": "AUTH_TOKEN",
        "in": "path",
        "description": "request AUTH_TOKEN parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "RECORDING_ID": {
        "name": "RECORDING_ID",
        "in": "path",
        "description": "request RECORDING_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 39,
          "minLength": 39,
          "pattern": "^[0-9a-f-]+$",
          "type": "string"
        }
      },
      "APP_SCREENSHOT_INDEX": {
        "name": "APP_SCREENSHOT_INDEX",
        "in": "path",
        "description": "request APP_SCREENSHOT_INDEX parameter",
        "required": true,
        "schema": {
          "pattern": "^[0-9]+$",
          "type": "string"
        }
      },
      "CALL_ID": {
        "name": "CALL_ID",
        "in": "path",
        "description": "request CALL_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SMS_ID": {
        "name": "SMS_ID",
        "in": "path",
        "description": "request SMS_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "KEY_ID": {
        "name": "KEY_ID",
        "in": "path",
        "description": "request KEY_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "WHITELABEL_DOMAIN": {
        "name": "WHITELABEL_DOMAIN",
        "in": "path",
        "description": "request WHITELABEL_DOMAIN parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ENDPOINT_TYPE": {
        "name": "ENDPOINT_TYPE",
        "in": "path",
        "description": "request ENDPOINT_TYPE parameter",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "users",
            "devices"
          ]
        }
      },
      "NOTIFICATION_ID": {
        "name": "NOTIFICATION_ID",
        "in": "path",
        "description": "request NOTIFICATION_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "TEMPLATE_NAME": {
        "name": "TEMPLATE_NAME",
        "in": "path",
        "description": "request TEMPLATE_NAME parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "FAX_JOB_ID": {
        "name": "FAX_JOB_ID",
        "in": "path",
        "description": "request FAX_JOB_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CONFERENCE_ID": {
        "name": "CONFERENCE_ID",
        "in": "path",
        "description": "request CONFERENCE_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "LEDGER_ID": {
        "name": "LEDGER_ID",
        "in": "path",
        "description": "request LEDGER_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "LIST_ID": {
        "name": "LIST_ID",
        "in": "path",
        "description": "request LIST_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "IP_ADDRESS": {
        "name": "IP_ADDRESS",
        "in": "path",
        "description": "request IP_ADDRESS parameter",
        "required": true,
        "schema": {
          "maxLength": 15,
          "minLength": 7,
          "pattern": "^[0-9.]+$",
          "type": "string"
        }
      },
      "MIGRATION_ID": {
        "name": "MIGRATION_ID",
        "in": "path",
        "description": "request MIGRATION_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "TEMPORAL_RULE_ID": {
        "name": "TEMPORAL_RULE_ID",
        "in": "path",
        "description": "request TEMPORAL_RULE_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "TRANSACTION_ID": {
        "name": "TRANSACTION_ID",
        "in": "path",
        "description": "request TRANSACTION_ID parameter",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "VM_BOX_ID": {
        "name": "VM_BOX_ID",
        "in": "path",
        "description": "request VM_BOX_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      },
      "CALLFLOW_ID": {
        "name": "CALLFLOW_ID",
        "in": "path",
        "description": "request CALLFLOW_ID parameter",
        "required": true,
        "schema": {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "^[0-9a-f]+$",
          "type": "string"
        }
      }
    }
  }
}