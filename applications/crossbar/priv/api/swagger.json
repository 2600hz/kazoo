{
    "basePath": "/v2",
    "consumes": [
        "application/json"
    ],
    "definitions": {
        "access_lists": {
            "description": "Access Control List entries for device or account",
            "properties": {
                "cidrs": {
                    "description": "Classless Inter-Domain Routing IP notation for use on the access lists",
                    "items": {
                        "description": "CIDR IP to use on access lists",
                        "type": "string"
                    },
                    "type": "array"
                },
                "order": {
                    "description": "Allow-Deny or Deny-Allow?",
                    "enum": [
                        "allow,deny",
                        "deny,allow"
                    ],
                    "type": "string"
                },
                "user_agent": {
                    "description": "Regexp to match valid user agent strings",
                    "type": "string"
                }
            },
            "required": [
                "cidrs",
                "order"
            ],
            "type": "object"
        },
        "account_config.call_command": {
            "description": "Schema for call_command account_config",
            "properties": {
                "unknown_cid_name": {
                    "default": "unknown",
                    "description": "the value to use when a caller ID name is required but unknown",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "account_config.callflow": {
            "description": "Schema for callflow account_config",
            "properties": {
                "dialog_subscribed_mwi_prefix": {
                    "description": "callflow dialog_subscribed_mwi_prefix",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "account_config.cdr": {
            "description": "Schema for cdr account_config",
            "properties": {
                "ignore_loopback_bowout": {
                    "default": true,
                    "description": "cdr ignore loopback bowout",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "account_config.conferences": {
            "description": "Schema for conferences account_config",
            "properties": {
                "controls": {
                    "properties": {
                        "default": {
                            "description": "conferences controls default",
                            "items": {
                                "properties": {
                                    "action": {
                                        "description": "what action to assign to the star-code",
                                        "type": "string"
                                    },
                                    "digits": {
                                        "description": "what digit sequence to bind the action to",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "page": {
                            "description": "conferences controls page",
                            "items": {
                                "properties": {
                                    "action": {
                                        "description": "what action to assign to the star-code",
                                        "type": "string"
                                    },
                                    "digits": {
                                        "description": "what digit sequence to bind the action to",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    }
                },
                "entry_tone": {
                    "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,659);v=-7;>=3;+=.1;%(800,0,659,783)",
                    "description": "conferences entry tone",
                    "type": "string"
                },
                "exit_tone": {
                    "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,440);v=-7;>=3;+=.1;%(800,0,349,440)",
                    "description": "conferences exit tone",
                    "type": "string"
                },
                "moderator_entry_tone": {
                    "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,659);v=-7;>=3;+=.1;%(800,0,659,783)",
                    "description": "conferences moderator entry tone",
                    "type": "string"
                },
                "moderator_exit_tone": {
                    "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,440);v=-7;>=3;+=.1;%(800,0,349,440)",
                    "description": "conferences moderator exit tone",
                    "type": "string"
                },
                "number_timeout": {
                    "default": 5000,
                    "description": "conferences number timeout",
                    "type": "integer"
                },
                "pin_timeout": {
                    "default": 5000,
                    "description": "conferences pin timeout",
                    "type": "integer"
                },
                "support_name_announcement": {
                    "default": true,
                    "description": "conferences support name announcement",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "account_config.crossbar.auth": {
            "description": "Schema for crossbar.auth account_config",
            "properties": {
                "auth_modules": {
                    "additionalProperties": false,
                    "default": {
                        "cb_api_auth": {
                            "enabled": true,
                            "log_failed_attempts": true,
                            "log_successful_attempts": false,
                            "token_auth_expiry_s": 3600
                        },
                        "cb_auth": {
                            "enabled": true,
                            "log_failed_attempts": true,
                            "log_successful_attempts": false,
                            "token_auth_expiry_s": 3600
                        },
                        "cb_ip_auth": {
                            "enabled": true,
                            "log_failed_attempts": true,
                            "log_successful_attempts": false,
                            "token_auth_expiry_s": 3600
                        },
                        "cb_user_auth": {
                            "enabled": true,
                            "log_failed_attempts": true,
                            "log_successful_attempts": true,
                            "token_auth_expiry_s": 3600
                        }
                    },
                    "description": "Default crossbar authentication modules configuration",
                    "properties": {
                        "cb_api_auth": {
                            "$ref": "#/definitions/auth_module_config"
                        },
                        "cb_auth": {
                            "$ref": "#/definitions/auth_module_config"
                        },
                        "cb_ip_auth": {
                            "$ref": "#/definitions/auth_module_config"
                        },
                        "cb_user_auth": {
                            "$ref": "#/definitions/auth_module_config"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "auth_modules"
            ],
            "type": "object"
        },
        "account_config.crossbar.sms": {
            "description": "Schema for crossbar.sms account_config",
            "properties": {
                "api_e164_convert_from": {
                    "default": false,
                    "description": "crossbar.sms api e164 convert from",
                    "type": "boolean"
                },
                "api_e164_convert_to": {
                    "default": false,
                    "description": "crossbar.sms api e164 convert to",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "account_config.doodle": {
            "description": "Schema for doodle account_config",
            "properties": {
                "api_preserve_caller_id": {
                    "default": true,
                    "description": "doodle.api preserve caller id",
                    "type": "boolean"
                },
                "reschedule": {
                    "default": {},
                    "description": "doodle reschedule",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "account_config.fax": {
            "description": "Schema for fax account_config",
            "properties": {
                "default_smtp_domain": {
                    "default": "fax.kazoo.io",
                    "description": "fax defaultsmtp domain",
                    "type": "string"
                },
                "log_faxbox_errors": {
                    "default": true,
                    "description": "fax log faxbox errors",
                    "type": "boolean"
                },
                "max_outbound": {
                    "default": 10,
                    "description": "fax max outbound",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "account_config.kazoo_endpoint": {
            "description": "Schema for kazoo_endpoint account_config",
            "properties": {
                "default_can_text_self": {
                    "default": true,
                    "description": "kazoo_endpoint default can text self",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "account_config.keys": {
            "description": "Schema for DTMF keys account_config",
            "properties": {
                "voicemail": {
                    "$ref": "#/definitions/voicemail_keys",
                    "description": "DTMF keys for voicemail callflow module"
                }
            },
            "type": "object"
        },
        "account_config.ledgers": {
            "description": "Schema for ledgers account_config",
            "properties": {
                "registered_ledgers": {
                    "default": [
                        {
                            "friendly_name": "Per Minute VoIP",
                            "name": "per-minute-voip"
                        },
                        {
                            "friendly_name": "Mobile Data (100mB)",
                            "name": "mobile_data"
                        },
                        {
                            "friendly_name": "Support",
                            "name": "support"
                        },
                        {
                            "friendly_name": "ASR Transcriptions",
                            "name": "asr-transcriptions"
                        }
                    ],
                    "description": "ledgers registered_ledgers",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "account_config.media": {
            "description": "Schema for media account_config",
            "properties": {
                "call_recording": {
                    "properties": {
                        "extension": {
                            "default": "mp3",
                            "description": "Default media file format",
                            "type": "string"
                        },
                        "storage_retry_times": {
                            "default": 5,
                            "description": "media storage retry times",
                            "type": "integer"
                        },
                        "workers": {
                            "default": 1,
                            "description": "media call_recording workers",
                            "type": "integer"
                        }
                    }
                }
            },
            "type": "object"
        },
        "account_config.notify": {
            "description": "Schema for notify account_config",
            "properties": {
                "notify_persist_exceptions": {
                    "default": [
                        "system_alert"
                    ],
                    "description": "notify notify_persist_exceptions",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "should_persist_for_retry": {
                    "default": true,
                    "description": "notify should_persist_for_retry",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "account_config.number_manager": {
            "description": "Schema for number_manager account_config",
            "properties": {
                "unauthorized_numbers_lookup": {
                    "default": false,
                    "description": "number_manager unauthorized numbers lookup",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "account_config.omnipresence": {
            "description": "Schema for omnipresence account_config",
            "properties": {
                "dialog_subscribed_mwi_prefix": {
                    "default": "*98",
                    "description": "prefix used when subscribing vm updates for dialog",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "account_config.privacy": {
            "description": "Schema for privacy account_config",
            "properties": {
                "block_anonymous_caller_id": {
                    "default": false,
                    "description": "Controls blocking of anonymous calls",
                    "type": "boolean"
                },
                "privacy_mode": {
                    "default": "kazoo",
                    "description": "Default privacy mode for anonymous calls",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "account_config.tasks.bill_early": {
            "description": "Schema for tasks.bill_early account_config",
            "properties": {
                "bill_early_enabled": {
                    "default": false,
                    "description": "Controls whether we should bill early this account",
                    "type": "boolean"
                },
                "reminder_enabled": {
                    "default": false,
                    "description": "Controls whether we should send bill reminder for this account a few days before due date",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "account_config.webhooks": {
            "description": "Schema for webhooks account_config",
            "properties": {
                "attempt_failure_count": {
                    "default": 6,
                    "description": "webhooks attempt failure count",
                    "type": "integer"
                },
                "attempt_failure_expiry_ms": {
                    "default": 60000,
                    "description": "webhooks attempt failure expiry in milliseconds",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "account_rate_limits": {
            "description": "describe limits for SIP requests",
            "properties": {
                "account": {
                    "$ref": "#/definitions/device_rate_limits"
                },
                "device": {
                    "$ref": "#/definitions/device_rate_limits"
                }
            },
            "required": [
                "account",
                "device"
            ],
            "type": "object"
        },
        "accounts": {
            "description": "Accounts represent tenants or customers on the system. Each account represents an individual dataset or sandbox that only one tenant can access. The data set is architecturally independent from other tenants.",
            "properties": {
                "call_recording": {
                    "additionalProperties": false,
                    "description": "call recording configuration",
                    "properties": {
                        "account": {
                            "$ref": "#/definitions/call_recording"
                        },
                        "endpoint": {
                            "$ref": "#/definitions/call_recording"
                        }
                    },
                    "type": "object"
                },
                "call_restriction": {
                    "additionalProperties": {
                        "properties": {
                            "action": {
                                "description": "If set to deny all calls of this type will be rejected.  If set to inherit the user/device rules apply",
                                "enum": [
                                    "inherit",
                                    "deny"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "default": {},
                    "description": "Account level call restrictions for each available number classification",
                    "type": "object"
                },
                "call_waiting": {
                    "$ref": "#/definitions/call_waiting"
                },
                "caller_id": {
                    "$ref": "#/definitions/caller_id",
                    "description": "The account default caller ID parameters"
                },
                "caller_id_options": {
                    "description": "custom properties for configuring caller_id",
                    "properties": {
                        "outbound_privacy": {
                            "description": "Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing",
                            "enum": [
                                "full",
                                "name",
                                "number",
                                "none"
                            ],
                            "type": "string"
                        },
                        "show_rate": {
                            "description": "Whether to show the rate",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "dial_plan": {
                    "$ref": "#/definitions/dialplans",
                    "description": "A list of default rules used to modify dialed numbers"
                },
                "do_not_disturb": {
                    "properties": {
                        "enabled": {
                            "description": "The default value for do-not-disturb",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "enabled": {
                    "default": true,
                    "description": "Determines if the account is currently enabled",
                    "type": "boolean"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "formatters": {
                    "$ref": "#/definitions/formatters"
                },
                "language": {
                    "description": "The language for this account",
                    "type": "string"
                },
                "metaflows": {
                    "$ref": "#/definitions/metaflows"
                },
                "music_on_hold": {
                    "default": {},
                    "description": "The default music on hold parameters",
                    "properties": {
                        "media_id": {
                            "description": "The ID of a media object that should be used as the default music on hold",
                            "maxLength": 2048,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "A friendly name for the account",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "notifications": {
                    "description": "account notification settings",
                    "properties": {
                        "first_occurrence": {
                            "description": "send emails on these account-firsts",
                            "properties": {
                                "sent_initial_call": {
                                    "default": false,
                                    "description": "has the account made their first call",
                                    "type": "boolean"
                                },
                                "sent_initial_registration": {
                                    "default": false,
                                    "description": "has the account registered their first device",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "low_balance": {
                            "description": "Low balance settings",
                            "properties": {
                                "enabled": {
                                    "description": "should the account be checked for this alert",
                                    "type": "boolean"
                                },
                                "last_notification": {
                                    "description": "Timestamp, in Gregorian seconds, of when the last low_balance alert was sent",
                                    "type": "integer"
                                },
                                "sent_low_balance": {
                                    "description": "has the alert been sent (avoids duplication/spamming)",
                                    "type": "boolean"
                                },
                                "threshold": {
                                    "description": "account balance to send alert on",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "org": {
                    "description": "Full legal name of the organization",
                    "type": "string"
                },
                "preflow": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Each property provides functionality that can be applied to calls using the callflow application",
                    "properties": {
                        "always": {
                            "description": "The ID of a callflow to always execute prior to processing the callflow with numbers/patterns matching the request",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "realm": {
                    "description": "The realm of the account, ie: 'account1.2600hz.com'",
                    "maxLength": 253,
                    "minLength": 4,
                    "pattern": "^[.\\w-]+$",
                    "type": "string"
                },
                "ringtones": {
                    "default": {},
                    "description": "Ringtone Parameters",
                    "properties": {
                        "external": {
                            "description": "The alert info SIP header added when the call is from internal sources",
                            "maxLength": 256,
                            "type": "string"
                        },
                        "internal": {
                            "description": "The alert info SIP header added when the call is from external sources",
                            "maxLength": 256,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "timezone": {
                    "description": "The default timezone",
                    "maxLength": 32,
                    "minLength": 5,
                    "type": "string"
                },
                "topup": {
                    "description": "Topup settings for the account",
                    "properties": {
                        "threshold": {
                            "description": "The account balance when topup occurs",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "voicemail": {
                    "properties": {
                        "notify": {
                            "properties": {
                                "callback": {
                                    "$ref": "#/definitions/notify.callback"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "zones": {
                    "description": "A priority ordered mapping of zones for the account",
                    "type": "object"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "acls": {
            "description": "Access Control List entries",
            "properties": {
                "cidr": {
                    "description": "Classless Inter-Domain Routing IP notation for use on the ACL",
                    "type": "string"
                },
                "description": {
                    "description": "Will be added as a comment for quick identification later",
                    "maxLength": 30,
                    "type": "string"
                },
                "network-list-name": {
                    "description": "The trusted list should represent anything that can issue calls without authorization.  The authoritative list should indicate inter-network routing equipment (SBC, etc).",
                    "enum": [
                        "authoritative",
                        "trusted"
                    ],
                    "type": "string"
                },
                "type": {
                    "default": "allow",
                    "description": "Allow or deny this CIDR",
                    "enum": [
                        "allow",
                        "deny"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "cidr",
                "network-list-name",
                "type"
            ],
            "type": "object"
        },
        "allotments": {
            "description": "Create buckets of minutes per time-period",
            "type": "object"
        },
        "api_auth": {
            "description": "Provides an auth-token via an Account API key",
            "properties": {
                "api_key": {
                    "description": "The Accounts API key",
                    "maxLength": 64,
                    "minLength": 64,
                    "type": "string"
                }
            },
            "required": [
                "api_key"
            ],
            "type": "object"
        },
        "app": {
            "description": "Appstore applications",
            "properties": {
                "allowed_users": {
                    "description": "User type allowed to access the app",
                    "enum": [
                        "specific",
                        "all",
                        "admins"
                    ],
                    "type": "string"
                },
                "api_url": {
                    "description": "Application api url",
                    "format": "uri",
                    "type": "string"
                },
                "author": {
                    "description": "Application author",
                    "maxLength": 64,
                    "minLength": 2,
                    "type": "string"
                },
                "i18n": {
                    "description": "Application translation",
                    "type": "object"
                },
                "icon": {
                    "description": "Application icon",
                    "type": "string"
                },
                "license": {
                    "description": "Application license",
                    "type": "string"
                },
                "masqueradable": {
                    "default": true,
                    "description": "Whether an application is masqueradable or not",
                    "type": "boolean"
                },
                "name": {
                    "description": "Application name",
                    "maxLength": 64,
                    "minLength": 3,
                    "type": "string"
                },
                "phase": {
                    "description": "Application test phase",
                    "enum": [
                        "alpha",
                        "beta",
                        "gold"
                    ],
                    "type": "string"
                },
                "price": {
                    "description": "Application price",
                    "minimum": 0,
                    "type": "number"
                },
                "published": {
                    "description": "is the app published",
                    "type": "boolean"
                },
                "screenshots": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_url": {
                    "description": "Application source url",
                    "format": "uri",
                    "type": "string"
                },
                "tags": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "urls": {
                    "type": "object"
                },
                "users": {
                    "description": "User IDs authorized to use the app (when allowed_users = 'specific')",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "description": "Application version",
                    "type": "string"
                }
            },
            "required": [
                "api_url",
                "author",
                "i18n",
                "icon",
                "license",
                "name",
                "price",
                "version"
            ],
            "type": "object"
        },
        "audit_logs": {
            "description": "Audit log of what caused a billing event to occur",
            "properties": {
                "audit": {
                    "description": "Contains the accounts involved in the billable event (initial account and resellers)",
                    "type": "object"
                },
                "authenticating_user": {
                    "description": "Information about the requestor who caused the billing event",
                    "properties": {
                        "account_id": {
                            "type": "string"
                        },
                        "account_name": {
                            "type": "string"
                        },
                        "first_name": {
                            "type": "string"
                        },
                        "last_name": {
                            "type": "string"
                        },
                        "user_id": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "account_id",
                        "account_name"
                    ],
                    "type": "object"
                },
                "tree": {
                    "description": "The account's tree (including the account), ordered from ancestor to account",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "audit",
                "tree"
            ],
            "type": "object"
        },
        "auth.app": {
            "description": "application description for authentication providers",
            "properties": {
                "client_id": {
                    "description": "client_id, usually application id for OAuth providers",
                    "type": "string"
                },
                "email": {
                    "description": "email for application",
                    "type": "string"
                },
                "provider": {
                    "description": "provider",
                    "type": "string"
                },
                "secret": {
                    "description": "secret for application",
                    "type": "string"
                }
            },
            "required": [
                "client_id",
                "provider",
                "secret"
            ],
            "type": "object"
        },
        "auth.callback": {
            "description": "callback for authentication providers",
            "properties": {
                "client_id": {
                    "description": "client id, usually application id for OAuth providers",
                    "type": "string"
                },
                "code": {
                    "description": "access code emitted by provider",
                    "type": "string"
                },
                "provider": {
                    "description": "provider",
                    "type": "string"
                },
                "redirect_uri": {
                    "description": "redirect URI",
                    "type": "string"
                },
                "state": {
                    "description": "state",
                    "type": "string"
                }
            },
            "required": [
                "provider",
                "code",
                "client_id",
                "redirect_uri"
            ],
            "type": "object"
        },
        "auth.provider": {
            "description": "provider settings for authentication",
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "required": [
                "id"
            ],
            "type": "object"
        },
        "auth_module_config": {
            "description": "crossbar authenticator module configuration",
            "properties": {
                "enabled": {
                    "description": "whether or not this authenticator module is enabled",
                    "type": "boolean"
                },
                "log_failed_attempts": {
                    "description": "should log failed logging attempts",
                    "type": "boolean"
                },
                "log_successful_attempts": {
                    "description": "should log successful logging attempts",
                    "type": "boolean"
                },
                "multi_factor": {
                    "additionalProperties": false,
                    "description": "control multi factor authentications for this module",
                    "properties": {
                        "account_id": {
                            "description": "ID of the account that contains the multi factor configuration",
                            "type": "string"
                        },
                        "configuration_id": {
                            "description": "document ID that contains the multi factor configuration",
                            "type": "string"
                        },
                        "enabled": {
                            "description": "turn on/off multi factor authentications for this module",
                            "type": "boolean"
                        },
                        "include_subaccounts": {
                            "description": "should this multi factor authentication settings be applied when used by sub-accounts",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "token_auth_expiry_s": {
                    "description": "expiration period of the JWT token (seconds)",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "blacklists": {
            "description": "Schema for a blacklists",
            "properties": {
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "A friendly name for the temporal rule set",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "numbers": {
                    "default": {},
                    "description": "Map of caller id number to block",
                    "properties": {},
                    "type": "object"
                },
                "should_block_anonymous": {
                    "description": "Should block Anonymous call",
                    "type": "boolean"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "call_recording": {
            "description": "endpoint recording settings",
            "properties": {
                "any": {
                    "$ref": "#/definitions/call_recording.source",
                    "description": "settings for any calls to/from the endpoint"
                },
                "inbound": {
                    "$ref": "#/definitions/call_recording.source",
                    "description": "settings for inbound calls to the endpoint"
                },
                "outbound": {
                    "$ref": "#/definitions/call_recording.source",
                    "description": "settings for outbound calls from the endpoint"
                }
            },
            "type": "object"
        },
        "call_recording.parameters": {
            "properties": {
                "enabled": {
                    "description": "is recording enabled",
                    "type": "boolean"
                },
                "format": {
                    "description": "What format to store the recording on disk",
                    "enum": [
                        "mp3",
                        "wav"
                    ],
                    "type": "string"
                },
                "record_min_sec": {
                    "description": "The minimum length, in seconds, the recording must be to be considered successful. Otherwise it is deleted",
                    "type": "integer"
                },
                "record_on_answer": {
                    "description": "Recording should start on answer",
                    "type": "boolean"
                },
                "record_on_bridge": {
                    "description": "Recording should start on bridge",
                    "type": "boolean"
                },
                "record_sample_rate": {
                    "description": "What sampling rate to use on the recording",
                    "type": "integer"
                },
                "time_limit": {
                    "description": "Time limit, in seconds, for the recording",
                    "maximum": 10800,
                    "minimum": 5,
                    "type": "integer"
                },
                "url": {
                    "description": "The URL to use when sending the recording for storage",
                    "format": "uri",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "call_recording.source": {
            "properties": {
                "any": {
                    "$ref": "#/definitions/call_recording.parameters",
                    "description": "settings for calls from any network"
                },
                "offnet": {
                    "$ref": "#/definitions/call_recording.parameters",
                    "description": "settings for calls from offnet networks"
                },
                "onnet": {
                    "$ref": "#/definitions/call_recording.parameters",
                    "description": "settings for calls from onnet networks"
                }
            },
            "type": "object"
        },
        "call_recordings": {
            "description": "endpoint recording settings",
            "properties": {
                "call_id": {
                    "description": "call_id",
                    "name": "call_id",
                    "type": "string"
                },
                "callee_id_name": {
                    "description": "callee_id_name",
                    "name": "callee_id_name",
                    "type": "string"
                },
                "callee_id_number": {
                    "description": "callee_id_number",
                    "name": "callee_id_number",
                    "type": "string"
                },
                "caller_id_name": {
                    "description": "caller_id_name",
                    "name": "caller_id_name",
                    "type": "string"
                },
                "caller_id_number": {
                    "description": "caller_id_number",
                    "name": "caller_id_number",
                    "type": "string"
                },
                "cdr_id": {
                    "description": "cdr_id",
                    "name": "cdr_id",
                    "type": "string"
                },
                "content_type": {
                    "description": "content_type",
                    "name": "content_type",
                    "type": "string"
                },
                "custom_channel_vars": {
                    "description": "custom_channel_vars",
                    "name": "custom_channel_vars",
                    "type": "object"
                },
                "description": {
                    "description": "description",
                    "name": "description",
                    "type": "string"
                },
                "direction": {
                    "description": "direction",
                    "name": "direction",
                    "type": "string"
                },
                "duration": {
                    "description": "duration",
                    "minimum": 0,
                    "name": "duration",
                    "type": "integer"
                },
                "duration_ms": {
                    "description": "duration_ms",
                    "minimum": 0,
                    "name": "duration_ms",
                    "type": "integer"
                },
                "from": {
                    "description": "from",
                    "name": "from",
                    "type": "string"
                },
                "interaction_id": {
                    "description": "interaction_id",
                    "name": "interaction_id",
                    "type": "string"
                },
                "media_source": {
                    "description": "media_source",
                    "name": "media_source",
                    "type": "string"
                },
                "media_type": {
                    "description": "media_type",
                    "name": "media_type",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "name": "name",
                    "type": "string"
                },
                "origin": {
                    "description": "origin",
                    "name": "origin",
                    "type": "string"
                },
                "owner_id": {
                    "description": "owner_id",
                    "name": "owner_id",
                    "type": "string"
                },
                "request": {
                    "description": "request",
                    "name": "request",
                    "type": "string"
                },
                "source_type": {
                    "description": "source_type",
                    "name": "source_type",
                    "type": "string"
                },
                "start": {
                    "description": "start timestamp, in Gregorian seconds",
                    "name": "start",
                    "type": "integer"
                },
                "to": {
                    "description": "to",
                    "name": "to",
                    "type": "string"
                },
                "url": {
                    "description": "url",
                    "name": "url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "call_waiting": {
            "description": "Parameters for server-side call waiting",
            "properties": {
                "enabled": {
                    "description": "Determines if server side call waiting is enabled/disabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "caller_id": {
            "description": "Defines caller ID settings based on the type of call being made",
            "properties": {
                "asserted": {
                    "description": "Used to convey the proven identity of the originator of a request within a trusted network.",
                    "properties": {
                        "name": {
                            "description": "The asserted identity name for the object type",
                            "maxLength": 35,
                            "type": "string"
                        },
                        "number": {
                            "description": "The asserted identity number for the object type",
                            "maxLength": 35,
                            "type": "string"
                        },
                        "realm": {
                            "description": "The asserted identity realm for the object type",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "emergency": {
                    "description": "The caller ID used when a resource is flagged as 'emergency'",
                    "properties": {
                        "name": {
                            "description": "The caller id name for the object type",
                            "maxLength": 35,
                            "type": "string"
                        },
                        "number": {
                            "description": "The caller id number for the object type",
                            "maxLength": 35,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "external": {
                    "description": "The default caller ID used when dialing external numbers",
                    "properties": {
                        "name": {
                            "description": "The caller id name for the object type",
                            "maxLength": 35,
                            "type": "string"
                        },
                        "number": {
                            "description": "The caller id number for the object type",
                            "maxLength": 35,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "internal": {
                    "description": "The default caller ID used when dialing internal extensions",
                    "properties": {
                        "name": {
                            "description": "The caller id name for the object type",
                            "maxLength": 35,
                            "type": "string"
                        },
                        "number": {
                            "description": "The caller id number for the object type",
                            "maxLength": 35,
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "callflows": {
            "description": "Call flows describe steps to take in order to process a phone call. They are trees of information related to a phone call such as \"answer, play file, record file\" etc. that are logically grouped together and ordered.",
            "properties": {
                "featurecode": {
                    "description": "When the callflow is used as a featurecode this object tracks the intended match of the pattern and name of the feature",
                    "properties": {
                        "name": {
                            "maxLength": 128,
                            "minLength": 1,
                            "type": "string"
                        },
                        "number": {
                            "maxLength": 30,
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "flow": {
                    "$ref": "#/definitions/callflows.action",
                    "description": "A callflow node defines a module to execute, data to provide to that module, and zero or more children to branch to"
                },
                "metaflow": {
                    "$ref": "#/definitions/metaflows",
                    "description": "Actions applied to a call outside of the normal callflow, initiated by the caller(s)"
                },
                "numbers": {
                    "default": [],
                    "description": "A list of static numbers that the callflow should execute for",
                    "items": {
                        "maxLength": 36,
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "patterns": {
                    "default": [],
                    "description": "A list of regular expressions that the callflow should execute for, with optional capture groups",
                    "items": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "callflows.acdc_agent": {
            "description": "Validator for the acdc_agent callflow data object",
            "properties": {
                "action": {
                    "description": "Set which action to perform",
                    "enum": [
                        "login",
                        "logout",
                        "paused",
                        "resume"
                    ],
                    "type": "string"
                },
                "presence_id": {
                    "description": "Static presence ID to send BLF updates to",
                    "type": "string"
                },
                "presence_state": {
                    "description": "Custom presence state to send",
                    "enum": [
                        "early",
                        "confirmed",
                        "terminated",
                        "red_flash",
                        "red_solid",
                        "green"
                    ],
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "Time, in seconds, for 'paused' state",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "callflows.acdc_member": {
            "description": "Validator for the acdc_member callflow data object",
            "properties": {
                "id": {
                    "description": "ID of the ACDc Queue",
                    "type": "string"
                },
                "priority": {
                    "description": "assign a priority to the caller",
                    "type": "integer"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.acdc_queue": {
            "description": "Validator for the acdc_queue callflow data object",
            "properties": {
                "action": {
                    "description": "What action to perform on the agent for this queue",
                    "enum": [
                        "login",
                        "logout"
                    ],
                    "type": "string"
                },
                "id": {
                    "description": "Queue ID",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.acdc_wait_time": {
            "description": "Validator for the acdc_wait_time callflow data object",
            "properties": {
                "id": {
                    "description": "Queue ID",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "window": {
                    "description": "Window over which average wait time is calculated (in seconds)",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "callflows.action": {
            "description": "Call flows describe steps to take in order to process a phone call. They are trees of information related to a phone call such as \"answer, play file, record file\" etc. that are logically grouped together and ordered.",
            "properties": {
                "children": {
                    "description": "Children callflows",
                    "type": "object"
                },
                "data": {
                    "default": {},
                    "description": "The data/arguments of the callflow module",
                    "type": "object"
                },
                "module": {
                    "description": "The name of the callflow module to execute at this node",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "data",
                "module"
            ],
            "type": "object"
        },
        "callflows.after_bridge": {
            "description": "Validator for the after_bridge callflow data object",
            "properties": {
                "action": {
                    "description": "What action to perform after a call is bridged",
                    "enum": [
                        "park",
                        "transfer",
                        "hangup"
                    ],
                    "type": "string"
                },
                "data": {
                    "description": "The number to transfer to, or a boolean, depending on the 'action'",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.answer": {
            "description": "Validator for the answer callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.audio_macro": {
            "description": "Validator for the audio_macro callflow data object",
            "properties": {
                "language": {
                    "description": "The language of the speaker",
                    "type": "string"
                },
                "macros": {
                    "default": [],
                    "description": "The audio macro data",
                    "items": {
                        "description": "The individual media to play",
                        "oneOf": [
                            {
                                "$ref": "callflows.play",
                                "description": "media file to play",
                                "properties": {
                                    "macro": {
                                        "enum": [
                                            "play"
                                        ],
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "$ref": "callflows.audio_macro.tone",
                                "description": "tone to play",
                                "properties": {
                                    "macro": {
                                        "enum": [
                                            "tone"
                                        ],
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "$ref": "callflows.audio_macro.prompt",
                                "description": "prompt to play",
                                "properties": {
                                    "macro": {
                                        "enum": [
                                            "prompt"
                                        ],
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "$ref": "callflows.audio_macro.say",
                                "description": "say macro to execute",
                                "properties": {
                                    "macro": {
                                        "enum": [
                                            "say"
                                        ],
                                        "type": "string"
                                    }
                                }
                            },
                            {
                                "$ref": "callflows.tts",
                                "description": "TTS text to say",
                                "properties": {
                                    "macro": {
                                        "enum": [
                                            "tts"
                                        ],
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "properties": {
                            "macro": {
                                "description": "the macro type to process",
                                "enum": [
                                    "play",
                                    "prompt",
                                    "say",
                                    "tts",
                                    "tone"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "macro"
                        ],
                        "type": "object"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "terminators": {
                    "default": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "*",
                        "0",
                        "#"
                    ],
                    "description": "What DTMF can terminate playback of the audio",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "callflows.audio_macro.prompt": {
            "description": "Validator for playing prompts",
            "properties": {
                "id": {
                    "description": "Prompt ID",
                    "type": "string"
                },
                "language": {
                    "description": "The language of the speaker",
                    "type": "string"
                },
                "terminators": {
                    "default": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "*",
                        "0",
                        "#"
                    ],
                    "description": "What DTMF can terminate playback of the audio",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "callflows.audio_macro.say": {
            "description": "Validator for executing say commands",
            "properties": {
                "gender": {
                    "description": "The gender of the speaker",
                    "enum": [
                        "masculine",
                        "feminine",
                        "neuter"
                    ],
                    "type": "string"
                },
                "language": {
                    "description": "The language of the speaker",
                    "type": "string"
                },
                "method": {
                    "description": "The method to use when saying the text",
                    "enum": [
                        "none",
                        "pronounced",
                        "iterated",
                        "counted"
                    ],
                    "type": "string"
                },
                "terminators": {
                    "default": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "*",
                        "0",
                        "#"
                    ],
                    "description": "What DTMF can terminate playback of the audio",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "text": {
                    "description": "Text to say",
                    "type": "string"
                },
                "type": {
                    "description": "The type to use when saying the text",
                    "enum": [
                        "number",
                        "items",
                        "persons",
                        "messages",
                        "currency",
                        "time_measurement",
                        "current_date",
                        "current_time",
                        "current_date_time",
                        "telephone_number",
                        "telephone_extension",
                        "url",
                        "ip_address",
                        "e-mail_address",
                        "postal_address",
                        "account_number",
                        "name_spelled",
                        "name_phonetic",
                        "short_date_time"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.audio_macro.tone": {
            "description": "Validator for playing a tone - TGML",
            "properties": {
                "duration_off": {
                    "description": "time, in milliseconds, for turning the tone off",
                    "type": "integer"
                },
                "duration_on": {
                    "description": "time, in milliseconds, for turning the tone on",
                    "type": "integer"
                },
                "frequencies": {
                    "description": "The tone frequencies to play",
                    "items": {
                        "description": "The tone frequency",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "repeat": {
                    "description": "how many times to repeat the tone",
                    "type": "integer"
                },
                "volume": {
                    "description": "Volume of the tone being played",
                    "maximum": 100,
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "callflows.branch_bnumber": {
            "description": "Validator for the branch_bnumber callflow data object",
            "properties": {
                "hunt": {
                    "default": false,
                    "description": "Should the capture group be used to hunt for a new callflow",
                    "type": "boolean"
                },
                "hunt_allow": {
                    "description": "A regexp used to match against the capture group to whitelist allowed numbers to hunt",
                    "type": "string"
                },
                "hunt_deny": {
                    "description": "A regexp used to match against the capture group to blacklist denied numbers to hunt",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.branch_variable": {
            "description": "Validator for the branch_variable callflow data object",
            "properties": {
                "scope": {
                    "default": "custom_channel_vars",
                    "description": "specifies where the variable is defined",
                    "enum": [
                        "account",
                        "custom_channel_vars",
                        "device",
                        "merged",
                        "user"
                    ],
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "variable": {
                    "default": "",
                    "description": "specifies the name of variable/property that should be looked up",
                    "type": "string"
                }
            },
            "required": [
                "variable"
            ],
            "type": "object"
        },
        "callflows.call_forward": {
            "description": "Validator for the call_forward callflow data object",
            "properties": {
                "action": {
                    "description": "What action to perform on the caller's call forwarding",
                    "enum": [
                        "activate",
                        "deactivate",
                        "update",
                        "toggle",
                        "menu"
                    ],
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.call_waiting": {
            "description": "Validator for the call_waiting callflow data object",
            "properties": {
                "action": {
                    "default": "toggle",
                    "description": "What action to perform",
                    "enum": [
                        "activate",
                        "deactivate",
                        "toggle"
                    ],
                    "type": "string"
                },
                "scope": {
                    "default": "device",
                    "description": "Apply the action to the calling device or user",
                    "enum": [
                        "device",
                        "user"
                    ],
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.callflow": {
            "description": "Validator for the callflow callflow data object",
            "properties": {
                "id": {
                    "description": "The Callflow ID to branch to",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.camping_feature": {
            "description": "Validator for the camping_feature callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.check_cid": {
            "description": "Validator for the check_cid callflow data object",
            "properties": {
                "caller_id": {
                    "properties": {
                        "external": {
                            "properties": {
                                "name": {
                                    "description": "Update external Caller ID Name",
                                    "type": "string"
                                },
                                "number": {
                                    "description": "Update external Caller ID Number",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "regex": {
                    "default": ".*",
                    "description": "Determine match/nomatch when use_absolute_mode is false",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "use_absolute_mode": {
                    "default": false,
                    "description": "If true, direct call down a branch that matches the caller ID",
                    "type": "boolean"
                },
                "user_id": {
                    "description": "kazoo User ID to use as owner_id instead of detected owner_id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.cidlistmatch": {
            "description": "Validator for the cidlistmatch callflow data object",
            "properties": {
                "id": {
                    "description": "CallerID List ID",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.collect_dtmf": {
            "description": "Validator for the Collect DTMF callflow element",
            "properties": {
                "collection_name": {
                    "description": "Store collected DTMF in a named key",
                    "type": "string"
                },
                "interdigit_timeout": {
                    "description": "How long, in milliseconds, to wait for the next DTMF",
                    "minimum": 1,
                    "type": "integer"
                },
                "max_digits": {
                    "default": 1,
                    "description": "How many DTMFs to collect from the caller",
                    "minimum": 1,
                    "type": "integer"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "terminator": {
                    "default": "#",
                    "description": "What DTMF will terminate collection before the timeout occurs",
                    "enum": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "0",
                        "#",
                        "*"
                    ],
                    "type": "string"
                },
                "terminators": {
                    "description": "What DTMFs will terminate collection before the timeout occurs",
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "0",
                            "#",
                            "*"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "timeout": {
                    "default": 5000,
                    "description": "How long, in milliseconds, to wait for the first DTMF",
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "callflows.conference": {
            "description": "Validator for the Conference callflow element",
            "properties": {
                "config": {
                    "$ref": "#/definitions/conferences",
                    "description": "Build an ad-hoc conference using the conferences JSON schema",
                    "type": "object"
                },
                "id": {
                    "description": "Kazoo ID of the conference",
                    "maxLength": 32,
                    "minLength": 32,
                    "type": "string"
                },
                "moderator": {
                    "description": "Is the caller entering the conference as a moderator",
                    "type": "boolean"
                },
                "play_entry_tone": {
                    "description": "Should the Entry Tone be played",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "play_exit_tone": {
                    "description": "Should the Exit Tone be played",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "welcome_prompt": {
                    "description": "Describes how the caller is greeted on entering a conference",
                    "properties": {
                        "media_id": {
                            "description": "Media to play, either Kazoo media ID or URL",
                            "type": "string"
                        },
                        "play": {
                            "default": true,
                            "description": "Should the Welcome Prompt be played",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "callflows.dead_air": {
            "description": "Validator for the dead_air callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.device": {
            "properties": {
                "can_call_self": {
                    "description": "Toggle whether devices of the same owner can call each other",
                    "type": "boolean"
                },
                "can_text_self": {
                    "description": "Toggle whether devices of the same owner can text each other",
                    "type": "boolean"
                },
                "custom_sip_headers": {
                    "description": "KV Object where the name is the SIP header and the value is the SIP field",
                    "type": "object"
                },
                "delay": {
                    "default": 0,
                    "description": "How long to delay ringing the device, in seconds",
                    "type": "integer"
                },
                "dial_strategy": {
                    "default": "simultaneous",
                    "description": "Dial strategy for the device",
                    "enum": [
                        "simultaneous",
                        "single"
                    ],
                    "type": "string"
                },
                "id": {
                    "description": "Device ID",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "static_invite": {
                    "description": "Override the SIP Username",
                    "type": "string"
                },
                "suppress_clid": {
                    "description": "Suppress sending caller ID",
                    "type": "boolean"
                },
                "timeout": {
                    "default": 0,
                    "description": "Time, in seconds, to wait for device to bridge",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "callflows.directory": {
            "description": "Validator for the directory callflow data object",
            "properties": {
                "id": {
                    "description": "Directory ID",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.disa": {
            "description": "Validator for the DISA callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.do_not_disturb": {
            "description": "Validator for the do_not_disturb callflow data object",
            "properties": {
                "action": {
                    "description": "What action to perform",
                    "enum": [
                        "activate",
                        "deactivate",
                        "toggle"
                    ],
                    "type": "string"
                },
                "id": {
                    "description": "Document ID on which to update DND settings",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.dynamic_cid": {
            "description": "Validator for the dynamic_cid callflow data object",
            "properties": {
                "action": {
                    "description": "What action to perform",
                    "enum": [
                        "list",
                        "lists",
                        "manual",
                        "static"
                    ],
                    "type": "string"
                },
                "caller_id": {
                    "description": "Static Caller ID settings",
                    "properties": {
                        "name": {
                            "description": "Caller ID Name",
                            "type": "string"
                        },
                        "number": {
                            "description": "Caller ID Number",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "enforce_call_restriction": {
                    "default": true,
                    "description": "Check classification restrictions against endpoint",
                    "type": "boolean"
                },
                "id": {
                    "description": "List ID for caller IDs when 'action' is 'list'",
                    "type": "string"
                },
                "idx_name": {
                    "description": "Named capture group to use",
                    "type": "string"
                },
                "interdigit_timeout": {
                    "description": "How long, in seconds, to wait for keypresses",
                    "type": "integer"
                },
                "max_digits": {
                    "description": "Max number of digits allowed when collecting Caller ID Number",
                    "type": "integer"
                },
                "media_id": {
                    "description": "Prompt to play to caller to enter Caller ID Number",
                    "type": "string"
                },
                "min_digits": {
                    "description": "Minimum number of digits that must match the regex to collected DTMF",
                    "type": "integer"
                },
                "permit_custom_callflow": {
                    "default": false,
                    "description": "Permit a custom callflow to be accepted instead of restricting to no_match only when looking up callflows",
                    "type": "boolean"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "whitelist_regex": {
                    "description": "Regex to match collected Caller ID Number",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.eavesdrop": {
            "description": "Validator for the eavesdrop callflow data object",
            "properties": {
                "approved_device_id": {
                    "description": "Restricts the calling device to this Device",
                    "type": "string"
                },
                "approved_group_id": {
                    "description": "Requires the calling device to be part of the Group",
                    "type": "string"
                },
                "approved_user_id": {
                    "description": "Requires the calling device to be part of the User",
                    "type": "string"
                },
                "device_id": {
                    "description": "Device ID to eavesdrop",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "user_id": {
                    "description": "User ID to eavesdrop",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.eavesdrop_feature": {
            "description": "Validator for the eavesdrop_feature callflow data object",
            "properties": {
                "approved_device_id": {
                    "description": "Restricts the calling device to this Device",
                    "type": "string"
                },
                "approved_group_id": {
                    "description": "Requires the calling device to be part of the Group",
                    "type": "string"
                },
                "approved_user_id": {
                    "description": "Requires the calling device to be part of the User",
                    "type": "string"
                },
                "group_id": {
                    "description": "ID of the group/user/device to eavesdrop",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.edr": {
            "description": "Validator for the edr callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.fax_detect": {
            "description": "Validator for the fax_detect callflow data object",
            "properties": {
                "duration": {
                    "description": "How long, in seconds, to try detecting fax tones",
                    "type": "integer"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.faxbox": {
            "description": "Validator for the faxbox callflow data object",
            "properties": {
                "faxbox_id": {
                    "description": "ID of the faxbox",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the faxbox",
                    "type": "string"
                },
                "media": {
                    "properties": {
                        "fax_option": {
                            "description": "Caller flag for T38 settings",
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "enum": [
                                        "auto",
                                        "true",
                                        "false"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.flush_dtmf": {
            "description": "Validator for the flush_dtmf callflow data object",
            "properties": {
                "collection_name": {
                    "default": "default",
                    "description": "Flush collected DTMF in a named key",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.function": {
            "description": "Validator for the function callflow data object",
            "properties": {
                "id": {
                    "description": "The Function's doc ID",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.group": {
            "description": "Validator for the group callflow data object",
            "properties": {
                "endpoints": {
                    "default": [],
                    "description": "List of endpoint (device/user/group) IDs",
                    "items": {
                        "description": "ID of the endpoint",
                        "type": "string"
                    },
                    "type": "array"
                },
                "fail_on_single_reject": {
                    "description": "If any leg rejects the call, cancel all other legs",
                    "type": "boolean"
                },
                "id": {
                    "description": "Group ID",
                    "type": "string"
                },
                "ignore_forward": {
                    "default": true,
                    "description": "Whether to ignore forwarded phones",
                    "type": "boolean"
                },
                "repeats": {
                    "default": 1,
                    "description": "How many times to repeat dialing the group",
                    "type": "integer"
                },
                "ringback": {
                    "description": "Ringback to use",
                    "type": "string"
                },
                "ringtones": {
                    "properties": {
                        "external": {
                            "description": "Ring tone for calls from external sources",
                            "type": "string"
                        },
                        "internal": {
                            "description": "Ring tone for calls from external sources",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "strategy": {
                    "default": "simultaneous",
                    "description": "How to ring the endpoints",
                    "enum": [
                        "single",
                        "simultaneous"
                    ],
                    "type": "string"
                },
                "timeout": {
                    "default": 20,
                    "description": "How long to attempt the group",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "callflows.group_pickup": {
            "description": "Validator for the group_pickup callflow data object",
            "properties": {
                "approved_device_id": {
                    "description": "Restrict calling device to Device",
                    "type": "string"
                },
                "approved_group_id": {
                    "description": "Restrict calling device to Group",
                    "type": "string"
                },
                "approved_user_id": {
                    "description": "Restrict calling device to User",
                    "type": "string"
                },
                "device_id": {
                    "description": "Device to pickup",
                    "type": "string"
                },
                "group_id": {
                    "description": "Group in which to find a call to pickup",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "user_id": {
                    "description": "User in which to find a call to pickup",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.group_pickup_feature": {
            "description": "Validator for the group_pickup_feature callflow data object",
            "properties": {
                "approved_device_id": {
                    "description": "Restrict calling device to Device",
                    "type": "string"
                },
                "approved_group_id": {
                    "description": "Restrict calling device to Group",
                    "type": "string"
                },
                "approved_user_id": {
                    "description": "Restrict calling device to User",
                    "type": "string"
                },
                "device_id": {
                    "description": "Device to pickup",
                    "type": "string"
                },
                "group_id": {
                    "description": "Group in which to find a call to pickup",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "type": {
                    "default": "extension",
                    "description": "The type of collection to pickup",
                    "enum": [
                        "group",
                        "user",
                        "device",
                        "extension"
                    ],
                    "type": "string"
                },
                "user_id": {
                    "description": "User in which to find a call to pickup",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "callflows.hangup": {
            "description": "Validator for the hangup callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.hotdesk": {
            "description": "Validator for the hotdesk callflow data object",
            "properties": {
                "action": {
                    "description": "The action to take for hotdesking",
                    "enum": [
                        "logout",
                        "login",
                        "toggle",
                        "bridge"
                    ],
                    "type": "string"
                },
                "id": {
                    "description": "Hotdesk ID",
                    "type": "string"
                },
                "interdigit_timeout": {
                    "description": "How long, in seconds, to wait between keypresses",
                    "type": "integer"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.intercept": {
            "description": "Validator for the intercept callflow data object",
            "properties": {
                "approved_device_id": {
                    "description": "Restrict calling device to Device",
                    "type": "string"
                },
                "approved_group_id": {
                    "description": "Restrict calling device to Group",
                    "type": "string"
                },
                "approved_user_id": {
                    "description": "Restrict calling device to User",
                    "type": "string"
                },
                "device_id": {
                    "description": "Device to intercept",
                    "type": "string"
                },
                "group_id": {
                    "description": "Group in which to find a call to intercept",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "user_id": {
                    "description": "User in which to find a call to intercept",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.intercept_feature": {
            "description": "Validator for the intercept_feature callflow data object",
            "properties": {
                "approved_device_id": {
                    "description": "Restricts the calling device to this Device",
                    "type": "string"
                },
                "approved_group_id": {
                    "description": "Requires the calling device to be part of the Group",
                    "type": "string"
                },
                "approved_user_id": {
                    "description": "Requires the calling device to be part of the User",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "type": {
                    "description": "The scope of devices to intercept",
                    "enum": [
                        "user",
                        "device",
                        "extension"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.intercom": {
            "description": "Validator for the intercom callflow data object",
            "properties": {
                "barge_calls": {
                    "description": "Whether to barge in on the callee",
                    "type": "boolean"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.language": {
            "description": "Validator for the Language callflow element",
            "properties": {
                "language": {
                    "description": "The language to default to for the rest of the call",
                    "pattern": "^[A-Za-z]{2}(-[A-Za-z]{2})?$",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "required": [
                "language"
            ],
            "type": "object"
        },
        "callflows.lookupcidname": {
            "description": "Validator for the Lookup callflow element",
            "properties": {
                "lists": {
                    "default": [],
                    "description": "Array of list ids",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "required": [
                "lists"
            ],
            "type": "object"
        },
        "callflows.manual_presence": {
            "description": "Validator for the Manual Presence callflow action",
            "properties": {
                "presence_id": {
                    "description": "The Presence ID to send a presence notification about",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "status": {
                    "default": "idle",
                    "description": "The status to update to",
                    "enum": [
                        "idle",
                        "ringing",
                        "busy"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "presence_id"
            ],
            "type": "object"
        },
        "callflows.menu": {
            "description": "Validator for the menu callflow data object",
            "properties": {
                "id": {
                    "description": "Menu ID to use",
                    "type": "string"
                },
                "interdigit_timeout": {
                    "description": "Amount of time, in milliseconds, to wait between keypresses",
                    "type": "integer"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.missed_call_alert": {
            "description": "Validator for the missed_call_alert callflow data object",
            "properties": {
                "recipients": {
                    "description": "One or more specific email addresses, Kazoo user ids or a combination of both",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The email address/user ID or the list of email addresses/user IDs based on specified type",
                                "oneOf": [
                                    {
                                        "format": "email",
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "format": "email",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                ]
                            },
                            "type": {
                                "description": "Controls if the ID of this object is a Kazoo user ID or an email address",
                                "enum": [
                                    "user",
                                    "email"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "type"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "required": [
                "recipients"
            ],
            "type": "object"
        },
        "callflows.move": {
            "description": "Validator for the move callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.nomorobo": {
            "description": "Validator for the NoMoRobo callflow action",
            "properties": {
                "password": {
                    "description": "Password to the NoMoRobo service",
                    "maxLength": 1000,
                    "minLength": 1,
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "username": {
                    "description": "Username to the NoMoRobo service",
                    "maxLength": 1000,
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "username"
            ],
            "type": "object"
        },
        "callflows.noop": {
            "description": "Validator for the noop callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.notification": {
            "description": "Validator for the 'notification' callflow's data object",
            "properties": {
                "comments": {
                    "description": "Text message that need to include into notification",
                    "type": "string"
                },
                "notification_media": {
                    "description": "What is media need to use for notification",
                    "items": {
                        "enum": [
                            "email",
                            "sms"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "recipients": {
                    "default": [],
                    "description": "One or more specific email addresses, Kazoo user ids or a combination of both",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The email address/user ID or the list of email addresses/user IDs based on specified type",
                                "oneOf": [
                                    {
                                        "format": "email",
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "format": "email",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                ]
                            },
                            "type": {
                                "description": "Controls if the ID of this object is a Kazoo user ID or an email address",
                                "enum": [
                                    "user",
                                    "email"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "type"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "send_at": {
                    "default": "channel_destroy",
                    "description": "Defines when send customer defined notification. For `callflow_exec` value notifications is send during callflow execution. For `channel_destroy` value notification is send after channel(bridge) is destroyed",
                    "enum": [
                        "callflow_exec",
                        "channel_destroy"
                    ],
                    "type": "string"
                },
                "template_id": {
                    "description": "Template ID of account defined notification",
                    "type": "string"
                }
            },
            "required": [
                "recipients"
            ],
            "type": "object"
        },
        "callflows.offnet": {
            "description": "Validator for the offnet callflow data object",
            "properties": {
                "bypass_e164": {
                    "description": "Use the original requested number instead of normalizing to E164",
                    "type": "boolean"
                },
                "caller_id_type": {
                    "default": "external",
                    "description": "Which configured caller-id to use (key in the 'caller_id' object)",
                    "type": "string"
                },
                "custom_sip_headers": {
                    "anyOf": [
                        {
                            "$ref": "custom_sip_headers"
                        },
                        {
                            "properties": {
                                "in": {
                                    "$ref": "custom_sip_headers",
                                    "description": "Custom SIP Headers to be applied to calls inbound to Kazoo from the endpoint"
                                },
                                "out": {
                                    "$ref": "custom_sip_headers",
                                    "description": "Custom SIP Headers to be applied to calls outbound from Kazoo to the endpoint"
                                }
                            }
                        }
                    ],
                    "description": "A property list of SIP headers",
                    "type": "object"
                },
                "do_not_normalize": {
                    "description": "Use the original requested number instead of normalizing; otherwise try to apply the endpoint's dialplan to the requested number",
                    "type": "boolean"
                },
                "dynamic_flags": {
                    "description": "List of function names (or 'zone') that are called on the Call record to populate the 'flags' array sent to the resource(s) for matching",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "emit_account_id": {
                    "description": "Toggles whether to put the account id in the SIP packets",
                    "type": "boolean"
                },
                "format_from_uri": {
                    "description": "If true, puts the account realm in the From header",
                    "type": "boolean"
                },
                "from_uri_realm": {
                    "description": "Override the From realm in the SIP packets",
                    "type": "string"
                },
                "hunt_account_id": {
                    "description": "When using local resources, use this account instead of the account making the call (useful for resellers)",
                    "type": "string"
                },
                "ignore_early_media": {
                    "default": false,
                    "description": "Toggle whether to ignore early media",
                    "type": "boolean"
                },
                "outbound_flags": {
                    "default": [],
                    "description": "List of flags to use when matching resources to route the call",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "resource_type": {
                    "description": "sets a custom resource type for the published amqp message",
                    "type": "string"
                },
                "ringback": {
                    "description": "Tone or file to play while waiting for the leg to be answered",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "How long, in seconds, to wait for the call to be answered",
                    "type": "integer"
                },
                "to_did": {
                    "description": "Statically set the DID to dial",
                    "type": "string"
                },
                "use_local_resources": {
                    "default": true,
                    "description": "Toggle whether to use the account's (or hunt_account_id's) resources vs the system resources",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.page_group": {
            "description": "Validator for the page_group callflow data object",
            "properties": {
                "audio": {
                    "default": "one-way",
                    "description": "What kind of audio for the group members",
                    "enum": [
                        "one-way",
                        "two-way"
                    ],
                    "type": "string"
                },
                "barge_calls": {
                    "description": "Should the Endpoint be interrupted by this call",
                    "type": "boolean"
                },
                "endpoints": {
                    "description": "Endpoint IDs (devices, users, etc) included in the ring group",
                    "items": {
                        "description": "ID of the endpoint (device, user, etc)",
                        "properties": {
                            "delay": {
                                "default": 0,
                                "description": "How long to delay ringing the endpoint, in seconds",
                                "type": "integer"
                            },
                            "endpoint_type": {
                                "description": "The type (device, user, etc) of endpoint",
                                "enum": [
                                    "device",
                                    "user",
                                    "group"
                                ],
                                "type": "string"
                            },
                            "id": {
                                "description": "The ID of the endpoint",
                                "maxLength": 128,
                                "minLength": 1,
                                "type": "string"
                            },
                            "timeout": {
                                "default": 20,
                                "description": "How long to ring the endpoint, in seconds",
                                "type": "integer"
                            },
                            "weight": {
                                "description": "Weight of endpoint, different usage in various strategies",
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "endpoint_type",
                            "id"
                        ],
                        "type": "object"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "timeout": {
                    "default": 5,
                    "description": "How long to ring the ring group before continuing, in seconds",
                    "type": "integer"
                }
            },
            "required": [
                "audio",
                "endpoints"
            ],
            "type": "object"
        },
        "callflows.park": {
            "description": "Validator for the park callflow data object",
            "properties": {
                "action": {
                    "default": "park",
                    "description": "Action to take for the caller",
                    "enum": [
                        "direct_park",
                        "park",
                        "retrieve",
                        "auto"
                    ],
                    "type": "string"
                },
                "custom_presence_id": {
                    "default": false,
                    "description": "use configured presence_id and fallback to request",
                    "type": "boolean"
                },
                "default_callback_timeout": {
                    "description": "How long, in seconds, to wait before calling back the parker",
                    "type": "integer"
                },
                "default_presence_type": {
                    "description": "Type of presence to update",
                    "enum": [
                        "early",
                        "terminated",
                        "confirmed"
                    ],
                    "type": "string"
                },
                "default_ringback_timeout": {
                    "description": "How long, in milliseconds, before ringing back",
                    "type": "integer"
                },
                "max_slot_number": {
                    "description": "Continue past this module if the selected slot number exceeds this number. Used to restrict the max number of auto-generated slot numbers",
                    "type": "integer"
                },
                "presence_id": {
                    "description": "use this presence_id",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "slot": {
                    "description": "Static slot number to use",
                    "type": "string"
                },
                "slots": {
                    "default": {},
                    "description": "Statically define slots and their configuration",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "callflows.pivot": {
            "description": "Validator for the Pivot callflow element",
            "properties": {
                "cdr_url": {
                    "description": "Optional URL to send the CDR to at the end of the call",
                    "pattern": "^https?://",
                    "type": "string"
                },
                "debug": {
                    "default": false,
                    "description": "Store debug logs related to processing this Pivot call",
                    "type": "boolean"
                },
                "method": {
                    "default": "get",
                    "description": "What HTTP verb to send the request(s) with",
                    "enum": [
                        "get",
                        "post",
                        "GET",
                        "POST"
                    ],
                    "type": "string"
                },
                "req_body_format": {
                    "default": "form",
                    "description": "What format should the request body have when using POST",
                    "enum": [
                        "form",
                        "json"
                    ],
                    "type": "string"
                },
                "req_format": {
                    "default": "kazoo",
                    "description": "What format of Pivot will the your server respond with",
                    "enum": [
                        "kazoo",
                        "twiml"
                    ],
                    "type": "string"
                },
                "req_timeout_ms": {
                    "description": "How long, in milliseconds, to wait for a Pivot response from the HTTP server",
                    "maximum": 5000,
                    "type": "integer"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "voice_url": {
                    "description": "What URL to request the initial Pivot callflow",
                    "pattern": "^https?://",
                    "type": "string"
                }
            },
            "required": [
                "voice_url"
            ],
            "type": "object"
        },
        "callflows.play": {
            "description": "Validator for the play callflow data object",
            "properties": {
                "answer": {
                    "description": "Whether to answer an unanswered call",
                    "type": "boolean"
                },
                "endless_playback": {
                    "default": false,
                    "description": "Loop the media continuously",
                    "type": "boolean"
                },
                "id": {
                    "description": "Media ID or URL of the media to play",
                    "type": "string"
                },
                "loop_count": {
                    "description": "How many times to loop the media",
                    "minimum": 1,
                    "type": "integer"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "terminators": {
                    "default": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "*",
                        "0",
                        "#"
                    ],
                    "description": "What DTMF can terminate playback of the audio",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "callflows.prepend_cid": {
            "description": "Validator for the prepend_cid callflow data object",
            "properties": {
                "action": {
                    "default": "prepend",
                    "description": "If the action parameter is \"reset\" the caller-id-name and caller-id-number will be restored to their original values, if the value is \"prepend\" then the prepending will happen",
                    "enum": [
                        "reset",
                        "prepend"
                    ],
                    "type": "string"
                },
                "apply_to": {
                    "default": "current",
                    "description": "Either \"original\" or \"current\", this specifies that the prefix's should be applied to the current caller-id's or the original values",
                    "enum": [
                        "original",
                        "current"
                    ],
                    "type": "string"
                },
                "caller_id_name_prefix": {
                    "default": "",
                    "description": "The prefix that should be applied to the caller-id-name",
                    "type": "string"
                },
                "caller_id_number_prefix": {
                    "default": "",
                    "description": "The prefix that should be applied to the caller-id-number",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.privacy": {
            "description": "Validator for the privacy callflow data object",
            "properties": {
                "endpoint_strategy": {
                    "default": "overwrite",
                    "description": "whether cf_privacy should overwrite or merge with the caller_id_options of the endpoint.",
                    "enum": [
                        "overwrite",
                        "merge"
                    ],
                    "type": "string"
                },
                "mode": {
                    "default": "full",
                    "description": "set caller privacy on calls, restricting the presentation some or full parts of Caller ID",
                    "enum": [
                        "full",
                        "name",
                        "number",
                        "yes"
                    ],
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.receive_fax": {
            "description": "Validator for the receive_fax callflow data object",
            "properties": {
                "media": {
                    "properties": {
                        "fax_option": {
                            "description": "Caller flag for T38 settings",
                            "oneOf": [
                                {
                                    "enum": [
                                        "auto",
                                        "false",
                                        "true"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "boolean"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "owner_id": {
                    "description": "User ID to send fax to",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.record_call": {
            "description": "Validator for the Record Call callflow action",
            "properties": {
                "action": {
                    "default": "start",
                    "description": "Whether to start or stop the recording",
                    "enum": [
                        "start",
                        "stop"
                    ],
                    "type": "string"
                },
                "format": {
                    "description": "What format to store the recording on disk",
                    "enum": [
                        "mp3",
                        "wav"
                    ],
                    "type": "string"
                },
                "label": {
                    "description": "Label to include in the origin of call recording",
                    "type": "string"
                },
                "media_name": {
                    "description": "the name of media",
                    "type": "string"
                },
                "method": {
                    "default": "put",
                    "description": "HTTP verb to use when sending the recording to the supplied URL",
                    "enum": [
                        "put",
                        "post"
                    ],
                    "type": "string"
                },
                "origin": {
                    "description": "How the recording was started - read-only",
                    "type": "string"
                },
                "record_min_sec": {
                    "description": "The minimum length, in seconds, the recording must be to be considered successful. Otherwise it is deleted",
                    "type": "integer"
                },
                "record_on_answer": {
                    "default": false,
                    "description": "Whether to delay the recording until the channel is answered",
                    "type": "boolean"
                },
                "record_on_bridge": {
                    "default": false,
                    "description": "Whether to delay the recording until the channel is bridged",
                    "type": "boolean"
                },
                "record_sample_rate": {
                    "description": "What sampling rate to use on the recording",
                    "type": "integer"
                },
                "should_follow_transfer": {
                    "default": true,
                    "description": "If true, the recording will continue after a transfer on the active leg",
                    "type": "boolean"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "time_limit": {
                    "default": 3600,
                    "description": "Time limit, in seconds, for the recording",
                    "maximum": 10800,
                    "minimum": 5,
                    "type": "integer"
                },
                "url": {
                    "description": "The URL to use when sending the recording for storage",
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "action"
            ],
            "type": "object"
        },
        "callflows.record_caller": {
            "description": "Record the caller's audio stream",
            "properties": {
                "format": {
                    "description": "What format to store the recording on disk",
                    "enum": [
                        "mp3",
                        "wav"
                    ],
                    "type": "string"
                },
                "method": {
                    "default": "put",
                    "description": "What HTTP method to use when sending the recording",
                    "enum": [
                        "put",
                        "post"
                    ],
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "time_limit": {
                    "default": 3600,
                    "description": "Time limit, in seconds, for the recording",
                    "maximum": 10800,
                    "minimum": 5,
                    "type": "integer"
                },
                "url": {
                    "description": "The URL to use when sending the recording for storage",
                    "format": "uri",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.resources": {
            "description": "Validator for the resources callflow data object",
            "properties": {
                "bypass_e164": {
                    "description": "Use the original requested number instead of normalizing to E164",
                    "type": "boolean"
                },
                "caller_id_type": {
                    "default": "external",
                    "description": "Which configured caller-id to use (key in the 'caller_id' object)",
                    "type": "string"
                },
                "custom_sip_headers": {
                    "anyOf": [
                        {
                            "$ref": "custom_sip_headers"
                        },
                        {
                            "properties": {
                                "in": {
                                    "$ref": "custom_sip_headers",
                                    "description": "Custom SIP Headers to be applied to calls inbound to Kazoo from the endpoint"
                                },
                                "out": {
                                    "$ref": "custom_sip_headers",
                                    "description": "Custom SIP Headers to be applied to calls outbound from Kazoo to the endpoint"
                                }
                            }
                        }
                    ],
                    "description": "A property list of SIP headers",
                    "type": "object"
                },
                "do_not_normalize": {
                    "description": "Use the original requested number instead of normalizing; otherwise try to apply the endpoint's dialplan to the requested number",
                    "type": "boolean"
                },
                "dynamic_flags": {
                    "description": "List of function names (or 'zone') that are called on the Call record to populate the 'flags' array sent to the resource(s) for matching",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "emit_account_id": {
                    "description": "Toggles whether to put the account id in the SIP packets",
                    "type": "boolean"
                },
                "format_from_uri": {
                    "description": "If true, puts the account realm in the From header",
                    "type": "boolean"
                },
                "from_uri_realm": {
                    "description": "Override the From realm in the SIP packets",
                    "type": "string"
                },
                "hunt_account_id": {
                    "description": "When using local resources, use this account instead of the account making the call (useful for resellers)",
                    "type": "string"
                },
                "ignore_early_media": {
                    "default": false,
                    "description": "Toggle whether to ignore early media",
                    "type": "boolean"
                },
                "outbound_flags": {
                    "default": [],
                    "description": "List of flags to use when matching resources to route the call",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "resource_type": {
                    "description": "sets a custom resource type for the published amqp message",
                    "type": "string"
                },
                "ringback": {
                    "description": "Tone or file to play while waiting for the leg to be answered",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "How long, in seconds, to wait for the call to be answered",
                    "type": "integer"
                },
                "to_did": {
                    "description": "Statically set the DID to dial",
                    "type": "string"
                },
                "use_local_resources": {
                    "default": true,
                    "description": "Toggle whether to use the account's (or hunt_account_id's) resources vs the system resources",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.response": {
            "description": "Validator for the Response callflow action",
            "properties": {
                "code": {
                    "default": 486,
                    "description": "The SIP Hangup code to respond with",
                    "type": "integer"
                },
                "media": {
                    "description": "Optional media file to play before responding with the hangup code/cause",
                    "maxLength": 2048,
                    "type": "string"
                },
                "message": {
                    "description": "The SIP Hangup cause to respond with",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "required": [
                "code"
            ],
            "type": "object"
        },
        "callflows.ring_group": {
            "description": "Validator for the Ring Group callflow element",
            "properties": {
                "endpoints": {
                    "description": "Endpoint IDs (devices, users, etc) included in the ring group",
                    "items": {
                        "description": "ID of the endpoint (device, user, etc)",
                        "properties": {
                            "delay": {
                                "default": 0,
                                "description": "How long to delay ringing the endpoint, in seconds",
                                "type": "integer"
                            },
                            "endpoint_type": {
                                "description": "The type (device, user, etc) of endpoint",
                                "enum": [
                                    "device",
                                    "user",
                                    "group"
                                ],
                                "type": "string"
                            },
                            "id": {
                                "description": "The ID of the endpoint",
                                "maxLength": 128,
                                "minLength": 1,
                                "type": "string"
                            },
                            "timeout": {
                                "default": 20,
                                "description": "How long to ring the endpoint, in seconds",
                                "type": "integer"
                            },
                            "weight": {
                                "description": "Weight of endpoint, different usage in various strategies",
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "endpoint_type",
                            "id"
                        ],
                        "type": "object"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "fail_on_single_reject": {
                    "description": "If any leg rejects the call, cancel all other legs",
                    "type": "boolean"
                },
                "ignore_forward": {
                    "default": true,
                    "description": "If true, will ignore SIP redirect requests for call-forwarded devices",
                    "type": "boolean"
                },
                "repeats": {
                    "default": 1,
                    "description": "How many times to retry the ring group",
                    "minimum": 1,
                    "type": "integer"
                },
                "ringback": {
                    "description": "Ringback to use",
                    "type": "string"
                },
                "ringtones": {
                    "properties": {
                        "external": {
                            "description": "Ring tone for calls from external sources",
                            "type": "string"
                        },
                        "internal": {
                            "description": "Ring tone for calls from external sources",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "strategy": {
                    "default": "simultaneous",
                    "description": "How to ring the members of the group",
                    "enum": [
                        "simultaneous",
                        "single",
                        "weighted_random"
                    ],
                    "type": "string"
                },
                "timeout": {
                    "default": 20,
                    "description": "How long to ring the ring group before continuing, in seconds",
                    "type": "integer"
                }
            },
            "required": [
                "endpoints"
            ],
            "type": "object"
        },
        "callflows.ring_group_toggle": {
            "description": "Validator for the ring_group_toggle callflow data object",
            "properties": {
                "action": {
                    "description": "What the module should do. Options are 'login' and 'logout'",
                    "enum": [
                        "login",
                        "logout"
                    ],
                    "type": "string"
                },
                "callflow_id": {
                    "description": "The callflow containing the ring group to log in and out of",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "required": [
                "action",
                "callflow_id"
            ],
            "type": "object"
        },
        "callflows.route_to_cid": {
            "description": "Endpoints lookup by cid number",
            "properties": {
                "can_call_self": {
                    "description": "Toggle whether devices of the same owner can call each other",
                    "type": "boolean"
                },
                "can_text_self": {
                    "description": "Toggle whether devices of the same owner can text each other",
                    "type": "boolean"
                },
                "cid_types": {
                    "default": [
                        "internal"
                    ],
                    "description": "CID types to perform search: internal, external, custom",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "delay": {
                    "default": 0,
                    "description": "How long to delay ringing the device, in seconds",
                    "type": "integer"
                },
                "endpoint_types": {
                    "default": [],
                    "description": "Endpoint types to perform search: user, device",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "static_invite": {
                    "description": "Override the SIP Username",
                    "type": "string"
                },
                "suppress_clid": {
                    "description": "Suppress sending caller ID",
                    "type": "boolean"
                },
                "timeout": {
                    "default": 0,
                    "description": "Time, in seconds, to wait for device to bridge",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "callflows.send_dtmf": {
            "description": "Validator for the Send DTMF callflow action",
            "properties": {
                "digits": {
                    "description": "String of DTMF tones to send",
                    "type": "string"
                },
                "duration_ms": {
                    "default": "2000",
                    "description": "How long, in milliseconds, to send each DTMF",
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "required": [
                "digits"
            ],
            "type": "object"
        },
        "callflows.set": {
            "description": "Validator for the set callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.set_alert_info": {
            "description": "Validator for the set_alert_info callflow data object",
            "properties": {
                "alert_info": {
                    "description": "Set `Alert-Info` header inside b-leg channel. Used for distinctive ring.",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "required": [
                "alert_info"
            ],
            "type": "object"
        },
        "callflows.set_cid": {
            "description": "Validator for the set_cid callflow data object",
            "properties": {
                "caller_id_name": {
                    "default": "",
                    "description": "Set caller ID Name",
                    "type": "string"
                },
                "caller_id_number": {
                    "default": "",
                    "description": "Set caller ID number",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.set_variable": {
            "description": "Validator for the set_variable callflow data object",
            "properties": {
                "channel": {
                    "default": "a",
                    "description": "Which channel to set the variable on",
                    "enum": [
                        "a",
                        "both"
                    ],
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "value": {
                    "description": "The value to set 'variable'",
                    "type": "string"
                },
                "variable": {
                    "description": "The variable name to set on the leg(s)",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.set_variables": {
            "description": "Validator for the set_variables callflow data object",
            "properties": {
                "custom_application_vars": {
                    "default": {},
                    "description": "Key-value pairs to set as custom_application_vars on the channel",
                    "type": "object"
                },
                "export": {
                    "description": "When true the provided custom_application_vars are set on the channel and any channel bridged to it later",
                    "type": "boolean"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "required": [
                "custom_application_vars"
            ],
            "type": "object"
        },
        "callflows.skel": {
            "description": "Validator for the skel callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.sleep": {
            "description": "Validator for the sleep callflow data object",
            "properties": {
                "duration": {
                    "default": 0,
                    "description": "How long to pause before continuing the callflow",
                    "maximum": 86400000,
                    "minimum": 0,
                    "type": "integer"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "unit": {
                    "default": "s",
                    "description": "What time unit is 'duration' in",
                    "enum": [
                        "ms",
                        "s",
                        "m",
                        "h"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.temporal_route": {
            "description": "Validator for the temporal_route callflow data object",
            "properties": {
                "action": {
                    "description": "What action to perform",
                    "enum": [
                        "menu",
                        "enable",
                        "disable",
                        "reset"
                    ],
                    "type": "string"
                },
                "interdigit_timeout": {
                    "description": "How long, in milliseconds, to wait for the next keypress",
                    "type": "integer"
                },
                "rule_set": {
                    "description": "ID of the rule set",
                    "type": "string"
                },
                "rules": {
                    "default": [],
                    "description": "List of rule IDs to use",
                    "items": {
                        "description": "ID of the temporal rule set to use",
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "timezone": {
                    "description": "Timezone to use when processing temporal rules",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.transfer": {
            "description": "Validator for the transfer callflow data object",
            "properties": {
                "captures": {
                    "default": [
                        "no_match"
                    ],
                    "description": "What to default to using if no capture group is present",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "leg": {
                    "description": "Which leg to transfer (transferee)",
                    "enum": [
                        "self",
                        "bleg"
                    ],
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "target": {
                    "description": "The target destination (extension or DID)",
                    "type": "string"
                },
                "transfer_type": {
                    "default": "blind",
                    "description": "The type of transfer to perform",
                    "enum": [
                        "attended",
                        "blind"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "callflows.tts": {
            "description": "Validator for the TTS (Text-to-speech) callflow action",
            "properties": {
                "endless_playback": {
                    "description": "Loop the media until canceled",
                    "type": "boolean"
                },
                "engine": {
                    "description": "What TTS engine to use",
                    "enum": [
                        "flite",
                        "google",
                        "ispeech",
                        "voicefabric"
                    ],
                    "type": "string"
                },
                "language": {
                    "description": "The language of the speaker",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "terminators": {
                    "default": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "*",
                        "0",
                        "#"
                    ],
                    "description": "What DTMF can terminate playback of the audio",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "text": {
                    "description": "The text to speak",
                    "maxLength": 1000,
                    "minLength": 1,
                    "type": "string"
                },
                "voice": {
                    "default": "female",
                    "description": "What voice to use when speaking the text",
                    "type": "string"
                }
            },
            "required": [
                "text"
            ],
            "type": "object"
        },
        "callflows.user": {
            "description": "Validator for the user callflow data object",
            "properties": {
                "can_call_self": {
                    "description": "Toggle whether devices of this use can call each other",
                    "type": "boolean"
                },
                "can_text_self": {
                    "description": "Toggle whether devices of this use can text each other",
                    "type": "boolean"
                },
                "custom_sip_headers": {
                    "description": "KV Object where the name is the SIP header and the value is the SIP field",
                    "type": "object"
                },
                "delay": {
                    "default": 0,
                    "description": "How long to delay the endpoint(s) before bridging",
                    "type": "integer"
                },
                "fail_on_single_reject": {
                    "description": "If any leg rejects the call, cancel all other legs",
                    "type": "boolean"
                },
                "id": {
                    "description": "User ID",
                    "type": "string"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "static_invite": {
                    "description": "Override the SIP Username",
                    "type": "string"
                },
                "strategy": {
                    "default": "simultaneous",
                    "description": "Ringing strategy for the endpoint(s)",
                    "enum": [
                        "simultaneous",
                        "single"
                    ],
                    "type": "string"
                },
                "suppress_clid": {
                    "description": "Toggle whether to suppress caller ID",
                    "type": "boolean"
                },
                "timeout": {
                    "default": 20,
                    "description": "Timeout, in seconds, to wait for answer",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "callflows.voicemail": {
            "description": "Validator for the Voicemail callflow element",
            "properties": {
                "action": {
                    "default": "compose",
                    "description": "Whether to check voicemail box or compose a new voicemail message",
                    "enum": [
                        "check",
                        "compose"
                    ],
                    "type": "string"
                },
                "callerid_match_login": {
                    "default": false,
                    "description": "Whether to match the caller ID to a voicemail box",
                    "type": "boolean"
                },
                "id": {
                    "description": "The ID of the voicemail box",
                    "maxLength": 32,
                    "minLength": 32,
                    "type": "string"
                },
                "interdigit_timeout": {
                    "default": 2000,
                    "description": "The amount of time (in milliseconds) to wait for the caller to press the next digit after pressing a digit",
                    "type": "integer"
                },
                "max_message_length": {
                    "default": 500,
                    "description": "Max length of the message that caller can leave in voicemail box",
                    "type": "integer"
                },
                "single_mailbox_login": {
                    "default": false,
                    "description": "Allow login if caller has a single mailbox",
                    "type": "boolean"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.wait_for_hangup": {
            "description": "Validator for the wait_for_hangup callflow data object",
            "properties": {
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "callflows.webhook": {
            "description": "Validator for the webhook callflow data object",
            "properties": {
                "custom_data": {
                    "description": "JSON object of custom data included on the HTTP request",
                    "type": "object"
                },
                "http_verb": {
                    "description": "What HTTP verb to use when sending the request",
                    "enum": [
                        "post",
                        "get"
                    ],
                    "type": "string"
                },
                "retries": {
                    "description": "How many times to retry the request if the host isn't available",
                    "type": "integer"
                },
                "skip_module": {
                    "description": "When set to true this callflow action is skipped, advancing to the wildcard branch (if any)",
                    "type": "boolean"
                },
                "uri": {
                    "description": "The HTTP URI to send the request",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cccps": {
            "description": "Calling cards callback platform user's info",
            "properties": {
                "active": {
                    "default": false,
                    "description": "Show's whether CID/PIN active",
                    "type": "boolean"
                },
                "cid": {
                    "description": "CID to authorize",
                    "type": "string"
                },
                "comment": {
                    "description": "Some notes regarding what this pin/cid for",
                    "type": "string"
                },
                "max_concurent_calls_per_user": {
                    "description": "Calls per user limit. Counts all user's legs and compares to max_concurrent_calls_per_user multiplied by 2",
                    "type": "integer"
                },
                "pin": {
                    "description": "PIN to authorize",
                    "type": "string"
                },
                "retain_cid": {
                    "description": "Pass initial caller number to the callee",
                    "type": "boolean"
                },
                "user_id": {
                    "description": "The ID of the user object that 'owns' cid/pin",
                    "maxLength": 32,
                    "minLength": 32,
                    "type": "string"
                }
            }
        },
        "cdrs": {
            "description": "Call Detail Records",
            "properties": {
                "app_name": {
                    "description": "The Kazoo application that issued the CDR",
                    "type": "string"
                },
                "app_version": {
                    "description": "The internal Kazoo version number of the application that issued the CDR",
                    "type": "string"
                },
                "billing_seconds": {
                    "description": "The number of seconds the call leg can be billed for (typically from when the call leg is answered",
                    "type": "integer"
                },
                "call_direction": {
                    "description": "Direction of the call, relative to the media switch",
                    "enum": [
                        "inbound",
                        "outbound"
                    ],
                    "type": "string"
                },
                "call_id": {
                    "description": "Unique identifier of the call leg",
                    "type": "string"
                },
                "callee_id_name": {
                    "description": "The indicated name of the callee",
                    "type": "string"
                },
                "callee_id_number": {
                    "description": "The indicated number of the callee",
                    "type": "string"
                },
                "caller_id_name": {
                    "description": "The indicated name of the caller",
                    "type": "string"
                },
                "caller_id_number": {
                    "description": "The indicated number of the caller",
                    "type": "string"
                },
                "custom_application_vars": {
                    "description": "Any custom-set values",
                    "type": "object"
                },
                "custom_channel_vars": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Kazoo-specific key/value pairs set on the channel",
                    "type": "object"
                },
                "custom_sip_headers": {
                    "anyOf": [
                        {
                            "$ref": "custom_sip_headers"
                        },
                        {
                            "properties": {
                                "in": {
                                    "$ref": "custom_sip_headers",
                                    "description": "Custom SIP Headers to be applied to calls inbound to Kazoo from the endpoint"
                                },
                                "out": {
                                    "$ref": "custom_sip_headers",
                                    "description": "Custom SIP Headers to be applied to calls outbound from Kazoo to the endpoint"
                                }
                            }
                        }
                    ],
                    "description": "A property list of SIP headers",
                    "type": "object"
                },
                "digits_dialed": {
                    "description": "All the DTMF tones detected on this leg of the call",
                    "type": "string"
                },
                "disposition": {
                    "description": "Who sent the SIP BYE message",
                    "type": "string"
                },
                "duration_seconds": {
                    "description": "The duration of the call leg, in seconds",
                    "type": "integer"
                },
                "fax_bad_rows": {
                    "type": "string"
                },
                "fax_ecm_used": {
                    "type": "string"
                },
                "fax_result_code": {
                    "type": "string"
                },
                "fax_result_text": {
                    "type": "string"
                },
                "fax_success": {
                    "type": "string"
                },
                "fax_total_pages": {
                    "type": "string"
                },
                "fax_transfer_rate": {
                    "type": "string"
                },
                "fax_transferred_pages": {
                    "type": "string"
                },
                "from": {
                    "description": "Built by Kazoo, depending on direction, to represent the From user",
                    "type": "string"
                },
                "from_tag": {
                    "description": "SIP From TAG",
                    "type": "string"
                },
                "from_uri": {
                    "description": "The From SIP URI",
                    "type": "string"
                },
                "hangup_cause": {
                    "description": "The reason for the call leg's termination",
                    "type": "string"
                },
                "hangup_code": {
                    "description": "The SIP hangup code, if available",
                    "type": "string"
                },
                "interaction_id": {
                    "description": "correlating ID among related call legs",
                    "type": "string"
                },
                "local_sdp": {
                    "description": "The SDP negotiated by the local agent",
                    "type": "string"
                },
                "media_server": {
                    "description": "The hostname of the media server that processed the call",
                    "type": "string"
                },
                "node": {
                    "description": "The ecallmgr which issued the CDR",
                    "type": "string"
                },
                "other_leg_call_id": {
                    "description": "If this leg was bridged, the call-id of the opposite leg",
                    "type": "string"
                },
                "other_leg_caller_id_name": {
                    "description": "Caller ID name of the bridged leg",
                    "type": "string"
                },
                "other_leg_caller_id_number": {
                    "description": "Caller ID number of the bridged leg",
                    "type": "string"
                },
                "other_leg_destination_number": {
                    "description": "Dialed number of the other leg",
                    "type": "string"
                },
                "other_leg_direction": {
                    "description": "direction of the other leg, relative to the media server",
                    "type": "string"
                },
                "presence_id": {
                    "description": "ID used in NOTIFY SIP messages",
                    "type": "string"
                },
                "remote_sdp": {
                    "description": "The SDP negotiated by the remote agent",
                    "type": "string"
                },
                "request": {
                    "description": "Built by Kazoo this is the processed request URI",
                    "type": "string"
                },
                "ringing_seconds": {
                    "description": "How many seconds the leg was ringing (pre-answer)",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "UTC timestamp, in Gregorian seconds, of when the CDR was generated",
                    "type": "integer"
                },
                "to": {
                    "description": "Built by Kazoo, depending on direction, to represent the To user",
                    "type": "string"
                },
                "to_tag": {
                    "description": "SIP TO Tag",
                    "type": "string"
                },
                "to_uri": {
                    "description": "The To SIP URI",
                    "type": "string"
                },
                "user_agent": {
                    "description": "User agent header from SIP packet",
                    "type": "string"
                }
            },
            "required": [
                "call_id"
            ],
            "type": "object"
        },
        "clicktocall": {
            "description": "Click-to-call allows you to create URLs that can be POSTed to with a phone number or SIP URI and create a phone call from the provided contact information to a destination you have pre-determined.",
            "properties": {
                "auth_required": {
                    "default": true,
                    "description": "Determines if this click to call requires valid auth-tokens when invoked",
                    "type": "boolean"
                },
                "bypass_media": {
                    "description": "Default bypass media mode (The string type is deprecated, please use this as a boolean)",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "enum": [
                                "auto",
                                "false",
                                "true"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "caller_id_number": {
                    "description": "Explicitly set caller id number",
                    "type": "string"
                },
                "custom_application_vars": {
                    "default": {},
                    "description": "Key-value pairs to set as custom_application_vars on the channel",
                    "type": "object"
                },
                "custom_sip_headers": {
                    "anyOf": [
                        {
                            "$ref": "custom_sip_headers"
                        },
                        {
                            "properties": {
                                "in": {
                                    "$ref": "custom_sip_headers",
                                    "description": "Custom SIP Headers to be applied to calls inbound to Kazoo from the endpoint"
                                },
                                "out": {
                                    "$ref": "custom_sip_headers",
                                    "description": "Custom SIP Headers to be applied to calls outbound from Kazoo to the endpoint"
                                }
                            }
                        }
                    ],
                    "description": "A property list of SIP headers",
                    "type": "object"
                },
                "dial_first": {
                    "description": "Determines what will be dialed first: extension or contact",
                    "enum": [
                        "extension",
                        "contact"
                    ],
                    "type": "string"
                },
                "extension": {
                    "description": "The extension to connect to when the click to call is invoked",
                    "type": "string"
                },
                "media": {
                    "properties": {
                        "ignore_early_media": {
                            "description": "The option to determine if early media from the endpoint should always be ignored",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "music_on_hold": {
                    "description": "The music on hold parameters used if not a property of the device owner",
                    "properties": {
                        "media_id": {
                            "description": "The ID of a media object that should be used as the music on hold",
                            "maxLength": 2048,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "A friendly name for the click to call",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "outbound_callee_id_name": {
                    "description": "Callee ID Name of the device calling out to the contact number",
                    "type": "string"
                },
                "outbound_callee_id_number": {
                    "description": "Callee ID Number of the device calling out to the contact number",
                    "type": "string"
                },
                "presence_id": {
                    "description": "Static presence ID (used instead of SIP username)",
                    "type": "string"
                },
                "ringback": {
                    "description": "Ringback to use",
                    "type": "string"
                },
                "throttle": {
                    "description": "The rate that this click to call can be invoked",
                    "type": "integer"
                },
                "timeout": {
                    "description": "How long, in seconds, to wait for the call to progress",
                    "type": "integer"
                },
                "whitelist": {
                    "description": "A list of regular expressions that the click to call can dial to",
                    "items": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "extension",
                "name"
            ],
            "type": "object"
        },
        "comment": {
            "description": "Schema for a single comment",
            "properties": {
                "account_id": {
                    "description": "Account ID of the commenter.",
                    "type": "string"
                },
                "action_required": {
                    "default": false,
                    "description": "Specified if an action is required by the user.",
                    "type": "boolean"
                },
                "author": {
                    "description": "Full name of the author",
                    "type": "string"
                },
                "content": {
                    "description": "Content of the comment",
                    "type": "string"
                },
                "is_private": {
                    "default": false,
                    "description": "Specified if this comment is private",
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "integer"
                },
                "user_id": {
                    "description": "User ID of the commenter",
                    "type": "string"
                }
            },
            "required": [
                "author",
                "content",
                "timestamp"
            ],
            "type": "object"
        },
        "comments": {
            "description": "Schema for comments",
            "properties": {
                "comments": {
                    "description": "The history of comments made on a object",
                    "items": {
                        "$ref": "#/definitions/comment"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "conferences": {
            "description": "Schema for conferences",
            "properties": {
                "bridge_password": {
                    "description": "the password used for a conference bridge",
                    "type": "string"
                },
                "bridge_username": {
                    "description": "the username used for a conference bridge",
                    "type": "string"
                },
                "caller_controls": {
                    "description": "caller controls (config settings)",
                    "type": "string"
                },
                "conference_numbers": {
                    "default": [],
                    "description": "Defines conference numbers that can be used by members or moderators",
                    "items": {
                        "pattern": "^[0-9]+$",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "controls": {
                    "description": "controls",
                    "type": "object"
                },
                "domain": {
                    "description": "domain",
                    "type": "string"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "focus": {
                    "description": "This is a read-only property indicating the media server hosting the conference",
                    "type": "string"
                },
                "language": {
                    "description": "Prompt language to play in the conference",
                    "type": "string"
                },
                "max_members_media": {
                    "description": "Media to play when the conference is full",
                    "type": "string"
                },
                "max_participants": {
                    "description": "The maximum number of participants that can join",
                    "type": "integer"
                },
                "member": {
                    "default": {},
                    "description": "Defines the discovery (call in) properties for a member",
                    "properties": {
                        "join_deaf": {
                            "default": false,
                            "description": "Determines if a member will join deaf",
                            "type": "boolean"
                        },
                        "join_muted": {
                            "default": true,
                            "description": "Determines if a member will join muted",
                            "type": "boolean"
                        },
                        "numbers": {
                            "default": [],
                            "description": "Defines the conference (call in) number(s) for members",
                            "items": {
                                "pattern": "^[0-9]+$",
                                "type": "string"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "pins": {
                            "default": [],
                            "description": "Defines the pin number(s) for members",
                            "items": {
                                "pattern": "^[0-9]+$",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "play_entry_prompt": {
                            "description": "Whether to play the entry prompt on member join",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "moderator": {
                    "default": {},
                    "description": "Defines the discovery (call in) properties for a moderator",
                    "properties": {
                        "join_deaf": {
                            "default": false,
                            "description": "Determines if a moderator will join deaf",
                            "type": "boolean"
                        },
                        "join_muted": {
                            "default": false,
                            "description": "Determines if a moderator will join muted",
                            "type": "boolean"
                        },
                        "numbers": {
                            "default": [],
                            "description": "Defines the conference (call in) number(s) for moderators",
                            "items": {
                                "pattern": "^[0-9]+$",
                                "type": "string"
                            },
                            "type": "array",
                            "uniqueItems": true
                        },
                        "pins": {
                            "default": [],
                            "description": "Defines the pin number(s) for moderators",
                            "items": {
                                "pattern": "^[0-9]+$",
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "moderator_controls": {
                    "description": "profile on the switch for controlling the conference as a moderator",
                    "type": "string"
                },
                "name": {
                    "description": "A friendly name for the conference",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "owner_id": {
                    "description": "The user ID who manages this conference",
                    "maxLength": 32,
                    "minLength": 32,
                    "type": "string"
                },
                "play_entry_tone": {
                    "description": "Whether to play an entry tone, or the entry tone to play",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "play_exit_tone": {
                    "description": "Whether to play an exit tone, or the exit tone to play",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "play_name": {
                    "default": false,
                    "description": "Do we need to announce new conference members?",
                    "type": "boolean"
                },
                "play_welcome": {
                    "description": "Whether to play the welcome prompt",
                    "type": "boolean"
                },
                "profile": {
                    "$ref": "#/definitions/conferences.profile",
                    "description": "Profile configuration",
                    "type": "object"
                },
                "profile_name": {
                    "description": "conference profile name",
                    "type": "string"
                },
                "require_moderator": {
                    "description": "does the conference require a moderator",
                    "type": "boolean"
                },
                "wait_for_moderator": {
                    "description": "should members wait for a moderator before joining the conference",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "conferences.dial": {
            "description": "Schema for conference dial API command",
            "properties": {
                "caller_id_name": {
                    "description": "Caller ID Name to use when dialing out to endpoints",
                    "type": "string"
                },
                "caller_id_number": {
                    "description": "Caller ID Number to use when dialing out to endpoints",
                    "type": "string"
                },
                "endpoints": {
                    "description": "Endpoints to dial out to and join to the conference",
                    "items": {
                        "oneOf": [
                            {
                                "description": "Device or User IDs, DIDs or extensions, SIP URIs",
                                "type": "string"
                            },
                            {
                                "$ref": "devices",
                                "description": "Device document"
                            }
                        ]
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "participant_flags": {
                    "description": "Participant flags applied to each endpoint when it joins the conference",
                    "items": {
                        "description": "Participant flag",
                        "enum": [
                            "mute",
                            "deaf",
                            "distribute_dtmf",
                            "is_moderator",
                            "disable_moh",
                            "ghost",
                            "join_existing",
                            "video_mute"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "profile_name": {
                    "description": "The profile name to use for configuration",
                    "type": "string"
                },
                "target_call_id": {
                    "description": "Existing UUID to use as a hint for where to start the conference",
                    "type": "string"
                },
                "timeout": {
                    "description": "How long to try to reach the endpoint(s)",
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "required": [
                "endpoints"
            ]
        },
        "conferences.profile": {
            "description": "Schema for conference profiles",
            "properties": {
                "alone-sound": {
                    "description": "Audio that plays while you are alone in the conference",
                    "type": "string"
                },
                "announce-count": {
                    "description": "Play member count to conference when above this threshold",
                    "type": "integer"
                },
                "caller-controls": {
                    "description": "Name of the caller control group",
                    "type": "string"
                },
                "comfort-noise": {
                    "description": "The volume level of background white noise",
                    "maximum": 10000,
                    "minimum": 0,
                    "type": "integer"
                },
                "energy-level": {
                    "description": "Energy level required for audio to be sent to other users",
                    "maximum": 1800,
                    "minimum": 0,
                    "type": "integer"
                },
                "enter-sound": {
                    "description": "Audio to play when entering a conference",
                    "type": "string"
                },
                "exit-sound": {
                    "description": "Audio to play when exiting a conference",
                    "type": "string"
                },
                "interval": {
                    "description": "Milliseconds per frame",
                    "maximum": 120,
                    "minimum": 10,
                    "type": "integer"
                },
                "locked-sound": {
                    "description": "Audio to play when the conference is locked",
                    "type": "string"
                },
                "max-members": {
                    "description": "Set the maximum number of members in the conference",
                    "minimum": 2,
                    "type": "integer"
                },
                "max-members-sound": {
                    "description": "If max-members has been reached, audio to play to caller instead of joining the conference",
                    "type": "string"
                },
                "moderator-controls": {
                    "description": "Name of the moderator control group to use",
                    "type": "string"
                },
                "moh-sound": {
                    "description": "Audio to play, on a loop, while participant count is 1",
                    "type": "string"
                },
                "muted-sound": {
                    "description": "Audio to play when muted",
                    "type": "string"
                },
                "rate": {
                    "description": "Audio sample rate",
                    "enum": [
                        8000,
                        12000,
                        16000,
                        24000,
                        32000,
                        44100,
                        48000
                    ],
                    "type": "integer"
                },
                "unmuted-sound": {
                    "description": "Audio to play when unmuted",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "connectivity": {
            "description": "Trunkstore configuration document - this is old stuff; do not recommend building off this if possible",
            "properties": {
                "account": {
                    "description": "Information that applies to the account as a whole",
                    "properties": {
                        "caller_id": {
                            "properties": {
                                "cid_name": {
                                    "maxLength": 35,
                                    "type": "string"
                                },
                                "cid_number": {
                                    "maxLength": 35,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "emergency_caller_id": {
                            "properties": {
                                "cid_name": {
                                    "maxLength": 35,
                                    "type": "string"
                                },
                                "cid_number": {
                                    "maxLength": 35,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "trunks": {
                            "description": "The number of two-way trunks this account has purchased",
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "Human-friendly name of the trunkstore account",
                    "type": "string"
                },
                "servers": {
                    "default": [],
                    "description": "What servers will be allowed to make/receive calls via this account",
                    "items": {
                        "properties": {
                            "DIDs": {
                                "type": "object"
                            },
                            "auth": {
                                "properties": {
                                    "auth_method": {
                                        "default": "password",
                                        "description": "What type of auth mechanism to use",
                                        "enum": [
                                            "password",
                                            "Password",
                                            "IP",
                                            "ip"
                                        ],
                                        "type": "string"
                                    },
                                    "auth_password": {
                                        "description": "Password of the user@auth_realm",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "auth_user": {
                                        "description": "Username for authentication",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "ip": {
                                        "description": "IP (sip) address for this device",
                                        "type": "string"
                                    },
                                    "port": {
                                        "description": "Port to send SIP traffic for the remote device",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "auth_method"
                                ],
                                "type": "object"
                            },
                            "name": {
                                "description": "Human-friendly name of the server",
                                "minLength": 1,
                                "type": "string"
                            },
                            "options": {
                                "properties": {
                                    "caller_id": {
                                        "properties": {
                                            "cid_name": {
                                                "maxLength": 35,
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "cid_number": {
                                                "maxLength": 35,
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "delay": {
                                        "default": 0,
                                        "description": "The time, in seconds, to wait before attempting to call the server",
                                        "type": "integer"
                                    },
                                    "dynamic_flags": {
                                        "description": "List of function names (or 'zone') that are called on the Call record to populate the 'flags' array sent to the resource(s) for matching",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "emergency_caller_id": {
                                        "properties": {
                                            "cid_name": {
                                                "maxLength": 35,
                                                "type": "string"
                                            },
                                            "cid_number": {
                                                "maxLength": 35,
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "enabled": {
                                        "default": true,
                                        "description": "Is the server ready for sending and receiving calls",
                                        "type": "boolean"
                                    },
                                    "failover": {
                                        "description": "Route inbound call to another destination if this server fails to handle the call",
                                        "properties": {
                                            "e164": {
                                                "description": "An E.164 formatted DID to dial for failover",
                                                "type": "string"
                                            },
                                            "sip": {
                                                "description": "A SIP URI (sip:user@host) to call for failover",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "flags": {
                                        "description": "List of flags to use when matching resources to route the call",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "force_outbound": {
                                        "default": false,
                                        "description": "If true, will send the call over configured carriers instead of to the server (as opposed to the 'enabled' flag, which will reject the calls)",
                                        "type": "boolean"
                                    },
                                    "hunt_account_id": {
                                        "description": "When using local resources, use this account instead of the account making the call (useful for resellers)",
                                        "type": "string"
                                    },
                                    "hunt_non_reconcilable": {
                                        "default": false,
                                        "description": "Whether to allow routing to continue on a non-reconcilable TO number",
                                        "type": "boolean"
                                    },
                                    "ignore_early_media": {
                                        "type": "boolean"
                                    },
                                    "inbound_format": {
                                        "default": "npan",
                                        "description": "Determines how the INVITE is sent to the server",
                                        "enum": [
                                            "e164",
                                            "npan",
                                            "1npan",
                                            "username"
                                        ],
                                        "type": "string"
                                    },
                                    "ip": {
                                        "description": "IP (sip) address for this device",
                                        "type": "string"
                                    },
                                    "media_handling": {
                                        "default": "bypass",
                                        "description": "Determine whether the switch should be in the media path or not",
                                        "enum": [
                                            "process",
                                            "bypass"
                                        ],
                                        "type": "string"
                                    },
                                    "port": {
                                        "description": "Port to send SIP traffic for the remote device",
                                        "type": "integer"
                                    },
                                    "progress_timeout": {
                                        "description": "The time, in seconds, to wait for the server to progress in the call, before trying an optionally defined failover route or terminating the call",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "sip_headers": {
                                        "description": "List of arbitrary SIP headers to add to the INVITE",
                                        "items": {
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "timeout": {
                                        "description": "The time, in seconds, to wait for an answer from the server",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "required": [
                            "auth"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            }
        },
        "custom_sip_headers": {
            "description": "Custom SIP headers applied to an INVITE",
            "type": "object"
        },
        "device_rate_limits": {
            "description": "describe limits for SIP requests",
            "properties": {
                "per_minute": {
                    "additionalProperties": false,
                    "description": "The limits to apply by a minute",
                    "properties": {
                        "invites": {
                            "description": "Count for the specified SIP method",
                            "type": "integer"
                        },
                        "registrations": {
                            "description": "Count for the specified SIP method",
                            "type": "integer"
                        },
                        "total_packets": {
                            "description": "Summary count for all of the SIP methods",
                            "type": "integer"
                        }
                    },
                    "required": [
                        "total_packets"
                    ],
                    "type": "object"
                },
                "per_second": {
                    "additionalProperties": false,
                    "description": "The limits to apply by a second",
                    "properties": {
                        "invites": {
                            "description": "Count for the specified SIP method",
                            "type": "integer"
                        },
                        "registrations": {
                            "description": "Count for the specified SIP method",
                            "type": "integer"
                        },
                        "total_packets": {
                            "description": "Summary count for all of the SIP methods",
                            "type": "integer"
                        }
                    },
                    "required": [
                        "total_packets"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "per_minute",
                "per_second"
            ],
            "type": "object"
        },
        "devices": {
            "description": "A device be it a SIP phone or landline number",
            "properties": {
                "call_forward": {
                    "description": "The device call forward parameters",
                    "properties": {
                        "direct_calls_only": {
                            "default": false,
                            "description": "Determines if the calls that are not directly sent to the device should be forwarded",
                            "type": "boolean"
                        },
                        "enabled": {
                            "default": false,
                            "description": "Determines if the call forwarding should be used",
                            "type": "boolean"
                        },
                        "failover": {
                            "default": false,
                            "description": "Enable the call-forwarding parameters if the device is offline",
                            "type": "boolean"
                        },
                        "ignore_early_media": {
                            "default": true,
                            "description": "The option to determine if early media from the call forwarded number should ignored",
                            "type": "boolean"
                        },
                        "keep_caller_id": {
                            "default": true,
                            "description": "Determines if the caller id is kept when the call is forwarded, if not the devices caller id is used",
                            "type": "boolean"
                        },
                        "number": {
                            "description": "The number to forward calls to",
                            "maxLength": 35,
                            "type": "string"
                        },
                        "require_keypress": {
                            "default": true,
                            "description": "Determines if the callee is prompted to press 1 to accept the call",
                            "type": "boolean"
                        },
                        "substitute": {
                            "default": true,
                            "description": "Determines if the call forwarding replaces the device",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "call_recording": {
                    "$ref": "#/definitions/call_recording"
                },
                "call_restriction": {
                    "additionalProperties": {
                        "properties": {
                            "action": {
                                "description": "If set to deny all calls of this type will be rejected.  If set to inherit the user/device rules apply",
                                "enum": [
                                    "inherit",
                                    "deny"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "default": {},
                    "description": "Device level call restrictions for each available number classification",
                    "type": "object"
                },
                "call_waiting": {
                    "$ref": "#/definitions/call_waiting"
                },
                "caller_id": {
                    "$ref": "#/definitions/caller_id",
                    "description": "The device caller ID parameters"
                },
                "caller_id_options": {
                    "description": "custom properties for configuring caller_id",
                    "properties": {
                        "outbound_privacy": {
                            "description": "Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing",
                            "enum": [
                                "full",
                                "name",
                                "number",
                                "none"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "contact_list": {
                    "default": {},
                    "description": "Contact List Parameters",
                    "properties": {
                        "exclude": {
                            "description": "If set to true the device is excluded from the contact list",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "device_type": {
                    "description": "Arbitrary device type used by the UI and billing system",
                    "type": "string"
                },
                "dial_plan": {
                    "$ref": "#/definitions/dialplans",
                    "description": "A list of rules used to modify dialed numbers"
                },
                "do_not_disturb": {
                    "description": "DND Parameters",
                    "properties": {
                        "enabled": {
                            "description": "Is do-not-disturb enabled for this device?",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "enabled": {
                    "default": true,
                    "description": "Determines if the device is currently enabled",
                    "type": "boolean"
                },
                "exclude_from_queues": {
                    "default": false,
                    "description": "Do not ring this device when calling user/agent in queue",
                    "type": "boolean"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "formatters": {
                    "$ref": "#/definitions/formatters"
                },
                "hotdesk": {
                    "description": "The hotdesk status of this device",
                    "properties": {
                        "users": {
                            "description": "The user(s) currently hotdesked into the device",
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "language": {
                    "description": "The language for the device",
                    "type": "string"
                },
                "mac_address": {
                    "description": "The MAC Address of the device (if applicable)",
                    "type": "string"
                },
                "media": {
                    "$ref": "#/definitions/endpoint.media",
                    "description": "Configure audio/video/etc media options for this device"
                },
                "metaflows": {
                    "$ref": "#/definitions/metaflows",
                    "description": "The device metaflow parameters"
                },
                "music_on_hold": {
                    "default": {},
                    "description": "The music on hold parameters used if not a property of the device owner",
                    "properties": {
                        "media_id": {
                            "description": "The ID of a media object that should be used as the music on hold",
                            "maxLength": 2048,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "mwi_unsolicited_updates": {
                    "default": true,
                    "description": "When true enables unsolicited mwi notifications",
                    "type": "boolean"
                },
                "name": {
                    "description": "A friendly name for the device",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "outbound_flags": {
                    "description": "List of flags (features) this device requires when making outbound calls",
                    "oneOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "properties": {
                                "dynamic": {
                                    "description": "Dynamic outbound flags",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "static": {
                                    "description": "Static outbound flags",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                "owner_id": {
                    "description": "The ID of the user object that 'owns' the device",
                    "maxLength": 32,
                    "minLength": 32,
                    "type": "string"
                },
                "presence_id": {
                    "description": "Static presence ID (used instead of SIP username)",
                    "type": "string"
                },
                "provision": {
                    "description": "Provision data",
                    "properties": {
                        "combo_keys": {
                            "type": "object"
                        },
                        "endpoint_brand": {
                            "description": "Brand of the phone",
                            "type": "string"
                        },
                        "endpoint_family": {
                            "description": "Family name of the phone",
                            "type": "string"
                        },
                        "endpoint_model": {
                            "description": "Model name of the phone",
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            ]
                        },
                        "feature_keys": {
                            "type": "object"
                        },
                        "id": {
                            "description": "Provisioner Template ID",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "register_overwrite_notify": {
                    "default": false,
                    "description": "When true enables overwrite notifications",
                    "type": "boolean"
                },
                "ringtones": {
                    "default": {},
                    "description": "Ringtone Parameters",
                    "properties": {
                        "external": {
                            "description": "The alert info SIP header added when the call is from internal sources",
                            "maxLength": 256,
                            "type": "string"
                        },
                        "internal": {
                            "description": "The alert info SIP header added when the call is from external sources",
                            "maxLength": 256,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "sip": {
                    "default": {},
                    "description": "SIP Parameters",
                    "properties": {
                        "custom_sip_headers": {
                            "anyOf": [
                                {
                                    "$ref": "custom_sip_headers"
                                },
                                {
                                    "properties": {
                                        "in": {
                                            "$ref": "custom_sip_headers",
                                            "description": "Custom SIP Headers to be applied to calls inbound to Kazoo from the endpoint"
                                        },
                                        "out": {
                                            "$ref": "custom_sip_headers",
                                            "description": "Custom SIP Headers to be applied to calls outbound from Kazoo to the endpoint"
                                        }
                                    }
                                }
                            ],
                            "description": "A property list of SIP headers",
                            "type": "object"
                        },
                        "expire_seconds": {
                            "default": 300,
                            "description": "The time, in seconds, sent to the provisioner for the registration period that the device should be configured with.",
                            "type": "integer"
                        },
                        "ignore_completed_elsewhere": {
                            "description": "When set to false the phone should not consider ring group calls answered elsewhere as missed",
                            "type": "boolean"
                        },
                        "invite_format": {
                            "default": "contact",
                            "description": "The SIP request URI invite format",
                            "enum": [
                                "username",
                                "npan",
                                "1npan",
                                "e164",
                                "route",
                                "contact"
                            ],
                            "type": "string"
                        },
                        "ip": {
                            "description": "IP address for this device",
                            "type": "string"
                        },
                        "method": {
                            "default": "password",
                            "description": "Method of authentication",
                            "enum": [
                                "password",
                                "ip"
                            ],
                            "type": "string"
                        },
                        "number": {
                            "description": "The number used if the invite format is 1npan, npan, or e164 (if not set the dialed number is used)",
                            "type": "string"
                        },
                        "password": {
                            "description": "SIP authentication password",
                            "maxLength": 32,
                            "minLength": 5,
                            "type": "string"
                        },
                        "realm": {
                            "description": "The realm this device should use, overriding the account realm. Should rarely be necessary.",
                            "maxLength": 253,
                            "minLength": 4,
                            "pattern": "^[.\\w_-]+$",
                            "type": "string"
                        },
                        "route": {
                            "description": "The SIP URL used if the invite format is 'route'",
                            "type": "string"
                        },
                        "static_route": {
                            "description": "Sends all inbound calls to this string (instead of dialed number or username)",
                            "type": "string"
                        },
                        "username": {
                            "description": "SIP authentication username",
                            "maxLength": 32,
                            "minLength": 2,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "suppress_unregister_notifications": {
                    "default": false,
                    "description": "When true disables deregister notifications",
                    "type": "boolean"
                },
                "timezone": {
                    "description": "Device's timezone",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "devices.combo_key": {
            "description": "Device provisioner Combo/Feature Key",
            "oneOf": [
                {
                    "properties": {
                        "type": {
                            "description": "Feature key type",
                            "enum": [
                                "parking"
                            ],
                            "type": "string"
                        },
                        "value": {
                            "description": "Feature key value",
                            "oneOf": [
                                {
                                    "maximum": 10,
                                    "minimum": 1,
                                    "type": "integer"
                                },
                                {
                                    "enum": [
                                        "1",
                                        "2",
                                        "3",
                                        "4",
                                        "5",
                                        "6",
                                        "7",
                                        "8",
                                        "9",
                                        "10"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "properties": {
                                        "label": {
                                            "description": "Label to display for Feature key",
                                            "type": "string"
                                        },
                                        "value": {
                                            "description": "Feature key value",
                                            "maximum": 10,
                                            "minimum": 1,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "label",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            ]
                        }
                    },
                    "required": [
                        "type"
                    ]
                },
                {
                    "properties": {
                        "type": {
                            "description": "Feature key type",
                            "enum": [
                                "line",
                                "presence",
                                "personal_parking",
                                "speed_dial"
                            ],
                            "type": "string"
                        },
                        "value": {
                            "description": "Feature key value",
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "properties": {
                                        "label": {
                                            "description": "Label to display for Feature key",
                                            "type": "string"
                                        },
                                        "value": {
                                            "description": "Feature key value",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "label",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            ]
                        }
                    },
                    "required": [
                        "type"
                    ]
                }
            ],
            "type": [
                "object",
                "null"
            ]
        },
        "devices_notify": {
            "description": "Schema for Crossbar devices notify API",
            "properties": {
                "data": {
                    "description": "Action-specific parameters",
                    "properties": {
                        "body": {
                            "description": "Parameters of content body of SIP NOTIFY",
                            "properties": {
                                "content_type": {
                                    "description": "The Content-Type of the data in the content body",
                                    "type": "string"
                                },
                                "data": {
                                    "description": "The data in the content body",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "data",
                                "content_type"
                            ],
                            "type": "object"
                        },
                        "event": {
                            "description": "Event header value for SIP NOTIFY",
                            "type": "string"
                        }
                    },
                    "required": [
                        "event"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "dialplans": {
            "additionalProperties": {
                "properties": {
                    "description": {
                        "description": "Friendly name for this regex dialplan",
                        "type": "string"
                    },
                    "prefix": {
                        "description": "Prefix the prepend to the capture group after applying the regex",
                        "type": "string"
                    },
                    "suffix": {
                        "description": "Suffix the append to the capture group after applying the regex",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "description": "Permit local dialing by converting the dialed number to a routable form",
            "properties": {
                "system": {
                    "description": "List of system dial plans",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "directories": {
            "description": "Allow a caller to search for a user/device by name instead of extension/DID",
            "properties": {
                "confirm_match": {
                    "default": true,
                    "description": "When one match is found, require caller to confirm the match before connecting",
                    "type": "boolean"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "max_dtmf": {
                    "default": 0,
                    "description": "Cap the number of DTMF characters collected from a caller, 0 for unlimited",
                    "minimum": 0,
                    "type": "integer"
                },
                "min_dtmf": {
                    "default": 3,
                    "description": "How many DTMF characters to collect from a caller before processing the directory",
                    "minimum": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the directory",
                    "minLength": 1,
                    "type": "string"
                },
                "search_fields": {
                    "description": "What user fields to search DTMF matches on",
                    "enum": [
                        "first_name",
                        "last_name",
                        "both"
                    ],
                    "type": "string"
                },
                "sort_by": {
                    "default": "last_name",
                    "description": "What field to sort on in matching documents when a caller enters characters",
                    "enum": [
                        "first_name",
                        "last_name"
                    ],
                    "type": "string"
                },
                "users": {
                    "default": [],
                    "description": "The list of users associated with this directory",
                    "items": {
                        "description": "UserId to include in the directory",
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "domain_hosts": {
            "description": "Domain host settings for white-labelling"
        },
        "domains": {
            "description": "Domain settings for white-labelling",
            "properties": {
                "A": {
                    "description": "A records",
                    "type": "object"
                },
                "CNAME": {
                    "$ref": "#/definitions/domain_hosts",
                    "description": "CNAME records",
                    "type": "object"
                },
                "MX": {
                    "description": "MX records, typically for email servers",
                    "type": "object"
                },
                "NAPTR": {
                    "description": "NAPTR records",
                    "type": "object"
                },
                "SRV": {
                    "description": "SRV records",
                    "type": "object"
                },
                "TXT": {
                    "description": "TXT records",
                    "type": "object"
                }
            }
        },
        "endpoint.media": {
            "description": "Schema for endpoint media options",
            "properties": {
                "audio": {
                    "default": {},
                    "description": "The audio media parameters",
                    "properties": {
                        "codecs": {
                            "description": "A list of audio codecs the endpoint supports",
                            "items": {
                                "enum": [
                                    "OPUS",
                                    "CELT@32000h",
                                    "G7221@32000h",
                                    "G7221@16000h",
                                    "G722",
                                    "speex@32000h",
                                    "speex@16000h",
                                    "PCMU",
                                    "PCMA",
                                    "G729",
                                    "GSM",
                                    "CELT@48000h",
                                    "CELT@64000h",
                                    "G722_16",
                                    "G722_32",
                                    "CELT_48",
                                    "CELT_64",
                                    "Speex",
                                    "speex"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "uniqueItems": true
                        }
                    },
                    "type": "object"
                },
                "bypass_media": {
                    "description": "Default bypass media mode (The string type is deprecated, please use this as a boolean)",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "enum": [
                                "auto",
                                "false",
                                "true"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "encryption": {
                    "default": {},
                    "description": "Encryption Parameters",
                    "properties": {
                        "enforce_security": {
                            "default": false,
                            "description": "Is Encryption Enabled?",
                            "type": "boolean"
                        },
                        "methods": {
                            "default": [],
                            "description": "Supported Encryption Types",
                            "items": {
                                "enum": [
                                    "zrtp",
                                    "srtp"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "fax_option": {
                    "description": "Is T.38 Supported?",
                    "type": "boolean"
                },
                "ignore_early_media": {
                    "description": "The option to determine if early media from the endpoint should always be ignored",
                    "type": "boolean"
                },
                "progress_timeout": {
                    "description": "The progress timeout to apply to the endpoint (seconds)",
                    "type": "integer"
                },
                "video": {
                    "default": {},
                    "description": "The video media parameters",
                    "properties": {
                        "codecs": {
                            "default": [],
                            "description": "A list of video codecs the endpoint supports",
                            "items": {
                                "enum": [
                                    "H261",
                                    "H263",
                                    "H264",
                                    "VP8"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "uniqueItems": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "faxbox": {
            "description": "FaxBoxes allow configuration of individual fax virtual machines",
            "properties": {
                "attempts": {
                    "default": 0,
                    "description": "The number of attempts made, this will be set by the system and reset automatically on put/post",
                    "maximum": 4,
                    "minimum": 0,
                    "type": "integer"
                },
                "caller_id": {
                    "description": "The Caller-ID-Number",
                    "type": "string"
                },
                "caller_name": {
                    "default": "Kazoo Fax Printer",
                    "description": "The Caller-ID-Name",
                    "type": "string"
                },
                "custom_smtp_email_address": {
                    "description": "custom smtp address",
                    "type": "string"
                },
                "fax_header": {
                    "default": "Kazoo Fax Printer",
                    "description": "The name printed at the top of the fax",
                    "type": "string"
                },
                "fax_identity": {
                    "description": "The number printed at the top of the fax",
                    "type": "string"
                },
                "fax_timezone": {
                    "description": "The timezone announced",
                    "type": "string"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "media": {
                    "default": {},
                    "description": "The faxbox media parameters",
                    "properties": {
                        "fax_option": {
                            "description": "Is T.38 Supported?",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "A friendly name for the faxbox",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "notifications": {
                    "description": "Status notifications",
                    "properties": {
                        "inbound": {
                            "description": "Inbound Status notifications",
                            "properties": {
                                "callback": {
                                    "description": "A URL to send results to",
                                    "properties": {
                                        "method": {
                                            "description": "The http method to use when sending the results",
                                            "enum": [
                                                "post",
                                                "put"
                                            ],
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "The content-type to use when sending the results",
                                            "enum": [
                                                "json",
                                                "www-url-form-encoded"
                                            ],
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The URL to call back with the results",
                                            "pattern": "^https?://",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "email": {
                                    "description": "Inbound Email Notifications",
                                    "properties": {
                                        "send_to": {
                                            "description": "A list or string of email recipient(s)",
                                            "oneOf": [
                                                {
                                                    "items": {
                                                        "format": "email",
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                {
                                                    "format": "email",
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "sms": {
                                    "description": "SMS notifications",
                                    "properties": {
                                        "send_to": {
                                            "description": "A list or string of sms recipient(s)",
                                            "oneOf": [
                                                {
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "outbound": {
                            "description": "Outbound Status notifications",
                            "properties": {
                                "callback": {
                                    "description": "A URL to send results to",
                                    "properties": {
                                        "method": {
                                            "description": "The http method to use when sending the results",
                                            "enum": [
                                                "post",
                                                "put"
                                            ],
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "The content-type to use when sending the results",
                                            "enum": [
                                                "json",
                                                "www-url-form-encoded"
                                            ],
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The URL to call back with the results",
                                            "pattern": "^https?://",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "email": {
                                    "description": "Email notifications",
                                    "properties": {
                                        "send_to": {
                                            "description": "A list or string of email recipient(s)",
                                            "oneOf": [
                                                {
                                                    "items": {
                                                        "format": "email",
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                {
                                                    "format": "email",
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                "sms": {
                                    "description": "SMS notifications",
                                    "properties": {
                                        "send_to": {
                                            "description": "A list or string of sms recipient(s)",
                                            "oneOf": [
                                                {
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "retries": {
                    "default": 1,
                    "description": "The number of times to retry",
                    "maximum": 4,
                    "minimum": 0,
                    "type": "integer"
                },
                "smtp_permission_list": {
                    "default": [],
                    "description": "smtp permission list. accepts regular expressions",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "faxes": {
            "description": "Faxes API allows you to update and access fax jobs for both sending and receiving",
            "properties": {
                "attempts": {
                    "default": 0,
                    "description": "The number of attempts made, this will be set by the system and reset automatically on put/post",
                    "maximum": 4,
                    "minimum": 0,
                    "type": "integer"
                },
                "document": {
                    "description": "Parameters related to the storage of a fax document",
                    "properties": {
                        "content": {
                            "description": "The content provided in the body when fetching for transmission as a post",
                            "maxLength": 256,
                            "type": "string"
                        },
                        "content_type": {
                            "description": "The content type header to be used when fetching for transmission as a post",
                            "type": "string"
                        },
                        "host": {
                            "description": "The host header to be used when fetching for transmission",
                            "type": "string"
                        },
                        "method": {
                            "default": "get",
                            "description": "The method that should be used to retrieve the document",
                            "enum": [
                                "get",
                                "post"
                            ],
                            "type": "string"
                        },
                        "referer": {
                            "description": "The referer header to be used when fetching for transmission",
                            "type": "string"
                        },
                        "url": {
                            "description": "The url of the fax document",
                            "pattern": "^https?://",
                            "type": "string"
                        }
                    },
                    "required": [
                        "url"
                    ],
                    "type": "object"
                },
                "from_name": {
                    "description": "The sender name for the fax",
                    "type": "string"
                },
                "from_number": {
                    "description": "The sender number for the fax",
                    "type": "string"
                },
                "notifications": {
                    "description": "Status notifications",
                    "properties": {
                        "email": {
                            "description": "Email notifications",
                            "properties": {
                                "send_to": {
                                    "description": "A list or string of email recipient(s)",
                                    "oneOf": [
                                        {
                                            "items": {
                                                "format": "email",
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "format": "email",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "sms": {
                            "description": "SMS notifications",
                            "properties": {
                                "send_to": {
                                    "description": "A list or string of sms recipient(s)",
                                    "oneOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "retries": {
                    "default": 1,
                    "description": "The number of times to retry",
                    "maximum": 4,
                    "minimum": 0,
                    "type": "integer"
                },
                "to_name": {
                    "description": "The recipient name for the fax",
                    "type": "string"
                },
                "to_number": {
                    "description": "The recipient number for the fax",
                    "type": "string"
                },
                "tx_result": {
                    "description": "The result of a transmission attempt",
                    "properties": {
                        "error_message": {
                            "default": "",
                            "description": "A description of any error that occurred",
                            "type": "string"
                        },
                        "fax_bad_rows": {
                            "default": 0,
                            "description": "The number of bad rows",
                            "type": "integer"
                        },
                        "fax_error_correction": {
                            "default": false,
                            "description": "True if fax error correction was used",
                            "type": "boolean"
                        },
                        "fax_receiver_id": {
                            "default": "",
                            "description": "The receiver id reported by the remote fax device",
                            "type": "string"
                        },
                        "fax_speed": {
                            "default": 0,
                            "description": "The speed (Baud-Rate) achieved during transmission",
                            "type": "integer"
                        },
                        "pages_sent": {
                            "default": 0,
                            "description": "The number of pages transmitted",
                            "type": "integer"
                        },
                        "success": {
                            "default": false,
                            "description": "True if the fax transmission was successful",
                            "type": "boolean"
                        },
                        "time_elapsed": {
                            "default": 0,
                            "description": "The amount of time from submission to completion",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "from_number",
                "to_number"
            ],
            "type": "object"
        },
        "find_numbers": {
            "properties": {
                "country": {
                    "default": "US",
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string"
                },
                "prefix": {
                    "maxLength": 10,
                    "minLength": 3,
                    "type": "string"
                },
                "quantity": {
                    "default": 1,
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "required": [
                "prefix"
            ]
        },
        "formatters": {
            "description": "Schema for request formatters",
            "type": "object"
        },
        "formatters.format_options": {
            "description": "Schema for formatter options",
            "properties": {
                "direction": {
                    "description": "Only apply the formatter on the relevant request direction",
                    "enum": [
                        "inbound",
                        "outbound",
                        "both"
                    ],
                    "type": "string"
                },
                "match_invite_format": {
                    "description": "Applicable on fields with SIP URIs. Will format the username portion to match the invite format of the outbound request.",
                    "type": "boolean"
                },
                "prefix": {
                    "description": "Prepends value against the result of a successful regex match",
                    "type": "string"
                },
                "regex": {
                    "description": "Matches against the value, with optional capture group",
                    "format": "regex",
                    "type": "string"
                },
                "strip": {
                    "description": "If set to true, the field will be stripped from the payload",
                    "type": "boolean"
                },
                "suffix": {
                    "description": "Appends value against the result of a successful regex match",
                    "type": "string"
                },
                "value": {
                    "description": "Replaces the current value with the static value defined",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "functions": {
            "description": "Functions that javascript function to process a callflow document.",
            "properties": {
                "enabled": {
                    "default": true,
                    "description": "Is the function enabled and running",
                    "type": "boolean"
                },
                "function_js": {
                    "description": "Serverless function in Javascript",
                    "type": "string"
                },
                "language_pack": {
                    "default": "javascript",
                    "description": "The language and version are required for the function runtime.",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for the function.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "function_js"
            ],
            "type": "object"
        },
        "groups": {
            "description": "Validator for the group",
            "properties": {
                "endpoints": {
                    "default": {},
                    "description": "Endpoints included into group",
                    "type": "object"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "music_on_hold": {
                    "default": {},
                    "description": "The music on hold parameters",
                    "properties": {
                        "media_id": {
                            "description": "The ID of a media object that should be used as music on hold",
                            "maxLength": 128,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "A friendly name for the group",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "endpoints",
                "name"
            ],
            "type": "object"
        },
        "ip": {
            "description": "IP address assigned to the cluster",
            "properties": {
                "host": {
                    "description": "The hostname the IP belongs to",
                    "minLength": 1,
                    "type": "string"
                },
                "ip": {
                    "description": "The IP addresses",
                    "oneOf": [
                        {
                            "format": "ipv4",
                            "type": "string"
                        },
                        {
                            "format": "ipv6",
                            "type": "string"
                        }
                    ]
                },
                "zone": {
                    "description": "The zone name the IP belongs to",
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "ip",
                "zone",
                "host"
            ]
        },
        "ips": {
            "description": "IP addresses assigned to the account",
            "properties": {
                "ips": {
                    "description": "List of IP addresses",
                    "items": {
                        "description": "IP address",
                        "oneOf": [
                            {
                                "format": "ipv4",
                                "type": "string"
                            },
                            {
                                "format": "ipv6",
                                "type": "string"
                            }
                        ]
                    },
                    "minItems": 1,
                    "type": "array"
                }
            }
        },
        "kapi.acdc_agent.end_wrapup": {
            "description": "AMQP API for acdc_agent.end_wrapup",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "end_wrapup"
                    ],
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Presence-State": {
                    "enum": [
                        "trying",
                        "online",
                        "offline",
                        "early",
                        "confirmed",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Time-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.login": {
            "description": "AMQP API for acdc_agent.login",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "login"
                    ],
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Presence-State": {
                    "enum": [
                        "trying",
                        "online",
                        "offline",
                        "early",
                        "confirmed",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Time-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.login_queue": {
            "description": "AMQP API for acdc_agent.login_queue",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "login_queue"
                    ],
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Presence-State": {
                    "enum": [
                        "trying",
                        "online",
                        "offline",
                        "early",
                        "confirmed",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Time-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.login_resp": {
            "description": "AMQP API for acdc_agent.login_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "login_resp"
                    ],
                    "type": "string"
                },
                "Status": {
                    "enum": [
                        "success",
                        "failed"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Status"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.logout": {
            "description": "AMQP API for acdc_agent.logout",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "logout"
                    ],
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Presence-State": {
                    "enum": [
                        "trying",
                        "online",
                        "offline",
                        "early",
                        "confirmed",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Time-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.logout_queue": {
            "description": "AMQP API for acdc_agent.logout_queue",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "logout_queue"
                    ],
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Presence-State": {
                    "enum": [
                        "trying",
                        "online",
                        "offline",
                        "early",
                        "confirmed",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Time-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.pause": {
            "description": "AMQP API for acdc_agent.pause",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "pause"
                    ],
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Presence-State": {
                    "enum": [
                        "trying",
                        "online",
                        "offline",
                        "early",
                        "confirmed",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Time-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.resume": {
            "description": "AMQP API for acdc_agent.resume",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "resume"
                    ],
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Presence-State": {
                    "enum": [
                        "trying",
                        "online",
                        "offline",
                        "early",
                        "confirmed",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Time-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.stats_req": {
            "description": "AMQP API for acdc_agent.stats_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "stats_req"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.stats_resp": {
            "description": "AMQP API for acdc_agent.stats_resp",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Current-Calls": {
                    "type": "string"
                },
                "Current-Stats": {
                    "type": "string"
                },
                "Current-Statuses": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "stats_resp"
                    ],
                    "type": "string"
                },
                "Stats": {
                    "type": "object"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.sync_req": {
            "description": "AMQP API for acdc_agent.sync_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "sync_req"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_agent.sync_resp": {
            "description": "AMQP API for acdc_agent.sync_resp",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "sync_resp"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                },
                "Status": {
                    "enum": [
                        "init",
                        "sync",
                        "ready",
                        "waiting",
                        "ringing",
                        "answered",
                        "wrapup",
                        "paused"
                    ],
                    "type": "string"
                },
                "Time-Left": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Status"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.agent_change": {
            "description": "AMQP API for acdc_queue.agent_change",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Change": {
                    "enum": [
                        "available",
                        "ringing",
                        "busy",
                        "unavailable"
                    ],
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "queue"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "agent_change"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Change",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.agent_timeout": {
            "description": "AMQP API for acdc_queue.agent_timeout",
            "properties": {
                "Agent-Process-IDs": {
                    "type": "array"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "agent"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "connect_timeout"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_call": {
            "description": "AMQP API for acdc_queue.member_call",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Member-Priority": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_call_cancel": {
            "description": "AMQP API for acdc_queue.member_call_cancel",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "call_cancel"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_call_failure": {
            "description": "AMQP API for acdc_queue.member_call_failure",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "call_fail"
                    ],
                    "type": "string"
                },
                "Failure-Reason": {
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_call_success": {
            "description": "AMQP API for acdc_queue.member_call_success",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "call_success"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_connect_accepted": {
            "description": "AMQP API for acdc_queue.member_connect_accepted",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "connect_accepted"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_connect_req": {
            "description": "AMQP API for acdc_queue.member_connect_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "connect_req"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_connect_resp": {
            "description": "AMQP API for acdc_queue.member_connect_resp",
            "properties": {
                "Agent-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "connect_resp"
                    ],
                    "type": "string"
                },
                "Idle-Time": {
                    "type": "integer"
                },
                "Process-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Agent-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_connect_retry": {
            "description": "AMQP API for acdc_queue.member_connect_retry",
            "properties": {
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "connect_retry"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_connect_satisfied": {
            "description": "AMQP API for acdc_queue.member_connect_satisfied",
            "properties": {
                "Agent-Process-IDs": {
                    "type": "array"
                },
                "Call": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "connect_satisfied"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Call",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_connect_win": {
            "description": "AMQP API for acdc_queue.member_connect_win",
            "properties": {
                "Agent-Process-IDs": {
                    "type": "array"
                },
                "CDR-Url": {
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Caller-Exit-Key": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "connect_win"
                    ],
                    "type": "string"
                },
                "Notifications": {
                    "type": "object"
                },
                "Process-ID": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Record-Caller": {
                    "type": "boolean"
                },
                "Recording-URL": {
                    "type": "string"
                },
                "Ring-Timeout": {
                    "type": "integer"
                },
                "Wrapup-Timeout": {
                    "type": "integer"
                }
            },
            "required": [
                "Call",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.member_hungup": {
            "description": "AMQP API for acdc_queue.member_hungup",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "member"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "hungup"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.queue_member_add": {
            "description": "AMQP API for acdc_queue.queue_member_add",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "queue"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "member_add"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.queue_member_remove": {
            "description": "AMQP API for acdc_queue.queue_member_remove",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "queue"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "member_remove"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.sync_req": {
            "description": "AMQP API for acdc_queue.sync_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "queue"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "sync_req"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_queue.sync_resp": {
            "description": "AMQP API for acdc_queue.sync_resp",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Current-Strategy": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "queue"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "sync_resp"
                    ],
                    "type": "string"
                },
                "Process-ID": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Strategy-State": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Current-Strategy",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.average_wait_time_err": {
            "description": "AMQP API for acdc_stats.average_wait_time_err",
            "properties": {
                "Error-Reason": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "average_wait_time_err"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Error-Reason"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.average_wait_time_req": {
            "description": "AMQP API for acdc_stats.average_wait_time_req",
            "properties": {
                "Account-ID": {
                    "minLength": 1,
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "average_wait_time_req"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "minLength": 1,
                    "type": "string"
                },
                "Window": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.average_wait_time_resp": {
            "description": "AMQP API for acdc_stats.average_wait_time_resp",
            "properties": {
                "Average-Wait-Time": {
                    "type": "integer"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "average_wait_time_resp"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Average-Wait-Time"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.call_abandoned": {
            "description": "AMQP API for acdc_stats.call_abandoned",
            "properties": {
                "Abandon-Reason": {
                    "type": "string"
                },
                "Abandon-Timestamp": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_call_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "abandoned"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.call_flush": {
            "description": "AMQP API for acdc_stats.call_flush",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_call_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "flush"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.call_handled": {
            "description": "AMQP API for acdc_stats.call_handled",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_call_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "handled"
                    ],
                    "type": "string"
                },
                "Handled-Timestamp": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.call_missed": {
            "description": "AMQP API for acdc_stats.call_missed",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_call_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "missed"
                    ],
                    "type": "string"
                },
                "Miss-Reason": {
                    "type": "string"
                },
                "Miss-Timestamp": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.call_processed": {
            "description": "AMQP API for acdc_stats.call_processed",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_call_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "processed"
                    ],
                    "type": "string"
                },
                "Hung-Up-By": {
                    "type": "string"
                },
                "Processed-Timestamp": {
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.call_waiting": {
            "description": "AMQP API for acdc_stats.call_waiting",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Caller-Priority": {
                    "type": "string"
                },
                "Entered-Timestamp": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_call_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "waiting"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID",
                "Queue-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.current_calls_err": {
            "description": "AMQP API for acdc_stats.current_calls_err",
            "properties": {
                "Error-Reason": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "current_calls_err"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Error-Reason"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.current_calls_req": {
            "description": "AMQP API for acdc_stats.current_calls_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "End-Range": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "current_calls_req"
                    ],
                    "type": "string"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Start-Range": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.current_calls_resp": {
            "description": "AMQP API for acdc_stats.current_calls_resp",
            "properties": {
                "Abandoned": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "current_calls_resp"
                    ],
                    "type": "string"
                },
                "Handled": {
                    "type": "string"
                },
                "Processed": {
                    "type": "string"
                },
                "Query-Time": {
                    "type": "integer"
                },
                "Waiting": {
                    "type": "string"
                }
            },
            "required": [
                "Query-Time"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_connected": {
            "description": "AMQP API for acdc_stats.status_connected",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "connected"
                    ],
                    "type": "string"
                },
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_connecting": {
            "description": "AMQP API for acdc_stats.status_connecting",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "connecting"
                    ],
                    "type": "string"
                },
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_err": {
            "description": "AMQP API for acdc_stats.status_err",
            "properties": {
                "Error-Reason": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "status_err"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Error-Reason"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_logged_in": {
            "description": "AMQP API for acdc_stats.status_logged_in",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "logged_in"
                    ],
                    "type": "string"
                },
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_logged_out": {
            "description": "AMQP API for acdc_stats.status_logged_out",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "logged_out"
                    ],
                    "type": "string"
                },
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_outbound": {
            "description": "AMQP API for acdc_stats.status_outbound",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "outbound"
                    ],
                    "type": "string"
                },
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_paused": {
            "description": "AMQP API for acdc_stats.status_paused",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "paused"
                    ],
                    "type": "string"
                },
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_pending_logged_out": {
            "description": "AMQP API for acdc_stats.status_pending_logged_out",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "pending_logged_out"
                    ],
                    "type": "string"
                },
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_ready": {
            "description": "AMQP API for acdc_stats.status_ready",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "ready"
                    ],
                    "type": "string"
                },
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_req": {
            "description": "AMQP API for acdc_stats.status_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "End-Range": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "status_req"
                    ],
                    "type": "string"
                },
                "Limit": {
                    "type": "string"
                },
                "Start-Range": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_resp": {
            "description": "AMQP API for acdc_stats.status_resp",
            "properties": {
                "Agents": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "status_resp"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Agents"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_update": {
            "description": "AMQP API for acdc_stats.status_update",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {},
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.acdc_stats.status_wrapup": {
            "description": "AMQP API for acdc_stats.status_wrapup",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Agent-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acdc_status_stat"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "wrapup"
                    ],
                    "type": "string"
                },
                "Pause-Time": {
                    "type": "integer"
                },
                "Queue-ID": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Wait-Time": {
                    "type": "integer"
                }
            },
            "required": [
                "Account-ID",
                "Agent-ID",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.asr.error": {
            "description": "AMQP API for asr.error",
            "properties": {
                "Error-Code": {
                    "type": "string"
                },
                "Error-Msg": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "asr"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "error"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Error-Code",
                "Error-Msg"
            ],
            "type": "object"
        },
        "kapi.asr.req": {
            "description": "AMQP API for asr.req",
            "properties": {
                "ASR-Account-ID": {
                    "type": "string"
                },
                "ASR-Account-Password": {
                    "type": "string"
                },
                "ASR-Endpoint": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "asr"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "req"
                    ],
                    "type": "string"
                },
                "Language": {
                    "type": "string"
                },
                "Stream-Response": {
                    "type": "boolean"
                }
            },
            "required": [
                "ASR-Account-ID",
                "ASR-Account-Password",
                "ASR-Endpoint",
                "Call-ID",
                "Control-Queue"
            ],
            "type": "object"
        },
        "kapi.asr.resp": {
            "description": "AMQP API for asr.resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "asr"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "resp"
                    ],
                    "type": "string"
                },
                "Response-Text": {
                    "type": "string"
                }
            },
            "required": [
                "Response-Text"
            ],
            "type": "object"
        },
        "kapi.authn.authn_err": {
            "description": "AMQP API for authn.authn_err",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "authn_err"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.authn.authn_req": {
            "description": "AMQP API for authn.authn_req",
            "properties": {
                "Auth-Nonce": {
                    "type": "string"
                },
                "Auth-Realm": {
                    "type": "string"
                },
                "Auth-Response": {
                    "type": "string"
                },
                "Auth-User": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "authn_req"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "Method": {
                    "type": "string"
                },
                "Orig-IP": {
                    "type": "string"
                },
                "Orig-Port": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Auth-Realm",
                "Auth-User",
                "From",
                "To"
            ],
            "type": "object"
        },
        "kapi.authn.authn_resp": {
            "description": "AMQP API for authn.authn_resp",
            "properties": {
                "Access-Group": {
                    "type": "string"
                },
                "Auth-Method": {
                    "enum": [
                        "password",
                        "ip",
                        "a1-hash",
                        "error",
                        "gsm",
                        "nonce",
                        "a3a8"
                    ],
                    "type": "string"
                },
                "Auth-Nonce": {
                    "type": "string"
                },
                "Auth-Password": {
                    "type": "string"
                },
                "Auth-Username": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "authn_resp"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "Register-Overwrite-Notify": {
                    "type": "string"
                },
                "Suppress-Unregister-Notifications": {
                    "type": "string"
                },
                "Tenant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Auth-Method",
                "Auth-Password"
            ],
            "type": "object"
        },
        "kapi.authn.error": {
            "description": "AMQP API for authn.error",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "authn_err"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.authn.req": {
            "description": "AMQP API for authn.req",
            "properties": {
                "Auth-Nonce": {
                    "type": "string"
                },
                "Auth-Realm": {
                    "type": "string"
                },
                "Auth-Response": {
                    "type": "string"
                },
                "Auth-User": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "authn_req"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "Method": {
                    "type": "string"
                },
                "Orig-IP": {
                    "type": "string"
                },
                "Orig-Port": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Auth-Realm",
                "Auth-User",
                "From",
                "To"
            ],
            "type": "object"
        },
        "kapi.authn.resp": {
            "description": "AMQP API for authn.resp",
            "properties": {
                "Access-Group": {
                    "type": "string"
                },
                "Auth-Method": {
                    "enum": [
                        "password",
                        "ip",
                        "a1-hash",
                        "error",
                        "gsm",
                        "nonce",
                        "a3a8"
                    ],
                    "type": "string"
                },
                "Auth-Nonce": {
                    "type": "string"
                },
                "Auth-Password": {
                    "type": "string"
                },
                "Auth-Username": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "authn_resp"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "Register-Overwrite-Notify": {
                    "type": "string"
                },
                "Suppress-Unregister-Notifications": {
                    "type": "string"
                },
                "Tenant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Auth-Method",
                "Auth-Password"
            ],
            "type": "object"
        },
        "kapi.authn.token_req": {
            "description": "AMQP API for authn.token_req",
            "properties": {
                "Auth-Token": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "token_req"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "Orig-IP": {
                    "type": "string"
                },
                "Orig-Port": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Auth-Token",
                "From",
                "To"
            ],
            "type": "object"
        },
        "kapi.authn.token_resp": {
            "description": "AMQP API for authn.token_resp",
            "properties": {
                "Access-Group": {
                    "type": "string"
                },
                "Auth-Nonce": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "token_resp"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "Register-Overwrite-Notify": {
                    "type": "string"
                },
                "Suppress-Unregister-Notifications": {
                    "type": "string"
                },
                "Tenant-ID": {
                    "type": "string"
                },
                "Token-Data": {
                    "type": "string"
                }
            },
            "required": [
                "Token-Data"
            ],
            "type": "object"
        },
        "kapi.authz.authz_req": {
            "description": "AMQP API for authz.authz_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call-Direction": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "authz"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "authz_req"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Network-Addr": {
                    "type": "string"
                },
                "From-Network-Port": {
                    "type": "string"
                },
                "Other-Leg-Call-ID": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Usage": {
                    "type": "object"
                }
            },
            "required": [
                "Call-Direction",
                "Call-ID",
                "Caller-ID-Name",
                "Caller-ID-Number",
                "From",
                "Request",
                "To"
            ],
            "type": "object"
        },
        "kapi.authz.authz_resp": {
            "description": "AMQP API for authz.authz_resp",
            "properties": {
                "Account-Billing": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Call-Direction": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "authz"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "authz_resp"
                    ],
                    "type": "string"
                },
                "Global-Resource": {
                    "enum": [
                        "true",
                        "false"
                    ],
                    "type": "string"
                },
                "Is-Authorized": {
                    "enum": [
                        "true",
                        "false"
                    ],
                    "type": "string"
                },
                "Other-Leg-Call-ID": {
                    "type": "string"
                },
                "Reseller-Billing": {
                    "type": "string"
                },
                "Reseller-ID": {
                    "type": "string"
                },
                "Soft-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Call-ID",
                "Is-Authorized"
            ],
            "type": "object"
        },
        "kapi.authz.balance_check_req": {
            "description": "AMQP API for authz.balance_check_req",
            "properties": {
                "Accounts": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Event-Category": {
                    "enum": [
                        "authz"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "balance_check_req"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Accounts"
            ],
            "type": "object"
        },
        "kapi.authz.balance_check_resp": {
            "description": "AMQP API for authz.balance_check_resp",
            "properties": {
                "Balances": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "authz"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "balance_check_resp"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Balances"
            ],
            "type": "object"
        },
        "kapi.blackhole.get_req": {
            "description": "AMQP API for blackhole.get_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "blackhole"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "get_req"
                    ],
                    "type": "string"
                },
                "Socket-ID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.blackhole.get_resp": {
            "description": "AMQP API for blackhole.get_resp",
            "properties": {
                "Data": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "blackhole"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "get_resp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.blackhole.module_req": {
            "description": "AMQP API for blackhole.module_req",
            "properties": {
                "Action": {
                    "enum": [
                        "start",
                        "stop"
                    ],
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "blackhole"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "module_req"
                    ],
                    "type": "string"
                },
                "Module": {
                    "type": "string"
                },
                "Persist": {
                    "type": "boolean"
                }
            },
            "required": [
                "Action",
                "Module"
            ],
            "type": "object"
        },
        "kapi.blackhole.module_resp": {
            "description": "AMQP API for blackhole.module_resp",
            "properties": {
                "Error": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "blackhole"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "module_resp"
                    ],
                    "type": "string"
                },
                "Persisted": {
                    "type": "boolean"
                },
                "Started": {
                    "type": "boolean"
                }
            },
            "required": [
                "Persisted",
                "Started"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.collect_recurring_req": {
            "description": "AMQP API for bookkeepers.collect_recurring_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Audit-Log": {
                    "type": "string"
                },
                "Bookkeeper-ID": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Due-Timestamp": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "collect_recurring_req"
                    ],
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Bookkeeper-ID",
                "Bookkeeper-Type",
                "Due-Timestamp",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.collect_recurring_req_definition": {
            "description": "AMQP API for bookkeepers.collect_recurring_req_definition",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Audit-Log": {
                    "type": "string"
                },
                "Bookkeeper-ID": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Due-Timestamp": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "collect_recurring_req"
                    ],
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Bookkeeper-ID",
                "Bookkeeper-Type",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.collect_recurring_resp": {
            "description": "AMQP API for bookkeepers.collect_recurring_resp",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Bookkeeper-ID": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "collect_recurring_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Bookkeeper-ID",
                "Bookkeeper-Type",
                "Status"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.collect_recurring_resp_definition": {
            "description": "AMQP API for bookkeepers.collect_recurring_resp_definition",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Bookkeeper-ID": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "collect_recurring_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Bookkeeper-ID",
                "Bookkeeper-Type",
                "Status"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.refund_req": {
            "description": "AMQP API for bookkeepers.refund_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Amount": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "refund_req"
                    ],
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Amount",
                "Bookkeeper-Type",
                "Transaction-DB",
                "Transaction-ID",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.refund_req_definition": {
            "description": "AMQP API for bookkeepers.refund_req_definition",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Amount": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "refund_req"
                    ],
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Amount",
                "Bookkeeper-Type",
                "Transaction-DB",
                "Transaction-ID",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.refund_resp": {
            "description": "AMQP API for bookkeepers.refund_resp",
            "properties": {
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "refund_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Status",
                "Transaction-DB",
                "Transaction-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.refund_resp_definition": {
            "description": "AMQP API for bookkeepers.refund_resp_definition",
            "properties": {
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "refund_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Status",
                "Transaction-DB",
                "Transaction-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.sale_req": {
            "description": "AMQP API for bookkeepers.sale_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Amount": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "sale_req"
                    ],
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Amount",
                "Bookkeeper-Type",
                "Transaction-DB",
                "Transaction-ID",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.sale_req_definition": {
            "description": "AMQP API for bookkeepers.sale_req_definition",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Amount": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "sale_req"
                    ],
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Amount",
                "Bookkeeper-Type",
                "Transaction-DB",
                "Transaction-ID",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.sale_resp": {
            "description": "AMQP API for bookkeepers.sale_resp",
            "properties": {
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "sale_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Status",
                "Transaction-DB",
                "Transaction-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.sale_resp_definition": {
            "description": "AMQP API for bookkeepers.sale_resp_definition",
            "properties": {
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "sale_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Transaction-DB": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Status",
                "Transaction-DB",
                "Transaction-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.standing_req": {
            "description": "AMQP API for bookkeepers.standing_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Bookkeeper-ID": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Estimated-Withdrawal": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "standing_req"
                    ],
                    "type": "string"
                },
                "Items": {
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Bookkeeper-ID",
                "Bookkeeper-Type",
                "Estimated-Withdrawal",
                "Items",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.standing_req_definition": {
            "description": "AMQP API for bookkeepers.standing_req_definition",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Bookkeeper-ID": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Estimated-Withdrawal": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "standing_req"
                    ],
                    "type": "string"
                },
                "Items": {
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Bookkeeper-ID",
                "Bookkeeper-Type",
                "Estimated-Withdrawal",
                "Items",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.standing_resp": {
            "description": "AMQP API for bookkeepers.standing_resp",
            "properties": {
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "standing_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                }
            },
            "required": [
                "Status"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.standing_resp_definition": {
            "description": "AMQP API for bookkeepers.standing_resp_definition",
            "properties": {
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "standing_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                }
            },
            "required": [
                "Status"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.update_req": {
            "description": "AMQP API for bookkeepers.update_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Audit-Log": {
                    "type": "string"
                },
                "Bookkeeper-ID": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Dry-Run": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "update_req"
                    ],
                    "type": "string"
                },
                "Invoice": {
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Bookkeeper-ID",
                "Bookkeeper-Type",
                "Invoice",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.update_req_definition": {
            "description": "AMQP API for bookkeepers.update_req_definition",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Audit-ID": {
                    "type": "string"
                },
                "Audit-Log": {
                    "type": "string"
                },
                "Bookkeeper-ID": {
                    "type": "string"
                },
                "Bookkeeper-Type": {
                    "type": "string"
                },
                "Dry-Run": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "update_req"
                    ],
                    "type": "string"
                },
                "Invoice": {
                    "type": "string"
                },
                "Vendor-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Bookkeeper-ID",
                "Bookkeeper-Type",
                "Invoice",
                "Vendor-ID"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.update_resp": {
            "description": "AMQP API for bookkeepers.update_resp",
            "properties": {
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "update_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                }
            },
            "required": [
                "Status"
            ],
            "type": "object"
        },
        "kapi.bookkeepers.update_resp_definition": {
            "description": "AMQP API for bookkeepers.update_resp_definition",
            "properties": {
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "bookkeepers"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "update_resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                }
            },
            "required": [
                "Status"
            ],
            "type": "object"
        },
        "kapi.call.channel_status_req": {
            "description": "AMQP API for call.channel_status_req",
            "properties": {
                "Active-Only": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "channel_status_req"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.call.channel_status_resp": {
            "description": "AMQP API for call.channel_status_resp",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Error-Msg": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "channel_status_resp"
                    ],
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "Other-Leg-Call-ID": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Status": {
                    "enum": [
                        "active",
                        "tmpdown",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-Nodename": {
                    "type": "string"
                },
                "Switch-URL": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "Status"
            ],
            "type": "object"
        },
        "kapi.call.event": {
            "description": "AMQP API for call.event",
            "properties": {
                "Application-Data": {
                    "type": "string"
                },
                "Application-Event": {
                    "type": "string"
                },
                "Application-Name": {
                    "type": "string"
                },
                "Application-Response": {
                    "type": "string"
                },
                "Billing-Seconds": {
                    "type": "string"
                },
                "Bridge-B-Unique-ID": {
                    "type": "string"
                },
                "Bridge-Hangup-Cause": {
                    "type": "string"
                },
                "Call-Debug": {
                    "type": "string"
                },
                "Call-Direction": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-Destination-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Channel-Answer-State": {
                    "type": "string"
                },
                "Channel-Call-State": {
                    "type": "string"
                },
                "Channel-Created-Time": {
                    "type": "integer"
                },
                "Channel-Debug": {
                    "type": "string"
                },
                "Channel-Is-Loopback": {
                    "type": "string"
                },
                "Channel-Loopback-Bowout": {
                    "type": "string"
                },
                "Channel-Loopback-Bowout-Execute": {
                    "type": "string"
                },
                "Channel-Loopback-Leg": {
                    "type": "string"
                },
                "Channel-Loopback-Other-Leg-ID": {
                    "type": "string"
                },
                "Channel-Moving": {
                    "type": "string"
                },
                "Channel-Name": {
                    "type": "string"
                },
                "Channel-State": {
                    "type": "string"
                },
                "Conference-Config": {
                    "type": "string"
                },
                "Conference-Name": {
                    "type": "string"
                },
                "Connecting-Leg-A-UUID": {
                    "type": "string"
                },
                "Connecting-Leg-B-UUID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "DTMF-Digit": {
                    "type": "string"
                },
                "DTMF-Duration": {
                    "type": "string"
                },
                "Detected-Tone": {
                    "type": "string"
                },
                "Digits-Dialed": {
                    "type": "string"
                },
                "Disposition": {
                    "type": "string"
                },
                "Duration-Seconds": {
                    "type": "string"
                },
                "Endpoint-Disposition": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Fax-Info": {
                    "type": "object"
                },
                "From": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "From-Uri": {
                    "type": "string"
                },
                "Hangup-Cause": {
                    "type": "string"
                },
                "Hangup-Code": {
                    "type": "string"
                },
                "Interaction-ID": {
                    "type": "string"
                },
                "Intercepted-By": {
                    "type": "string"
                },
                "Length": {
                    "type": "string"
                },
                "Local-SDP": {
                    "type": "string"
                },
                "Media-Recordings": {
                    "type": "string"
                },
                "Media-Server": {
                    "type": "string"
                },
                "Origination-Call-ID": {
                    "type": "string"
                },
                "Other-Leg-Call-ID": {
                    "type": "string"
                },
                "Other-Leg-Caller-ID-Name": {
                    "type": "string"
                },
                "Other-Leg-Caller-ID-Number": {
                    "type": "string"
                },
                "Other-Leg-Destination-Number": {
                    "type": "string"
                },
                "Other-Leg-Direction": {
                    "type": "string"
                },
                "Parking-Slot": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Raw-Application-Data": {
                    "type": "string"
                },
                "Raw-Application-Name": {
                    "type": "string"
                },
                "Recording": {
                    "type": "string"
                },
                "Remote-SDP": {
                    "type": "string"
                },
                "Replaced-By": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Resigning-Peer-UUID": {
                    "type": "string"
                },
                "Resigning-UUID": {
                    "type": "string"
                },
                "Ringing-Seconds": {
                    "type": "string"
                },
                "Root-Call-Interaction-ID": {
                    "type": "string"
                },
                "Silence-Terminated": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-Nodename": {
                    "type": "string"
                },
                "Switch-URI": {
                    "type": "string"
                },
                "Switch-URL": {
                    "type": "string"
                },
                "Target-Call-ID": {
                    "type": "string"
                },
                "Terminator": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "To-Uri": {
                    "type": "string"
                },
                "Transfer-Disposition": {
                    "type": "string"
                },
                "Transfer-History": {
                    "type": "string"
                },
                "Transfer-Source": {
                    "type": "string"
                },
                "Transfer-To": {
                    "type": "string"
                },
                "Transfer-Type": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.call.query_account_channels_req": {
            "description": "AMQP API for call.query_account_channels_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Active-Only": {
                    "type": "boolean"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_account_channels_req"
                    ],
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                },
                "Usernames": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.call.query_account_channels_resp": {
            "description": "AMQP API for call.query_account_channels_resp",
            "properties": {
                "Channels": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_account_channels_resp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.call.query_auth_id_req": {
            "description": "AMQP API for call.query_auth_id_req",
            "properties": {
                "Auth-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_auth_id_req"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Auth-ID"
            ],
            "type": "object"
        },
        "kapi.call.query_auth_id_resp": {
            "description": "AMQP API for call.query_auth_id_resp",
            "properties": {
                "Channels": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_auth_id_resp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.call.query_channels_req": {
            "description": "AMQP API for call.query_channels_req",
            "properties": {
                "Active-Only": {
                    "type": "boolean"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_channels_req"
                    ],
                    "type": "string"
                },
                "Fields": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.call.query_channels_resp": {
            "description": "AMQP API for call.query_channels_resp",
            "properties": {
                "Channels": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_channels_resp"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Channels"
            ],
            "type": "object"
        },
        "kapi.call.query_user_channels_req": {
            "description": "AMQP API for call.query_user_channels_req",
            "properties": {
                "Active-Only": {
                    "type": "boolean"
                },
                "Authorizing-IDs": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_user_channels_req"
                    ],
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                },
                "Usernames": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "kapi.call.query_user_channels_resp": {
            "description": "AMQP API for call.query_user_channels_resp",
            "properties": {
                "Channels": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_user_channels_resp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.call.usurp_control": {
            "description": "AMQP API for call.usurp_control",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "usurp_control"
                    ],
                    "type": "string"
                },
                "Fetch-ID": {
                    "type": "string"
                },
                "Media-Node": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "Fetch-ID"
            ],
            "type": "object"
        },
        "kapi.call.usurp_publisher": {
            "description": "AMQP API for call.usurp_publisher",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "usurp_publisher"
                    ],
                    "type": "string"
                },
                "Media-Node": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Reference": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "Reference"
            ],
            "type": "object"
        },
        "kapi.callflow.resume": {
            "description": "AMQP API for callflow.resume",
            "properties": {
                "Call": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "callflow"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "resume"
                    ],
                    "type": "string"
                },
                "Flow": {
                    "type": "string"
                }
            },
            "required": [
                "Call",
                "Flow"
            ],
            "type": "object"
        },
        "kapi.camping.req": {
            "description": "AMQP API for camping.req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Camping-Request": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "camping"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "request"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Camping-Request"
            ],
            "type": "object"
        },
        "kapi.conf.doc_type_update": {
            "description": "AMQP API for conf.doc_type_update",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Action": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "configuration"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "doc_type_update"
                    ],
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                }
            },
            "required": [
                "Type"
            ],
            "type": "object"
        },
        "kapi.conf.doc_update": {
            "description": "AMQP API for conf.doc_update",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Database": {
                    "type": "string"
                },
                "Date-Created": {
                    "type": "string"
                },
                "Date-Modified": {
                    "type": "string"
                },
                "Doc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "configuration"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "doc_edited",
                        "doc_created",
                        "doc_deleted",
                        "db_edited",
                        "db_created",
                        "db_deleted"
                    ],
                    "type": "string"
                },
                "ID": {
                    "type": "string"
                },
                "Is-Soft-Deleted": {
                    "type": "boolean"
                },
                "Origin-Cache": {
                    "type": "string"
                },
                "Rev": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": [
                "Database",
                "ID"
            ],
            "type": "object"
        },
        "kapi.conf_participant.dialplan_req": {
            "description": "AMQP API for conf_participant.dialplan_req",
            "properties": {
                "Conference-ID": {
                    "type": "string"
                },
                "Dialplan-Command": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "dialplan_req"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Dialplan-Command"
            ],
            "type": "object"
        },
        "kapi.conference.add_participant": {
            "description": "AMQP API for conference.add_participant",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Answered": {
                    "type": "string"
                },
                "Authorizing-ID": {
                    "type": "string"
                },
                "Authorizing-Type": {
                    "type": "string"
                },
                "Bridge-ID": {
                    "type": "string"
                },
                "Call-Direction": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Channel-Authorized": {
                    "type": "string"
                },
                "Channel-Call-State": {
                    "type": "string"
                },
                "Channel-Created-Time": {
                    "type": "integer"
                },
                "Channel-Is-Loopback": {
                    "type": "string"
                },
                "Channel-Loopback-Bowout": {
                    "type": "string"
                },
                "Channel-Loopback-Bowout-Execute": {
                    "type": "string"
                },
                "Channel-Loopback-Leg": {
                    "type": "string"
                },
                "Channel-Loopback-Other-Leg-ID": {
                    "type": "string"
                },
                "Channel-Moving": {
                    "type": "string"
                },
                "Channel-Name": {
                    "type": "string"
                },
                "Channel-State": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Destination": {
                    "type": "string"
                },
                "Disposition": {
                    "type": "string"
                },
                "Ecallmgr-Node": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "add_participant"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "Hangup-Cause": {
                    "type": "string"
                },
                "Hangup-Code": {
                    "type": "string"
                },
                "Is-Loopback": {
                    "type": "string"
                },
                "Is-On-Hold": {
                    "type": "string"
                },
                "Media-Node": {
                    "type": "string"
                },
                "Media-Server": {
                    "type": "string"
                },
                "Msg-ID": {
                    "type": "string"
                },
                "Node": {
                    "type": "string"
                },
                "Origination-Call-ID": {
                    "type": "string"
                },
                "Other-Leg-Call-ID": {
                    "type": "string"
                },
                "Other-Leg-Caller-ID-Name": {
                    "type": "string"
                },
                "Other-Leg-Caller-ID-Number": {
                    "type": "string"
                },
                "Other-Leg-Destination-Number": {
                    "type": "string"
                },
                "Other-Leg-Direction": {
                    "type": "string"
                },
                "Participant-Flags": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Profile-Name": {
                    "type": "string"
                },
                "Raw-Application-Data": {
                    "type": "string"
                },
                "Raw-Application-Name": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Replaced-By": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-Nodename": {
                    "type": "string"
                },
                "Switch-URI": {
                    "type": "string"
                },
                "Switch-URL": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "Transfer-History": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "Conference-ID",
                "Control-Queue"
            ],
            "type": "object"
        },
        "kapi.conference.conference_error": {
            "description": "AMQP API for conference.conference_error",
            "properties": {
                "Conference-ID": {
                    "type": "string"
                },
                "Error-Message": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "error"
                    ],
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                }
            },
            "required": [
                "Conference-ID",
                "Error-Message",
                "Request"
            ],
            "type": "object"
        },
        "kapi.conference.config_req": {
            "description": "AMQP API for conference.config_req",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Controls": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "config_req"
                    ],
                    "type": "string"
                },
                "Profile": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                }
            },
            "required": [
                "Profile",
                "Request"
            ],
            "type": "object"
        },
        "kapi.conference.config_resp": {
            "description": "AMQP API for conference.config_resp",
            "properties": {
                "Advertise": {
                    "type": "string"
                },
                "Caller-Controls": {
                    "type": "string"
                },
                "Chat-Permissions": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "config_resp"
                    ],
                    "type": "string"
                },
                "Profiles": {
                    "type": "string"
                }
            },
            "required": [
                "Profiles"
            ],
            "type": "object"
        },
        "kapi.conference.deaf_participant": {
            "description": "AMQP API for conference.deaf_participant",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "deaf_participant"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Participant-ID"
            ],
            "type": "object"
        },
        "kapi.conference.dial": {
            "description": "AMQP API for conference.dial",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "dial"
                    ],
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Endpoints": {
                    "items": {
                        "$ref": "#/definitions/kapi.dialplan.bridge_endpoint",
                        "type": "object"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Outbound-Call-ID": {
                    "type": "string"
                },
                "Participant-Flags": {
                    "type": "string"
                },
                "Profile-Name": {
                    "type": "string"
                },
                "Target-Call-ID": {
                    "type": "string"
                },
                "Timeout": {
                    "type": "integer"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Endpoints"
            ],
            "type": "object"
        },
        "kapi.conference.dial_resp": {
            "description": "AMQP API for conference.dial_resp",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "dial_resp"
                    ],
                    "type": "string"
                },
                "Endpoint-Responses": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Endpoint-Responses"
            ],
            "type": "object"
        },
        "kapi.conference.discovery_req": {
            "description": "AMQP API for conference.discovery_req",
            "properties": {
                "Call": {
                    "type": "object"
                },
                "Conference-Doc": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Conference-Name": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "discovery_req"
                    ],
                    "type": "string"
                },
                "Moderator": {
                    "type": "boolean"
                },
                "Play-Entry-Tone": {
                    "type": "string"
                },
                "Play-Exit-Tone": {
                    "type": "string"
                },
                "Play-Welcome": {
                    "type": "boolean"
                },
                "Play-Welcome-Media": {
                    "type": "string"
                }
            },
            "required": [
                "Call"
            ],
            "type": "object"
        },
        "kapi.conference.discovery_resp": {
            "description": "AMQP API for conference.discovery_resp",
            "properties": {
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "discovery_resp"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Participant-ID"
            ],
            "type": "object"
        },
        "kapi.conference.event": {
            "description": "AMQP API for conference.event",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Channel-Presence-ID": {
                    "type": "string"
                },
                "Conference-Channel-Vars": {
                    "type": "object"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Event": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "event"
                    ],
                    "type": "string"
                },
                "Instance-ID": {
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Conference-ID",
                "Event",
                "Instance-ID"
            ],
            "type": "object"
        },
        "kapi.conference.kick": {
            "description": "AMQP API for conference.kick",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "kick"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID"
            ],
            "type": "object"
        },
        "kapi.conference.lock": {
            "description": "AMQP API for conference.lock",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "lock"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID"
            ],
            "type": "object"
        },
        "kapi.conference.mute_participant": {
            "description": "AMQP API for conference.mute_participant",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "mute_participant"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Participant-ID"
            ],
            "type": "object"
        },
        "kapi.conference.participant_energy": {
            "description": "AMQP API for conference.participant_energy",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "participant_energy"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Energy-Level": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Energy-Level",
                "Participant-ID"
            ],
            "type": "object"
        },
        "kapi.conference.participant_event": {
            "description": "AMQP API for conference.participant_event",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Channel-Presence-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Current-Energy": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Energy-Level": {
                    "type": "string"
                },
                "Event": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "participant_event"
                    ],
                    "type": "string"
                },
                "Floor": {
                    "type": "string"
                },
                "Focus": {
                    "type": "string"
                },
                "Hear": {
                    "type": "string"
                },
                "Instance-ID": {
                    "type": "string"
                },
                "Mute-Detect": {
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                },
                "Speak": {
                    "type": "string"
                },
                "Talking": {
                    "type": "string"
                },
                "Video": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "Caller-ID-Name",
                "Caller-ID-Number",
                "Channel-Presence-ID",
                "Conference-ID",
                "Current-Energy",
                "Custom-Channel-Vars",
                "Energy-Level",
                "Event",
                "Floor",
                "Focus",
                "Hear",
                "Instance-ID",
                "Mute-Detect",
                "Participant-ID",
                "Speak",
                "Talking",
                "Video"
            ],
            "type": "object"
        },
        "kapi.conference.participant_volume_in": {
            "description": "AMQP API for conference.participant_volume_in",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "participant_volume_in"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                },
                "Volume-In-Level": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Participant-ID",
                "Volume-In-Level"
            ],
            "type": "object"
        },
        "kapi.conference.participant_volume_out": {
            "description": "AMQP API for conference.participant_volume_out",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "participant_volume_out"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                },
                "Volume-Out-Level": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Participant-ID",
                "Volume-Out-Level"
            ],
            "type": "object"
        },
        "kapi.conference.participants_req": {
            "description": "AMQP API for conference.participants_req",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "participants"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID"
            ],
            "type": "object"
        },
        "kapi.conference.participants_resp": {
            "description": "AMQP API for conference.participants_resp",
            "properties": {
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "participants_resp"
                    ],
                    "type": "string"
                },
                "Participants": {
                    "type": "string"
                }
            },
            "required": [
                "Participants"
            ],
            "type": "object"
        },
        "kapi.conference.play": {
            "description": "AMQP API for conference.play",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "play"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Media-Name"
            ],
            "type": "object"
        },
        "kapi.conference.play_macro_req": {
            "description": "AMQP API for conference.play_macro_req",
            "properties": {
                "Application-Name": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Media-Macro": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Media-Macro"
            ],
            "type": "object"
        },
        "kapi.conference.record": {
            "description": "AMQP API for conference.record",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "record"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Media-Name"
            ],
            "type": "object"
        },
        "kapi.conference.recordstop": {
            "description": "AMQP API for conference.recordstop",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "recordstop"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Media-Name"
            ],
            "type": "object"
        },
        "kapi.conference.relate_participants": {
            "description": "AMQP API for conference.relate_participants",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "relate_participants"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Other-Participant": {
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "Participant-ID": {
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "Relationship": {
                    "enum": [
                        "deaf",
                        "mute",
                        "clear"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Other-Participant",
                "Participant-ID"
            ],
            "type": "object"
        },
        "kapi.conference.say": {
            "description": "AMQP API for conference.say",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "say",
                        "tts"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Endless-Playback": {
                    "type": "boolean"
                },
                "Engine": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Group-ID": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Language": {
                    "type": "string"
                },
                "Leg": {
                    "type": "string"
                },
                "Loop-Count": {
                    "minimum": 1,
                    "type": "integer"
                },
                "Terminators": {
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "*",
                            "0",
                            "#"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Text": {
                    "type": "string"
                },
                "Voice": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Text"
            ],
            "type": "object"
        },
        "kapi.conference.search_req": {
            "description": "AMQP API for conference.search_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "search_req"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Conference-ID"
            ],
            "type": "object"
        },
        "kapi.conference.search_resp": {
            "description": "AMQP API for conference.search_resp",
            "properties": {
                "Answered": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Conferences": {
                    "type": "string"
                },
                "Dynamic": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "search_resp"
                    ],
                    "type": "string"
                },
                "Locked": {
                    "type": "string"
                },
                "Participant-Count": {
                    "type": "string"
                },
                "Participants": {
                    "type": "string"
                },
                "Run-Time": {
                    "type": "integer"
                },
                "Running": {
                    "type": "string"
                },
                "Start-Time": {
                    "type": "integer"
                },
                "Switch-External-IP": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-URL": {
                    "type": "string"
                },
                "UUID": {
                    "type": "string"
                }
            },
            "required": [
                "Conferences"
            ],
            "type": "object"
        },
        "kapi.conference.set": {
            "description": "AMQP API for conference.set",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "set"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Parameter": {
                    "enum": [
                        "Max-Members",
                        "Caller-ID-Name",
                        "Caller-ID-Number"
                    ],
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Parameter",
                "Value"
            ],
            "type": "object"
        },
        "kapi.conference.stop_play": {
            "description": "AMQP API for conference.stop_play",
            "properties": {
                "Affects": {
                    "enum": [
                        "current",
                        "all"
                    ],
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "stop_play"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID"
            ],
            "type": "object"
        },
        "kapi.conference.tones": {
            "description": "AMQP API for conference.tones",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "tones"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Group-ID": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Terminators": {
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "*",
                            "0",
                            "#"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Tones": {
                    "items": {
                        "$ref": "#/definitions/kapi.dialplan.tones_req_tone_headers",
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Tones"
            ],
            "type": "object"
        },
        "kapi.conference.undeaf_participant": {
            "description": "AMQP API for conference.undeaf_participant",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "undeaf_participant"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Participant-ID"
            ],
            "type": "object"
        },
        "kapi.conference.unlock": {
            "description": "AMQP API for conference.unlock",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "unlock"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID"
            ],
            "type": "object"
        },
        "kapi.conference.unmute_participant": {
            "description": "AMQP API for conference.unmute_participant",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "unmute_participant"
                    ],
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Participant-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Conference-ID",
                "Participant-ID"
            ],
            "type": "object"
        },
        "kapi.delegate.delegate": {
            "description": "AMQP API for delegate.delegate",
            "properties": {
                "Delegate-Message": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "delegate"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "job"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Delegate-Message"
            ],
            "type": "object"
        },
        "kapi.dialplan.answer": {
            "description": "AMQP API for dialplan.answer",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "answer"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.audio_level": {
            "description": "AMQP API for dialplan.audio_level",
            "properties": {
                "Action": {
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "audio_level"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Level": {
                    "type": "string"
                },
                "Mode": {
                    "type": "string"
                }
            },
            "required": [
                "Action",
                "Application-Name",
                "Call-ID",
                "Insert-At",
                "Level",
                "Mode"
            ],
            "type": "object"
        },
        "kapi.dialplan.break": {
            "description": "AMQP API for dialplan.break",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "break"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.bridge": {
            "description": "AMQP API for dialplan.bridge",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "bridge"
                    ],
                    "type": "string"
                },
                "Asserted-Identity-Name": {
                    "type": "string"
                },
                "Asserted-Identity-Number": {
                    "type": "string"
                },
                "Asserted-Identity-Realm": {
                    "type": "string"
                },
                "B-Leg-Events": {
                    "items": {
                        "enum": [
                            "CALL_SECURE",
                            "CALL_UPDATE",
                            "CHANNEL_ANSWER",
                            "CHANNEL_CREATE",
                            "CHANNEL_DESTROY",
                            "CHANNEL_EXECUTE",
                            "CHANNEL_EXECUTE_COMPLETE",
                            "CHANNEL_EXECUTE_ERROR",
                            "CHANNEL_FAX_STATUS",
                            "CHANNEL_INTERCEPTED",
                            "CHANNEL_PROGRESS_MEDIA",
                            "CHANNEL_REPLACED",
                            "CHANNEL_TRANSFEREE",
                            "CHANNEL_TRANSFEROR",
                            "CHANNEL_BRIDGE",
                            "CHANNEL_UNBRIDGE",
                            "CHANNEL_HOLD",
                            "CHANNEL_UNHOLD",
                            "DETECTED_TONE",
                            "DTMF",
                            "LEG_CREATED",
                            "LEG_DESTROYED",
                            "RECORD_START",
                            "RECORD_STOP",
                            "dialplan"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Bridge-Actions": {
                    "type": "object"
                },
                "Call-Context": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Confirm-Cancel-Timeout": {
                    "type": "integer"
                },
                "Confirm-File": {
                    "type": "string"
                },
                "Confirm-Key": {
                    "type": "string"
                },
                "Continue-After": {
                    "type": "boolean"
                },
                "Continue-On-Fail": {
                    "type": "boolean"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Dial-Endpoint-Method": {
                    "enum": [
                        "single",
                        "simultaneous"
                    ],
                    "type": "string"
                },
                "Enable-T38-Fax": {
                    "type": "string"
                },
                "Enable-T38-Fax-Request": {
                    "type": "string"
                },
                "Enable-T38-Gateway": {
                    "enum": [
                        "self",
                        "peer"
                    ],
                    "type": "string"
                },
                "Enable-T38-Passthrough": {
                    "type": "string"
                },
                "Endpoints": {
                    "items": {
                        "$ref": "#/definitions/kapi.dialplan.bridge_endpoint",
                        "type": "object"
                    },
                    "type": "array"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Export-Bridge-Variables": {
                    "type": "string"
                },
                "Export-Variables": {
                    "type": "string"
                },
                "Fail-On-Single-Reject": {
                    "type": "string"
                },
                "Force-Fax": {
                    "type": "string"
                },
                "Hold-Media": {
                    "type": "string"
                },
                "Ignore-Completed-Elsewhere": {
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "string"
                },
                "Ignore-Forward": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Loopback-Bowout": {
                    "type": "string"
                },
                "Media": {
                    "enum": [
                        "process",
                        "bypass",
                        "auto"
                    ],
                    "type": "string"
                },
                "Outbound-Callee-ID-Name": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Number": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Name": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Number": {
                    "type": "string"
                },
                "Privacy-Hide-Name": {
                    "type": "string"
                },
                "Privacy-Hide-Number": {
                    "type": "string"
                },
                "Privacy-Method": {
                    "type": "string"
                },
                "Ringback": {
                    "type": "string"
                },
                "SIP-Invite-Parameters": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "SIP-Transport": {
                    "enum": [
                        "udp",
                        "tcp",
                        "tls"
                    ],
                    "type": "string"
                },
                "Secure-RTP": {
                    "type": "boolean"
                },
                "Simplify-Loopback": {
                    "type": "string"
                },
                "Timeout": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Endpoints"
            ],
            "type": "object"
        },
        "kapi.dialplan.bridge_endpoint": {
            "description": "AMQP API for dialplan.bridge_endpoint",
            "properties": {
                "Bypass-Media": {
                    "type": "boolean"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Enable-T38-Gateway": {
                    "enum": [
                        "self",
                        "peer"
                    ],
                    "type": "string"
                },
                "Endpoint-Options": {
                    "type": "object"
                },
                "Endpoint-Type": {
                    "enum": [
                        "sip",
                        "freetdm",
                        "skype"
                    ],
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "boolean"
                },
                "Invite-Format": {
                    "enum": [
                        "username",
                        "e164",
                        "npan",
                        "1npan",
                        "route",
                        "loopback",
                        "contact"
                    ],
                    "type": "string"
                },
                "SIP-Invite-Parameters": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "SIP-Transport": {
                    "enum": [
                        "udp",
                        "tcp",
                        "tls",
                        "sctp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.dialplan.bridge_endpoint_headers": {
            "description": "AMQP API for dialplan.bridge_endpoint_headers",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Auth-Password": {
                    "type": "string"
                },
                "Auth-Realm": {
                    "type": "string"
                },
                "Auth-User": {
                    "type": "string"
                },
                "Bypass-Media": {
                    "type": "string"
                },
                "Call-Context": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Codecs": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Enable-T38-Fax": {
                    "type": "string"
                },
                "Enable-T38-Fax-Request": {
                    "type": "string"
                },
                "Enable-T38-Gateway": {
                    "type": "string"
                },
                "Enable-T38-Passthrough": {
                    "type": "string"
                },
                "Endpoint-Actions": {
                    "type": "string"
                },
                "Endpoint-Delay": {
                    "type": "string"
                },
                "Endpoint-ID": {
                    "type": "string"
                },
                "Endpoint-Options": {
                    "type": "string"
                },
                "Endpoint-Progress-Timeout": {
                    "type": "integer"
                },
                "Endpoint-Timeout": {
                    "type": "integer"
                },
                "Endpoint-Type": {
                    "type": "string"
                },
                "Endpoint-URI": {
                    "type": "string"
                },
                "Failover": {
                    "type": "string"
                },
                "Force-Fax": {
                    "type": "string"
                },
                "Forward-IP": {
                    "type": "string"
                },
                "Hold-Media": {
                    "type": "string"
                },
                "Ignore-Completed-Elsewhere": {
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "string"
                },
                "Invite-Format": {
                    "type": "string"
                },
                "Loopback-Bowout": {
                    "type": "string"
                },
                "Outbound-Call-ID": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Name": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Number": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Name": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Number": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Privacy-Hide-Name": {
                    "type": "string"
                },
                "Privacy-Hide-Number": {
                    "type": "string"
                },
                "Privacy-Method": {
                    "type": "string"
                },
                "Proxy-IP": {
                    "type": "string"
                },
                "Proxy-Zone": {
                    "type": "string"
                },
                "Route": {
                    "type": "string"
                },
                "SIP-Interface": {
                    "type": "string"
                },
                "SIP-Invite-Parameters": {
                    "type": "string"
                },
                "SIP-Transport": {
                    "type": "string"
                },
                "Simplify-Loopback": {
                    "type": "string"
                },
                "To-DID": {
                    "type": "string"
                },
                "To-IP": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-URI": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "To-Username": {
                    "type": "string"
                }
            },
            "required": [
                "Invite-Format"
            ],
            "type": "object"
        },
        "kapi.dialplan.call_pickup": {
            "description": "AMQP API for dialplan.call_pickup",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "call_pickup"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Continue-On-Cancel": {
                    "type": "string"
                },
                "Continue-On-Fail": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Hangup-After-Pickup": {
                    "type": "boolean"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Move-Channel-If-Necessary": {
                    "type": "boolean"
                },
                "Other-Leg": {
                    "type": "string"
                },
                "Park-After-Pickup": {
                    "type": "boolean"
                },
                "Target-Call-ID": {
                    "type": "string"
                },
                "Unanswered-Only": {
                    "type": "string"
                },
                "Unbridged-Only": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Target-Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.conference": {
            "description": "AMQP API for dialplan.conference",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "conference"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Deaf": {
                    "type": "boolean"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Member-Nospeak": {
                    "type": "string"
                },
                "Moderator": {
                    "type": "boolean"
                },
                "Mute": {
                    "type": "boolean"
                },
                "Nospeak-Check": {
                    "type": "string"
                },
                "Profile": {
                    "type": "string"
                },
                "Reinvite": {
                    "type": "boolean"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Conference-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.connect_leg": {
            "description": "AMQP API for dialplan.connect_leg",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "connect_leg"
                    ],
                    "type": "string"
                },
                "B-Leg-Events": {
                    "items": {
                        "enum": [
                            "CALL_SECURE",
                            "CALL_UPDATE",
                            "CHANNEL_ANSWER",
                            "CHANNEL_CREATE",
                            "CHANNEL_DESTROY",
                            "CHANNEL_EXECUTE",
                            "CHANNEL_EXECUTE_COMPLETE",
                            "CHANNEL_EXECUTE_ERROR",
                            "CHANNEL_FAX_STATUS",
                            "CHANNEL_INTERCEPTED",
                            "CHANNEL_PROGRESS_MEDIA",
                            "CHANNEL_REPLACED",
                            "CHANNEL_TRANSFEREE",
                            "CHANNEL_TRANSFEROR",
                            "CHANNEL_BRIDGE",
                            "CHANNEL_UNBRIDGE",
                            "CHANNEL_HOLD",
                            "CHANNEL_UNHOLD",
                            "DETECTED_TONE",
                            "DTMF",
                            "LEG_CREATED",
                            "LEG_DESTROYED",
                            "RECORD_START",
                            "RECORD_STOP",
                            "dialplan"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Continue-On-Cancel": {
                    "type": "string"
                },
                "Continue-On-Fail": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Hangup-After-Pickup": {
                    "type": "boolean"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Move-Channel-If-Necessary": {
                    "type": "boolean"
                },
                "Other-Leg": {
                    "type": "string"
                },
                "Park-After-Pickup": {
                    "type": "boolean"
                },
                "Publish-Usurp": {
                    "type": "boolean"
                },
                "Target-Call-ID": {
                    "type": "string"
                },
                "Unanswered-Only": {
                    "type": "string"
                },
                "Unbridged-Only": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Target-Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.eavesdrop": {
            "description": "AMQP API for dialplan.eavesdrop",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "eavesdrop"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Continue-On-Cancel": {
                    "type": "string"
                },
                "Continue-On-Fail": {
                    "type": "string"
                },
                "Enable-DTMF": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Move-Channel-If-Necessary": {
                    "type": "boolean"
                },
                "Other-Leg": {
                    "type": "string"
                },
                "Target-Call-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Target-Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.echo": {
            "description": "AMQP API for dialplan.echo",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "echo"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.error": {
            "description": "AMQP API for dialplan.error",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Channel-Call-State": {
                    "type": "string"
                },
                "Channel-State": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Dialplan-Error": {
                    "type": "string"
                },
                "Error-Message": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "error"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "dialplan"
                    ],
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                }
            },
            "required": [
                "Error-Message"
            ],
            "type": "object"
        },
        "kapi.dialplan.event_actions": {
            "description": "AMQP API for dialplan.event_actions",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "event_actions"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Actions": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Event-Actions"
            ],
            "type": "object"
        },
        "kapi.dialplan.execute_extension": {
            "description": "AMQP API for dialplan.execute_extension",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "execute_extension"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Extension": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Reset": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Extension"
            ],
            "type": "object"
        },
        "kapi.dialplan.fax_detection": {
            "description": "AMQP API for dialplan.fax_detection",
            "properties": {
                "Action": {
                    "enum": [
                        "start",
                        "stop"
                    ],
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "fax_detection"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Direction": {
                    "enum": [
                        "inbound",
                        "outbound"
                    ],
                    "type": "string"
                },
                "Duration": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Action",
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.fetch": {
            "description": "AMQP API for dialplan.fetch",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "fetch"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "From-Other-Leg": {
                    "type": "boolean"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.hangup": {
            "description": "AMQP API for dialplan.hangup",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "hangup"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Hangup-Cause": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Other-Leg-Only": {
                    "type": "boolean"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.hold": {
            "description": "AMQP API for dialplan.hold",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "hold"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Hold-Media": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.hold_control": {
            "description": "AMQP API for dialplan.hold_control",
            "properties": {
                "Action": {
                    "enum": [
                        "hold",
                        "unhold",
                        "toggle"
                    ],
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "hold_control"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Action",
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.media_macro": {
            "description": "AMQP API for dialplan.media_macro",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "media_macro"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "now"
                    ],
                    "type": "string"
                },
                "Media-Macros": {
                    "type": "object"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Media-Macros"
            ],
            "type": "object"
        },
        "kapi.dialplan.noop": {
            "description": "AMQP API for dialplan.noop",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "noop"
                    ],
                    "type": "string"
                },
                "B-Leg-Events": {
                    "items": {
                        "enum": [
                            "CALL_SECURE",
                            "CALL_UPDATE",
                            "CHANNEL_ANSWER",
                            "CHANNEL_CREATE",
                            "CHANNEL_DESTROY",
                            "CHANNEL_EXECUTE",
                            "CHANNEL_EXECUTE_COMPLETE",
                            "CHANNEL_EXECUTE_ERROR",
                            "CHANNEL_FAX_STATUS",
                            "CHANNEL_INTERCEPTED",
                            "CHANNEL_PROGRESS_MEDIA",
                            "CHANNEL_REPLACED",
                            "CHANNEL_TRANSFEREE",
                            "CHANNEL_TRANSFEROR",
                            "CHANNEL_BRIDGE",
                            "CHANNEL_UNBRIDGE",
                            "CHANNEL_HOLD",
                            "CHANNEL_UNHOLD",
                            "DETECTED_TONE",
                            "DTMF",
                            "LEG_CREATED",
                            "LEG_DESTROYED",
                            "RECORD_START",
                            "RECORD_STOP",
                            "dialplan"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Filter-Applications": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.originate_execute": {
            "description": "AMQP API for dialplan.originate_execute",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "dialplan"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "originate_execute"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.originate_ready": {
            "description": "AMQP API for dialplan.originate_ready",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "dialplan"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "originate_ready"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "Control-Queue"
            ],
            "type": "object"
        },
        "kapi.dialplan.page": {
            "description": "AMQP API for dialplan.page",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "page"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Endpoints": {
                    "items": {
                        "$ref": "#/definitions/kapi.dialplan.bridge_endpoint",
                        "type": "string"
                    },
                    "type": "array"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Page-Options": {
                    "type": "string"
                },
                "Timeout": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Endpoints"
            ],
            "type": "object"
        },
        "kapi.dialplan.park": {
            "description": "AMQP API for dialplan.park",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "park"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Hangup-Cause": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Timeout": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.play": {
            "description": "AMQP API for dialplan.play",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "play"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Endless-Playback": {
                    "type": "boolean"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Format": {
                    "type": "string"
                },
                "Group-ID": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Language": {
                    "type": "string"
                },
                "Leg": {
                    "enum": [
                        "A",
                        "B",
                        "Both"
                    ],
                    "type": "string"
                },
                "Loop-Count": {
                    "minimum": 1,
                    "type": "integer"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Terminators": {
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "*",
                            "0",
                            "#"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Voice": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Media-Name"
            ],
            "type": "object"
        },
        "kapi.dialplan.play_and_collect_digits": {
            "description": "AMQP API for dialplan.play_and_collect_digits",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "play_and_collect_digits"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Digits-Regex": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Failed-Media-Name": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Maximum-Digits": {
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Media-Tries": {
                    "type": "string"
                },
                "Minimum-Digits": {
                    "type": "string"
                },
                "Terminators": {
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "*",
                            "0",
                            "#"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Timeout": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Digits-Regex",
                "Maximum-Digits",
                "Media-Name",
                "Media-Tries",
                "Minimum-Digits",
                "Terminators",
                "Timeout"
            ],
            "type": "object"
        },
        "kapi.dialplan.play_macro": {
            "description": "AMQP API for dialplan.play_macro",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "play_macro"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "now"
                    ],
                    "type": "string"
                },
                "Media-Macro": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Media-Macro"
            ],
            "type": "object"
        },
        "kapi.dialplan.playseek": {
            "description": "AMQP API for dialplan.playseek",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "playseek"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Direction": {
                    "type": "string"
                },
                "Duration": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Direction",
                "Duration"
            ],
            "type": "object"
        },
        "kapi.dialplan.playstop": {
            "description": "AMQP API for dialplan.playstop",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "playstop"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.privacy": {
            "description": "AMQP API for dialplan.privacy",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "privacy"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Privacy-Mode": {
                    "enum": [
                        "full",
                        "name",
                        "number",
                        "none"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.progress": {
            "description": "AMQP API for dialplan.progress",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "progress"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.queue": {
            "description": "AMQP API for dialplan.queue",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "queue"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Commands": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Commands"
            ],
            "type": "object"
        },
        "kapi.dialplan.receive_fax": {
            "description": "AMQP API for dialplan.receive_fax",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "receive_fax"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Enable-T38-Fax": {
                    "type": "string"
                },
                "Enable-T38-Fax-Request": {
                    "type": "string"
                },
                "Enable-T38-Gateway": {
                    "type": "string"
                },
                "Enable-T38-Passthrough": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Fax-Local-Filename": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.record": {
            "description": "AMQP API for dialplan.record",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "record"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Silence-Hits": {
                    "type": "string"
                },
                "Silence-Threshold": {
                    "type": "string"
                },
                "Terminators": {
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "*",
                            "0",
                            "#"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Time-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Media-Name"
            ],
            "type": "object"
        },
        "kapi.dialplan.record_call": {
            "description": "AMQP API for dialplan.record_call",
            "properties": {
                "Additional-Headers": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "Application-Name": {
                    "enum": [
                        "record_call"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Channels-As-Stereo": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Follow-Transfer": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Media-Recorder": {
                    "type": "string"
                },
                "Media-Recording-Endpoint-ID": {
                    "type": "string"
                },
                "Media-Recording-ID": {
                    "type": "string"
                },
                "Media-Recording-Origin": {
                    "type": "string"
                },
                "Media-Transfer-Destination": {
                    "type": "string"
                },
                "Media-Transfer-Method": {
                    "type": "string"
                },
                "Record-Action": {
                    "enum": [
                        "mask",
                        "unmask",
                        "start",
                        "stop"
                    ],
                    "type": "string"
                },
                "Record-Min-Sec": {
                    "type": "string"
                },
                "Record-Sample-Rate": {
                    "type": "integer"
                },
                "Recording-Variables": {
                    "type": "string"
                },
                "Time-Limit": {
                    "type": "integer"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Record-Action"
            ],
            "type": "object"
        },
        "kapi.dialplan.recv_dtmf": {
            "description": "AMQP API for dialplan.recv_dtmf",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "recv_dtmf"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "DTMFs": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "DTMFs"
            ],
            "type": "object"
        },
        "kapi.dialplan.redirect": {
            "description": "AMQP API for dialplan.redirect",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "redirect"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Redirect-Contact": {
                    "type": "string"
                },
                "Redirect-Node": {
                    "type": "string"
                },
                "Redirect-Server": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Redirect-Contact"
            ],
            "type": "object"
        },
        "kapi.dialplan.respond": {
            "description": "AMQP API for dialplan.respond",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "respond"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Response-Code": {
                    "type": "string"
                },
                "Response-Message": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Response-Code"
            ],
            "type": "object"
        },
        "kapi.dialplan.ring": {
            "description": "AMQP API for dialplan.ring",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "ring"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Ringback": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.dialplan.say": {
            "description": "AMQP API for dialplan.say",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "say"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Gender": {
                    "enum": [
                        "masculine",
                        "feminine",
                        "neuter"
                    ],
                    "type": "string"
                },
                "Group-ID": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Language": {
                    "type": "string"
                },
                "Method": {
                    "enum": [
                        "none",
                        "pronounced",
                        "iterated",
                        "counted"
                    ],
                    "type": "string"
                },
                "Say-Text": {
                    "type": "string"
                },
                "Type": {
                    "enum": [
                        "number",
                        "items",
                        "persons",
                        "messages",
                        "currency",
                        "time_measurement",
                        "current_date",
                        "current_time",
                        "current_date_time",
                        "telephone_number",
                        "telephone_extension",
                        "url",
                        "ip_address",
                        "e-mail_address",
                        "postal_address",
                        "account_number",
                        "name_spelled",
                        "name_phonetic",
                        "short_date_time"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Language",
                "Method",
                "Say-Text",
                "Type"
            ],
            "type": "object"
        },
        "kapi.dialplan.send_dtmf": {
            "description": "AMQP API for dialplan.send_dtmf",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "send_dtmf"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "DTMFs": {
                    "type": "string"
                },
                "Duration": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "DTMFs"
            ],
            "type": "object"
        },
        "kapi.dialplan.set": {
            "description": "AMQP API for dialplan.set",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "set"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Call-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Export-All": {
                    "type": "boolean"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Custom-Call-Vars",
                "Custom-Channel-Vars"
            ],
            "type": "object"
        },
        "kapi.dialplan.set_terminators": {
            "description": "AMQP API for dialplan.set_terminators",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "set_terminators"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Terminators": {
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "*",
                            "0",
                            "#"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Terminators"
            ],
            "type": "object"
        },
        "kapi.dialplan.sleep": {
            "description": "AMQP API for dialplan.sleep",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "sleep"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Time": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Time"
            ],
            "type": "object"
        },
        "kapi.dialplan.soft_hold": {
            "description": "AMQP API for dialplan.soft_hold",
            "properties": {
                "A-MOH": {
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "soft_hold"
                    ],
                    "type": "string"
                },
                "B-MOH": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Unhold-Key": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Unhold-Key"
            ],
            "type": "object"
        },
        "kapi.dialplan.sound_touch": {
            "description": "AMQP API for dialplan.sound_touch",
            "properties": {
                "Action": {
                    "enum": [
                        "start",
                        "stop"
                    ],
                    "type": "string"
                },
                "Adjust-In-Octaves": {
                    "type": "string"
                },
                "Adjust-In-Semitones": {
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "sound_touch"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Hook-DTMF": {
                    "type": "boolean"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Pitch": {
                    "type": "string"
                },
                "Rate": {
                    "type": "string"
                },
                "Sending-Leg": {
                    "type": "boolean"
                },
                "Tempo": {
                    "type": "string"
                }
            },
            "required": [
                "Action",
                "Application-Name",
                "Call-ID",
                "Insert-At"
            ],
            "type": "object"
        },
        "kapi.dialplan.store": {
            "description": "AMQP API for dialplan.store",
            "properties": {
                "Additional-Headers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Application-Name": {
                    "enum": [
                        "store"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Media-Transfer-Destination": {
                    "type": "string"
                },
                "Media-Transfer-Method": {
                    "enum": [
                        "stream",
                        "put",
                        "post"
                    ],
                    "type": "string"
                },
                "Suppress-Error-Report": {
                    "type": "boolean"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Media-Name",
                "Media-Transfer-Destination",
                "Media-Transfer-Method"
            ],
            "type": "object"
        },
        "kapi.dialplan.store_amqp_resp": {
            "description": "AMQP API for dialplan.store_amqp_resp",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "store"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Media-Content": {
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Media-Sequence-ID": {
                    "type": "string"
                },
                "Media-Transfer-Method": {
                    "enum": [
                        "stream"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Media-Content",
                "Media-Name",
                "Media-Transfer-Method"
            ],
            "type": "object"
        },
        "kapi.dialplan.store_fax": {
            "description": "AMQP API for dialplan.store_fax",
            "properties": {
                "Additional-Headers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Application-Name": {
                    "enum": [
                        "store_fax"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Fax-Local-Filename": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Media-Transfer-Destination": {
                    "type": "string"
                },
                "Media-Transfer-Method": {
                    "enum": [
                        "put"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Media-Transfer-Destination",
                "Media-Transfer-Method"
            ],
            "type": "object"
        },
        "kapi.dialplan.store_http_resp": {
            "description": "AMQP API for dialplan.store_http_resp",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "store"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "response"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Media-Transfer-Method": {
                    "enum": [
                        "put",
                        "post"
                    ],
                    "type": "string"
                },
                "Media-Transfer-Results": {
                    "type": "object"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Media-Name",
                "Media-Transfer-Method",
                "Media-Transfer-Results"
            ],
            "type": "object"
        },
        "kapi.dialplan.store_vm": {
            "description": "AMQP API for dialplan.store_vm",
            "properties": {
                "Additional-Headers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Application-Name": {
                    "enum": [
                        "store_vm"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Media-Transfer-Destination": {
                    "type": "string"
                },
                "Media-Transfer-Method": {
                    "enum": [
                        "stream",
                        "put",
                        "post"
                    ],
                    "type": "string"
                },
                "Suppress-Error-Report": {
                    "type": "boolean"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Media-Name",
                "Media-Transfer-Destination",
                "Media-Transfer-Method"
            ],
            "type": "object"
        },
        "kapi.dialplan.tone_detect": {
            "description": "AMQP API for dialplan.tone_detect",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "tone_detect"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Frequencies": {
                    "type": "string"
                },
                "Hits-Needed": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "On-Success": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Sniff-Direction": {
                    "enum": [
                        "read",
                        "write"
                    ],
                    "type": "string"
                },
                "Timeout": {
                    "minimum": 0,
                    "type": "integer"
                },
                "Tone-Detect-Name": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Frequencies",
                "Tone-Detect-Name"
            ],
            "type": "object"
        },
        "kapi.dialplan.tones": {
            "description": "AMQP API for dialplan.tones",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "tones"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Group-ID": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Terminators": {
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "*",
                            "0",
                            "#"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Tones": {
                    "items": {
                        "$ref": "#/definitions/kapi.dialplan.tones_req_tone_headers",
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Tones"
            ],
            "type": "object"
        },
        "kapi.dialplan.tones_req_tone": {
            "description": "AMQP API for dialplan.tones_req_tone",
            "type": "object"
        },
        "kapi.dialplan.tones_req_tone_headers": {
            "description": "AMQP API for dialplan.tones_req_tone_headers",
            "properties": {
                "Duration-OFF": {
                    "type": "string"
                },
                "Duration-ON": {
                    "type": "string"
                },
                "Frequencies": {
                    "type": "string"
                },
                "Repeat": {
                    "type": "string"
                },
                "Volume": {
                    "type": "string"
                }
            },
            "required": [
                "Duration-OFF",
                "Duration-ON",
                "Frequencies"
            ],
            "type": "object"
        },
        "kapi.dialplan.transfer": {
            "description": "AMQP API for dialplan.transfer",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "transfer"
                    ],
                    "type": "string"
                },
                "Attended-Transfer-Keys": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Transfer-Context": {
                    "type": "string"
                },
                "Transfer-Leg": {
                    "enum": [
                        "bleg",
                        "both"
                    ],
                    "type": "string"
                },
                "Transfer-To": {
                    "type": "string"
                },
                "Transfer-Type": {
                    "enum": [
                        "blind",
                        "attended"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Transfer-To",
                "Transfer-Type"
            ],
            "type": "object"
        },
        "kapi.dialplan.tts": {
            "description": "AMQP API for dialplan.tts",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "tts"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Conference-ID": {
                    "type": "string"
                },
                "Endless-Playback": {
                    "type": "boolean"
                },
                "Engine": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Group-ID": {
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Language": {
                    "type": "string"
                },
                "Leg": {
                    "type": "string"
                },
                "Loop-Count": {
                    "minimum": 1,
                    "type": "integer"
                },
                "Terminators": {
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "*",
                            "0",
                            "#"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Text": {
                    "type": "string"
                },
                "Voice": {
                    "enum": [
                        "male",
                        "female"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID",
                "Text"
            ],
            "type": "object"
        },
        "kapi.dialplan.unbridge": {
            "description": "AMQP API for dialplan.unbridge",
            "properties": {
                "Application-Name": {
                    "enum": [
                        "unbridge"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "enum": [
                        "head",
                        "tail",
                        "flush",
                        "now"
                    ],
                    "type": "string"
                },
                "Leg": {
                    "enum": [
                        "A",
                        "B",
                        "Both"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.discovery.flush": {
            "description": "AMQP API for discovery.flush",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "discovery"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "flush"
                    ],
                    "type": "string"
                },
                "Query-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Query-ID"
            ],
            "type": "object"
        },
        "kapi.discovery.number_req": {
            "description": "AMQP API for discovery.number_req",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "discovery"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "number"
                    ],
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                }
            },
            "required": [
                "Number"
            ],
            "type": "object"
        },
        "kapi.discovery.req": {
            "description": "AMQP API for discovery.req",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "discovery"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "request"
                    ],
                    "type": "string"
                },
                "Offset": {
                    "type": "integer"
                },
                "Prefix": {
                    "type": "string"
                },
                "Quantity": {
                    "type": "integer"
                },
                "Query-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Offset",
                "Prefix",
                "Quantity",
                "Query-ID"
            ],
            "type": "object"
        },
        "kapi.discovery.resp": {
            "description": "AMQP API for discovery.resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "discovery"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "response"
                    ],
                    "type": "string"
                },
                "Query-ID": {
                    "type": "string"
                },
                "Results": {
                    "type": "string"
                }
            },
            "required": [
                "Results"
            ],
            "type": "object"
        },
        "kapi.edr_amqp.event": {
            "description": "AMQP API for edr_amqp.event",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Account-Tree": {
                    "type": "string"
                },
                "Body": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "edr"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "event"
                    ],
                    "type": "string"
                },
                "Gregorian-Time": {
                    "type": "integer"
                },
                "ID": {
                    "type": "string"
                },
                "Node": {
                    "type": "string"
                },
                "Severity": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "Verbosity": {
                    "type": "string"
                }
            },
            "required": [
                "Body",
                "Gregorian-Time",
                "ID",
                "Node",
                "Severity",
                "Timestamp",
                "Verbosity"
            ],
            "type": "object"
        },
        "kapi.fax.query_status": {
            "description": "AMQP API for fax.query_status",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "fax"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_status"
                    ],
                    "type": "string"
                },
                "Job-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Job-ID"
            ],
            "type": "object"
        },
        "kapi.fax.req": {
            "description": "AMQP API for fax.req",
            "properties": {
                "Action": {
                    "enum": [
                        "receive",
                        "transmit"
                    ],
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "dialplan"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "fax_req"
                    ],
                    "type": "string"
                },
                "Fax-T38-Option": {
                    "type": "string"
                },
                "FaxBox-ID": {
                    "type": "string"
                },
                "Owner-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Action",
                "Call"
            ],
            "type": "object"
        },
        "kapi.fax.start_account": {
            "description": "AMQP API for fax.start_account",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "start"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "account"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.fax.start_job": {
            "description": "AMQP API for fax.start_job",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "start"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "job"
                    ],
                    "type": "string"
                },
                "Job-ID": {
                    "type": "string"
                },
                "To-Number": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Job-ID",
                "To-Number"
            ],
            "type": "object"
        },
        "kapi.fax.status": {
            "description": "AMQP API for fax.status",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cloud-Job-ID": {
                    "type": "string"
                },
                "Cloud-Printer-ID": {
                    "type": "string"
                },
                "Direction": {
                    "enum": [
                        "incoming",
                        "outgoing"
                    ],
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "fax"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "status"
                    ],
                    "type": "string"
                },
                "Fax-Info": {
                    "type": "string"
                },
                "Fax-State": {
                    "enum": [
                        "start",
                        "prepare",
                        "send",
                        "receive",
                        "end",
                        "error"
                    ],
                    "type": "string"
                },
                "FaxBox-ID": {
                    "type": "string"
                },
                "Job-ID": {
                    "type": "string"
                },
                "Page": {
                    "type": "string"
                },
                "Stage": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                }
            },
            "required": [
                "Job-ID"
            ],
            "type": "object"
        },
        "kapi.frontier.acls_req": {
            "description": "AMQP API for frontier.acls_req",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "acl"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query"
                    ],
                    "type": "string"
                },
                "With-Realm": {}
            },
            "type": "object"
        },
        "kapi.frontier.acls_resp": {
            "description": "AMQP API for frontier.acls_resp",
            "properties": {
                "Device": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "acl"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_resp"
                    ],
                    "type": "string"
                },
                "Realm": {
                    "type": "object"
                }
            },
            "type": "object"
        },
        "kapi.frontier.flush": {
            "description": "AMQP API for frontier.flush",
            "properties": {
                "Device": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "acl"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "acl_flush"
                    ],
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                }
            },
            "required": [
                "Realm"
            ],
            "type": "object"
        },
        "kapi.frontier.ratelimits_req": {
            "description": "AMQP API for frontier.ratelimits_req",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "rate_limit"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query"
                    ],
                    "type": "string"
                },
                "With-Realm": {}
            },
            "type": "object"
        },
        "kapi.frontier.ratelimits_resp": {
            "description": "AMQP API for frontier.ratelimits_resp",
            "properties": {
                "Device": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "rate_limit"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_resp"
                    ],
                    "type": "string"
                },
                "Realm": {
                    "type": "object"
                }
            },
            "type": "object"
        },
        "kapi.fs.command": {
            "description": "AMQP API for fs.command",
            "properties": {
                "Application-Name": {
                    "type": "string"
                },
                "Args": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "fs"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "Insert-At": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Args"
            ],
            "type": "object"
        },
        "kapi.globals.call": {
            "description": "AMQP API for globals.call",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "globals"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "call"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                }
            },
            "required": [
                "Message",
                "Name"
            ],
            "type": "object"
        },
        "kapi.globals.query": {
            "description": "AMQP API for globals.query",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "globals"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query"
                    ],
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                }
            },
            "required": [
                "Name"
            ],
            "type": "object"
        },
        "kapi.globals.query_resp": {
            "description": "AMQP API for globals.query_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "globals"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_resp"
                    ],
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "State": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "integer"
                }
            },
            "required": [
                "Name"
            ],
            "type": "object"
        },
        "kapi.globals.register": {
            "description": "AMQP API for globals.register",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "globals"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "register"
                    ],
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "State": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "integer"
                }
            },
            "required": [
                "Name"
            ],
            "type": "object"
        },
        "kapi.globals.register_resp": {
            "description": "AMQP API for globals.register_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "globals"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "register_resp"
                    ],
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "State": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "integer"
                }
            },
            "required": [
                "Name"
            ],
            "type": "object"
        },
        "kapi.globals.reply_msg": {
            "description": "AMQP API for globals.reply_msg",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "globals"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reply"
                    ],
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Reply": {
                    "type": "string"
                }
            },
            "required": [
                "Reply"
            ],
            "type": "object"
        },
        "kapi.globals.send": {
            "description": "AMQP API for globals.send",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "globals"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "send"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                }
            },
            "required": [
                "Message",
                "Name"
            ],
            "type": "object"
        },
        "kapi.globals.unregister": {
            "description": "AMQP API for globals.unregister",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "globals"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "unregister"
                    ],
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                }
            },
            "required": [
                "Name"
            ],
            "type": "object"
        },
        "kapi.hangups.query_req": {
            "description": "AMQP API for hangups.query_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "hangups"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_req"
                    ],
                    "type": "string"
                },
                "Hangup-Cause": {
                    "type": "string"
                },
                "Raw-Data": {
                    "type": "boolean"
                }
            },
            "required": [
                "Hangup-Cause"
            ],
            "type": "object"
        },
        "kapi.hangups.query_resp": {
            "description": "AMQP API for hangups.query_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "hangups"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query_resp"
                    ],
                    "type": "string"
                },
                "account_id": {
                    "type": "string"
                },
                "count": {
                    "type": "string"
                },
                "day": {
                    "type": "string"
                },
                "fifteen": {
                    "type": "string"
                },
                "five": {
                    "type": "string"
                },
                "five_to_fifteen": {
                    "type": "string"
                },
                "hangup_cause": {
                    "type": "string"
                },
                "mean": {
                    "type": "string"
                },
                "meters": {
                    "type": "string"
                },
                "one": {
                    "type": "string"
                },
                "one_to_fifteen": {
                    "type": "string"
                },
                "one_to_five": {
                    "type": "string"
                },
                "start_time": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "kapi.im.inbound": {
            "description": "AMQP API for im.inbound",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Body": {
                    "type": "string"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Custom-Vars": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "sms",
                        "mms"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "inbound"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "Message-ID": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Route-ID": {
                    "type": "string"
                },
                "Route-Type": {
                    "enum": [
                        "onnet",
                        "offnet"
                    ],
                    "type": "string"
                },
                "System-ID": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Body",
                "From",
                "Message-ID",
                "To"
            ],
            "type": "object"
        },
        "kapi.im.outbound": {
            "description": "AMQP API for im.outbound",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Application-ID": {
                    "type": "string"
                },
                "Body": {
                    "type": "string"
                },
                "Custom-Vars": {
                    "type": "object"
                },
                "Endpoints": {
                    "items": {
                        "$ref": "#/definitions/kapi.dialplan.bridge_endpoint",
                        "type": "string"
                    },
                    "type": "array"
                },
                "Event-Category": {
                    "enum": [
                        "sms",
                        "mms"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "outbound"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "Message-ID": {
                    "type": "string"
                },
                "Originator-Flags": {
                    "type": "string"
                },
                "Originator-Properties": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Route-ID": {
                    "type": "string"
                },
                "Route-Type": {
                    "enum": [
                        "onnet",
                        "offnet"
                    ],
                    "type": "string"
                },
                "System-ID": {
                    "type": "string"
                },
                "Target-Flags": {
                    "type": "string"
                },
                "Target-Properties": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Body",
                "From",
                "Message-ID",
                "To"
            ],
            "type": "object"
        },
        "kapi.inspector.filter_req": {
            "description": "AMQP API for inspector.filter_req",
            "properties": {
                "Call-IDs": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_inspector"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "filter_req"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Call-IDs"
            ],
            "type": "object"
        },
        "kapi.inspector.filter_resp": {
            "description": "AMQP API for inspector.filter_resp",
            "properties": {
                "Call-IDs": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_inspector"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "filter_resp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.inspector.lookup_req": {
            "description": "AMQP API for inspector.lookup_req",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_inspector"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "lookup_req"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.inspector.lookup_resp": {
            "description": "AMQP API for inspector.lookup_resp",
            "properties": {
                "Analysis": {
                    "type": "string"
                },
                "Chunks": {
                    "type": "string"
                },
                "Dialog-Entities": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "call_inspector"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "lookup_resp"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Chunks"
            ],
            "type": "object"
        },
        "kapi.konami.transferred": {
            "description": "AMQP API for konami.transferred",
            "properties": {
                "Call": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "konami"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "transferred"
                    ],
                    "type": "string"
                },
                "Target": {
                    "type": "string"
                },
                "Transferee": {
                    "type": "string"
                },
                "Transferor": {
                    "type": "string"
                }
            },
            "required": [
                "Call",
                "Target",
                "Transferee"
            ],
            "type": "object"
        },
        "kapi.leader.req": {
            "description": "AMQP API for leader.req",
            "properties": {
                "Message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.maintenance.req": {
            "description": "AMQP API for maintenance.req",
            "properties": {
                "Action": {
                    "enum": [
                        "refresh_database",
                        "refresh_views",
                        "clean_services"
                    ],
                    "type": "string"
                },
                "Classification": {
                    "type": "string"
                },
                "Database": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "maintenance"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "req"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Action"
            ],
            "type": "object"
        },
        "kapi.maintenance.resp": {
            "description": "AMQP API for maintenance.resp",
            "properties": {
                "Code": {
                    "type": "integer"
                },
                "Event-Category": {
                    "enum": [
                        "maintenance"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "resp"
                    ],
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                }
            },
            "required": [
                "Code"
            ],
            "type": "object"
        },
        "kapi.media.error": {
            "description": "AMQP API for media.error",
            "properties": {
                "Error-Code": {
                    "enum": [
                        "not_found",
                        "no_data",
                        "other"
                    ],
                    "type": "string"
                },
                "Error-Msg": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "media"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "media_error"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                }
            },
            "required": [
                "Error-Code",
                "Media-Name"
            ],
            "type": "object"
        },
        "kapi.media.media_error": {
            "description": "AMQP API for media.media_error",
            "properties": {
                "Error-Code": {
                    "enum": [
                        "not_found",
                        "no_data",
                        "other"
                    ],
                    "type": "string"
                },
                "Error-Msg": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "media"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "media_error"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                }
            },
            "required": [
                "Error-Code",
                "Media-Name"
            ],
            "type": "object"
        },
        "kapi.media.media_req": {
            "description": "AMQP API for media.media_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Engine": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "media"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "media_req"
                    ],
                    "type": "string"
                },
                "Format": {
                    "enum": [
                        "mp3",
                        "wav"
                    ],
                    "type": "string"
                },
                "Language": {
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Protocol": {
                    "enum": [
                        "http",
                        "https",
                        "shout",
                        "vlc"
                    ],
                    "type": "string"
                },
                "Stream-Type": {
                    "enum": [
                        "new",
                        "extant"
                    ],
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Voice": {
                    "enum": [
                        "male",
                        "female"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Media-Name"
            ],
            "type": "object"
        },
        "kapi.media.media_resp": {
            "description": "AMQP API for media.media_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "media"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "media_resp"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Stream-URL": {
                    "type": "string"
                }
            },
            "required": [
                "Media-Name",
                "Stream-URL"
            ],
            "type": "object"
        },
        "kapi.media.req": {
            "description": "AMQP API for media.req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Engine": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "media"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "media_req"
                    ],
                    "type": "string"
                },
                "Format": {
                    "enum": [
                        "mp3",
                        "wav"
                    ],
                    "type": "string"
                },
                "Language": {
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Protocol": {
                    "enum": [
                        "http",
                        "https",
                        "shout",
                        "vlc"
                    ],
                    "type": "string"
                },
                "Stream-Type": {
                    "enum": [
                        "new",
                        "extant"
                    ],
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Voice": {
                    "enum": [
                        "male",
                        "female"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Media-Name"
            ],
            "type": "object"
        },
        "kapi.media.resp": {
            "description": "AMQP API for media.resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "media"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "media_resp"
                    ],
                    "type": "string"
                },
                "Media-Name": {
                    "type": "string"
                },
                "Stream-URL": {
                    "type": "string"
                }
            },
            "required": [
                "Media-Name",
                "Stream-URL"
            ],
            "type": "object"
        },
        "kapi.metaflow.action": {
            "description": "AMQP API for metaflow.action",
            "properties": {
                "Action": {
                    "enum": [
                        "transfer",
                        "hangup",
                        "callflow",
                        "break",
                        "intercept",
                        "move",
                        "park",
                        "unpark",
                        "play",
                        "say",
                        "audio_level",
                        "hold",
                        "record_call",
                        "resume",
                        "tts"
                    ],
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Data": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "metaflow"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "action"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Action",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.metaflow.bind_req": {
            "description": "AMQP API for metaflow.bind_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Authorizing-ID": {
                    "type": "string"
                },
                "Authorizing-Type": {
                    "type": "string"
                },
                "Binding-Leg": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "CallFlow-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "metaflow"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "bind_req"
                    ],
                    "type": "string"
                },
                "Resource-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Binding-Leg"
            ],
            "type": "object"
        },
        "kapi.metaflow.binding": {
            "description": "AMQP API for metaflow.binding",
            "properties": {
                "Binding-Digit": {
                    "enum": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "*",
                        "0",
                        "#"
                    ],
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Digit-Timeout": {
                    "minimum": 0,
                    "type": "integer"
                },
                "Endpoint-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "metaflow"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "bind"
                    ],
                    "type": "string"
                },
                "Listen-On": {
                    "enum": [
                        "both",
                        "self",
                        "peer",
                        "aleg",
                        "bleg"
                    ],
                    "type": "string"
                },
                "Numbers": {
                    "type": "object"
                },
                "Patterns": {
                    "type": "object"
                }
            },
            "required": [
                "Call"
            ],
            "type": "object"
        },
        "kapi.metaflow.flow": {
            "description": "AMQP API for metaflow.flow",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "metaflow"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "flow"
                    ],
                    "type": "string"
                },
                "Flow": {
                    "type": "object"
                }
            },
            "required": [
                "Call-ID",
                "Flow"
            ],
            "type": "object"
        },
        "kapi.money.balance_req": {
            "description": "AMQP API for money.balance_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "transaction"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "balance_req"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.money.balance_resp": {
            "description": "AMQP API for money.balance_resp",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "transaction"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "balance_resp"
                    ],
                    "type": "string"
                },
                "Inbound": {
                    "type": "string"
                },
                "Max-Inbound": {
                    "type": "string"
                },
                "Max-Two-Way": {
                    "type": "string"
                },
                "Node": {
                    "type": "string"
                },
                "Prepay": {
                    "type": "string"
                },
                "Trunks": {
                    "type": "string"
                },
                "Two-Way": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.money.credit": {
            "description": "AMQP API for money.credit",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Amount": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "transaction"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "credit"
                    ],
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Amount",
                "Transaction-ID"
            ],
            "type": "object"
        },
        "kapi.money.debit": {
            "description": "AMQP API for money.debit",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Amount": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "transaction"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "debit"
                    ],
                    "type": "string"
                },
                "Transaction-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Amount",
                "Transaction-ID"
            ],
            "type": "object"
        },
        "kapi.nodes.advertise": {
            "description": "AMQP API for nodes.advertise",
            "properties": {
                "Channels": {
                    "type": "string"
                },
                "Conferences": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "nodes"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "advertise"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "Globals": {
                    "type": "string"
                },
                "Media-Servers": {
                    "type": "string"
                },
                "Node-Info": {
                    "type": "string"
                },
                "Ports": {
                    "type": "string"
                },
                "Processes": {
                    "type": "string"
                },
                "Registrations": {
                    "type": "string"
                },
                "Used-Memory": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                },
                "WhApps": {
                    "type": "string"
                },
                "Zone": {
                    "type": "string"
                },
                "md5": {
                    "type": "string"
                }
            },
            "required": [
                "Expires"
            ],
            "type": "object"
        },
        "kapi.notifications.account_zone_change": {
            "description": "AMQP API for notifications.account_zone_change",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "account_zone_change"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Zones": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Zones"
            ],
            "type": "object"
        },
        "kapi.notifications.bill_reminder": {
            "description": "AMQP API for notifications.bill_reminder",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "minLength": 1,
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Due-Date": {
                    "minimum": 1,
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "bill_reminder"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Items": {
                    "items": {
                        "type": "object"
                    },
                    "type": "string"
                },
                "Payment-Token": {
                    "type": "string"
                },
                "Preview": {
                    "type": "boolean"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Timestamp": {
                    "minimum": 1,
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Due-Date",
                "Items",
                "Payment-Token",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.notifications.cf_notification": {
            "description": "AMQP API for notifications.cf_notification",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-Bridged": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Comments": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "cf_notification"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Message-Left": {
                    "type": "integer"
                },
                "Notification-Media": {
                    "enum": [
                        "email",
                        "sms"
                    ],
                    "type": "string"
                },
                "Notify": {
                    "type": "string"
                },
                "Preview": {
                    "type": "boolean"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Template-ID": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Template-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.cnam_request": {
            "description": "AMQP API for notifications.cnam_request",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Acquired-For": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Cnam": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "cnam_request"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Local-Number": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Number-State": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Cnam",
                "Number"
            ],
            "type": "object"
        },
        "kapi.notifications.customer_update": {
            "description": "AMQP API for notifications.customer_update",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "DataBag": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "customer_update"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Recipient-ID": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Template-ID": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-Type": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.denied_emergency_bridge": {
            "description": "AMQP API for notifications.denied_emergency_bridge",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Emergency-Caller-ID-Name": {
                    "type": "string"
                },
                "Emergency-Caller-ID-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "denied_emergency_bridge"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Name": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Number": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.deregister": {
            "description": "AMQP API for notifications.deregister",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorizing-ID": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "deregister"
                    ],
                    "type": "string"
                },
                "Event-Timestamp": {
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "FreeSWITCH-Hostname": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Host": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Network-IP": {
                    "type": "string"
                },
                "Network-Port": {
                    "type": "string"
                },
                "Presence-Hosts": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Profile-Name": {
                    "type": "string"
                },
                "RPid": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Suppress-Unregister-Notify": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Host": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Realm",
                "Username"
            ],
            "type": "object"
        },
        "kapi.notifications.first_occurrence": {
            "description": "AMQP API for notifications.first_occurrence",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "first_occurrence"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Occurrence": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Occurrence"
            ],
            "type": "object"
        },
        "kapi.notifications.inbound_fax": {
            "description": "AMQP API for notifications.inbound_fax",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "inbound_fax"
                    ],
                    "type": "string"
                },
                "Fax-ID": {
                    "type": "string"
                },
                "Fax-Info": {
                    "type": "string"
                },
                "Fax-Notifications": {
                    "type": "string"
                },
                "Fax-Timestamp": {
                    "type": "string"
                },
                "FaxBox-ID": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Owner-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Fax-ID",
                "From-Realm",
                "From-User",
                "To-Realm",
                "To-User"
            ],
            "type": "object"
        },
        "kapi.notifications.inbound_fax_error": {
            "description": "AMQP API for notifications.inbound_fax_error",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "inbound_fax_error"
                    ],
                    "type": "string"
                },
                "Fax-Error": {
                    "type": "string"
                },
                "Fax-ID": {
                    "type": "string"
                },
                "Fax-Info": {
                    "type": "string"
                },
                "Fax-Notifications": {
                    "type": "string"
                },
                "Fax-Result-Code": {
                    "type": "string"
                },
                "Fax-Timestamp": {
                    "type": "string"
                },
                "FaxBox-ID": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Owner-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "From-Realm",
                "From-User",
                "To-Realm",
                "To-User"
            ],
            "type": "object"
        },
        "kapi.notifications.low_balance": {
            "description": "AMQP API for notifications.low_balance",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Current-Balance": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "low_balance"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Current-Balance"
            ],
            "type": "object"
        },
        "kapi.notifications.missed_call": {
            "description": "AMQP API for notifications.missed_call",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-Bridged": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "missed_call"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Message-Left": {
                    "type": "integer"
                },
                "Notify": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call-Bridged",
                "Call-ID",
                "Message-Left"
            ],
            "type": "object"
        },
        "kapi.notifications.new_account": {
            "description": "AMQP API for notifications.new_account",
            "properties": {
                "Account-API-Key": {
                    "type": "string"
                },
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Account-Name": {
                    "type": "string"
                },
                "Account-Realm": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "new_account"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.new_user": {
            "description": "AMQP API for notifications.new_user",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "new_user"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "User-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.notify_update": {
            "description": "AMQP API for notifications.notify_update",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "notify_update"
                    ],
                    "type": "string"
                },
                "Failure-Message": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Metadata": {
                    "type": "string"
                },
                "Preview": {
                    "type": "boolean"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Status": {
                    "enum": [
                        "completed",
                        "disabled",
                        "failed",
                        "ignored",
                        "pending"
                    ],
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Status"
            ],
            "type": "object"
        },
        "kapi.notifications.outbound_fax": {
            "description": "AMQP API for notifications.outbound_fax",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "outbound_fax"
                    ],
                    "type": "string"
                },
                "Fax-ID": {
                    "type": "string"
                },
                "Fax-Info": {
                    "type": "string"
                },
                "Fax-JobId": {
                    "type": "string"
                },
                "Fax-Notifications": {
                    "type": "string"
                },
                "Fax-Timestamp": {
                    "type": "string"
                },
                "FaxBox-ID": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Owner-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Callee-ID-Number",
                "Caller-ID-Number",
                "Fax-ID",
                "Fax-JobId"
            ],
            "type": "object"
        },
        "kapi.notifications.outbound_fax_error": {
            "description": "AMQP API for notifications.outbound_fax_error",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "outbound_fax_error"
                    ],
                    "type": "string"
                },
                "Fax-Error": {
                    "type": "string"
                },
                "Fax-ID": {
                    "type": "string"
                },
                "Fax-Info": {
                    "type": "string"
                },
                "Fax-JobId": {
                    "type": "string"
                },
                "Fax-Notifications": {
                    "type": "string"
                },
                "Fax-Timestamp": {
                    "type": "string"
                },
                "FaxBox-ID": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Owner-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Fax-ID",
                "Fax-JobId"
            ],
            "type": "object"
        },
        "kapi.notifications.outbound_smtp_fax_error": {
            "description": "AMQP API for notifications.outbound_smtp_fax_error",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Errors": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "outbound_smtp_fax_error"
                    ],
                    "type": "string"
                },
                "Fax-From-Email": {
                    "type": "string"
                },
                "Fax-To-Email": {
                    "type": "string"
                },
                "FaxBox-ID": {
                    "type": "string"
                },
                "FaxBox-Name": {
                    "type": "string"
                },
                "FaxBox-Timezone": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Original-Number": {
                    "type": "string"
                },
                "Owner-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Errors",
                "Fax-From-Email"
            ],
            "type": "object"
        },
        "kapi.notifications.password_recovery": {
            "description": "AMQP API for notifications.password_recovery",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Email": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "password_recovery"
                    ],
                    "type": "string"
                },
                "First-Name": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Last-Name": {
                    "type": "string"
                },
                "Password-Reset-Link": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Timezone": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Email",
                "Password-Reset-Link"
            ],
            "type": "object"
        },
        "kapi.notifications.port_cancel": {
            "description": "AMQP API for notifications.port_cancel",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorized-By": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "port_cancel"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Local-Number": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Number-State": {
                    "type": "string"
                },
                "Port": {
                    "type": "string"
                },
                "Port-Request-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "type": "object"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.port_comment": {
            "description": "AMQP API for notifications.port_comment",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorized-By": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Comment": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "port_comment"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Local-Number": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Number-State": {
                    "type": "string"
                },
                "Port": {
                    "type": "string"
                },
                "Port-Request-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.port_pending": {
            "description": "AMQP API for notifications.port_pending",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorized-By": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "port_pending"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Local-Number": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Number-State": {
                    "type": "string"
                },
                "Port": {
                    "type": "string"
                },
                "Port-Request-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "type": "object"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.port_rejected": {
            "description": "AMQP API for notifications.port_rejected",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorized-By": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "port_rejected"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Local-Number": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Number-State": {
                    "type": "string"
                },
                "Port": {
                    "type": "string"
                },
                "Port-Request-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "type": "object"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.port_request": {
            "description": "AMQP API for notifications.port_request",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorized-By": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "port_request"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Local-Number": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Number-State": {
                    "type": "string"
                },
                "Port": {
                    "type": "string"
                },
                "Port-Request-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "type": "object"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.port_scheduled": {
            "description": "AMQP API for notifications.port_scheduled",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorized-By": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "port_scheduled"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Local-Number": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Number-State": {
                    "type": "string"
                },
                "Port": {
                    "type": "string"
                },
                "Port-Request-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "type": "object"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.port_unconfirmed": {
            "description": "AMQP API for notifications.port_unconfirmed",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorized-By": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "port_unconfirmed"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Local-Number": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Number-State": {
                    "type": "string"
                },
                "Port": {
                    "type": "string"
                },
                "Port-Request-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "type": "object"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.ported": {
            "description": "AMQP API for notifications.ported",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorized-By": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "ported"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Local-Number": {
                    "type": "string"
                },
                "Number": {
                    "type": "string"
                },
                "Number-State": {
                    "type": "string"
                },
                "Port": {
                    "type": "string"
                },
                "Port-Request-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "type": "object"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.register": {
            "description": "AMQP API for notifications.register",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Authorizing-ID": {
                    "type": "string"
                },
                "Authorizing-Type": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "register"
                    ],
                    "type": "string"
                },
                "Event-Timestamp": {
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Host": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Network-IP": {
                    "type": "string"
                },
                "Network-Port": {
                    "type": "string"
                },
                "Owner-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Suppress-Unregister-Notify": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Host": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Realm",
                "Username"
            ],
            "type": "object"
        },
        "kapi.notifications.service_added": {
            "description": "AMQP API for notifications.service_added",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Audit-Log": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "service_added"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Items": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Audit-Log",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.notifications.skel": {
            "description": "AMQP API for notifications.skel",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "skel"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "User-ID"
            ],
            "type": "object"
        },
        "kapi.notifications.system_alert": {
            "description": "AMQP API for notifications.system_alert",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Details": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "system_alert"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Line": {
                    "type": "string"
                },
                "Message": {
                    "type": "string"
                },
                "Module": {
                    "type": "string"
                },
                "Node": {
                    "type": "string"
                },
                "Pid": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Request-ID": {
                    "type": "string"
                },
                "Section": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "kapi_definitionule": {
                    "type": "string"
                }
            },
            "required": [
                "Message",
                "Subject"
            ],
            "type": "object"
        },
        "kapi.notifications.topup": {
            "description": "AMQP API for notifications.topup",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Add-Ons": {
                    "type": "string"
                },
                "Amount": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Billing-Address": {
                    "type": "string"
                },
                "Card-Last-Four": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Currency-Code": {
                    "type": "string"
                },
                "Discounts": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "topup"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Purchase-Order": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Response": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Success": {
                    "type": "string"
                },
                "Tax-Amount": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Amount",
                "Response",
                "Success",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.notifications.transaction": {
            "description": "AMQP API for notifications.transaction",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Add-Ons": {
                    "type": "string"
                },
                "Amount": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Billing-Address": {
                    "type": "string"
                },
                "Card-Last-Four": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Currency-Code": {
                    "type": "string"
                },
                "Discounts": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "transaction"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Purchase-Order": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Response": {
                    "type": "string"
                },
                "Service-Plan": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Success": {
                    "type": "string"
                },
                "Tax-Amount": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Amount",
                "Response",
                "Success",
                "Timestamp"
            ],
            "type": "object"
        },
        "kapi.notifications.voicemail_deleted": {
            "description": "AMQP API for notifications.voicemail_deleted",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "voicemail_deleted"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "enum": [
                        "dtmf",
                        "delete_after_notify",
                        "crossbar_action"
                    ],
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "Voicemail-Box": {
                    "type": "string"
                },
                "Voicemail-ID": {
                    "type": "string"
                },
                "Voicemail-Length": {
                    "type": "string"
                },
                "Voicemail-Timestamp": {
                    "type": "string"
                },
                "Voicemail-Transcription": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "From-Realm",
                "From-User",
                "Reason",
                "To-Realm",
                "To-User",
                "Voicemail-Box",
                "Voicemail-ID",
                "Voicemail-Timestamp"
            ],
            "type": "object"
        },
        "kapi.notifications.voicemail_full": {
            "description": "AMQP API for notifications.voicemail_full",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "voicemail_full"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Max-Message-Count": {
                    "type": "string"
                },
                "Message-Count": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "Voicemail-Box": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Max-Message-Count",
                "Message-Count",
                "Voicemail-Box"
            ],
            "type": "object"
        },
        "kapi.notifications.voicemail_new": {
            "description": "AMQP API for notifications.voicemail_new",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "voicemail_new"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "Voicemail-Box": {
                    "type": "string"
                },
                "Voicemail-ID": {
                    "type": "string"
                },
                "Voicemail-Length": {
                    "type": "string"
                },
                "Voicemail-Timestamp": {
                    "type": "string"
                },
                "Voicemail-Transcription": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "From-Realm",
                "From-User",
                "To-Realm",
                "To-User",
                "Voicemail-Box",
                "Voicemail-ID",
                "Voicemail-Timestamp"
            ],
            "type": "object"
        },
        "kapi.notifications.voicemail_saved": {
            "description": "AMQP API for notifications.voicemail_saved",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "voicemail_saved"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reason": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "Voicemail-Box": {
                    "type": "string"
                },
                "Voicemail-ID": {
                    "type": "string"
                },
                "Voicemail-Length": {
                    "type": "string"
                },
                "Voicemail-Timestamp": {
                    "type": "string"
                },
                "Voicemail-Transcription": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "From-Realm",
                "From-User",
                "To-Realm",
                "To-User",
                "Voicemail-Box",
                "Voicemail-ID",
                "Voicemail-Timestamp"
            ],
            "type": "object"
        },
        "kapi.notifications.webhook": {
            "description": "AMQP API for notifications.webhook",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Data": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "webhook"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Hook": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Data",
                "Hook"
            ],
            "type": "object"
        },
        "kapi.notifications.webhook_disabled": {
            "description": "AMQP API for notifications.webhook_disabled",
            "properties": {
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Attachment-URL": {
                    "type": "string"
                },
                "Bcc": {
                    "type": "string"
                },
                "Cc": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "webhook_disabled"
                    ],
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "HTML": {
                    "type": "string"
                },
                "Hook-ID": {
                    "type": "string"
                },
                "Preview": {
                    "type": "string"
                },
                "Reply-To": {
                    "type": "string"
                },
                "Subject": {
                    "type": "string"
                },
                "Text": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Hook-ID"
            ],
            "type": "object"
        },
        "kapi.offnet_resource.req": {
            "description": "AMQP API for offnet_resource.req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Account-Realm": {
                    "type": "string"
                },
                "Application-Data": {
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "bridge",
                        "eavesdrop",
                        "fax",
                        "park",
                        "sms",
                        "transfer"
                    ],
                    "type": "string"
                },
                "Asserted-Identity-Name": {
                    "type": "string"
                },
                "Asserted-Identity-Number": {
                    "type": "string"
                },
                "Asserted-Identity-Realm": {
                    "type": "string"
                },
                "B-Leg-Events": {
                    "items": {
                        "enum": [
                            "CALL_SECURE",
                            "CALL_UPDATE",
                            "CHANNEL_ANSWER",
                            "CHANNEL_CREATE",
                            "CHANNEL_DESTROY",
                            "CHANNEL_EXECUTE",
                            "CHANNEL_EXECUTE_COMPLETE",
                            "CHANNEL_EXECUTE_ERROR",
                            "CHANNEL_FAX_STATUS",
                            "CHANNEL_INTERCEPTED",
                            "CHANNEL_PROGRESS_MEDIA",
                            "CHANNEL_REPLACED",
                            "CHANNEL_TRANSFEREE",
                            "CHANNEL_TRANSFEROR",
                            "CHANNEL_BRIDGE",
                            "CHANNEL_UNBRIDGE",
                            "CHANNEL_HOLD",
                            "CHANNEL_UNHOLD",
                            "DETECTED_TONE",
                            "DTMF",
                            "LEG_CREATED",
                            "LEG_DESTROYED",
                            "RECORD_START",
                            "RECORD_STOP",
                            "dialplan"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "Body": {
                    "type": "string"
                },
                "Bypass-E164": {
                    "type": "boolean"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Denied-Call-Restrictions": {
                    "type": "object"
                },
                "Emergency-Caller-ID-Name": {
                    "type": "string"
                },
                "Emergency-Caller-ID-Number": {
                    "type": "string"
                },
                "Enable-T38-Fax": {
                    "type": "string"
                },
                "Enable-T38-Fax-Request": {
                    "type": "string"
                },
                "Enable-T38-Gateway": {
                    "type": "string"
                },
                "Enable-T38-Passthrough": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "resource"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "offnet_req"
                    ],
                    "type": "string"
                },
                "Fax-Identity-Name": {
                    "type": "string"
                },
                "Fax-Identity-Number": {
                    "type": "string"
                },
                "Fax-T38-Enabled": {
                    "type": "string"
                },
                "Fax-Timezone": {
                    "type": "string"
                },
                "Flags": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Force-Fax": {
                    "type": "boolean"
                },
                "Force-Outbound": {
                    "type": "boolean"
                },
                "Format-From-URI": {
                    "type": "string"
                },
                "From-URI-Realm": {
                    "type": "string"
                },
                "Group-ID": {
                    "type": "string"
                },
                "Hold-Media": {
                    "type": "string"
                },
                "Hunt-Account-ID": {
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "string"
                },
                "Inception": {
                    "type": "string"
                },
                "Media": {
                    "enum": [
                        "process",
                        "bypass",
                        "auto"
                    ],
                    "type": "string"
                },
                "Message-ID": {
                    "type": "string"
                },
                "Mode": {
                    "enum": [
                        "full",
                        "listen",
                        "whisper"
                    ],
                    "type": "string"
                },
                "Original-Resource-Type": {
                    "type": "string"
                },
                "Origination-Call-ID": {
                    "type": "string"
                },
                "Outbound-Actions": {
                    "type": "object"
                },
                "Outbound-Call-ID": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Name": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Number": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Privacy-Hide-Name": {
                    "type": "string"
                },
                "Privacy-Hide-Number": {
                    "type": "string"
                },
                "Privacy-Method": {
                    "type": "string"
                },
                "Requestor-Custom-Channel-Vars": {
                    "type": "object"
                },
                "Requestor-Custom-SIP-Headers": {
                    "type": "object"
                },
                "Resource-Type": {
                    "enum": [
                        "audio",
                        "video",
                        "originate",
                        "sms"
                    ],
                    "type": "string"
                },
                "Ringback": {
                    "type": "string"
                },
                "Timeout": {
                    "type": "string"
                },
                "To-DID": {
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Resource-Type",
                "To-DID"
            ],
            "type": "object"
        },
        "kapi.offnet_resource.resp": {
            "description": "AMQP API for offnet_resource.resp",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Error-Message": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "resource"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "offnet_resp"
                    ],
                    "type": "string"
                },
                "Resource-Response": {
                    "type": "string"
                },
                "Response-Code": {
                    "type": "string"
                },
                "Response-Message": {
                    "type": "string"
                }
            },
            "required": [
                "Response-Message"
            ],
            "type": "object"
        },
        "kapi.omnipresence.notify": {
            "description": "AMQP API for omnipresence.notify",
            "properties": {
                "Body": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "notify"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                }
            },
            "required": [
                "From",
                "To"
            ],
            "type": "object"
        },
        "kapi.omnipresence.subscribe": {
            "description": "AMQP API for omnipresence.subscribe",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "subscription"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "Queue": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "User": {
                    "type": "string"
                }
            },
            "required": [
                "Expires",
                "User"
            ],
            "type": "object"
        },
        "kapi.pivot.failed": {
            "description": "AMQP API for pivot.failed",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "pivot"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "failed"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.pivot.pivot_req": {
            "description": "AMQP API for pivot.pivot_req",
            "properties": {
                "CDR-URI": {
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Debug": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "dialplan"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "pivot_req"
                    ],
                    "type": "string"
                },
                "HTTP-Method": {
                    "type": "string"
                },
                "Reqeust-Body-Format": {
                    "type": "string"
                },
                "Request-Body-Format": {
                    "type": "string"
                },
                "Request-Format": {
                    "type": "string"
                },
                "Request-Timeout": {
                    "type": "integer"
                },
                "Voice-URI": {
                    "type": "string"
                }
            },
            "required": [
                "Call",
                "Voice-URI"
            ],
            "type": "object"
        },
        "kapi.pivot.processing": {
            "description": "AMQP API for pivot.processing",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "pivot"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "processing"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.pivot.req": {
            "description": "AMQP API for pivot.req",
            "properties": {
                "CDR-URI": {
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Debug": {
                    "type": "boolean"
                },
                "Event-Category": {
                    "enum": [
                        "dialplan"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "pivot_req"
                    ],
                    "type": "string"
                },
                "HTTP-Method": {
                    "type": "string"
                },
                "Request-Body-Format": {
                    "type": "string"
                },
                "Request-Format": {
                    "type": "string"
                },
                "Request-Timeout": {
                    "type": "integer"
                },
                "Voice-URI": {
                    "type": "string"
                }
            },
            "required": [
                "Call",
                "Voice-URI"
            ],
            "type": "object"
        },
        "kapi.presence.dialog": {
            "description": "AMQP API for presence.dialog",
            "properties": {
                "Call-Cookie": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Direction": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "dialog_update"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "Flush-Level": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "From-URI": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Presentity": {
                    "type": "string"
                },
                "Presentity-Realm": {
                    "type": "string"
                },
                "Presentity-User": {
                    "type": "string"
                },
                "State": {
                    "enum": [
                        "early",
                        "confirmed",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Switch-URI": {
                    "type": "string"
                },
                "Target-Call-ID": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "To-URI": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                }
            },
            "required": [
                "From",
                "To"
            ],
            "type": "object"
        },
        "kapi.presence.flush": {
            "description": "AMQP API for presence.flush",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "flush"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                },
                "User": {
                    "type": "string"
                }
            },
            "required": [
                "Type"
            ],
            "type": "object"
        },
        "kapi.presence.mwi_query": {
            "description": "AMQP API for presence.mwi_query",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "mwi_query"
                    ],
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Realm",
                "Username"
            ],
            "type": "object"
        },
        "kapi.presence.mwi_unsolicited_update": {
            "description": "AMQP API for presence.mwi_unsolicited_update",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "mwi_unsolicited_update"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "Extended-Presence-ID": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "Message-Account": {
                    "type": "string"
                },
                "Messages-New": {
                    "type": "integer"
                },
                "Messages-Saved": {
                    "type": "integer"
                },
                "Messages-Urgent": {
                    "type": "integer"
                },
                "Messages-Urgent-Saved": {
                    "type": "integer"
                },
                "Messages-Waiting": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                }
            },
            "required": [
                "Messages-New",
                "Messages-Saved",
                "To"
            ],
            "type": "object"
        },
        "kapi.presence.mwi_update": {
            "description": "AMQP API for presence.mwi_update",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "mwi_update"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "Extended-Presence-ID": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "Message-Account": {
                    "type": "string"
                },
                "Messages-New": {
                    "type": "integer"
                },
                "Messages-Saved": {
                    "type": "integer"
                },
                "Messages-Urgent": {
                    "type": "integer"
                },
                "Messages-Urgent-Saved": {
                    "type": "integer"
                },
                "Messages-Waiting": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                }
            },
            "required": [
                "Messages-New",
                "Messages-Saved",
                "To"
            ],
            "type": "object"
        },
        "kapi.presence.probe": {
            "description": "AMQP API for presence.probe",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "probe"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Event-Package",
                "Realm",
                "Username"
            ],
            "type": "object"
        },
        "kapi.presence.register_overwrite": {
            "description": "AMQP API for presence.register_overwrite",
            "properties": {
                "Contact": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "register_overwrite"
                    ],
                    "type": "string"
                },
                "Previous-Contact": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Contact",
                "Previous-Contact",
                "Realm",
                "Username"
            ],
            "type": "object"
        },
        "kapi.presence.reset": {
            "description": "AMQP API for presence.reset",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reset"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Realm",
                "Username"
            ],
            "type": "object"
        },
        "kapi.presence.search_partial_resp": {
            "description": "AMQP API for presence.search_partial_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "search_partial_resp"
                    ],
                    "type": "string"
                },
                "Subscriptions": {
                    "type": "string"
                }
            },
            "required": [
                "Subscriptions"
            ],
            "type": "object"
        },
        "kapi.presence.search_req": {
            "description": "AMQP API for presence.search_req",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "search_req"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Search-Type": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Realm"
            ],
            "type": "object"
        },
        "kapi.presence.search_resp": {
            "description": "AMQP API for presence.search_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "search_resp"
                    ],
                    "type": "string"
                },
                "Subscriptions": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.presence.subscribe": {
            "description": "AMQP API for presence.subscribe",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "subscription"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "Queue": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "User": {
                    "type": "string"
                }
            },
            "required": [
                "Expires",
                "User"
            ],
            "type": "object"
        },
        "kapi.presence.sync": {
            "description": "AMQP API for presence.sync",
            "properties": {
                "Action": {
                    "enum": [
                        "Request",
                        "Start",
                        "End"
                    ],
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "sync"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                }
            },
            "required": [
                "Action"
            ],
            "type": "object"
        },
        "kapi.presence.update": {
            "description": "AMQP API for presence.update",
            "properties": {
                "Call-Direction": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "presence"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "update"
                    ],
                    "type": "string"
                },
                "Event-Package": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "State": {
                    "enum": [
                        "trying",
                        "online",
                        "offline",
                        "early",
                        "confirmed",
                        "terminated"
                    ],
                    "type": "string"
                },
                "Switch-URI": {
                    "type": "string"
                },
                "Target-Call-ID": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                }
            },
            "required": [
                "Presence-ID",
                "State"
            ],
            "type": "object"
        },
        "kapi.pusher.push_req": {
            "description": "AMQP API for pusher.push_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Alert": {
                    "type": "string"
                },
                "Alert-Body": {
                    "type": "string"
                },
                "Alert-Key": {
                    "type": "string"
                },
                "Alert-Params": {
                    "type": "string"
                },
                "Badge": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Endpoint-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "push_req"
                    ],
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "Payload": {
                    "type": "string"
                },
                "Queue": {
                    "type": "string"
                },
                "Sound": {
                    "type": "string"
                },
                "Token-App": {
                    "type": "string"
                },
                "Token-ID": {
                    "type": "string"
                },
                "Token-Reg": {
                    "type": "string"
                },
                "Token-Type": {
                    "type": "string"
                }
            },
            "required": [
                "Alert-Body",
                "Token-App",
                "Token-ID",
                "Token-Type"
            ],
            "type": "object"
        },
        "kapi.pusher.push_resp": {
            "description": "AMQP API for pusher.push_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "notification"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "push_resp"
                    ],
                    "type": "string"
                },
                "Token-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Token-ID"
            ],
            "type": "object"
        },
        "kapi.qubicle_session.create_session": {
            "description": "AMQP API for qubicle_session.create_session",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Session-Type": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call",
                "Call-ID",
                "Session-Type"
            ],
            "type": "object"
        },
        "kapi.qubicle_session.delete_session": {
            "description": "AMQP API for qubicle_session.delete_session",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Call-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call",
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.qubicle_session.join_queue": {
            "description": "AMQP API for qubicle_session.join_queue",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Call": {
                    "type": "object"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Join-Queue-ID": {
                    "type": "string"
                },
                "Session-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Call",
                "Call-ID",
                "Join-Queue-ID",
                "Session-ID"
            ],
            "type": "object"
        },
        "kapi.rate.req": {
            "description": "AMQP API for rate.req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Authorizing-Type": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Direction": {
                    "enum": [
                        "inbound",
                        "outbound"
                    ],
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "rate"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "req"
                    ],
                    "type": "string"
                },
                "From-DID": {
                    "type": "string"
                },
                "Options": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Outbound-Flags": {
                    "type": "string"
                },
                "Ratedeck-ID": {
                    "type": "string"
                },
                "Resource-ID": {
                    "type": "string"
                },
                "Resource-Type": {
                    "enum": [
                        "audio",
                        "video",
                        "sms"
                    ],
                    "type": "string"
                },
                "Send-Empty": {
                    "type": "boolean"
                },
                "To-DID": {
                    "type": "string"
                }
            },
            "required": [
                "To-DID"
            ],
            "type": "object"
        },
        "kapi.rate.resp": {
            "description": "AMQP API for rate.resp",
            "properties": {
                "Base-Cost": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Discount-Percentage": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "rate"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "resp"
                    ],
                    "type": "string"
                },
                "Prefix": {
                    "type": "string"
                },
                "Pvt-Cost": {
                    "type": "string"
                },
                "Rate": {
                    "type": "string"
                },
                "Rate-Description": {
                    "type": "string"
                },
                "Rate-ID": {
                    "type": "string"
                },
                "Rate-Increment": {
                    "type": "integer"
                },
                "Rate-Minimum": {
                    "type": "string"
                },
                "Rate-Name": {
                    "type": "string"
                },
                "Rate-NoCharge-Time": {
                    "type": "integer"
                },
                "Rate-Version": {
                    "type": "string"
                },
                "Ratedeck-ID": {
                    "type": "string"
                },
                "Surcharge": {
                    "type": "string"
                },
                "Update-Callee-ID": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "kapi.registration.flush": {
            "description": "AMQP API for registration.flush",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reg_flush"
                    ],
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Realm"
            ],
            "type": "object"
        },
        "kapi.registration.query_err": {
            "description": "AMQP API for registration.query_err",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reg_query_error"
                    ],
                    "type": "string"
                },
                "Registrar-Age": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.registration.query_req": {
            "description": "AMQP API for registration.query_req",
            "properties": {
                "Count-Only": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reg_query"
                    ],
                    "type": "string"
                },
                "Fields": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.registration.query_resp": {
            "description": "AMQP API for registration.query_resp",
            "properties": {
                "Count": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reg_query_resp"
                    ],
                    "type": "string"
                },
                "Fields": {
                    "type": "string"
                },
                "Registrar-Age": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.registration.success": {
            "description": "AMQP API for registration.success",
            "properties": {
                "AOR": {
                    "type": "string"
                },
                "Account-DB": {
                    "type": "string"
                },
                "Account-ID": {
                    "type": "string"
                },
                "Authorizing-ID": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reg_success"
                    ],
                    "type": "string"
                },
                "Event-Timestamp": {
                    "type": "string"
                },
                "Expires": {
                    "type": "string"
                },
                "First-Registration": {
                    "type": "string"
                },
                "FreeSWITCH-Hostname": {
                    "type": "string"
                },
                "FreeSWITCH-Nodename": {
                    "type": "string"
                },
                "From-Host": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "Network-IP": {
                    "type": "string"
                },
                "Network-Port": {
                    "type": "string"
                },
                "Original-Contact": {
                    "type": "string"
                },
                "Presence-Hosts": {
                    "type": "string"
                },
                "Profile-Name": {
                    "type": "string"
                },
                "Proxy-IP": {
                    "type": "string"
                },
                "Proxy-Path": {
                    "type": "string"
                },
                "Proxy-Port": {
                    "type": "string"
                },
                "Proxy-Protocol": {
                    "type": "string"
                },
                "RPid": {
                    "type": "string"
                },
                "RUID": {
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Register-Overwrite-Notify": {
                    "type": "string"
                },
                "Registrar-Node": {
                    "type": "string"
                },
                "Source-IP": {
                    "type": "string"
                },
                "Source-Port": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Suppress-Unregister-Notify": {
                    "type": "string"
                },
                "To-Host": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Contact",
                "Event-Timestamp",
                "Expires",
                "Realm",
                "Username"
            ],
            "type": "object"
        },
        "kapi.registration.sync": {
            "description": "AMQP API for registration.sync",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "directory"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reg_sync"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.resource.eavesdrop_req": {
            "description": "AMQP API for resource.eavesdrop_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Application-Data": {
                    "type": "string"
                },
                "Asserted-Identity-Name": {
                    "type": "string"
                },
                "Asserted-Identity-Number": {
                    "type": "string"
                },
                "Asserted-Identity-Realm": {
                    "type": "string"
                },
                "B-Leg-Events": {
                    "type": "string"
                },
                "Bridge-Actions": {
                    "type": "object"
                },
                "Call-Context": {
                    "type": "string"
                },
                "Call-Restrictions-Enabled": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Confirm-Cancel-Timeout": {
                    "type": "integer"
                },
                "Confirm-File": {
                    "type": "string"
                },
                "Confirm-Key": {
                    "type": "string"
                },
                "Continue-After": {
                    "type": "string"
                },
                "Continue-On-Fail": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Dial-Endpoint-Method": {
                    "type": "string"
                },
                "Eavesdrop-Call-ID": {
                    "type": "string"
                },
                "Eavesdrop-Group-ID": {
                    "type": "string"
                },
                "Eavesdrop-Mode": {
                    "enum": [
                        "listen",
                        "whisper",
                        "full"
                    ],
                    "type": "string"
                },
                "Enable-T38-Fax": {
                    "type": "string"
                },
                "Enable-T38-Fax-Request": {
                    "type": "string"
                },
                "Enable-T38-Gateway": {
                    "type": "string"
                },
                "Enable-T38-Passthrough": {
                    "type": "string"
                },
                "Endpoint-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "resource"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "eavesdrop_req"
                    ],
                    "type": "string"
                },
                "Existing-Call-ID": {
                    "type": "string"
                },
                "Export-Bridge-Variables": {
                    "type": "string"
                },
                "Export-Custom-Channel-Vars": {
                    "type": "object"
                },
                "Export-Variables": {
                    "type": "string"
                },
                "Fail-On-Single-Reject": {
                    "type": "string"
                },
                "Fax-Identity-Name": {
                    "type": "string"
                },
                "Fax-Identity-Number": {
                    "type": "string"
                },
                "Fax-Timezone": {
                    "type": "string"
                },
                "Force-Fax": {
                    "type": "string"
                },
                "Hold-Media": {
                    "type": "string"
                },
                "Ignore-Completed-Elsewhere": {
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "string"
                },
                "Ignore-Forward": {
                    "type": "string"
                },
                "Insert-At": {
                    "type": "string"
                },
                "Intercept-Unbridged-Only": {
                    "type": "string"
                },
                "Loopback-Bowout": {
                    "type": "string"
                },
                "Media": {
                    "type": "string"
                },
                "Originate-Immediate": {
                    "type": "string"
                },
                "Origination-Call-ID": {
                    "type": "string"
                },
                "Outbound-Call-ID": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Name": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Number": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Name": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Number": {
                    "type": "string"
                },
                "Privacy-Hide-Name": {
                    "type": "string"
                },
                "Privacy-Hide-Number": {
                    "type": "string"
                },
                "Privacy-Method": {
                    "type": "string"
                },
                "Ringback": {
                    "type": "string"
                },
                "SIP-Invite-Parameters": {
                    "type": "string"
                },
                "SIP-Transport": {
                    "type": "string"
                },
                "Secure-RTP": {
                    "type": "string"
                },
                "Simplify-Loopback": {
                    "type": "string"
                },
                "Start-Control-Process": {
                    "type": "string"
                },
                "Timeout": {
                    "type": "string"
                }
            },
            "required": [
                "Account-ID",
                "Endpoint-ID"
            ],
            "type": "object"
        },
        "kapi.resource.eavesdrop_resp": {
            "description": "AMQP API for resource.eavesdrop_resp",
            "properties": {
                "Eavesdropper-Call-ID": {
                    "type": "string"
                },
                "Error-Msg": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "resource"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "eavesdrop_resp"
                    ],
                    "type": "string"
                },
                "Status": {
                    "enum": [
                        "started",
                        "error"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "Status"
            ],
            "type": "object"
        },
        "kapi.resource.originate_req": {
            "description": "AMQP API for resource.originate_req",
            "properties": {
                "Application-Data": {
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "park",
                        "bridge",
                        "transfer",
                        "fax",
                        "eavesdrop"
                    ],
                    "type": "string"
                },
                "Asserted-Identity-Name": {
                    "type": "string"
                },
                "Asserted-Identity-Number": {
                    "type": "string"
                },
                "Asserted-Identity-Realm": {
                    "type": "string"
                },
                "B-Leg-Events": {
                    "type": "string"
                },
                "Bridge-Actions": {
                    "type": "object"
                },
                "Call-Context": {
                    "type": "string"
                },
                "Call-Restrictions-Enabled": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Confirm-Cancel-Timeout": {
                    "type": "integer"
                },
                "Confirm-File": {
                    "type": "string"
                },
                "Confirm-Key": {
                    "type": "string"
                },
                "Continue-After": {
                    "type": "string"
                },
                "Continue-On-Fail": {
                    "type": "boolean"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Dial-Endpoint-Method": {
                    "enum": [
                        "single",
                        "simultaneous"
                    ],
                    "type": "string"
                },
                "Eavesdrop-Call-ID": {
                    "type": "string"
                },
                "Eavesdrop-Group-ID": {
                    "type": "string"
                },
                "Eavesdrop-Mode": {
                    "enum": [
                        "listen",
                        "whisper",
                        "full"
                    ],
                    "type": "string"
                },
                "Enable-T38-Fax": {
                    "type": "string"
                },
                "Enable-T38-Fax-Request": {
                    "type": "string"
                },
                "Enable-T38-Gateway": {
                    "type": "string"
                },
                "Enable-T38-Passthrough": {
                    "type": "string"
                },
                "Endpoints": {
                    "items": {
                        "$ref": "#/definitions/kapi.dialplan.bridge_endpoint",
                        "type": "string"
                    },
                    "type": "array"
                },
                "Event-Category": {
                    "enum": [
                        "resource"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "originate_req"
                    ],
                    "type": "string"
                },
                "Existing-Call-ID": {
                    "type": "string"
                },
                "Export-Bridge-Variables": {
                    "type": "string"
                },
                "Export-Custom-Channel-Vars": {
                    "type": "object"
                },
                "Export-Variables": {
                    "type": "string"
                },
                "Fail-On-Single-Reject": {
                    "type": "string"
                },
                "Fax-Identity-Name": {
                    "type": "string"
                },
                "Fax-Identity-Number": {
                    "type": "string"
                },
                "Fax-Timezone": {
                    "type": "string"
                },
                "Force-Fax": {
                    "type": "string"
                },
                "Hold-Media": {
                    "type": "string"
                },
                "Ignore-Completed-Elsewhere": {
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "string"
                },
                "Ignore-Forward": {
                    "type": "string"
                },
                "Insert-At": {
                    "type": "string"
                },
                "Intercept-Unbridged-Only": {
                    "type": "string"
                },
                "Loopback-Bowout": {
                    "type": "string"
                },
                "Media": {
                    "enum": [
                        "process",
                        "bypass",
                        "auto"
                    ],
                    "type": "string"
                },
                "Originate-Immediate": {
                    "type": "string"
                },
                "Origination-Call-ID": {
                    "type": "string"
                },
                "Outbound-Call-ID": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Name": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Number": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Name": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Number": {
                    "type": "string"
                },
                "Privacy-Hide-Name": {
                    "type": "string"
                },
                "Privacy-Hide-Number": {
                    "type": "string"
                },
                "Privacy-Method": {
                    "type": "string"
                },
                "Ringback": {
                    "type": "string"
                },
                "SIP-Invite-Parameters": {
                    "type": "string"
                },
                "SIP-Transport": {
                    "type": "string"
                },
                "Secure-RTP": {
                    "type": "string"
                },
                "Simplify-Bowout": {
                    "type": "boolean"
                },
                "Simplify-Loopback": {
                    "type": "string"
                },
                "Start-Control-Process": {
                    "type": "string"
                },
                "Timeout": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Endpoints"
            ],
            "type": "object"
        },
        "kapi.resource.originate_req_endpoint": {
            "description": "AMQP API for resource.originate_req_endpoint",
            "properties": {
                "Bypass-Media": {
                    "type": "boolean"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Endpoint-Options": {
                    "type": "object"
                },
                "Endpoint-Type": {
                    "enum": [
                        "sip",
                        "freetdm"
                    ],
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "kapi.resource.originate_req_endpoint_headers": {
            "description": "AMQP API for resource.originate_req_endpoint_headers",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Auth-Password": {
                    "type": "string"
                },
                "Auth-Realm": {
                    "type": "string"
                },
                "Auth-User": {
                    "type": "string"
                },
                "Bypass-Media": {
                    "type": "string"
                },
                "Call-Context": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Codecs": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Enable-T38-Fax": {
                    "type": "string"
                },
                "Enable-T38-Fax-Request": {
                    "type": "string"
                },
                "Enable-T38-Gateway": {
                    "type": "string"
                },
                "Enable-T38-Passthrough": {
                    "type": "string"
                },
                "Endpoint-Actions": {
                    "type": "string"
                },
                "Endpoint-Delay": {
                    "type": "string"
                },
                "Endpoint-ID": {
                    "type": "string"
                },
                "Endpoint-Options": {
                    "type": "string"
                },
                "Endpoint-Progress-Timeout": {
                    "type": "integer"
                },
                "Endpoint-Timeout": {
                    "type": "integer"
                },
                "Endpoint-Type": {
                    "type": "string"
                },
                "Endpoint-URI": {
                    "type": "string"
                },
                "Failover": {
                    "type": "string"
                },
                "Force-Fax": {
                    "type": "string"
                },
                "Forward-IP": {
                    "type": "string"
                },
                "Hold-Media": {
                    "type": "string"
                },
                "Ignore-Completed-Elsewhere": {
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "string"
                },
                "Invite-Format": {
                    "type": "string"
                },
                "Loopback-Bowout": {
                    "type": "string"
                },
                "Outbound-Call-ID": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Name": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Number": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Name": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Number": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Privacy-Hide-Name": {
                    "type": "string"
                },
                "Privacy-Hide-Number": {
                    "type": "string"
                },
                "Privacy-Method": {
                    "type": "string"
                },
                "Proxy-IP": {
                    "type": "string"
                },
                "Proxy-Zone": {
                    "type": "string"
                },
                "Route": {
                    "type": "string"
                },
                "SIP-Interface": {
                    "type": "string"
                },
                "SIP-Invite-Parameters": {
                    "type": "string"
                },
                "SIP-Transport": {
                    "type": "string"
                },
                "Simplify-Loopback": {
                    "type": "string"
                },
                "To-DID": {
                    "type": "string"
                },
                "To-IP": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-URI": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "To-Username": {
                    "type": "string"
                }
            },
            "required": [
                "Invite-Format"
            ],
            "type": "object"
        },
        "kapi.resource.originate_resp": {
            "description": "AMQP API for resource.originate_resp",
            "properties": {
                "Application-Data": {
                    "type": "string"
                },
                "Application-Event": {
                    "type": "string"
                },
                "Application-Name": {
                    "type": "string"
                },
                "Application-Response": {
                    "type": "string"
                },
                "Billing-Seconds": {
                    "type": "string"
                },
                "Bridge-B-Unique-ID": {
                    "type": "string"
                },
                "Bridge-Hangup-Cause": {
                    "type": "string"
                },
                "Call-Debug": {
                    "type": "string"
                },
                "Call-Direction": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-Destination-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Channel-Answer-State": {
                    "type": "string"
                },
                "Channel-Call-State": {
                    "type": "string"
                },
                "Channel-Created-Time": {
                    "type": "integer"
                },
                "Channel-Debug": {
                    "type": "string"
                },
                "Channel-Is-Loopback": {
                    "type": "string"
                },
                "Channel-Loopback-Bowout": {
                    "type": "string"
                },
                "Channel-Loopback-Bowout-Execute": {
                    "type": "string"
                },
                "Channel-Loopback-Leg": {
                    "type": "string"
                },
                "Channel-Loopback-Other-Leg-ID": {
                    "type": "string"
                },
                "Channel-Moving": {
                    "type": "string"
                },
                "Channel-Name": {
                    "type": "string"
                },
                "Channel-State": {
                    "type": "string"
                },
                "Conference-Config": {
                    "type": "string"
                },
                "Conference-Name": {
                    "type": "string"
                },
                "Connecting-Leg-A-UUID": {
                    "type": "string"
                },
                "Connecting-Leg-B-UUID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "DTMF-Digit": {
                    "type": "string"
                },
                "DTMF-Duration": {
                    "type": "string"
                },
                "Detected-Tone": {
                    "type": "string"
                },
                "Digits-Dialed": {
                    "type": "string"
                },
                "Disposition": {
                    "type": "string"
                },
                "Duration-Seconds": {
                    "type": "string"
                },
                "Endpoint-Disposition": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "resource"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "originate_resp"
                    ],
                    "type": "string"
                },
                "Fax-Info": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "From-Uri": {
                    "type": "string"
                },
                "Hangup-Cause": {
                    "type": "string"
                },
                "Hangup-Code": {
                    "type": "string"
                },
                "Interaction-ID": {
                    "type": "string"
                },
                "Intercepted-By": {
                    "type": "string"
                },
                "Length": {
                    "type": "string"
                },
                "Local-SDP": {
                    "type": "string"
                },
                "Media-Recordings": {
                    "type": "string"
                },
                "Media-Server": {
                    "type": "string"
                },
                "Origination-Call-ID": {
                    "type": "string"
                },
                "Other-Leg-Call-ID": {
                    "type": "string"
                },
                "Other-Leg-Caller-ID-Name": {
                    "type": "string"
                },
                "Other-Leg-Caller-ID-Number": {
                    "type": "string"
                },
                "Other-Leg-Destination-Number": {
                    "type": "string"
                },
                "Other-Leg-Direction": {
                    "type": "string"
                },
                "Parking-Slot": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Raw-Application-Data": {
                    "type": "string"
                },
                "Raw-Application-Name": {
                    "type": "string"
                },
                "Recording": {
                    "type": "string"
                },
                "Remote-SDP": {
                    "type": "string"
                },
                "Replaced-By": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Resigning-Peer-UUID": {
                    "type": "string"
                },
                "Resigning-UUID": {
                    "type": "string"
                },
                "Ringing-Seconds": {
                    "type": "string"
                },
                "Root-Call-Interaction-ID": {
                    "type": "string"
                },
                "Silence-Terminated": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-Nodename": {
                    "type": "string"
                },
                "Switch-URI": {
                    "type": "string"
                },
                "Switch-URL": {
                    "type": "string"
                },
                "Target-Call-ID": {
                    "type": "string"
                },
                "Terminator": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "To-Uri": {
                    "type": "string"
                },
                "Transfer-Disposition": {
                    "type": "string"
                },
                "Transfer-History": {
                    "type": "string"
                },
                "Transfer-Source": {
                    "type": "string"
                },
                "Transfer-To": {
                    "type": "string"
                },
                "Transfer-Type": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.resource.originate_started": {
            "description": "AMQP API for resource.originate_started",
            "properties": {
                "Application-Data": {
                    "type": "string"
                },
                "Application-Event": {
                    "type": "string"
                },
                "Application-Name": {
                    "type": "string"
                },
                "Application-Response": {
                    "type": "string"
                },
                "Billing-Seconds": {
                    "type": "string"
                },
                "Bridge-B-Unique-ID": {
                    "type": "string"
                },
                "Bridge-Hangup-Cause": {
                    "type": "string"
                },
                "Call-Debug": {
                    "type": "string"
                },
                "Call-Direction": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-Destination-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Channel-Answer-State": {
                    "type": "string"
                },
                "Channel-Call-State": {
                    "type": "string"
                },
                "Channel-Created-Time": {
                    "type": "integer"
                },
                "Channel-Debug": {
                    "type": "string"
                },
                "Channel-Is-Loopback": {
                    "type": "string"
                },
                "Channel-Loopback-Bowout": {
                    "type": "string"
                },
                "Channel-Loopback-Bowout-Execute": {
                    "type": "string"
                },
                "Channel-Loopback-Leg": {
                    "type": "string"
                },
                "Channel-Loopback-Other-Leg-ID": {
                    "type": "string"
                },
                "Channel-Moving": {
                    "type": "string"
                },
                "Channel-Name": {
                    "type": "string"
                },
                "Channel-State": {
                    "type": "string"
                },
                "Conference-Config": {
                    "type": "string"
                },
                "Conference-Name": {
                    "type": "string"
                },
                "Connecting-Leg-A-UUID": {
                    "type": "string"
                },
                "Connecting-Leg-B-UUID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "DTMF-Digit": {
                    "type": "string"
                },
                "DTMF-Duration": {
                    "type": "string"
                },
                "Detected-Tone": {
                    "type": "string"
                },
                "Digits-Dialed": {
                    "type": "string"
                },
                "Disposition": {
                    "type": "string"
                },
                "Duration-Seconds": {
                    "type": "string"
                },
                "Endpoint-Disposition": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "resource"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "originate_started"
                    ],
                    "type": "string"
                },
                "Fax-Info": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "From-Uri": {
                    "type": "string"
                },
                "Hangup-Cause": {
                    "type": "string"
                },
                "Hangup-Code": {
                    "type": "string"
                },
                "Interaction-ID": {
                    "type": "string"
                },
                "Intercepted-By": {
                    "type": "string"
                },
                "Length": {
                    "type": "string"
                },
                "Local-SDP": {
                    "type": "string"
                },
                "Media-Recordings": {
                    "type": "string"
                },
                "Media-Server": {
                    "type": "string"
                },
                "Origination-Call-ID": {
                    "type": "string"
                },
                "Other-Leg-Call-ID": {
                    "type": "string"
                },
                "Other-Leg-Caller-ID-Name": {
                    "type": "string"
                },
                "Other-Leg-Caller-ID-Number": {
                    "type": "string"
                },
                "Other-Leg-Destination-Number": {
                    "type": "string"
                },
                "Other-Leg-Direction": {
                    "type": "string"
                },
                "Parking-Slot": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Raw-Application-Data": {
                    "type": "string"
                },
                "Raw-Application-Name": {
                    "type": "string"
                },
                "Recording": {
                    "type": "string"
                },
                "Remote-SDP": {
                    "type": "string"
                },
                "Replaced-By": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Resigning-Peer-UUID": {
                    "type": "string"
                },
                "Resigning-UUID": {
                    "type": "string"
                },
                "Ringing-Seconds": {
                    "type": "string"
                },
                "Root-Call-Interaction-ID": {
                    "type": "string"
                },
                "Silence-Terminated": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-Nodename": {
                    "type": "string"
                },
                "Switch-URI": {
                    "type": "string"
                },
                "Switch-URL": {
                    "type": "string"
                },
                "Target-Call-ID": {
                    "type": "string"
                },
                "Terminator": {
                    "type": "string"
                },
                "Timestamp": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "To-Uri": {
                    "type": "string"
                },
                "Transfer-Disposition": {
                    "type": "string"
                },
                "Transfer-History": {
                    "type": "string"
                },
                "Transfer-Source": {
                    "type": "string"
                },
                "Transfer-To": {
                    "type": "string"
                },
                "Transfer-Type": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID"
            ],
            "type": "object"
        },
        "kapi.resource.originate_uuid": {
            "description": "AMQP API for resource.originate_uuid",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "resource"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "originate_uuid"
                    ],
                    "type": "string"
                },
                "Outbound-Call-Control-Queue": {
                    "type": "string"
                },
                "Outbound-Call-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Outbound-Call-ID"
            ],
            "type": "object"
        },
        "kapi.route.req": {
            "description": "AMQP API for route.req",
            "properties": {
                "Body": {
                    "type": "string"
                },
                "Call-Direction": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Codecs": {
                    "type": "string"
                },
                "Context": {
                    "type": "string"
                },
                "Cost-Parameters": {
                    "properties": {
                        "Max-Incremental-Cost": {
                            "type": "integer"
                        },
                        "Max-Setup-Cost": {
                            "type": "integer"
                        },
                        "Min-Increment-Cost": {
                            "type": "integer"
                        },
                        "Min-Setup-Cost": {
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-Routing-Headers": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Destination-Number": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "dialplan"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "route_req"
                    ],
                    "type": "string"
                },
                "Event-Queue": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Network-Addr": {
                    "type": "string"
                },
                "From-Network-Port": {
                    "type": "string"
                },
                "From-Tag": {
                    "type": "string"
                },
                "Geo-Location": {
                    "type": "string"
                },
                "Max-Call-Length": {
                    "type": "string"
                },
                "Media": {
                    "enum": [
                        "process",
                        "proxy",
                        "bypass"
                    ],
                    "type": "string"
                },
                "Message-ID": {
                    "type": "string"
                },
                "Orig-IP": {
                    "type": "string"
                },
                "Orig-Port": {
                    "type": "string"
                },
                "Origination-Call-ID": {
                    "type": "string"
                },
                "Prepend-CID-Name": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Resource-Type": {
                    "enum": [
                        "mms",
                        "sms",
                        "audio",
                        "video",
                        "chat",
                        "metaflow"
                    ],
                    "type": "string"
                },
                "Ringback-Media": {
                    "type": "string"
                },
                "SIP-Request-Host": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-Nodename": {
                    "type": "string"
                },
                "Switch-URI": {
                    "type": "string"
                },
                "Switch-URL": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Tag": {
                    "type": "string"
                },
                "Transcode": {
                    "type": "string"
                },
                "Transfer-Media": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "From",
                "Request",
                "To"
            ],
            "type": "object"
        },
        "kapi.route.resp": {
            "description": "AMQP API for route.resp",
            "properties": {
                "Application-Data": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "dialplan"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "route_resp"
                    ],
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-URI": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "Method": {
                    "enum": [
                        "bridge",
                        "park",
                        "error",
                        "sms",
                        "plan",
                        "application"
                    ],
                    "type": "string"
                },
                "Plan-Data": {
                    "type": "string"
                },
                "Pre-Park": {
                    "enum": [
                        "none",
                        "ring_ready",
                        "answer"
                    ],
                    "type": "string"
                },
                "Ringback-Media": {
                    "type": "string"
                },
                "Route-Error-Code": {
                    "type": "string"
                },
                "Route-Error-Message": {
                    "type": "string"
                },
                "Routes": {
                    "items": {
                        "$ref": "#/definitions/kapi.route.resp_route",
                        "type": "string"
                    },
                    "type": "array"
                },
                "Transfer-Media": {
                    "type": "string"
                }
            },
            "required": [
                "Method"
            ],
            "type": "object"
        },
        "kapi.route.resp_route": {
            "description": "AMQP API for route.resp_route",
            "properties": {
                "Auth-Password": {
                    "type": "string"
                },
                "Auth-User": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Type": {
                    "enum": [
                        "from",
                        "rpid",
                        "pid"
                    ],
                    "type": "string"
                },
                "Codecs": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "Context": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Invite-Format": {
                    "enum": [
                        "username",
                        "e164",
                        "npan",
                        "1npan",
                        "route",
                        "loopback",
                        "contact"
                    ],
                    "type": "string"
                },
                "Media": {
                    "enum": [
                        "process",
                        "bypass",
                        "auto"
                    ],
                    "type": "string"
                },
                "Progress-Timeout": {
                    "type": "integer"
                },
                "Proxy-Via": {
                    "type": "string"
                },
                "Rate": {
                    "type": "string"
                },
                "Rate-Increment": {
                    "type": "string"
                },
                "Rate-Minimum": {
                    "type": "string"
                },
                "Rate-NoCharge-Time": {
                    "type": "integer"
                },
                "Route": {
                    "type": "string"
                },
                "Surcharge": {
                    "type": "string"
                },
                "To-DID": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "Weight-Cost": {
                    "type": "string"
                },
                "Weight-Location": {
                    "type": "string"
                }
            },
            "required": [
                "Invite-Format"
            ],
            "type": "object"
        },
        "kapi.route.win": {
            "description": "AMQP API for route.win",
            "properties": {
                "Call-ID": {
                    "type": "string"
                },
                "Control-Queue": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Event-Category": {
                    "enum": [
                        "dialplan"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "route_win"
                    ],
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "Control-Queue"
            ],
            "type": "object"
        },
        "kapi.self.build": {
            "description": "AMQP API for self.build",
            "type": "object"
        },
        "kapi.sms.delivery": {
            "description": "AMQP API for sms.delivery",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Body": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Contact-IP": {
                    "type": "string"
                },
                "Contact-Port": {
                    "type": "string"
                },
                "Contact-Username": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Delivery-Failure": {
                    "type": "string"
                },
                "Delivery-Result-Code": {
                    "type": "string"
                },
                "Delivery-Result-Text": {
                    "type": "string"
                },
                "Error-Code": {
                    "type": "string"
                },
                "Error-Message": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "message"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "delivery"
                    ],
                    "type": "string"
                },
                "Event-Queue": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Network-Addr": {
                    "type": "string"
                },
                "Geo-Location": {
                    "type": "string"
                },
                "Message-ID": {
                    "type": "string"
                },
                "Orig-IP": {
                    "type": "string"
                },
                "Orig-Port": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-Nodename": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Call-ID",
                "Message-ID"
            ],
            "type": "object"
        },
        "kapi.sms.inbound": {
            "description": "AMQP API for sms.inbound",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Body": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Contact-IP": {
                    "type": "string"
                },
                "Contact-Port": {
                    "type": "string"
                },
                "Contact-Username": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Delivery-Failure": {
                    "type": "string"
                },
                "Delivery-Result-Code": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "message"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "inbound"
                    ],
                    "type": "string"
                },
                "Event-Queue": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Network-Addr": {
                    "type": "string"
                },
                "Geo-Location": {
                    "type": "string"
                },
                "Message-ID": {
                    "type": "string"
                },
                "Orig-IP": {
                    "type": "string"
                },
                "Orig-Port": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Route-ID": {
                    "type": "string"
                },
                "Route-Type": {
                    "enum": [
                        "onnet",
                        "offnet"
                    ],
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-Nodename": {
                    "type": "string"
                },
                "System-ID": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Body",
                "Callee-ID-Number",
                "Caller-ID-Number",
                "Message-ID",
                "Route-ID"
            ],
            "type": "object"
        },
        "kapi.sms.message": {
            "description": "AMQP API for sms.message",
            "properties": {
                "Application-Data": {
                    "type": "string"
                },
                "Application-Name": {
                    "enum": [
                        "send"
                    ],
                    "type": "string"
                },
                "Asserted-Identity-Name": {
                    "type": "string"
                },
                "Asserted-Identity-Number": {
                    "type": "string"
                },
                "Asserted-Identity-Realm": {
                    "type": "string"
                },
                "B-Leg-Events": {
                    "type": "string"
                },
                "Body": {
                    "type": "string"
                },
                "Bridge-Actions": {
                    "type": "object"
                },
                "Call-Context": {
                    "type": "string"
                },
                "Call-ID": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Confirm-Cancel-Timeout": {
                    "type": "integer"
                },
                "Confirm-File": {
                    "type": "string"
                },
                "Confirm-Key": {
                    "type": "string"
                },
                "Continue-After": {
                    "type": "string"
                },
                "Continue-On-Fail": {
                    "type": "boolean"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Dial-Endpoint-Method": {
                    "enum": [
                        "single",
                        "simultaneous"
                    ],
                    "type": "string"
                },
                "Enable-T38-Fax": {
                    "type": "string"
                },
                "Enable-T38-Fax-Request": {
                    "type": "string"
                },
                "Enable-T38-Gateway": {
                    "type": "string"
                },
                "Enable-T38-Passthrough": {
                    "type": "string"
                },
                "Endpoints": {
                    "items": {
                        "$ref": "#/definitions/kapi.dialplan.bridge_endpoint",
                        "type": "string"
                    },
                    "type": "array"
                },
                "Event-Category": {
                    "enum": [
                        "message"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "route"
                    ],
                    "type": "string"
                },
                "Export-Bridge-Variables": {
                    "type": "string"
                },
                "Export-Variables": {
                    "type": "string"
                },
                "Fail-On-Single-Reject": {
                    "type": "string"
                },
                "Force-Fax": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Realm": {
                    "type": "string"
                },
                "From-URI": {
                    "type": "string"
                },
                "From-User": {
                    "type": "string"
                },
                "Hold-Media": {
                    "type": "string"
                },
                "Ignore-Completed-Elsewhere": {
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "string"
                },
                "Ignore-Forward": {
                    "type": "string"
                },
                "Insert-At": {
                    "type": "string"
                },
                "Loopback-Bowout": {
                    "type": "string"
                },
                "Media": {
                    "type": "string"
                },
                "Message-ID": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Name": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Number": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Name": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Number": {
                    "type": "string"
                },
                "Privacy-Hide-Name": {
                    "type": "string"
                },
                "Privacy-Hide-Number": {
                    "type": "string"
                },
                "Privacy-Method": {
                    "type": "string"
                },
                "Ringback": {
                    "type": "string"
                },
                "Route-ID": {
                    "type": "string"
                },
                "Route-Type": {
                    "enum": [
                        "onnet",
                        "offnet"
                    ],
                    "type": "string"
                },
                "SIP-Headers": {
                    "type": "object"
                },
                "SIP-Invite-Parameters": {
                    "type": "string"
                },
                "SIP-Transport": {
                    "enum": [
                        "udp",
                        "tcp",
                        "tls"
                    ],
                    "type": "string"
                },
                "Secure-RTP": {
                    "type": "string"
                },
                "Simplify-Loopback": {
                    "type": "string"
                },
                "Timeout": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-URI": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                }
            },
            "required": [
                "Application-Name",
                "Body",
                "Call-ID",
                "Endpoints"
            ],
            "type": "object"
        },
        "kapi.sms.message_endpoint": {
            "description": "AMQP API for sms.message_endpoint",
            "properties": {
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Endpoint-Options": {
                    "type": "object"
                },
                "Endpoint-Type": {
                    "enum": [
                        "sip",
                        "xmpp",
                        "smpp",
                        "http",
                        "amqp"
                    ],
                    "type": "string"
                },
                "SIP-Headers": {
                    "type": "object"
                }
            },
            "type": "object"
        },
        "kapi.sms.message_endpoint_headers": {
            "description": "AMQP API for sms.message_endpoint_headers",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Auth-Password": {
                    "type": "string"
                },
                "Auth-Realm": {
                    "type": "string"
                },
                "Auth-User": {
                    "type": "string"
                },
                "Bypass-Media": {
                    "type": "string"
                },
                "Call-Context": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Codecs": {
                    "type": "string"
                },
                "Custom-Application-Vars": {
                    "type": "object"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Enable-T38-Fax": {
                    "type": "string"
                },
                "Enable-T38-Fax-Request": {
                    "type": "string"
                },
                "Enable-T38-Gateway": {
                    "type": "string"
                },
                "Enable-T38-Passthrough": {
                    "type": "string"
                },
                "Endpoint-Actions": {
                    "type": "string"
                },
                "Endpoint-Delay": {
                    "type": "string"
                },
                "Endpoint-ID": {
                    "type": "string"
                },
                "Endpoint-Options": {
                    "type": "string"
                },
                "Endpoint-Progress-Timeout": {
                    "type": "integer"
                },
                "Endpoint-Timeout": {
                    "type": "integer"
                },
                "Endpoint-Type": {
                    "type": "string"
                },
                "Endpoint-URI": {
                    "type": "string"
                },
                "Failover": {
                    "type": "string"
                },
                "Force-Fax": {
                    "type": "string"
                },
                "Forward-IP": {
                    "type": "string"
                },
                "Hold-Media": {
                    "type": "string"
                },
                "Ignore-Completed-Elsewhere": {
                    "type": "string"
                },
                "Ignore-Early-Media": {
                    "type": "string"
                },
                "Invite-Format": {
                    "type": "string"
                },
                "Loopback-Bowout": {
                    "type": "string"
                },
                "Outbound-Call-ID": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Name": {
                    "type": "string"
                },
                "Outbound-Callee-ID-Number": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Name": {
                    "type": "string"
                },
                "Outbound-Caller-ID-Number": {
                    "type": "string"
                },
                "Presence-ID": {
                    "type": "string"
                },
                "Privacy-Hide-Name": {
                    "type": "string"
                },
                "Privacy-Hide-Number": {
                    "type": "string"
                },
                "Privacy-Method": {
                    "type": "string"
                },
                "Proxy-IP": {
                    "type": "string"
                },
                "Proxy-Zone": {
                    "type": "string"
                },
                "Route": {
                    "type": "string"
                },
                "SIP-Interface": {
                    "type": "string"
                },
                "SIP-Invite-Parameters": {
                    "type": "string"
                },
                "SIP-Transport": {
                    "type": "string"
                },
                "Simplify-Loopback": {
                    "type": "string"
                },
                "To-DID": {
                    "type": "string"
                },
                "To-IP": {
                    "type": "string"
                },
                "To-Realm": {
                    "type": "string"
                },
                "To-URI": {
                    "type": "string"
                },
                "To-User": {
                    "type": "string"
                },
                "To-Username": {
                    "type": "string"
                }
            },
            "required": [
                "Invite-Format"
            ],
            "type": "object"
        },
        "kapi.sms.outbound": {
            "description": "AMQP API for sms.outbound",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Application-ID": {
                    "type": "string"
                },
                "Body": {
                    "type": "string"
                },
                "Callee-ID-Name": {
                    "type": "string"
                },
                "Callee-ID-Number": {
                    "type": "string"
                },
                "Caller-ID-Name": {
                    "type": "string"
                },
                "Caller-ID-Number": {
                    "type": "string"
                },
                "Contact": {
                    "type": "string"
                },
                "Contact-IP": {
                    "type": "string"
                },
                "Contact-Port": {
                    "type": "string"
                },
                "Contact-Username": {
                    "type": "string"
                },
                "Custom-Channel-Vars": {
                    "type": "object"
                },
                "Custom-SIP-Headers": {
                    "type": "object"
                },
                "Delivery-Failure": {
                    "type": "string"
                },
                "Delivery-Result-Code": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "message"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "outbound"
                    ],
                    "type": "string"
                },
                "Event-Queue": {
                    "type": "string"
                },
                "From": {
                    "type": "string"
                },
                "From-Network-Addr": {
                    "type": "string"
                },
                "Geo-Location": {
                    "type": "string"
                },
                "Message-ID": {
                    "type": "string"
                },
                "Orig-IP": {
                    "type": "string"
                },
                "Orig-Port": {
                    "type": "string"
                },
                "Originator-Flags": {
                    "type": "string"
                },
                "Originator-Properties": {
                    "type": "string"
                },
                "Request": {
                    "type": "string"
                },
                "Route-ID": {
                    "type": "string"
                },
                "Route-Type": {
                    "enum": [
                        "onnet",
                        "offnet"
                    ],
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Switch-Hostname": {
                    "type": "string"
                },
                "Switch-Nodename": {
                    "type": "string"
                },
                "System-ID": {
                    "type": "string"
                },
                "Target-Flags": {
                    "type": "string"
                },
                "Target-Properties": {
                    "type": "string"
                },
                "To": {
                    "type": "string"
                },
                "User-Agent": {
                    "type": "string"
                }
            },
            "required": [
                "Body",
                "Callee-ID-Number",
                "Caller-ID-Number",
                "Message-ID",
                "Route-ID"
            ],
            "type": "object"
        },
        "kapi.sms.resume": {
            "description": "AMQP API for sms.resume",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "message"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "resume"
                    ],
                    "type": "string"
                },
                "SMS-ID": {
                    "type": "string"
                }
            },
            "required": [
                "SMS-ID"
            ],
            "type": "object"
        },
        "kapi.switch.fs_command": {
            "description": "AMQP API for switch.fs_command",
            "properties": {
                "Args": {
                    "type": "string"
                },
                "Command": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "switch_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "command"
                    ],
                    "type": "string"
                },
                "FreeSWITCH-Node": {
                    "type": "string"
                }
            },
            "required": [
                "Args",
                "Command"
            ],
            "type": "object"
        },
        "kapi.switch.fs_reply": {
            "description": "AMQP API for switch.fs_reply",
            "properties": {
                "Command": {
                    "type": "string"
                },
                "Error": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "switch_event"
                    ],
                    "type": "string"
                },
                "Event-Data": {
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reply"
                    ],
                    "type": "string"
                },
                "FreeSWITCH-Node": {
                    "type": "string"
                },
                "Response": {
                    "type": "string"
                },
                "Result": {
                    "type": "string"
                }
            },
            "required": [
                "Command",
                "Result"
            ],
            "type": "object"
        },
        "kapi.switch.fs_xml_flush": {
            "description": "AMQP API for switch.fs_xml_flush",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "switch_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "fs_xml_flush"
                    ],
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Username"
            ],
            "type": "object"
        },
        "kapi.switch.notify": {
            "description": "AMQP API for switch.notify",
            "properties": {
                "Body": {
                    "type": "string"
                },
                "Content-Type": {
                    "type": "string"
                },
                "Event": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "switch_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "notify"
                    ],
                    "type": "string"
                },
                "Realm": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            },
            "required": [
                "Realm",
                "Username"
            ],
            "type": "object"
        },
        "kapi.switch.reload_acls": {
            "description": "AMQP API for switch.reload_acls",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "switch_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reload_acls"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.switch.reload_gateways": {
            "description": "AMQP API for switch.reload_gateways",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "switch_event"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reload_gateways"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.sysconf.flush_req": {
            "description": "AMQP API for sysconf.flush_req",
            "properties": {
                "Category": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "sysconf"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "flush_req"
                    ],
                    "type": "string"
                },
                "Key": {
                    "type": "string"
                },
                "Node": {
                    "type": "string"
                }
            },
            "required": [
                "Category"
            ],
            "type": "object"
        },
        "kapi.sysconf.get_req": {
            "description": "AMQP API for sysconf.get_req",
            "properties": {
                "Category": {
                    "type": "string"
                },
                "Default": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "sysconf"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "get_req"
                    ],
                    "type": "string"
                },
                "Key": {
                    "type": "string"
                },
                "Node": {
                    "type": "string"
                }
            },
            "required": [
                "Category",
                "Key"
            ],
            "type": "object"
        },
        "kapi.sysconf.get_resp": {
            "description": "AMQP API for sysconf.get_resp",
            "properties": {
                "Category": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "sysconf"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "get_resp"
                    ],
                    "type": "string"
                },
                "Key": {
                    "type": "string"
                },
                "Node": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            },
            "required": [
                "Category",
                "Key",
                "Value"
            ],
            "type": "object"
        },
        "kapi.sysconf.set_req": {
            "description": "AMQP API for sysconf.set_req",
            "properties": {
                "Category": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "sysconf"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "set_req"
                    ],
                    "type": "string"
                },
                "Key": {
                    "type": "string"
                },
                "Node": {
                    "type": "string"
                },
                "Node-Specific": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            },
            "required": [
                "Category",
                "Key",
                "Value"
            ],
            "type": "object"
        },
        "kapi.sysconf.set_resp": {
            "description": "AMQP API for sysconf.set_resp",
            "properties": {
                "Category": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "sysconf"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "set_resp"
                    ],
                    "type": "string"
                },
                "Key": {
                    "type": "string"
                },
                "Node": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            },
            "required": [
                "Category",
                "Key",
                "Value"
            ],
            "type": "object"
        },
        "kapi.tasks.lookup_req": {
            "description": "AMQP API for tasks.lookup_req",
            "properties": {
                "Action": {
                    "type": "string"
                },
                "Category": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "tasks"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "lookup_req"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.tasks.lookup_resp": {
            "description": "AMQP API for tasks.lookup_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "tasks"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "lookup_resp"
                    ],
                    "type": "string"
                },
                "Help": {
                    "type": "string"
                }
            },
            "required": [
                "Help"
            ],
            "type": "object"
        },
        "kapi.tasks.remove_req": {
            "description": "AMQP API for tasks.remove_req",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "tasks"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "remove_req"
                    ],
                    "type": "string"
                },
                "Task-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Task-ID"
            ],
            "type": "object"
        },
        "kapi.tasks.remove_resp": {
            "description": "AMQP API for tasks.remove_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "tasks"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "remove_resp"
                    ],
                    "type": "string"
                },
                "Reply": {
                    "type": "string"
                }
            },
            "required": [
                "Reply"
            ],
            "type": "object"
        },
        "kapi.tasks.start_req": {
            "description": "AMQP API for tasks.start_req",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "tasks"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "start_req"
                    ],
                    "type": "string"
                },
                "Task-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Task-ID"
            ],
            "type": "object"
        },
        "kapi.tasks.start_resp": {
            "description": "AMQP API for tasks.start_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "tasks"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "start_resp"
                    ],
                    "type": "string"
                },
                "Reply": {
                    "type": "string"
                }
            },
            "required": [
                "Reply"
            ],
            "type": "object"
        },
        "kapi.tasks.stop_req": {
            "description": "AMQP API for tasks.stop_req",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "tasks"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "stop_req"
                    ],
                    "type": "string"
                },
                "Task-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Task-ID"
            ],
            "type": "object"
        },
        "kapi.tasks.stop_resp": {
            "description": "AMQP API for tasks.stop_resp",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "tasks"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "stop_resp"
                    ],
                    "type": "string"
                },
                "Reply": {
                    "type": "string"
                }
            },
            "required": [
                "Reply"
            ],
            "type": "object"
        },
        "kapi.trusted.query": {
            "description": "AMQP API for trusted.query",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "trusted"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "query"
                    ],
                    "type": "string"
                },
                "Server-ID": {
                    "type": "string"
                }
            },
            "required": [
                "Server-ID"
            ],
            "type": "object"
        },
        "kapi.trusted.reload": {
            "description": "AMQP API for trusted.reload",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "trusted"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reload"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.trusted.reply": {
            "description": "AMQP API for trusted.reply",
            "properties": {
                "Event-Category": {
                    "enum": [
                        "trusted"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "reply"
                    ],
                    "type": "string"
                },
                "Trusted": {
                    "type": "string"
                }
            },
            "required": [
                "Trusted"
            ],
            "type": "object"
        },
        "kapi.websockets.get_req": {
            "description": "AMQP API for websockets.get_req",
            "properties": {
                "Account-ID": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "websockets"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "get_req"
                    ],
                    "type": "string"
                },
                "Socket-ID": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.websockets.get_resp": {
            "description": "AMQP API for websockets.get_resp",
            "properties": {
                "Data": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "websockets"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "get_resp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "kapi.websockets.module_req": {
            "description": "AMQP API for websockets.module_req",
            "properties": {
                "Action": {
                    "enum": [
                        "start",
                        "stop"
                    ],
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "websockets"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "module_req"
                    ],
                    "type": "string"
                },
                "Module": {
                    "type": "string"
                },
                "Persist": {
                    "type": "boolean"
                }
            },
            "required": [
                "Action",
                "Module"
            ],
            "type": "object"
        },
        "kapi.websockets.module_resp": {
            "description": "AMQP API for websockets.module_resp",
            "properties": {
                "Error": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "websockets"
                    ],
                    "type": "string"
                },
                "Event-Name": {
                    "enum": [
                        "module_resp"
                    ],
                    "type": "string"
                },
                "Persisted": {
                    "type": "boolean"
                },
                "Started": {
                    "type": "boolean"
                }
            },
            "required": [
                "Persisted",
                "Started"
            ],
            "type": "object"
        },
        "kapi.xmpp.event": {
            "description": "AMQP API for xmpp.event",
            "properties": {
                "Application-Data": {
                    "type": "string"
                },
                "Application-Event": {
                    "type": "string"
                },
                "Application-Name": {
                    "type": "string"
                },
                "Event-Category": {
                    "enum": [
                        "xmpp_event"
                    ],
                    "type": "string"
                },
                "JID": {
                    "type": "string"
                }
            },
            "required": [
                "JID"
            ],
            "type": "object"
        },
        "ledgers": {
            "description": "ledgers document",
            "properties": {
                "account": {
                    "description": "Account info",
                    "properties": {
                        "id": {
                            "description": "Account ID",
                            "type": "string"
                        },
                        "name": {
                            "description": "Account name",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "amount": {
                    "description": "Ledger amount, in currency amount",
                    "minimum": 1,
                    "type": "number"
                },
                "description": {
                    "description": "Useful description for ledger",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata for ledger document",
                    "type": "object"
                },
                "period": {
                    "description": "Period of ledger",
                    "properties": {
                        "end": {
                            "description": "Period end",
                            "type": "integer"
                        },
                        "start": {
                            "description": "Period start",
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "source": {
                    "description": "Origin of ledger",
                    "properties": {
                        "id": {
                            "description": "Source ID",
                            "type": "string"
                        },
                        "service": {
                            "description": "Source service",
                            "type": "string"
                        }
                    },
                    "required": [
                        "id",
                        "service"
                    ],
                    "type": "object"
                },
                "usage": {
                    "description": "Usage for ledger",
                    "properties": {
                        "quantity": {
                            "description": "Usage quantity",
                            "type": "integer"
                        },
                        "type": {
                            "description": "Usage type",
                            "type": "string"
                        },
                        "unit": {
                            "description": "Usage unit",
                            "type": "string"
                        }
                    },
                    "required": [
                        "quantity",
                        "type",
                        "unit"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "source",
                "usage"
            ],
            "type": "object"
        },
        "limits": {
            "description": "Limit an account's ability to place concurrent calls using flat rate trunks",
            "properties": {
                "allow_prepay": {
                    "default": true,
                    "description": "Determines if the account would like to allow per-minute calls if they have no available credit",
                    "type": "boolean"
                },
                "authz_resource_types": {
                    "default": [],
                    "description": "List of Resource-Types that will authorize the call; bypassing limit checks and billing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "burst_trunks": {
                    "description": "The number of two-way, flat-rate trunks used only if no other trunks are available",
                    "minimum": 0,
                    "type": "integer"
                },
                "calls": {
                    "description": "A hard limit for the total number calls",
                    "minimum": 0,
                    "type": "integer"
                },
                "inbound_trunks": {
                    "description": "The number of inbound, flat-rate trunks",
                    "minimum": 0,
                    "type": "integer"
                },
                "outbound_trunks": {
                    "description": "The number of outbound, flat-rate trunks",
                    "minimum": 0,
                    "type": "integer"
                },
                "resource_consuming_calls": {
                    "description": "A hard limit for the number of resource consuming calls",
                    "minimum": 0,
                    "type": "integer"
                },
                "twoway_trunks": {
                    "description": "The number of two-way, flat-rate trunks",
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "list_entries": {
            "description": "Schema for a match list entries",
            "properties": {
                "capture_group_key": {
                    "description": "The number which is used to select this entry, length should be same as `capture_group_length`",
                    "type": "string"
                },
                "capture_group_length": {
                    "description": "Length of the numbers in the list entries for which it used to select desire Caller ID",
                    "type": "integer"
                },
                "displayname": {
                    "description": "Display name",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "firstname": {
                    "description": "A friendly firstname",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "lastname": {
                    "description": "A friendly lastname",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "list_id": {
                    "description": "List id",
                    "type": "string"
                },
                "number": {
                    "description": "Phone number",
                    "type": "string"
                },
                "pattern": {
                    "description": "Match pattern",
                    "type": "string"
                },
                "profile": {
                    "$ref": "#/definitions/profile",
                    "default": {},
                    "description": "Profile data",
                    "type": "object"
                },
                "type": {
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "list_id"
            ],
            "type": "object"
        },
        "lists": {
            "description": "Schema for a match list",
            "properties": {
                "description": {
                    "description": "A friendly list description",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "name": {
                    "description": "A friendly match list name",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "org": {
                    "description": "Full legal name of the organization",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "mailbox_message": {
            "description": "Schema for mailbox message",
            "properties": {
                "call_id": {
                    "description": "The SIP call-id",
                    "type": "string"
                },
                "caller_id_name": {
                    "description": "The reported caller id name",
                    "maxLength": 35,
                    "type": "string"
                },
                "caller_id_number": {
                    "description": "The reported caller id number",
                    "maxLength": 35,
                    "type": "string"
                },
                "folder": {
                    "description": "The folder the message belongs to",
                    "enum": [
                        "deleted",
                        "saved",
                        "new"
                    ],
                    "type": "string"
                },
                "from": {
                    "description": "The SIP from header",
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                },
                "media_id": {
                    "description": "The ID of the message media object",
                    "maxLength": 39,
                    "minLength": 39,
                    "type": "string"
                },
                "timestamp": {
                    "description": "The UTC timestamp, in Gregorian seconds, that the message was left on",
                    "type": "integer"
                },
                "to": {
                    "description": "The SIP to header",
                    "type": "string"
                },
                "transcription": {
                    "description": "The transcription data object",
                    "properties": {
                        "result": {
                            "description": "The status of the transcription",
                            "enum": [
                                "success",
                                "error"
                            ],
                            "type": "string"
                        },
                        "text": {
                            "description": "The text of the transcription",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "media_id"
            ],
            "type": "object"
        },
        "media": {
            "description": "Schema for media",
            "properties": {
                "content_length": {
                    "description": "Length, in bytes, of the file",
                    "maximum": 11534336,
                    "minimum": 1,
                    "type": "integer"
                },
                "content_type": {
                    "description": "Used to override the automatic upload type",
                    "enum": [
                        "audio/mp3",
                        "audio/mpeg",
                        "audio/mpeg3",
                        "audio/x-wav",
                        "audio/wav",
                        "audio/ogg",
                        "video/x-flv",
                        "video/h264",
                        "video/mpeg",
                        "video/quicktime",
                        "video/mp4",
                        "video/webm"
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "A brief description of the media update, usually the original file name",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "language": {
                    "default": "en-us",
                    "description": "The language of the media file or text",
                    "type": "string"
                },
                "media_source": {
                    "default": "upload",
                    "description": "Defines the source of the media",
                    "enum": [
                        "recording",
                        "upload",
                        "tts"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "A friendly name for the media",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "prompt_id": {
                    "description": "The prompt this media file represents",
                    "type": "string"
                },
                "source_id": {
                    "description": "If the media was generated from a callflow module, this is ID of the properties",
                    "maxLength": 32,
                    "minLength": 32,
                    "type": "string"
                },
                "source_type": {
                    "description": "If the media was generated from a callflow module, this is the module name",
                    "type": "string"
                },
                "streamable": {
                    "default": true,
                    "description": "Determines if the media can be streamed",
                    "type": "boolean"
                },
                "tts": {
                    "default": {},
                    "description": "Text-to-speech options used to create audio files from text",
                    "properties": {
                        "text": {
                            "description": "The text to be converted into audio",
                            "minLength": 1,
                            "type": "string"
                        },
                        "voice": {
                            "default": "female/en-US",
                            "description": "The voice to be used during the conversion",
                            "enum": [
                                "female/en-US",
                                "male/en-US",
                                "female/en-CA",
                                "female/en-AU",
                                "female/en-GB",
                                "male/en-GB",
                                "female/es-US",
                                "male/es-US",
                                "female/us-US",
                                "female/zh-CN",
                                "male/zh-CN",
                                "female/zh-HK",
                                "female/zh-TW",
                                "female/ja-JP",
                                "male/ja-JP",
                                "female/ko-KR",
                                "male/ko-KR",
                                "female/da-DK",
                                "female/de-DE",
                                "male/de-DE",
                                "female/ca-ES",
                                "female/es-ES",
                                "male/es-ES",
                                "female/fi-FI",
                                "female/fr-CA",
                                "male/fr-CA",
                                "female/fr-FR",
                                "male/fr-FR",
                                "female/it-IT",
                                "male/it-IT",
                                "female/nb-NO",
                                "female/nl-NL",
                                "female/pl-PL",
                                "female/pt-BR",
                                "female/pt-PT",
                                "male/pt-PT",
                                "female/ru-RU",
                                "male/ru-RU",
                                "female/sv-SE",
                                "female/hu-HU",
                                "female/cs-CZ",
                                "female/tr-TR",
                                "male/tr-TR",
                                "male/ru-RU/Vladimir",
                                "female/ru-RU/Julia",
                                "female/ru-RU/Anna",
                                "female/ru-RU/Viktoria",
                                "male/ru-RU/Alexander",
                                "female/ru-RU/Maria",
                                "female/ru-RU/Lidia",
                                "es-ES-Standard-A",
                                "it-IT-Standard-A",
                                "ja-JP-Standard-A",
                                "ko-KR-Standard-A",
                                "pt-BR-Standard-A",
                                "tr-TR-Standard-A",
                                "sv-SE-Standard-A",
                                "nl-NL-Standard-A",
                                "en-US-Wavenet-D",
                                "de-DE-Wavenet-A",
                                "de-DE-Wavenet-B",
                                "de-DE-Wavenet-C",
                                "de-DE-Wavenet-D",
                                "en-AU-Wavenet-A",
                                "en-AU-Wavenet-B",
                                "en-AU-Wavenet-C",
                                "en-AU-Wavenet-D",
                                "en-GB-Wavenet-A",
                                "en-GB-Wavenet-B",
                                "en-GB-Wavenet-C",
                                "en-GB-Wavenet-D",
                                "en-US-Wavenet-A",
                                "en-US-Wavenet-B",
                                "en-US-Wavenet-C",
                                "en-US-Wavenet-E",
                                "en-US-Wavenet-F",
                                "fr-FR-Wavenet-A",
                                "fr-FR-Wavenet-B",
                                "fr-FR-Wavenet-C",
                                "fr-FR-Wavenet-D",
                                "it-IT-Wavenet-A",
                                "ja-JP-Wavenet-A",
                                "nl-NL-Wavenet-A",
                                "en-GB-Standard-A",
                                "en-GB-Standard-B",
                                "en-GB-Standard-C",
                                "en-GB-Standard-D",
                                "en-US-Standard-B",
                                "en-US-Standard-C",
                                "en-US-Standard-D",
                                "en-US-Standard-E",
                                "de-DE-Standard-A",
                                "de-DE-Standard-B",
                                "en-AU-Standard-A",
                                "en-AU-Standard-B",
                                "en-AU-Standard-C",
                                "en-AU-Standard-D",
                                "fr-CA-Standard-A",
                                "fr-CA-Standard-B",
                                "fr-CA-Standard-C",
                                "fr-CA-Standard-D",
                                "fr-FR-Standard-A",
                                "fr-FR-Standard-B",
                                "fr-FR-Standard-C",
                                "fr-FR-Standard-D"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "media_source",
                "name"
            ],
            "type": "object"
        },
        "menus": {
            "description": "Schema for a menus",
            "properties": {
                "allow_record_from_offnet": {
                    "default": false,
                    "description": "Determines if the record pin can be used by external calls",
                    "type": "boolean"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "hunt": {
                    "default": true,
                    "description": "Determines if the callers can dial internal extensions directly",
                    "type": "boolean"
                },
                "hunt_allow": {
                    "description": "A regular expression that an extension the caller dialed must match to be allowed to continue",
                    "maxLength": 256,
                    "minLength": 1,
                    "type": "string"
                },
                "hunt_deny": {
                    "description": "A regular expression that if matched does not allow the caller to dial directly",
                    "maxLength": 256,
                    "minLength": 1,
                    "type": "string"
                },
                "interdigit_timeout": {
                    "description": "The amount of time (in milliseconds) to wait for the caller to press the next digit after pressing a digit",
                    "maximum": 10000,
                    "minimum": 1,
                    "type": "integer"
                },
                "max_extension_length": {
                    "default": 4,
                    "description": "The maximum number of digits that can be collected",
                    "maximum": 6,
                    "minimum": 1,
                    "type": "integer"
                },
                "media": {
                    "default": {},
                    "description": "The media (prompt) parameters",
                    "properties": {
                        "exit_media": {
                            "description": "When a call is transferred from the menu after all retries exhausted this media can be played (prior to transfer if enabled)",
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "maxLength": 2048,
                                    "minLength": 3,
                                    "type": "string"
                                }
                            ]
                        },
                        "greeting": {
                            "description": "The ID of a media object that should be used as the menu greeting",
                            "maxLength": 2048,
                            "minLength": 3,
                            "type": "string"
                        },
                        "invalid_media": {
                            "description": "When the collected digits don't result in a match or hunt this media can be played",
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "maxLength": 2048,
                                    "minLength": 3,
                                    "type": "string"
                                }
                            ]
                        },
                        "transfer_media": {
                            "description": "When a call is transferred from the menu, either after all retries exhausted or a successful hunt, this media can be played",
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "maxLength": 2048,
                                    "minLength": 3,
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "description": "A friendly name for the menu",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "record_pin": {
                    "description": "The pin number used to record the menu prompt",
                    "maxLength": 6,
                    "minLength": 3,
                    "type": "string"
                },
                "retries": {
                    "default": 3,
                    "description": "The number of times a menu should be played until a valid entry is collected",
                    "maximum": 10,
                    "minimum": 1,
                    "type": "integer"
                },
                "suppress_media": {
                    "default": false,
                    "description": "Determines if the playing of 'Invalid Entry' is suppressed.",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "The amount of time (in milliseconds) to wait for the caller to begin entering digits",
                    "maximum": 60000,
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "metaflow": {
            "description": "A metaflow node defines a module to execute, data to provide to that module, and one or more children to branch to",
            "properties": {
                "children": {
                    "description": "Children metaflows",
                    "type": "object"
                },
                "data": {
                    "default": {},
                    "description": "The data/arguments of the metaflow module",
                    "type": "object"
                },
                "module": {
                    "description": "The name of the metaflow module to execute at this node",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "module"
            ],
            "type": "object"
        },
        "metaflows": {
            "description": "Actions applied to a call outside of the normal callflow, initiated by the caller(s)",
            "properties": {
                "binding_digit": {
                    "default": "*",
                    "description": "What DTMF will trigger the collection and analysis of the subsequent DTMF sequence",
                    "enum": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "0",
                        "*",
                        "#"
                    ],
                    "maxLength": 1,
                    "minLength": 1,
                    "type": "string"
                },
                "digit_timeout": {
                    "description": "How long to wait between DTMF presses before processing the collected sequence (milliseconds)",
                    "minimum": 0,
                    "type": "integer"
                },
                "listen_on": {
                    "description": "Which leg(s) of the call to listen for DTMF",
                    "enum": [
                        "both",
                        "self",
                        "peer"
                    ],
                    "type": "string"
                },
                "numbers": {
                    "additionalProperties": false,
                    "description": "A list of static numbers with their flows",
                    "type": "object"
                },
                "patterns": {
                    "additionalProperties": false,
                    "description": "A list of patterns with their flows",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "metaflows.audio_level": {
            "description": "Allow changing the volume on a channel (including mute/unmute)",
            "properties": {
                "action": {
                    "description": "Start or stop the audio adjustment",
                    "enum": [
                        "start",
                        "stop"
                    ],
                    "type": "string"
                },
                "level": {
                    "description": "Adjustment level for the audio",
                    "maximum": 4,
                    "minimum": -4,
                    "type": "integer"
                },
                "mode": {
                    "description": "What mode to use (depends on direction)",
                    "enum": [
                        "read",
                        "write"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "metaflows.break": {
            "description": "Break out of media being sent to a channel",
            "properties": {},
            "type": "object"
        },
        "metaflows.callflow": {
            "description": "Run a callflow on an active call",
            "properties": {
                "captures": {
                    "description": "Callflow extension",
                    "type": "string"
                },
                "collected": {
                    "description": "Callflow extension",
                    "type": "string"
                },
                "flow": {
                    "$ref": "#/definitions/callflows.action",
                    "description": "include the flow you'd like to run (Pivot without the HTTP interaction)",
                    "type": "object"
                },
                "id": {
                    "description": "The callflow ID to run",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "metaflows.hangup": {
            "description": "Hangup the call leg immediately",
            "properties": {},
            "type": "object"
        },
        "metaflows.hold": {
            "description": "Put the leg on hold",
            "properties": {
                "moh_aleg": {
                    "description": "MOH ID for the a-leg",
                    "type": "string"
                },
                "moh_bleg": {
                    "description": "MOH ID for the b-leg",
                    "type": "string"
                },
                "unhold_key": {
                    "default": "1",
                    "description": "DTMF to press to unhold the call",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "metaflows.hold_control": {
            "description": "Control the hold on a call",
            "properties": {
                "action": {
                    "default": "toggle",
                    "description": "How to manipulate the hold on the call",
                    "enum": [
                        "hold",
                        "unhold",
                        "toggle"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "metaflows.intercept": {
            "description": "Skeleton JSON schema",
            "properties": {
                "auto_answer": {
                    "default": false,
                    "description": "Auto-answer the leg",
                    "type": "boolean"
                },
                "can_call_self": {
                    "default": true,
                    "description": "Can intercept devices of the same targeted user",
                    "type": "boolean"
                },
                "target_id": {
                    "description": "ID of the target (device or user)",
                    "type": "string"
                },
                "target_type": {
                    "description": "Type of entity of the target",
                    "enum": [
                        "device",
                        "user",
                        "number"
                    ],
                    "type": "string"
                },
                "unbridged_only": {
                    "default": true,
                    "description": "Only intercept if the a-leg is unbridged",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "metaflows.move": {
            "description": "Move a call from one device to another",
            "properties": {
                "auto_answer": {
                    "default": false,
                    "description": "Whether to auto-answer the new leg",
                    "type": "boolean"
                },
                "can_call_self": {
                    "default": true,
                    "description": "Can intercept devices of the same targeted user",
                    "type": "boolean"
                },
                "device_id": {
                    "description": "Move the call to a specific device",
                    "type": "string"
                },
                "dial_strategy": {
                    "default": "simultaneous",
                    "description": "How to ring the endpoints, if multiple",
                    "type": "string"
                },
                "owner_id": {
                    "description": "User ID to use for finding endpoints",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "metaflows.pivot": {
            "description": "Validator for the Pivot metaflow element",
            "properties": {
                "cdr_url": {
                    "description": "Optional URL to send the CDR to at the end of the call",
                    "pattern": "^https?://",
                    "type": "string"
                },
                "debug": {
                    "default": false,
                    "description": "Store debug logs related to processing this Pivot call",
                    "type": "boolean"
                },
                "method": {
                    "default": "get",
                    "description": "What HTTP verb to send the request(s) with",
                    "enum": [
                        "get",
                        "post",
                        "GET",
                        "POST"
                    ],
                    "type": "string"
                },
                "req_format": {
                    "default": "kazoo",
                    "description": "What format of Pivot will the your server respond with",
                    "enum": [
                        "kazoo",
                        "twiml"
                    ],
                    "type": "string"
                },
                "voice_url": {
                    "description": "What URL to request the initial Pivot callflow",
                    "pattern": "^https?://",
                    "type": "string"
                }
            },
            "required": [
                "voice_url"
            ],
            "type": "object"
        },
        "metaflows.play": {
            "description": "Skeleton JSON schema",
            "properties": {
                "id": {
                    "description": "Media ID to play",
                    "type": "string"
                },
                "leg": {
                    "default": "both",
                    "description": "Leg to play the media to",
                    "enum": [
                        "self",
                        "peer",
                        "both"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "metaflows.record_call": {
            "description": "Start a call recording",
            "properties": {
                "action": {
                    "default": "toggle",
                    "description": "Whether to start/stop the recording",
                    "enum": [
                        "mask",
                        "unmask",
                        "start",
                        "stop",
                        "toggle"
                    ],
                    "type": "string"
                },
                "format": {
                    "description": "What format to store the recording",
                    "enum": [
                        "mp3",
                        "wav"
                    ],
                    "type": "string"
                },
                "label": {
                    "description": "Add a custom label to the recording",
                    "type": "string"
                },
                "media_name": {
                    "description": "Name of the recording file",
                    "type": "string"
                },
                "method": {
                    "description": "HTTP method if using an HTTP destination",
                    "enum": [
                        "put",
                        "post"
                    ],
                    "type": "string"
                },
                "origin": {
                    "description": "Track how the recording was started",
                    "type": "string"
                },
                "record_min_sec": {
                    "description": "Minimum number of seconds recorded to consider it a valid recording",
                    "type": "integer"
                },
                "record_on_answer": {
                    "default": false,
                    "description": "Whether to start recording when the leg is answered",
                    "type": "boolean"
                },
                "record_on_bridge": {
                    "default": false,
                    "description": "Whether to start recording when the leg is bridged",
                    "type": "boolean"
                },
                "record_sample_rate": {
                    "description": "Sampling rate for the recording",
                    "type": "integer"
                },
                "time_limit": {
                    "description": "How long to allow the recording, in seconds",
                    "type": "integer"
                },
                "url": {
                    "description": "HTTP URL to send the finished recording",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "metaflows.relate": {
            "description": "Relate two participants to each other in a conference",
            "properties": {
                "conference_id": {
                    "description": "The ID of the conference",
                    "type": "string"
                },
                "other_participant": {
                    "description": "The other participant ID to relate",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ]
                },
                "participant_id": {
                    "description": "The participant ID to relate",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ]
                },
                "relationship": {
                    "default": "clear",
                    "description": "The relationship to establish between the two participants",
                    "enum": [
                        "deaf",
                        "clear",
                        "mute"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "participant_id",
                "other_participant",
                "conference_id"
            ],
            "type": "object"
        },
        "metaflows.resume": {
            "description": "Reconnect the two legs of a call, if possible",
            "properties": {},
            "type": "object"
        },
        "metaflows.say": {
            "description": "Say the provided text",
            "properties": {
                "gender": {
                    "description": "The gender of the voice to say the text",
                    "enum": [
                        "feminine",
                        "masculine",
                        "neuter"
                    ],
                    "type": "string"
                },
                "language": {
                    "description": "Language of the text",
                    "type": "string"
                },
                "method": {
                    "description": "Toggle the way the text is read to the caller",
                    "enum": [
                        "pronounced",
                        "iterated",
                        "counted"
                    ],
                    "type": "string"
                },
                "text": {
                    "description": "The text to say to the caller",
                    "type": "string"
                },
                "type": {
                    "description": "The type of text to say",
                    "enum": [
                        "account_number",
                        "currency",
                        "current_date",
                        "current_date_time",
                        "current_time",
                        "email_address",
                        "ip_address",
                        "items",
                        "messages",
                        "name_phonetic",
                        "name_spelled",
                        "number",
                        "persons",
                        "postal_address",
                        "short_date_time",
                        "telephone_extension",
                        "telephone_number",
                        "time_measurement",
                        "url"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "metaflows.sound_touch": {
            "description": "Pitch-shift and other audio effects",
            "properties": {
                "action": {
                    "description": "Whether to start or stop touching the sound",
                    "enum": [
                        "start",
                        "stop"
                    ],
                    "type": "string"
                },
                "adjust_in_octaves": {
                    "default": 0,
                    "description": "Adjust the pitch in octaves",
                    "maximum": 1.0,
                    "minimum": -1.0,
                    "type": "number"
                },
                "adjust_in_semitones": {
                    "default": 0,
                    "description": "Adjust the pitch in semitones",
                    "maximum": 14.0,
                    "minimum": -14.0,
                    "type": "number"
                },
                "hook_dtmf": {
                    "default": false,
                    "description": "Enable DTMF control of audio modifications",
                    "type": "boolean"
                },
                "pitch": {
                    "default": 1.0,
                    "description": "Set the pitch directly (lower number = lower tone)",
                    "minimum": 1.0,
                    "type": "number"
                },
                "rate": {
                    "default": 1.0,
                    "description": "Set the rate directly",
                    "minimum": 1.0,
                    "type": "number"
                },
                "sending_leg": {
                    "default": false,
                    "description": "Apply the filter to the sending leg",
                    "type": "boolean"
                },
                "tempo": {
                    "default": 1.0,
                    "description": "Set the tempo directly",
                    "minimum": 1.0,
                    "type": "number"
                }
            },
            "type": "object"
        },
        "metaflows.transfer": {
            "description": "Perform a transfer",
            "properties": {
                "captures": {
                    "default": [
                        "no_match"
                    ],
                    "description": "Capture groups?",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "leg": {
                    "description": "Which leg to be the transfer leg",
                    "type": "string"
                },
                "target": {
                    "description": "The target extension/DID",
                    "type": "string"
                },
                "timeout": {
                    "description": "timeout to establish call",
                    "type": "integer"
                },
                "transfer_type": {
                    "default": "blind",
                    "description": "The type of transfer to perform",
                    "enum": [
                        "attended",
                        "blind"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "metaflows.tts": {
            "description": "Use the Text-to-speech engine to say the provided text",
            "properties": {
                "engine": {
                    "default": "flite",
                    "description": "What engine to use (system-dependant)",
                    "type": "string"
                },
                "language": {
                    "description": "What language is the text in",
                    "type": "string"
                },
                "leg": {
                    "default": "self",
                    "description": "What leg to say the text to",
                    "type": "string"
                },
                "terminators": {
                    "default": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "*",
                        "0",
                        "#"
                    ],
                    "description": "What DTMF can terminate the TTS playback",
                    "items": {
                        "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "*",
                            "0",
                            "#"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "text": {
                    "description": "What to say",
                    "type": "string"
                },
                "voice": {
                    "default": "female",
                    "description": "What voice to use when speaking",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "mms": {
            "description": "mms document",
            "properties": {
                "body": {
                    "description": "mime encoded mms message",
                    "minLength": 1,
                    "type": "string"
                },
                "from": {
                    "description": "caller-id-number, taken from user if absent",
                    "type": "string"
                },
                "to": {
                    "description": "callee-id-number",
                    "type": "string"
                }
            },
            "required": [
                "to"
            ],
            "type": "object"
        },
        "multi_factor_provider": {
            "description": "multi factor provider configuration",
            "properties": {
                "enabled": {
                    "description": "whether or not this configuration is enabled or not",
                    "type": "boolean"
                },
                "name": {
                    "description": "A friendly name for the configuration",
                    "type": "string"
                },
                "provider_name": {
                    "description": "multi factor provider name",
                    "type": "string"
                },
                "settings": {
                    "description": "provider configuration",
                    "type": "object"
                }
            },
            "required": [
                "enabled",
                "name",
                "provider_name"
            ],
            "type": "object"
        },
        "notifications": {
            "description": "Notifications templates",
            "properties": {
                "bcc": {
                    "description": "Bcc email field",
                    "properties": {
                        "email_addresses": {
                            "description": "BCC Email Addresses",
                            "items": {
                                "format": "email",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "type": {
                            "enum": [
                                "original",
                                "specified",
                                "admins"
                            ],
                            "maxLength": 253,
                            "minLength": 2,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "category": {
                    "description": "Category of the template, for grouping purposes",
                    "minLength": 1,
                    "type": "string"
                },
                "cc": {
                    "description": "CC email field",
                    "properties": {
                        "email_addresses": {
                            "description": "CC Email Addresses",
                            "items": {
                                "format": "email",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "type": {
                            "enum": [
                                "original",
                                "specified",
                                "admins"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "enabled": {
                    "default": true,
                    "description": "Enable notification",
                    "type": "boolean"
                },
                "friendly_name": {
                    "description": "Friendly name of the template",
                    "minLength": 1,
                    "type": "string"
                },
                "from": {
                    "description": "From: email address",
                    "format": "email",
                    "type": "string"
                },
                "macros": {
                    "default": {},
                    "properties": {},
                    "type": "object"
                },
                "reply_to": {
                    "description": "Reply-To: email address",
                    "format": "email",
                    "type": "string"
                },
                "subject": {
                    "description": "Email subject",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                },
                "template_charset": {
                    "default": "utf-8",
                    "minLength": 1,
                    "type": "string"
                },
                "to": {
                    "description": "To email field",
                    "properties": {
                        "email_addresses": {
                            "items": {
                                "format": "email",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "type": {
                            "enum": [
                                "original",
                                "specified",
                                "admins"
                            ],
                            "maxLength": 253,
                            "minLength": 2,
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "from",
                "subject",
                "to"
            ],
            "type": "object"
        },
        "notify.callback": {
            "description": "Schema for a callback options",
            "properties": {
                "attempts": {
                    "description": "How many attempts without answer will system do",
                    "type": "integer"
                },
                "disabled": {
                    "description": "Determines if the system will call to callback number",
                    "type": "boolean"
                },
                "interval_s": {
                    "description": "How long will system wait between call back notification attempts",
                    "type": "integer"
                },
                "number": {
                    "description": "Number for callback notifications about new messages",
                    "type": "string"
                },
                "schedule": {
                    "description": "Schedules interval between callbacks",
                    "items": {
                        "description": "callbacks interval",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "timeout_s": {
                    "description": "How long will system wait for answer to callback",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "phone_numbers": {
            "description": "Schema for a number",
            "properties": {
                "carrier_name": {
                    "maxLength": 30,
                    "minLength": 1,
                    "type": "string"
                },
                "cnam": {
                    "properties": {
                        "display_name": {
                            "maxLength": 15,
                            "minLength": 1,
                            "type": "string"
                        },
                        "inbound_lookup": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "create_with_state": {
                    "description": "The state to create numbers in",
                    "enum": [
                        "aging",
                        "available",
                        "deleted",
                        "discovery",
                        "in_service",
                        "port_in",
                        "port_out",
                        "released",
                        "reserved"
                    ],
                    "type": "string"
                },
                "e911": {
                    "properties": {
                        "activated_time": {
                            "description": "The time stamp e911 was provisioned",
                            "type": "string"
                        },
                        "caller_name": {
                            "description": "The name that will show to emergency services",
                            "minLength": 3,
                            "type": "string"
                        },
                        "extended_address": {
                            "description": "The suit/floor/apt. address where the number is in service",
                            "type": "string"
                        },
                        "latitude": {
                            "description": "The e911 provisioning system calculated service address latitude",
                            "type": "string"
                        },
                        "legacy_data": {
                            "description": "Legacy E911 information",
                            "properties": {
                                "house_number": {
                                    "description": "The name that will show to emergency services",
                                    "type": "string"
                                },
                                "predirectional": {
                                    "description": "The name that will show to emergency services",
                                    "type": "string"
                                },
                                "streetname": {
                                    "description": "The name that will show to emergency services",
                                    "type": "string"
                                },
                                "suite": {
                                    "description": "The name that will show to emergency services",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "locality": {
                            "description": "The locality (city) where the number is in service",
                            "type": "string"
                        },
                        "location_id": {
                            "description": "The e911 provisioning system internal id for this service address",
                            "type": "string"
                        },
                        "longitude": {
                            "description": "The e911 provisioning system calculated service address longitude",
                            "type": "string"
                        },
                        "plus_four": {
                            "description": "The extended zip/postal code where the number is in service",
                            "type": "string"
                        },
                        "postal_code": {
                            "description": "The zip/postal code where the number is in service",
                            "type": "string"
                        },
                        "region": {
                            "description": "The region (state) where the number is in service",
                            "maxLength": 2,
                            "minLength": 2,
                            "type": "string"
                        },
                        "status": {
                            "description": "The e911 provisioning system status for this service address",
                            "enum": [
                                "INVALID",
                                "GEOCODED",
                                "PROVISIONED",
                                "REMOVED",
                                "ERROR"
                            ],
                            "type": "string"
                        },
                        "street_address": {
                            "description": "The street address where the number is in service",
                            "type": "string"
                        }
                    },
                    "required": [
                        "locality",
                        "postal_code",
                        "region",
                        "street_address"
                    ],
                    "type": "object"
                },
                "porting": {
                    "description": "Porting (in) information for the phone number",
                    "properties": {
                        "billing_account_id": {
                            "description": "The account id the losing carrier has on file",
                            "type": "string"
                        },
                        "billing_extended_address": {
                            "description": "The suit/floor/apt. address the losing carrier has on file",
                            "type": "string"
                        },
                        "billing_locality": {
                            "description": "The locality (city) the losing carrier has on file",
                            "type": "string"
                        },
                        "billing_name": {
                            "description": "The name or company name the losing carrier has on file",
                            "type": "string"
                        },
                        "billing_postal_code": {
                            "description": "The zip/postal code the losing carrier has on file",
                            "type": "string"
                        },
                        "billing_region": {
                            "description": "The region (state) the losing carrier has on file",
                            "type": "string"
                        },
                        "billing_street_address": {
                            "description": "The street address the losing carrier has on file",
                            "type": "string"
                        },
                        "billing_telephone_number": {
                            "description": "The BTN of the account the number belongs to",
                            "type": "string"
                        },
                        "comments": {
                            "description": "An array of comments",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "customer_contact": {
                            "description": "The phone number that can be used to contact the owner of the number",
                            "type": "string"
                        },
                        "port_id": {
                            "description": "The id of the port request",
                            "type": "string"
                        },
                        "requested_port_date": {
                            "description": "The requested port date",
                            "type": "string"
                        },
                        "service_provider": {
                            "description": "The name of the losing carrier",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "port_requests": {
            "description": "Schema for a port request",
            "properties": {
                "bill": {
                    "description": "Billing information of the losing carrier",
                    "properties": {
                        "account_number": {
                            "description": "Account Number to identify account",
                            "type": "string"
                        },
                        "btn": {
                            "description": "Billing Telephone Number (BTN) to identify account",
                            "type": "string"
                        },
                        "carrier": {
                            "description": "The name of the losing carrier",
                            "type": "string"
                        },
                        "locality": {
                            "description": "The locality (city) of the billing address the losing carrier has on record",
                            "type": "string"
                        },
                        "name": {
                            "description": "The losing carrier billing/account name",
                            "type": "string"
                        },
                        "pin": {
                            "description": "Personal Identification Number (PIN) to identify account",
                            "type": "string"
                        },
                        "postal_code": {
                            "description": "The zip/postal code of the billing address the losing carrier has on record",
                            "type": "string"
                        },
                        "region": {
                            "description": "The region (state) of the billing address the losing carrier has on record",
                            "type": "string"
                        },
                        "street_address": {
                            "description": "The street name of the billing address the losing carrier has on record",
                            "type": "string"
                        },
                        "street_number": {
                            "description": "The street number of the billing address the losing carrier has on record",
                            "type": "string"
                        },
                        "street_post_dir": {
                            "description": "Street Post-Direction",
                            "type": "string"
                        },
                        "street_pre_dir": {
                            "description": "Street Pre-Direction",
                            "type": "string"
                        },
                        "street_type": {
                            "description": "The street type of the billing address the losing carrier has on record",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "comments": {
                    "description": "The history of comments made on a port request",
                    "items": {
                        "$ref": "#/definitions/comment"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "A friendly name for the port request",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "notifications": {
                    "description": "Status notifications",
                    "properties": {
                        "email": {
                            "description": "Inbound Email Notifications",
                            "properties": {
                                "send_to": {
                                    "description": "A list or string of email recipient(s)",
                                    "oneOf": [
                                        {
                                            "format": "email",
                                            "type": "string"
                                        },
                                        {
                                            "items": {
                                                "format": "email",
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "numbers": {
                    "description": "The numbers to port in",
                    "minProperties": 1,
                    "type": "object"
                },
                "reference_number": {
                    "description": "Winning carrier reference number or order ID",
                    "type": "string"
                },
                "signee_name": {
                    "description": "The name of the person authorizing the release of numbers from the losing carrier",
                    "type": "string"
                },
                "signing_date": {
                    "description": "The date in Gregorian timestamp on which the document releasing the numbers from the losing carrier was signed",
                    "type": "integer"
                },
                "transfer_date": {
                    "description": "Requested transfer date in Gregorian timestamp",
                    "type": "integer"
                },
                "winning_carrier": {
                    "description": "The name of winning carrier",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "numbers"
            ],
            "type": "object"
        },
        "port_requests.to_scheduled": {
            "anyOf": [
                {
                    "required": [
                        "scheduled_date"
                    ]
                },
                {
                    "required": [
                        "schedule_on"
                    ]
                }
            ],
            "description": "Schema for a port request to be transitioned to the 'scheduled' state",
            "properties": {
                "schedule_on": {
                    "description": "date-time at which to perform the porting",
                    "properties": {
                        "date_time": {
                            "pattern": "^2\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d$",
                            "type": "string"
                        },
                        "timezone": {
                            "enum": [
                                "Africa/Abidjan",
                                "Africa/Accra",
                                "Africa/Addis_Ababa",
                                "Africa/Algiers",
                                "Africa/Asmara",
                                "Africa/Asmera",
                                "Africa/Bamako",
                                "Africa/Bangui",
                                "Africa/Banjul",
                                "Africa/Bissau",
                                "Africa/Blantyre",
                                "Africa/Brazzaville",
                                "Africa/Bujumbura",
                                "Africa/Cairo",
                                "Africa/Casablanca",
                                "Africa/Ceuta",
                                "Africa/Conakry",
                                "Africa/Dakar",
                                "Africa/Dar_es_Salaam",
                                "Africa/Djibouti",
                                "Africa/Douala",
                                "Africa/El_Aaiun",
                                "Africa/Freetown",
                                "Africa/Gaborone",
                                "Africa/Harare",
                                "Africa/Johannesburg",
                                "Africa/Juba",
                                "Africa/Kampala",
                                "Africa/Khartoum",
                                "Africa/Kigali",
                                "Africa/Kinshasa",
                                "Africa/Lagos",
                                "Africa/Libreville",
                                "Africa/Lome",
                                "Africa/Luanda",
                                "Africa/Lubumbashi",
                                "Africa/Lusaka",
                                "Africa/Malabo",
                                "Africa/Maputo",
                                "Africa/Maseru",
                                "Africa/Mbabane",
                                "Africa/Mogadishu",
                                "Africa/Monrovia",
                                "Africa/Nairobi",
                                "Africa/Ndjamena",
                                "Africa/Niamey",
                                "Africa/Nouakchott",
                                "Africa/Ouagadougou",
                                "Africa/Porto-Novo",
                                "Africa/Sao_Tome",
                                "Africa/Timbuktu",
                                "Africa/Tripoli",
                                "Africa/Tunis",
                                "Africa/Windhoek",
                                "America/Adak",
                                "America/Anchorage",
                                "America/Anguilla",
                                "America/Antigua",
                                "America/Araguaina",
                                "America/Argentina/Buenos_Aires",
                                "America/Argentina/Catamarca",
                                "America/Argentina/ComodRivadavia",
                                "America/Argentina/Cordoba",
                                "America/Argentina/Jujuy",
                                "America/Argentina/La_Rioja",
                                "America/Argentina/Mendoza",
                                "America/Argentina/Rio_Gallegos",
                                "America/Argentina/Salta",
                                "America/Argentina/San_Juan",
                                "America/Argentina/San_Luis",
                                "America/Argentina/Tucuman",
                                "America/Argentina/Ushuaia",
                                "America/Aruba",
                                "America/Asuncion",
                                "America/Atikokan",
                                "America/Atka",
                                "America/Bahia",
                                "America/Bahia_Banderas",
                                "America/Barbados",
                                "America/Belem",
                                "America/Belize",
                                "America/Blanc-Sablon",
                                "America/Boa_Vista",
                                "America/Bogota",
                                "America/Boise",
                                "America/Buenos_Aires",
                                "America/Cambridge_Bay",
                                "America/Campo_Grande",
                                "America/Cancun",
                                "America/Caracas",
                                "America/Catamarca",
                                "America/Cayenne",
                                "America/Cayman",
                                "America/Chicago",
                                "America/Chihuahua",
                                "America/Coral_Harbour",
                                "America/Cordoba",
                                "America/Costa_Rica",
                                "America/Creston",
                                "America/Cuiaba",
                                "America/Curacao",
                                "America/Danmarkshavn",
                                "America/Dawson",
                                "America/Dawson_Creek",
                                "America/Denver",
                                "America/Detroit",
                                "America/Dominica",
                                "America/Edmonton",
                                "America/Eirunepe",
                                "America/El_Salvador",
                                "America/Ensenada",
                                "America/Fort_Wayne",
                                "America/Fortaleza",
                                "America/Glace_Bay",
                                "America/Godthab",
                                "America/Goose_Bay",
                                "America/Grand_Turk",
                                "America/Grenada",
                                "America/Guadeloupe",
                                "America/Guatemala",
                                "America/Guayaquil",
                                "America/Guyana",
                                "America/Halifax",
                                "America/Havana",
                                "America/Hermosillo",
                                "America/Indiana/Indianapolis",
                                "America/Indiana/Knox",
                                "America/Indiana/Marengo",
                                "America/Indiana/Petersburg",
                                "America/Indiana/Tell_City",
                                "America/Indiana/Vevay",
                                "America/Indiana/Vincennes",
                                "America/Indiana/Winamac",
                                "America/Indianapolis",
                                "America/Inuvik",
                                "America/Iqaluit",
                                "America/Jamaica",
                                "America/Jujuy",
                                "America/Juneau",
                                "America/Kentucky/Louisville",
                                "America/Kentucky/Monticello",
                                "America/Knox_IN",
                                "America/Kralendijk",
                                "America/La_Paz",
                                "America/Lima",
                                "America/Los_Angeles",
                                "America/Louisville",
                                "America/Lower_Princes",
                                "America/Maceio",
                                "America/Managua",
                                "America/Manaus",
                                "America/Marigot",
                                "America/Martinique",
                                "America/Matamoros",
                                "America/Mazatlan",
                                "America/Mendoza",
                                "America/Menominee",
                                "America/Merida",
                                "America/Metlakatla",
                                "America/Mexico_City",
                                "America/Miquelon",
                                "America/Moncton",
                                "America/Monterrey",
                                "America/Montevideo",
                                "America/Montreal",
                                "America/Montserrat",
                                "America/Nassau",
                                "America/New_York",
                                "America/Nipigon",
                                "America/Nome",
                                "America/Noronha",
                                "America/North_Dakota/Beulah",
                                "America/North_Dakota/Center",
                                "America/North_Dakota/New_Salem",
                                "America/Ojinaga",
                                "America/Panama",
                                "America/Pangnirtung",
                                "America/Paramaribo",
                                "America/Phoenix",
                                "America/Port-au-Prince",
                                "America/Port_of_Spain",
                                "America/Porto_Acre",
                                "America/Porto_Velho",
                                "America/Puerto_Rico",
                                "America/Rainy_River",
                                "America/Rankin_Inlet",
                                "America/Recife",
                                "America/Regina",
                                "America/Resolute",
                                "America/Rio_Branco",
                                "America/Rosario",
                                "America/Santa_Isabel",
                                "America/Santarem",
                                "America/Santiago",
                                "America/Santo_Domingo",
                                "America/Sao_Paulo",
                                "America/Scoresbysund",
                                "America/Shiprock",
                                "America/Sitka",
                                "America/St_Barthelemy",
                                "America/St_Johns",
                                "America/St_Kitts",
                                "America/St_Lucia",
                                "America/St_Thomas",
                                "America/St_Vincent",
                                "America/Swift_Current",
                                "America/Tegucigalpa",
                                "America/Thule",
                                "America/Thunder_Bay",
                                "America/Tijuana",
                                "America/Toronto",
                                "America/Tortola",
                                "America/Vancouver",
                                "America/Virgin",
                                "America/Whitehorse",
                                "America/Winnipeg",
                                "America/Yakutat",
                                "America/Yellowknife",
                                "Antarctica/Casey",
                                "Antarctica/Davis",
                                "Antarctica/DumontDUrville",
                                "Antarctica/Macquarie",
                                "Antarctica/Mawson",
                                "Antarctica/McMurdo",
                                "Antarctica/Palmer",
                                "Antarctica/Rothera",
                                "Antarctica/South_Pole",
                                "Antarctica/Syowa",
                                "Antarctica/Vostok",
                                "Arctic/Longyearbyen",
                                "Asia/Aden",
                                "Asia/Almaty",
                                "Asia/Amman",
                                "Asia/Anadyr",
                                "Asia/Aqtau",
                                "Asia/Aqtobe",
                                "Asia/Ashgabat",
                                "Asia/Ashkhabad",
                                "Asia/Baghdad",
                                "Asia/Bahrain",
                                "Asia/Baku",
                                "Asia/Bangkok",
                                "Asia/Beirut",
                                "Asia/Bishkek",
                                "Asia/Brunei",
                                "Asia/Calcutta",
                                "Asia/Choibalsan",
                                "Asia/Chongqing",
                                "Asia/Chungking",
                                "Asia/Colombo",
                                "Asia/Dacca",
                                "Asia/Damascus",
                                "Asia/Dhaka",
                                "Asia/Dili",
                                "Asia/Dubai",
                                "Asia/Dushanbe",
                                "Asia/Gaza",
                                "Asia/Harbin",
                                "Asia/Hebron",
                                "Asia/Ho_Chi_Minh",
                                "Asia/Hong_Kong",
                                "Asia/Hovd",
                                "Asia/Irkutsk",
                                "Asia/Istanbul",
                                "Asia/Jakarta",
                                "Asia/Jayapura",
                                "Asia/Jerusalem",
                                "Asia/Kabul",
                                "Asia/Kamchatka",
                                "Asia/Karachi",
                                "Asia/Kashgar",
                                "Asia/Kathmandu",
                                "Asia/Katmandu",
                                "Asia/Khandyga",
                                "Asia/Kolkata",
                                "Asia/Krasnoyarsk",
                                "Asia/Kuala_Lumpur",
                                "Asia/Kuching",
                                "Asia/Kuwait",
                                "Asia/Macao",
                                "Asia/Macau",
                                "Asia/Magadan",
                                "Asia/Makassar",
                                "Asia/Manila",
                                "Asia/Muscat",
                                "Asia/Nicosia",
                                "Asia/Novokuznetsk",
                                "Asia/Novosibirsk",
                                "Asia/Omsk",
                                "Asia/Oral",
                                "Asia/Phnom_Penh",
                                "Asia/Pontianak",
                                "Asia/Pyongyang",
                                "Asia/Qatar",
                                "Asia/Qyzylorda",
                                "Asia/Rangoon",
                                "Asia/Riyadh",
                                "Asia/Saigon",
                                "Asia/Sakhalin",
                                "Asia/Samarkand",
                                "Asia/Seoul",
                                "Asia/Shanghai",
                                "Asia/Singapore",
                                "Asia/Taipei",
                                "Asia/Tashkent",
                                "Asia/Tbilisi",
                                "Asia/Tehran",
                                "Asia/Tel_Aviv",
                                "Asia/Thimbu",
                                "Asia/Thimphu",
                                "Asia/Tokyo",
                                "Asia/Ujung_Pandang",
                                "Asia/Ulaanbaatar",
                                "Asia/Ulan_Bator",
                                "Asia/Urumqi",
                                "Asia/Ust-Nera",
                                "Asia/Vientiane",
                                "Asia/Vladivostok",
                                "Asia/Yakutsk",
                                "Asia/Yekaterinburg",
                                "Asia/Yerevan",
                                "Atlantic/Azores",
                                "Atlantic/Bermuda",
                                "Atlantic/Canary",
                                "Atlantic/Cape_Verde",
                                "Atlantic/Faeroe",
                                "Atlantic/Faroe",
                                "Atlantic/Jan_Mayen",
                                "Atlantic/Madeira",
                                "Atlantic/Reykjavik",
                                "Atlantic/South_Georgia",
                                "Atlantic/St_Helena",
                                "Atlantic/Stanley",
                                "Australia/ACT",
                                "Australia/Adelaide",
                                "Australia/Brisbane",
                                "Australia/Broken_Hill",
                                "Australia/Canberra",
                                "Australia/Currie",
                                "Australia/Darwin",
                                "Australia/Eucla",
                                "Australia/Hobart",
                                "Australia/LHI",
                                "Australia/Lindeman",
                                "Australia/Lord_Howe",
                                "Australia/Melbourne",
                                "Australia/NSW",
                                "Australia/North",
                                "Australia/Perth",
                                "Australia/Queensland",
                                "Australia/South",
                                "Australia/Sydney",
                                "Australia/Tasmania",
                                "Australia/Victoria",
                                "Australia/West",
                                "Australia/Yancowinna",
                                "Brazil/Acre",
                                "Brazil/DeNoronha",
                                "Brazil/East",
                                "Brazil/West",
                                "CET",
                                "CST6CDT",
                                "Canada/Atlantic",
                                "Canada/Central",
                                "Canada/East-Saskatchewan",
                                "Canada/Eastern",
                                "Canada/Mountain",
                                "Canada/Newfoundland",
                                "Canada/Pacific",
                                "Canada/Saskatchewan",
                                "Canada/Yukon",
                                "Chile/Continental",
                                "Chile/EasterIsland",
                                "Cuba",
                                "EET",
                                "EST",
                                "EST5EDT",
                                "Egypt",
                                "Eire",
                                "Etc/GMT",
                                "Etc/GMT+0",
                                "Etc/GMT+1",
                                "Etc/GMT+10",
                                "Etc/GMT+11",
                                "Etc/GMT+12",
                                "Etc/GMT+2",
                                "Etc/GMT+3",
                                "Etc/GMT+4",
                                "Etc/GMT+5",
                                "Etc/GMT+6",
                                "Etc/GMT+7",
                                "Etc/GMT+8",
                                "Etc/GMT+9",
                                "Etc/GMT-0",
                                "Etc/GMT-1",
                                "Etc/GMT-10",
                                "Etc/GMT-11",
                                "Etc/GMT-12",
                                "Etc/GMT-13",
                                "Etc/GMT-14",
                                "Etc/GMT-2",
                                "Etc/GMT-3",
                                "Etc/GMT-4",
                                "Etc/GMT-5",
                                "Etc/GMT-6",
                                "Etc/GMT-7",
                                "Etc/GMT-8",
                                "Etc/GMT-9",
                                "Etc/GMT0",
                                "Etc/Greenwich",
                                "Etc/UCT",
                                "Etc/UTC",
                                "Etc/Universal",
                                "Etc/Zulu",
                                "Europe/Amsterdam",
                                "Europe/Andorra",
                                "Europe/Athens",
                                "Europe/Belfast",
                                "Europe/Belgrade",
                                "Europe/Berlin",
                                "Europe/Bratislava",
                                "Europe/Brussels",
                                "Europe/Bucharest",
                                "Europe/Budapest",
                                "Europe/Busingen",
                                "Europe/Chisinau",
                                "Europe/Copenhagen",
                                "Europe/Dublin",
                                "Europe/Gibraltar",
                                "Europe/Guernsey",
                                "Europe/Helsinki",
                                "Europe/Isle_of_Man",
                                "Europe/Istanbul",
                                "Europe/Jersey",
                                "Europe/Kaliningrad",
                                "Europe/Kiev",
                                "Europe/Lisbon",
                                "Europe/Ljubljana",
                                "Europe/London",
                                "Europe/Luxembourg",
                                "Europe/Madrid",
                                "Europe/Malta",
                                "Europe/Mariehamn",
                                "Europe/Minsk",
                                "Europe/Monaco",
                                "Europe/Moscow",
                                "Europe/Nicosia",
                                "Europe/Oslo",
                                "Europe/Paris",
                                "Europe/Podgorica",
                                "Europe/Prague",
                                "Europe/Riga",
                                "Europe/Rome",
                                "Europe/Samara",
                                "Europe/San_Marino",
                                "Europe/Sarajevo",
                                "Europe/Simferopol",
                                "Europe/Skopje",
                                "Europe/Sofia",
                                "Europe/Stockholm",
                                "Europe/Tallinn",
                                "Europe/Tirane",
                                "Europe/Tiraspol",
                                "Europe/Uzhgorod",
                                "Europe/Vaduz",
                                "Europe/Vatican",
                                "Europe/Vienna",
                                "Europe/Vilnius",
                                "Europe/Volgograd",
                                "Europe/Warsaw",
                                "Europe/Zagreb",
                                "Europe/Zaporozhye",
                                "Europe/Zurich",
                                "GB",
                                "GB-Eire",
                                "GMT",
                                "GMT+0",
                                "GMT-0",
                                "GMT0",
                                "Greenwich",
                                "HST",
                                "Hongkong",
                                "Iceland",
                                "Indian/Antananarivo",
                                "Indian/Chagos",
                                "Indian/Christmas",
                                "Indian/Cocos",
                                "Indian/Comoro",
                                "Indian/Kerguelen",
                                "Indian/Mahe",
                                "Indian/Maldives",
                                "Indian/Mauritius",
                                "Indian/Mayotte",
                                "Indian/Reunion",
                                "Iran",
                                "Israel",
                                "Jamaica",
                                "Japan",
                                "Kwajalein",
                                "Libya",
                                "MET",
                                "MST",
                                "MST7MDT",
                                "Mexico/BajaNorte",
                                "Mexico/BajaSur",
                                "Mexico/General",
                                "NZ",
                                "NZ-CHAT",
                                "Navajo",
                                "PRC",
                                "PST8PDT",
                                "Pacific/Apia",
                                "Pacific/Auckland",
                                "Pacific/Chatham",
                                "Pacific/Chuuk",
                                "Pacific/Easter",
                                "Pacific/Efate",
                                "Pacific/Enderbury",
                                "Pacific/Fakaofo",
                                "Pacific/Fiji",
                                "Pacific/Funafuti",
                                "Pacific/Galapagos",
                                "Pacific/Gambier",
                                "Pacific/Guadalcanal",
                                "Pacific/Guam",
                                "Pacific/Honolulu",
                                "Pacific/Johnston",
                                "Pacific/Kiritimati",
                                "Pacific/Kosrae",
                                "Pacific/Kwajalein",
                                "Pacific/Majuro",
                                "Pacific/Marquesas",
                                "Pacific/Midway",
                                "Pacific/Nauru",
                                "Pacific/Niue",
                                "Pacific/Norfolk",
                                "Pacific/Noumea",
                                "Pacific/Pago_Pago",
                                "Pacific/Palau",
                                "Pacific/Pitcairn",
                                "Pacific/Pohnpei",
                                "Pacific/Ponape",
                                "Pacific/Port_Moresby",
                                "Pacific/Rarotonga",
                                "Pacific/Saipan",
                                "Pacific/Samoa",
                                "Pacific/Tahiti",
                                "Pacific/Tarawa",
                                "Pacific/Tongatapu",
                                "Pacific/Truk",
                                "Pacific/Wake",
                                "Pacific/Wallis",
                                "Pacific/Yap",
                                "Poland",
                                "Portugal",
                                "ROC",
                                "ROK",
                                "Singapore",
                                "Turkey",
                                "UCT",
                                "US/Alaska",
                                "US/Aleutian",
                                "US/Arizona",
                                "US/Central",
                                "US/East-Indiana",
                                "US/Eastern",
                                "US/Hawaii",
                                "US/Indiana-Starke",
                                "US/Michigan",
                                "US/Mountain",
                                "US/Pacific",
                                "US/Samoa",
                                "UTC",
                                "Universal",
                                "W-SU",
                                "WET",
                                "Zulu"
                            ]
                        }
                    },
                    "required": [
                        "timezone",
                        "date_time"
                    ],
                    "type": "object"
                },
                "scheduled_date": {
                    "description": "Gregorian timestamp at which to perform the porting",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "profile": {
            "description": "Defines user extended properties",
            "properties": {
                "addresses": {
                    "description": "To specify the components of the addresses",
                    "items": {
                        "properties": {
                            "address": {
                                "description": "To specify the address",
                                "type": "string"
                            },
                            "types": {
                                "description": "To specify types of the address",
                                "items": {
                                    "enum": [
                                        "dom",
                                        "postal",
                                        "intl",
                                        "parcel",
                                        "home",
                                        "work",
                                        "pref"
                                    ]
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "assistant": {
                    "description": "To specify the user's assistant",
                    "type": "string"
                },
                "birthday": {
                    "description": "To specify the birth date of the user",
                    "type": "string"
                },
                "nicknames": {
                    "description": "To specify the text corresponding to the nickname of the user",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "note": {
                    "description": "To specify supplemental information or a comment that is associated with the user",
                    "type": "string"
                },
                "role": {
                    "description": "To specify the function or part played in a particular situation by the user",
                    "type": "string"
                },
                "sort-string": {
                    "description": "To specify the family name or given name text to be used for national-language-specific sorting of the FN and N types",
                    "type": "string"
                },
                "title": {
                    "description": "To specify the position or job of the user",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "queue_update": {
            "description": "Schema for queue update request",
            "properties": {
                "action": {
                    "description": "Action to perform",
                    "enum": [
                        "login",
                        "logout"
                    ],
                    "type": "string"
                },
                "queue_id": {
                    "description": "Queue Identifier",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "action",
                "queue_id"
            ],
            "type": "object"
        },
        "queues": {
            "description": "Call Queues - FIFO call queues for serializing callers connecting to agents",
            "properties": {
                "agent_ring_timeout": {
                    "default": 15,
                    "description": "In seconds, how long to ring an agent before progressing to the next agent available",
                    "minimum": 1,
                    "type": "integer"
                },
                "agent_wrapup_time": {
                    "default": 0,
                    "description": "Pre-defined wait period applied after an agent handles a customer call",
                    "minimum": 0,
                    "type": "integer"
                },
                "announce": {
                    "description": "Media ID (or appropriate media URI) of media to play when caller is about to be connected.",
                    "type": "string"
                },
                "announcements": {
                    "description": "Configuration for periodic announcements to callers waiting in the queue",
                    "properties": {
                        "interval": {
                            "default": 30,
                            "description": "Time between announcements",
                            "minimum": 15,
                            "type": "integer"
                        },
                        "media": {
                            "description": "Custom prompts to be played for the announcements",
                            "properties": {
                                "in_the_queue": {
                                    "description": "Played after the numeric position",
                                    "type": "string"
                                },
                                "increase_in_call_volume": {
                                    "description": "Played if the estimated wait time has increased since the previous wait time announcement",
                                    "type": "string"
                                },
                                "the_estimated_wait_time_is": {
                                    "description": "Played before the estimated wait time media",
                                    "type": "string"
                                },
                                "you_are_at_position": {
                                    "description": "Played before the numeric position",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "in_the_queue",
                                "increase_in_call_volume",
                                "the_estimated_wait_time_is",
                                "you_are_at_position"
                            ],
                            "type": "object"
                        },
                        "position_announcements_enabled": {
                            "description": "Whether announcements of the caller's position in the queue should be played",
                            "type": "boolean"
                        },
                        "wait_time_announcements_enabled": {
                            "description": "Whether announcements of the estimated wait time in the queue should be played",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "caller_exit_key": {
                    "default": "#",
                    "description": "Key caller can press while on hold to exit the queue and continue in the callflow",
                    "enum": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "*",
                        "0",
                        "#"
                    ],
                    "type": "string"
                },
                "cdr_url": {
                    "description": "An optional HTTP URL to POST the CDR",
                    "format": "uri",
                    "type": "string"
                },
                "connection_timeout": {
                    "default": 3600,
                    "description": "In seconds, how long to try to connect the caller before progressing past the queue callflow action",
                    "minimum": 0,
                    "type": "integer"
                },
                "enter_when_empty": {
                    "default": true,
                    "description": "Allows a caller to enter a queue and wait when no agents are available",
                    "type": "boolean"
                },
                "max_priority": {
                    "description": "Maximum possible priority level queue will support. Can not be redefined for existing queue.",
                    "maximum": 255,
                    "minimum": 0,
                    "type": "integer"
                },
                "max_queue_size": {
                    "default": 0,
                    "description": "How many callers are allowed to wait on hold in the queue (0 for no limit)",
                    "type": "integer"
                },
                "moh": {
                    "description": "Media ID (or appropriate media URI) of media to play while caller is on hold.",
                    "type": "string"
                },
                "name": {
                    "description": "A friendly name for the queue",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "record_caller": {
                    "default": false,
                    "description": "When enabled, a caller's audio will be recorded",
                    "type": "boolean"
                },
                "recording_url": {
                    "description": "An optional HTTP URL to PUT the call recording after the call ends (and should respond to GET for retrieving the audio data)",
                    "format": "uri",
                    "type": "string"
                },
                "ring_simultaneously": {
                    "default": 1,
                    "description": "The number of agents to try in parallel when connecting a caller",
                    "minimum": 1,
                    "type": "integer"
                },
                "strategy": {
                    "default": "round_robin",
                    "description": "The queue strategy for connecting agents to callers",
                    "enum": [
                        "round_robin",
                        "most_idle"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "rates": {
            "description": "Defines a rate for a given prefix",
            "properties": {
                "account_id": {
                    "description": "Reseller's account ID",
                    "type": "string"
                },
                "caller_id_numbers": {
                    "description": "String of caller id prefixes separated by ':'",
                    "type": "string"
                },
                "carrier": {
                    "description": "Friendly name for the carrier providing this rate",
                    "type": "string"
                },
                "description": {
                    "description": "Friendly description of the rate",
                    "type": "string"
                },
                "direction": {
                    "description": "Apply this rate based on the direction of the call (relative to FreeSWITCH)",
                    "items": {
                        "enum": [
                            "inbound",
                            "outbound"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "internal_rate_cost": {
                    "description": "The per-min rate charged by the upstream provider",
                    "minimum": 0,
                    "type": "number"
                },
                "iso_country_code": {
                    "description": "Country code this rate applies to",
                    "type": "string"
                },
                "options": {
                    "description": "List of options this rate is good for, to be matched against a customer's options",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "prefix": {
                    "description": "E.164 prefix (ignoring the +)",
                    "type": "integer"
                },
                "rate_cost": {
                    "description": "The per-min rate charged to the downstream customer",
                    "minimum": 0,
                    "type": "number"
                },
                "rate_increment": {
                    "description": "The time slice, in seconds, to bill in.",
                    "minimum": 1,
                    "type": "integer"
                },
                "rate_minimum": {
                    "description": "The minimum time slice, in seconds to bill a call",
                    "minimum": 1,
                    "type": "integer"
                },
                "rate_name": {
                    "description": "Friendly name of the rate",
                    "type": "string"
                },
                "rate_nocharge_time": {
                    "description": "If the call duration is shorter than this threshold (seconds), the call is not billed",
                    "minimum": 0,
                    "type": "integer"
                },
                "rate_suffix": {
                    "description": "Suffix applied to rate name",
                    "type": "string"
                },
                "rate_surcharge": {
                    "description": "The upfront cost of connecting the call",
                    "minimum": 0,
                    "type": "number"
                },
                "rate_version": {
                    "description": "Rate version",
                    "type": "string"
                },
                "ratedeck_id": {
                    "description": "ID of the ratedeck this rate belongs to",
                    "type": "string"
                },
                "routes": {
                    "description": "List of regexps that match valid DIDs for this rate",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "weight": {
                    "description": "Ordering against other rates, 1 being most preferred, 100 being least preferred",
                    "maximum": 100,
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "required": [
                "prefix",
                "rate_cost"
            ],
            "type": "object"
        },
        "resource_jobs": {
            "description": "Schema for resource jobs (bulk number uploads)",
            "properties": {
                "name": {
                    "description": "A friendly name for the job, if you like",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "numbers": {
                    "description": "The listing of numbers to import to the account",
                    "items": {
                        "description": "The number to import",
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "resource_id": {
                    "description": "The Resource ID the numbers are coming from",
                    "type": "string"
                }
            },
            "required": [
                "numbers",
                "resource_id"
            ],
            "type": "object"
        },
        "resource_selectors": {
            "description": "Schema for resource selector document",
            "properties": {
                "name": {
                    "description": "Selector name",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource ID",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector data",
                    "type": "string"
                },
                "start_time": {
                    "description": "Start time (Gregorian seconds)",
                    "type": "integer"
                },
                "stop_time": {
                    "description": "Stop time (Gregorian seconds)",
                    "type": "integer"
                },
                "value": {
                    "description": "Extra selector data",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "resource",
                "selector"
            ],
            "type": "object"
        },
        "resource_selectors.rules": {
            "default": {},
            "description": "Schema for resource selector rules",
            "type": "object"
        },
        "resources": {
            "description": "Schema for resources",
            "properties": {
                "emergency": {
                    "default": false,
                    "description": "Determines if the resource represents emergency services",
                    "type": "boolean"
                },
                "enabled": {
                    "default": true,
                    "description": "Determines if the resource is currently enabled",
                    "type": "boolean"
                },
                "flags": {
                    "default": [],
                    "description": "A list of flags that can be provided on the request and must match for the resource to be eligible",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "flat_rate_blacklist": {
                    "description": "Regex for determining if a number should not be eligible for flat-rate trunking",
                    "type": "string"
                },
                "flat_rate_whitelist": {
                    "description": "Regex for determining if the number is eligible for flat-rate trunking",
                    "type": "string"
                },
                "format_from_uri": {
                    "description": "When set to true requests to this resource will have a reformatted SIP From Header",
                    "type": "boolean"
                },
                "formatters": {
                    "$ref": "#/definitions/formatters",
                    "type": "object"
                },
                "from_uri_realm": {
                    "description": "When formatting SIP From on outbound requests this can be used to override the realm",
                    "type": "string"
                },
                "gateways": {
                    "description": "A list of gateways available for this resource",
                    "items": {
                        "default": {},
                        "properties": {
                            "bypass_media": {
                                "description": "The resource gateway bypass media mode",
                                "type": "boolean"
                            },
                            "caller_id_type": {
                                "description": "The type of caller id to use",
                                "enum": [
                                    "internal",
                                    "external",
                                    "emergency"
                                ],
                                "type": "string"
                            },
                            "channel_selection": {
                                "default": "ascending",
                                "description": "Automatic selection of the channel within the span: ascending starts at 1 and moves up; descending is the opposite",
                                "enum": [
                                    "ascending",
                                    "descending"
                                ],
                                "type": "string"
                            },
                            "codecs": {
                                "description": "A list of single list codecs supported by this gateway (to support backward compatibility)",
                                "items": {
                                    "enum": [
                                        "G729",
                                        "PCMU",
                                        "PCMA",
                                        "G722_16",
                                        "G722_32",
                                        "CELT_48",
                                        "CELT_64",
                                        "Speex",
                                        "GSM",
                                        "OPUS",
                                        "H261",
                                        "H263",
                                        "H264",
                                        "VP8"
                                    ],
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "custom_sip_headers": {
                                "anyOf": [
                                    {
                                        "$ref": "custom_sip_headers"
                                    },
                                    {
                                        "properties": {
                                            "in": {
                                                "$ref": "custom_sip_headers",
                                                "description": "Custom SIP Headers to be applied to calls inbound to Kazoo from the endpoint"
                                            },
                                            "out": {
                                                "$ref": "custom_sip_headers",
                                                "description": "Custom SIP Headers to be applied to calls outbound from Kazoo to the endpoint"
                                            }
                                        }
                                    }
                                ],
                                "description": "A property list of SIP headers",
                                "type": "object"
                            },
                            "custom_sip_interface": {
                                "description": "The name of a custom SIP interface",
                                "type": "string"
                            },
                            "enabled": {
                                "default": true,
                                "description": "Determines if the resource gateway is currently enabled",
                                "type": "boolean"
                            },
                            "endpoint_type": {
                                "default": "sip",
                                "description": "What type of endpoint is this gateway",
                                "enum": [
                                    "sip",
                                    "freetdm",
                                    "skype",
                                    "amqp"
                                ],
                                "type": "string"
                            },
                            "force_port": {
                                "default": false,
                                "description": "Allow request only from this port",
                                "type": "boolean"
                            },
                            "format_from_uri": {
                                "description": "When set to true requests to this resource gateway will have a reformatted SIP From Header",
                                "type": "boolean"
                            },
                            "from_uri_realm": {
                                "description": "When formatting SIP From on outbound requests this can be used to override the realm",
                                "type": "string"
                            },
                            "invite_format": {
                                "default": "route",
                                "description": "The format of the DID needed by the underlying hardware/gateway",
                                "enum": [
                                    "route",
                                    "username",
                                    "e164",
                                    "npan",
                                    "1npan"
                                ],
                                "type": "string"
                            },
                            "invite_parameters": {
                                "additionalProperties": false,
                                "properties": {
                                    "dynamic": {
                                        "description": "A list of properties that, if found on the inbound call, should be added as an INVITE parameter",
                                        "items": {
                                            "oneOf": [
                                                {
                                                    "pattern": "custom_channel_vars\\..*",
                                                    "type": "string"
                                                },
                                                {
                                                    "pattern": "custom_sip_headers\\..*",
                                                    "type": "string"
                                                },
                                                {
                                                    "enum": [
                                                        "zone"
                                                    ],
                                                    "type": "string"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "key": {
                                                            "oneOf": [
                                                                {
                                                                    "pattern": "custom_channel_vars\\..*",
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "pattern": "custom_sip_headers\\..*",
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "enum": [
                                                                        "zone"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            ]
                                                        },
                                                        "separator": {
                                                            "type": "string"
                                                        },
                                                        "tag": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "key",
                                                        "tag"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    "static": {
                                        "description": "A list of static values that should be added as INVITE parameters",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "media": {
                                "description": "The media parameters for the resource gateway",
                                "properties": {
                                    "fax_option": {
                                        "description": "Is T.38 Supported?",
                                        "type": "boolean"
                                    },
                                    "rtcp_mux": {
                                        "description": "RTCP protocol messages mixed with RTP data",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "password": {
                                "description": "SIP authentication password",
                                "maxLength": 32,
                                "type": "string"
                            },
                            "port": {
                                "default": 5060,
                                "description": "This resource gateway port",
                                "type": "integer"
                            },
                            "prefix": {
                                "description": "A string to prepend to the dialed number or capture group of the matching rule",
                                "maxLength": 64,
                                "type": "string"
                            },
                            "progress_timeout": {
                                "description": "The progress timeout to apply to the resource gateway",
                                "type": "integer"
                            },
                            "realm": {
                                "description": "This resource gateway authentication realm",
                                "maxLength": 64,
                                "type": "string"
                            },
                            "route": {
                                "description": "A statically configured SIP URI to route all call to",
                                "type": "string"
                            },
                            "server": {
                                "description": "This resource gateway server",
                                "maxLength": 128,
                                "minLength": 1,
                                "type": "string"
                            },
                            "skype_interface": {
                                "description": "The name of the Skype interface to route the call over",
                                "type": "string"
                            },
                            "skype_rr": {
                                "default": true,
                                "description": "Determines whether to round-robin calls amongst all interfaces (overrides \"skype_interface\" setting)",
                                "type": "boolean"
                            },
                            "span": {
                                "description": "The identity of the hardware on the media server",
                                "type": "string"
                            },
                            "suffix": {
                                "description": "A string to append to the dialed number or capture group of the matching rule",
                                "maxLength": 64,
                                "type": "string"
                            },
                            "username": {
                                "description": "SIP authentication username",
                                "maxLength": 32,
                                "type": "string"
                            }
                        },
                        "required": [
                            "server"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "grace_period": {
                    "default": 5,
                    "description": "The amount of time, in seconds, to wait before starting another resource",
                    "maximum": 20,
                    "minimum": 1,
                    "type": "integer"
                },
                "ignore_flags": {
                    "description": "When set to true this resource is used if the rules/classifiers match regardless of flags",
                    "type": "boolean"
                },
                "media": {
                    "$ref": "#/definitions/endpoint.media",
                    "description": "Media options for resources"
                },
                "name": {
                    "description": "A friendly name for the resource",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "require_flags": {
                    "description": "When set to true this resource is ignored if the request does not specify outbound flags",
                    "type": "boolean"
                },
                "rules": {
                    "default": [],
                    "description": "A list of regular expressions of which one must match for the rule to be eligible, they can optionally contain capture groups",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "weight_cost": {
                    "default": 50,
                    "description": "A value between 0 and 100 that determines the order of resources when multiple can be used",
                    "maximum": 100,
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "required": [
                "gateways",
                "name"
            ],
            "type": "object"
        },
        "service_plan.item": {
            "description": "Describes a service plan item",
            "properties": {
                "activation_charge": {
                    "default": 0.0,
                    "description": "What to charge when activating an Item",
                    "type": "number"
                },
                "as": {
                    "description": "Count Item as if it was another Item",
                    "type": "string"
                },
                "cascade": {
                    "default": false,
                    "description": "Whether to count quantities among all sub-accounts or just the account",
                    "type": "boolean"
                },
                "discounts": {
                    "properties": {
                        "cumulative": {
                            "properties": {
                                "maximum": {
                                    "description": "The most number of Items to apply discount to",
                                    "type": "integer"
                                },
                                "rate": {
                                    "description": "The discount to apply, up to maximum Items (if applicable)",
                                    "type": "number"
                                },
                                "rates": {
                                    "description": "Takes precedence over rate, sets the discount based on the billable quantity",
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "single": {
                            "properties": {
                                "rate": {
                                    "description": "A single discount amount to apply if there are more than 0 units and no match in rates",
                                    "type": "number"
                                },
                                "rates": {
                                    "description": "Takes precedence over rate, sets the discount based on the billable quantity",
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "flat_rate": {
                    "default": 0.0,
                    "description": "Takes precedence over rates and rate, charges only the provided amount",
                    "type": "number"
                },
                "flat_rates": {
                    "default": {},
                    "description": "Takes precedence over flat_rate, rates and rate, charges only the provided amount",
                    "type": "object"
                },
                "markup_type": {
                    "description": "How rate for this usage is calculated",
                    "enum": [
                        "fixed_price",
                        "percentage",
                        "rate"
                    ],
                    "type": "string"
                },
                "maximum": {
                    "description": "The maximum quantity of items to bill for",
                    "type": "integer"
                },
                "minimum": {
                    "default": 0,
                    "description": "The minimum quantity of items to bill for",
                    "type": "integer"
                },
                "name": {
                    "description": "Friendly name for this Item",
                    "type": "string"
                },
                "prorate": {
                    "description": "Should this item be prorated",
                    "properties": {
                        "additions": {
                            "default": true,
                            "description": "Should this item be prorated during additions",
                            "type": "boolean"
                        },
                        "removals": {
                            "default": false,
                            "description": "Should this item be prorated during removals",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "rate": {
                    "default": 0.0,
                    "description": "Used if no flat_rates, flat_rate or rates apply, resulting charges is billable quantity multipled with rate",
                    "type": "number"
                },
                "rates": {
                    "default": {},
                    "description": "Takes precedence over rate, resulting charges is billable quantity multipled with tiered rate",
                    "type": "object"
                },
                "step": {
                    "default": 1,
                    "description": "Step size for quantity",
                    "type": "integer"
                },
                "taxes": {
                    "items": {
                        "properties": {
                            "name": {
                                "description": "The display name to use when generating invoices/reports",
                                "type": "string"
                            },
                            "rate": {
                                "description": "The tax rate as a percentage",
                                "type": "number"
                            },
                            "tax_id": {
                                "description": "The tax number/id (optional)",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "skels": {
            "description": "Skeleton JSON schema",
            "properties": {},
            "type": "object"
        },
        "sms": {
            "description": "sms document",
            "properties": {
                "body": {
                    "description": "text message",
                    "maxLength": 700,
                    "minLength": 1,
                    "type": "string"
                },
                "from": {
                    "description": "caller-id-number, taken from user if absent",
                    "type": "string"
                },
                "to": {
                    "description": "callee-id-number",
                    "type": "string"
                }
            },
            "required": [
                "body",
                "to"
            ],
            "type": "object"
        },
        "storage": {
            "properties": {
                "attachments": {
                    "$ref": "#/definitions/storage.attachments"
                },
                "connections": {
                    "$ref": "#/definitions/storage.connections"
                },
                "id": {
                    "description": "ID of the storage document",
                    "type": "string"
                },
                "plan": {
                    "$ref": "#/definitions/storage.plan"
                }
            },
            "type": "object"
        },
        "storage.attachment.aws": {
            "description": "schema for AWS attachment entry",
            "properties": {
                "handler": {
                    "description": "What AWS service to use",
                    "enum": [
                        "s3"
                    ],
                    "type": "string"
                },
                "settings": {
                    "description": "AWS API settings",
                    "properties": {
                        "bucket": {
                            "description": "Bucket name to store data to",
                            "maxLength": 63,
                            "minLength": 6,
                            "pattern": "^[^\\s]*$",
                            "type": "string"
                        },
                        "bucket_access_method": {
                            "description": "how to access the host.",
                            "enum": [
                                "auto",
                                "vhost",
                                "path"
                            ],
                            "type": "string"
                        },
                        "bucket_after_host": {
                            "description": "use bucket after host as part of url",
                            "type": "boolean"
                        },
                        "host": {
                            "description": "the s3 host, leave empty for default",
                            "minLength": 1,
                            "pattern": "^[^\\s]*$",
                            "type": "string"
                        },
                        "key": {
                            "description": "AWS Key to use",
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "^[^\\s]*$",
                            "type": "string"
                        },
                        "port": {
                            "description": "port to use",
                            "type": "integer"
                        },
                        "region": {
                            "description": "the region where the bucket is located",
                            "minLength": 1,
                            "pattern": "^[^\\s]*$",
                            "type": "string"
                        },
                        "scheme": {
                            "description": "scheme to use to access host",
                            "enum": [
                                "http",
                                "https"
                            ],
                            "type": "string"
                        },
                        "secret": {
                            "description": "AWS Secret to use",
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "^[^\\s]*$",
                            "type": "string"
                        }
                    },
                    "required": [
                        "bucket",
                        "key",
                        "secret"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "handler",
                "settings"
            ],
            "type": "object"
        },
        "storage.attachment.azure": {
            "description": "schema for azure attachment entry",
            "properties": {
                "handler": {
                    "description": "What handler module to use",
                    "enum": [
                        "azure"
                    ],
                    "type": "string"
                },
                "settings": {
                    "description": "Settings for the Azure account",
                    "properties": {
                        "account": {
                            "description": "the azure account name",
                            "type": "string"
                        },
                        "container": {
                            "description": "the azure container where the files should be saved",
                            "type": "string"
                        },
                        "key": {
                            "description": "the azure api key",
                            "type": "string"
                        }
                    },
                    "required": [
                        "account",
                        "container",
                        "key"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "handler",
                "settings"
            ],
            "type": "object"
        },
        "storage.attachment.dropbox": {
            "description": "schema for dropbox attachment entry",
            "properties": {
                "handler": {
                    "description": "What handler module to use",
                    "enum": [
                        "dropbox"
                    ],
                    "type": "string"
                },
                "settings": {
                    "description": "Settings for the Dropbox account",
                    "properties": {
                        "oauth_doc_id": {
                            "description": "Doc ID in the system 'auth' database",
                            "minLength": 1,
                            "patern": "^[^\\s]*$",
                            "type": "string"
                        }
                    },
                    "required": [
                        "oauth_doc_id"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "handler",
                "settings"
            ],
            "type": "object"
        },
        "storage.attachment.google_drive": {
            "description": "schema for google drive attachment entry",
            "properties": {
                "handler": {
                    "description": "What handler module to use",
                    "enum": [
                        "google_drive"
                    ],
                    "type": "string"
                },
                "settings": {
                    "description": "Settings for the Google Drive account",
                    "properties": {
                        "folder_id": {
                            "description": "Folder ID in which to store the file, if any",
                            "type": "string"
                        },
                        "oauth_doc_id": {
                            "description": "Doc ID in the system 'auth' database",
                            "minLength": 1,
                            "patern": "^[^\\s]*$",
                            "type": "string"
                        }
                    },
                    "required": [
                        "oauth_doc_id"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "handler",
                "settings"
            ],
            "type": "object"
        },
        "storage.attachment.google_storage": {
            "description": "schema for google storage attachment entry",
            "properties": {
                "handler": {
                    "description": "What handler module to use",
                    "enum": [
                        "google_storage"
                    ],
                    "type": "string"
                },
                "settings": {
                    "description": "Settings for the Google Storage account",
                    "oneOf": [
                        {
                            "properties": {
                                "oauth_app_id": {
                                    "description": "App ID in the system 'auth' database. the app doc should refer to a key obtained from google",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "oauth_app_id"
                            ]
                        },
                        {
                            "properties": {
                                "oauth_doc_id": {
                                    "description": "Doc ID in the system 'auth' database",
                                    "kazoo-validation": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "oauth_doc_id"
                            ]
                        }
                    ],
                    "type": "object"
                }
            },
            "required": [
                "handler",
                "settings"
            ],
            "type": "object"
        },
        "storage.attachment.http": {
            "description": "schema for HTTP(s) attachment entry",
            "properties": {
                "handler": {
                    "description": "The handler interface to use",
                    "enum": [
                        "http"
                    ],
                    "type": "string"
                },
                "settings": {
                    "description": "HTTP server settings",
                    "properties": {
                        "base64_encode_data": {
                            "default": false,
                            "description": "Toggles whether to base64-encode the attachment data",
                            "type": "boolean"
                        },
                        "send_multipart": {
                            "description": "Toggle whether to send multipart payload when storing attachment - will include metadata JSON if true",
                            "type": "boolean"
                        },
                        "url": {
                            "description": "The base HTTP(s) URL to use when creating the request",
                            "type": "string"
                        },
                        "verb": {
                            "default": "put",
                            "description": "The HTTP verb to use when sending the data",
                            "enum": [
                                "post",
                                "put"
                            ],
                            "type": "string"
                        }
                    },
                    "required": [
                        "url"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "handler",
                "settings"
            ],
            "type": "object"
        },
        "storage.attachment.onedrive": {
            "description": "schema for OneDrive attachment entry",
            "properties": {
                "handler": {
                    "description": "What handler module to use",
                    "enum": [
                        "onedrive"
                    ],
                    "type": "string"
                },
                "settings": {
                    "description": "Settings for the OneDrive account",
                    "properties": {
                        "oauth_doc_id": {
                            "description": "Doc ID in the system 'auth' database",
                            "minLength": 1,
                            "patern": "^[^\\s]*$",
                            "type": "string"
                        }
                    },
                    "required": [
                        "oauth_doc_id"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "handler",
                "settings"
            ],
            "type": "object"
        },
        "storage.attachments": {
            "description": "Defines where and how to store attachments. Keys are 32-character identifiers to be used in storage plans",
            "type": "object"
        },
        "storage.attachments.field": {
            "description": "field used when composing destination url",
            "oneOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "arg": {
                            "description": "an argument passed to the handler",
                            "enum": [
                                "account_id",
                                "db",
                                "id",
                                "attachment"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "const": {
                            "description": "a constant value added to the string",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "field": {
                            "description": "a field from the metadata document",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "group": {
                            "description": "group the inner fields definitions with an empty separator",
                            "items": {
                                "$ref": "storage.attachments.field"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "storage.connection.couchdb": {
            "description": "schema for CouchDB connection entry",
            "properties": {
                "driver": {
                    "enum": [
                        "kazoo_couch"
                    ]
                },
                "name": {
                    "type": "string"
                },
                "settings": {
                    "properties": {
                        "connect_options": {
                            "properties": {
                                "keepalive": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "connect_timeout": {
                            "type": "integer"
                        },
                        "credentials": {
                            "properties": {
                                "password": {
                                    "type": "integer"
                                },
                                "username": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "username",
                                "password"
                            ],
                            "type": "object"
                        },
                        "ip": {
                            "type": "string"
                        },
                        "max_pipeline_size": {
                            "type": "integer"
                        },
                        "max_sessions": {
                            "type": "integer"
                        },
                        "pool": {
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "size": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "name",
                                "size"
                            ],
                            "type": "object"
                        },
                        "port": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "ip",
                        "port"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "driver",
                "settings"
            ],
            "type": "object"
        },
        "storage.connections": {
            "description": "Describes alternative connections to use (such as alternative CouchDB instances",
            "type": "object"
        },
        "storage.plan": {
            "description": "Describes how to store documents depending on the database or document type",
            "properties": {
                "account": {
                    "$ref": "#/definitions/storage.plan.database"
                },
                "aggregate": {
                    "$ref": "#/definitions/storage.plan.database"
                },
                "modb": {
                    "$ref": "#/definitions/storage.plan.database"
                },
                "system": {
                    "$ref": "#/definitions/storage.plan.database"
                }
            },
            "type": "object"
        },
        "storage.plan.database": {
            "description": "schema for database storage plan",
            "properties": {
                "attachments": {
                    "$ref": "#/definitions/storage.plan.database.attachment",
                    "description": "Describes what attachment types to store using this plan"
                },
                "connection": {
                    "description": "Which connection UUID to use when storing to this database type",
                    "type": "string"
                },
                "database": {
                    "properties": {
                        "create_options": {
                            "type": "object"
                        },
                        "names": {
                            "description": "List of database names to match (non-matching names won't use this plan)",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "types": {
                    "description": "The document types to store with this plan",
                    "properties": {
                        "call_recording": {
                            "$ref": "#/definitions/storage.plan.database.document"
                        },
                        "fax": {
                            "$ref": "#/definitions/storage.plan.database.document"
                        },
                        "function": {
                            "$ref": "#/definitions/storage.plan.database.document"
                        },
                        "mailbox_message": {
                            "$ref": "#/definitions/storage.plan.database.document"
                        },
                        "media": {
                            "$ref": "#/definitions/storage.plan.database.document"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "storage.plan.database.attachment": {
            "description": "schema for attachment ref type storage plan",
            "properties": {
                "handler": {
                    "type": "string"
                },
                "params": {
                    "properties": {
                        "folder_path": {
                            "description": "folder path",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "stub": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "storage.plan.database.document": {
            "description": "schema for document type storage plan",
            "properties": {
                "attachments": {
                    "$ref": "#/definitions/storage.plan.database.attachment"
                },
                "connection": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.accounts": {
            "description": "Schema for accounts system_config",
            "properties": {
                "allow_subaccounts_for_direct": {
                    "default": true,
                    "description": "accounts allow subaccounts for direct",
                    "type": "boolean"
                },
                "default_timezone": {
                    "default": "America/Los_Angeles",
                    "description": "accounts default timezone",
                    "type": "string"
                },
                "master_account_id": {
                    "description": "accounts master account id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.acdc": {
            "description": "Schema for acdc system_config",
            "properties": {
                "agent_info_fields": {
                    "default": [
                        "first_name",
                        "last_name",
                        "username",
                        "email"
                    ],
                    "description": "acdc agent info fields",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "archive_period_ms": {
                    "default": 60000,
                    "description": "acdc archive period in milliseconds",
                    "type": "integer"
                },
                "archive_window_s": {
                    "default": 3600,
                    "description": "acdc archive window in seconds",
                    "type": "integer"
                },
                "cleanup_period_ms": {
                    "default": 360000,
                    "description": "acdc cleanup period in milliseconds",
                    "type": "integer"
                },
                "cleanup_window_s": {
                    "default": 86400,
                    "description": "acdc cleanup window in seconds",
                    "type": "integer"
                },
                "default_agent_pause_timeout": {
                    "default": 600,
                    "description": "acdc default agent pause timeout",
                    "type": "integer"
                },
                "max_connect_failures": {
                    "default": 3,
                    "description": "acdc maximum connect failures",
                    "type": "integer"
                },
                "max_result_set": {
                    "default": 25,
                    "description": "acdc maximum result set",
                    "type": "integer"
                },
                "queue_collect_resp_timeout": {
                    "default": 2000,
                    "description": "acdc queue collect resp timeout",
                    "type": "integer"
                },
                "queue_worker_count": {
                    "default": 5,
                    "description": "acdc queue worker count",
                    "type": "integer"
                },
                "stats_query_limits_enabled": {
                    "default": true,
                    "description": "When enabled, prevent stats queries with limits greater than max_result_set",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.alerts": {
            "description": "Schema for alerts system_config",
            "properties": {
                "enabled": {
                    "default": true,
                    "description": "alerts enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.ananke": {
            "description": "Schema for ananke system_config",
            "properties": {
                "schedules": {
                    "default": [],
                    "description": "ananke schedules",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "voicemail": {
                    "properties": {
                        "notify": {
                            "properties": {
                                "callback": {
                                    "properties": {
                                        "attempts": {
                                            "default": 5,
                                            "description": "ananke attempts",
                                            "type": "integer"
                                        },
                                        "interval_s": {
                                            "default": 300,
                                            "description": "ananke interval in seconds",
                                            "type": "integer"
                                        },
                                        "timeout_s": {
                                            "default": 20,
                                            "description": "ananke timeout in seconds",
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "type": "object"
        },
        "system_config.auth": {
            "description": "Schema for auth system_config",
            "properties": {
                "default_multi_factor_provider": {
                    "default": "duo",
                    "description": "Default multi factor authentication provider name",
                    "type": "string"
                },
                "secret_for_user_signature": {
                    "description": "auth secret for user signature",
                    "type": "string"
                },
                "system_key": {
                    "description": "auth system key",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.blackhole": {
            "description": "Schema for blackhole system_config",
            "properties": {
                "acceptors": {
                    "default": 100,
                    "description": "blackhole acceptors",
                    "type": "integer"
                },
                "autoload_modules": {
                    "default": [
                        "bh_token_auth",
                        "bh_call",
                        "bh_object",
                        "bh_fax",
                        "bh_conference",
                        "bh_events",
                        "bh_authz_subscribe",
                        "bh_presence"
                    ],
                    "description": "blackhole autoload modules",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "bindings": {
                    "description": "blackhole bindings",
                    "type": "object"
                },
                "compress_response_body": {
                    "default": true,
                    "description": "blackhole compress_response_body",
                    "type": "boolean"
                },
                "ip": {
                    "description": "blackhole ip",
                    "type": "string"
                },
                "port": {
                    "default": 5555,
                    "description": "blackhole port",
                    "type": "integer"
                },
                "request_timeout_ms": {
                    "default": 10000,
                    "description": "blackhole request_timeout_ms",
                    "type": "integer"
                },
                "ssl_ca_cert": {
                    "description": "blackhole ssl_ca_cert",
                    "type": "string"
                },
                "ssl_cert": {
                    "description": "blackhole ssl_cert",
                    "type": "string"
                },
                "ssl_key": {
                    "description": "blackhole ssl_key",
                    "type": "string"
                },
                "ssl_password": {
                    "default": "",
                    "description": "blackhole ssl_password",
                    "type": "string"
                },
                "ssl_port": {
                    "default": 5556,
                    "description": "blackhole ssl_port",
                    "type": "integer"
                },
                "ssl_workers": {
                    "default": 100,
                    "description": "blackhole ssl_workers",
                    "type": "integer"
                },
                "use_plaintext": {
                    "default": true,
                    "description": "blackhole use_plaintext",
                    "type": "boolean"
                },
                "use_ssl": {
                    "default": false,
                    "description": "blackhole use_ssl",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.braintree": {
            "description": "Schema for braintree system_config",
            "properties": {
                "client_token_version": {
                    "default": "2",
                    "description": "braintree client token version",
                    "type": "string"
                },
                "debug": {
                    "default": false,
                    "description": "braintree debug",
                    "type": "boolean"
                },
                "default_environment": {
                    "default": "",
                    "description": "braintree default environment",
                    "type": "string"
                },
                "default_merchant_id": {
                    "default": "",
                    "description": "braintree default merchant id",
                    "type": "string"
                },
                "default_private_key": {
                    "default": "",
                    "description": "braintree default private key",
                    "type": "string"
                },
                "default_public_key": {
                    "default": "",
                    "description": "braintree default public key",
                    "type": "string"
                },
                "max_amount": {
                    "default": 200,
                    "description": "braintree maximum amount",
                    "type": "number"
                },
                "min_amount": {
                    "default": 5,
                    "description": "braintree minimum amount",
                    "type": "number"
                },
                "should_prorate": {
                    "default": true,
                    "description": "braintree should prorate",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.call_command": {
            "description": "Schema for call_command system_config",
            "properties": {
                "application_timeout": {
                    "default": 500000,
                    "description": "call_command application timeout",
                    "type": "integer"
                },
                "bridge_timeout_extended_ms": {
                    "default": 20000,
                    "description": "call_command extended bridge timeout in ms",
                    "type": "integer"
                },
                "collect_timeout": {
                    "default": 5000,
                    "description": "call_command collect timeout",
                    "type": "integer"
                },
                "digit_timeout": {
                    "default": 3000,
                    "description": "call_command digit timeout",
                    "type": "integer"
                },
                "export_bridge_variables": {
                    "default": [
                        "hold_music"
                    ],
                    "description": "call_command export_bridge_variables",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "interdigit_timeout": {
                    "default": 2000,
                    "description": "call_command interdigit timeout",
                    "type": "integer"
                },
                "message_timeout": {
                    "default": 5000,
                    "description": "call_command message timeout",
                    "type": "integer"
                },
                "reserved_ccv_keys": {
                    "default": [
                        "Account-ID",
                        "Account-Name",
                        "Account-Realm",
                        "Authorizing-ID",
                        "Authorizing-Type",
                        "Auto-Answer",
                        "Call-Forward",
                        "Call-Waiting-Disabled",
                        "Confirm-Cancel-Timeout",
                        "Confirm-File",
                        "Confirm-Key",
                        "Fax-Enabled",
                        "Loopback-Bowout",
                        "Media-Encryption-Enforce-Security",
                        "Media-Webrtc",
                        "Owner-ID",
                        "Presence-ID",
                        "RTCP-MUX",
                        "Realm",
                        "Require-Ignore-Early-Media",
                        "Retain-CID",
                        "SIP-Invite-Domain",
                        "Simplify-Loopback",
                        "Username"
                    ],
                    "description": "call_command reserved_ccv_keys",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "unknown_cid_name": {
                    "default": "unknown",
                    "description": "the value to use when a caller ID name is required but unknown",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.call_inspector": {
            "description": "Schema for call_inspector system_config",
            "properties": {
                "startup_parsers": {
                    "default": {},
                    "description": "parser specifications. Will be started on app startup",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.callflow": {
            "description": "Schema for callflow system_config",
            "properties": {
                "allow_authz_context_overrides": {
                    "default": false,
                    "description": "callflow allow_authz_context_overrides",
                    "type": "boolean"
                },
                "authz_contexts": {
                    "default": [],
                    "description": "callflow authz_contexts",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "call_recording": {
                    "properties": {
                        "extension": {
                            "default": "mp3",
                            "description": "Default media file format for Callflow modules",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "callflow_event_listeners": {
                    "default": 5,
                    "description": "callflow callflow_event_listeners",
                    "type": "integer"
                },
                "callflow_listeners": {
                    "default": 5,
                    "description": "callflow callflow_listeners",
                    "type": "integer"
                },
                "calls_consume_tokens": {
                    "default": true,
                    "description": "callflow calls consume tokens",
                    "type": "boolean"
                },
                "default_pin_length": {
                    "default": 10,
                    "description": "callflow default pin length",
                    "type": "integer"
                },
                "default_use_account_caller_id": {
                    "default": true,
                    "description": "callflow default use account caller id",
                    "type": "boolean"
                },
                "dialog_subscribed_mwi_prefix": {
                    "description": "callflow dialog_subscribed_mwi_prefix",
                    "type": "string"
                },
                "ensure_valid_caller_id": {
                    "default": false,
                    "description": "callflow ensure valid caller id",
                    "type": "boolean"
                },
                "fax_detect_duration_s": {
                    "default": 5,
                    "description": "callflow fax detect duration in seconds",
                    "type": "integer"
                },
                "max_branch_count": {
                    "default": 50,
                    "description": "callflow maximum branch count",
                    "type": "integer"
                },
                "min_bucket_cost": {
                    "default": 5,
                    "description": "callflow minimum bucket cost",
                    "type": "integer"
                },
                "mwi_send_unsolicited_updates": {
                    "default": true,
                    "description": "callflow mwi send unsolicited updates",
                    "type": "boolean"
                },
                "operator_key": {
                    "default": "0",
                    "description": "callflow operator key",
                    "type": "string"
                },
                "pool_overflow": {
                    "default": 100,
                    "description": "callflow pool_overflow",
                    "type": "integer"
                },
                "pool_server_confirms": {
                    "default": false,
                    "description": "callflow pool_server_confirms",
                    "type": "boolean"
                },
                "pool_size": {
                    "default": 150,
                    "description": "callflow pool_size",
                    "type": "integer"
                },
                "pool_threshold": {
                    "default": 5,
                    "description": "callflow pool_threshold",
                    "type": "integer"
                },
                "post_answer_delay": {
                    "default": 100,
                    "description": "callflow post answer delay",
                    "type": "integer"
                },
                "ring_ready_offnet": {
                    "default": true,
                    "description": "callflow ring ready offnet",
                    "type": "boolean"
                },
                "route_win_timeout": {
                    "default": 3000,
                    "description": "callflow route win timeout",
                    "type": "integer"
                },
                "should_dry_run_token_restrictions": {
                    "default": false,
                    "description": "callflow should_dry_run_token_restrictions",
                    "type": "boolean"
                },
                "singular_call_hook_url": {
                    "default": "",
                    "description": "callflow singular call hook url",
                    "type": "string"
                },
                "vm_delete_amqp": {
                    "default": false,
                    "description": "callflow vm_delete_amqp",
                    "type": "boolean"
                },
                "voicemail": {
                    "properties": {
                        "delete_after_notify": {
                            "default": false,
                            "description": "callflow delete after notify",
                            "type": "boolean"
                        },
                        "extension": {
                            "default": "mp3",
                            "description": "Default media file format for Callflow modules",
                            "type": "string"
                        },
                        "force_require_pin": {
                            "default": false,
                            "description": "If true, ignore the setting on the vmbox and require all users to enter a pin",
                            "type": "boolean"
                        },
                        "is_voicemail_ff_rw_enabled": {
                            "default": false,
                            "description": "callflow allow fastforward and rewind during voicemail message playback",
                            "type": "boolean"
                        },
                        "max_box_number_length": {
                            "default": 15,
                            "description": "callflow maximum box number length",
                            "type": "integer"
                        },
                        "max_login_attempts": {
                            "default": 3,
                            "description": "callflow max login attempts",
                            "type": "integer"
                        },
                        "max_message_count": {
                            "default": 100,
                            "description": "callflow maximum message count",
                            "type": "integer"
                        },
                        "max_message_length": {
                            "default": 500,
                            "description": "callflow maximum message length",
                            "type": "integer"
                        },
                        "max_pin_length": {
                            "default": 6,
                            "description": "callflow maximum pin length",
                            "type": "integer"
                        },
                        "message_retention_duration": {
                            "default": 93,
                            "description": "Voicemail message retention duration in days",
                            "type": "integer"
                        },
                        "migrate_interaccount_delay_ms": {
                            "default": 2000,
                            "description": "callflow migrate interaccount delay in milliseconds",
                            "type": "integer"
                        },
                        "migrate_max_bulk_insert": {
                            "default": 2000,
                            "description": "callflow migrate maximum bulk insert",
                            "type": "integer"
                        },
                        "migrate_max_worker": {
                            "default": 10,
                            "description": "callflow migrate max worker",
                            "type": "integer"
                        },
                        "min_message_size": {
                            "default": 500,
                            "description": "callflow minimum message size",
                            "type": "integer"
                        },
                        "save_after_notify": {
                            "default": false,
                            "description": "callflow save after notify",
                            "type": "boolean"
                        },
                        "seek_duration_ms": {
                            "default": 10000,
                            "description": "callflow fastforward and rewind seek duration",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "vm_delete_amqp": {
                            "default": false,
                            "description": "send ampq message to notify about voicemail deletion",
                            "type": "boolean"
                        },
                        "vm_message_forward_type": {
                            "default": "only_forward",
                            "description": "Enable or disable the ability to prepend a message when forwarding a voicemail message",
                            "enum": [
                                "only_forward",
                                "prepend_forward"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.callflow.call_forward": {
            "description": "Schema for callflow.call_forward system_config",
            "properties": {
                "callfwd_number_timeout": {
                    "default": 8000,
                    "description": "callflow.call_forward callfwd number timeout",
                    "type": "integer"
                },
                "keys": {
                    "properties": {
                        "menu_change_number": {
                            "default": "2",
                            "description": "callflow.call_forward menu change number",
                            "type": "string"
                        },
                        "menu_toggle_option": {
                            "default": "1",
                            "description": "callflow.call_forward menu toggle option",
                            "type": "string"
                        }
                    }
                },
                "max_callfwd_number_length": {
                    "default": 20,
                    "description": "callflow.call_forward maximum callfwd number length",
                    "type": "integer"
                },
                "min_callfwd_number_length": {
                    "default": 3,
                    "description": "callflow.call_forward minimum callfwd number length",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.callflow.dynamic_cid": {
            "description": "Schema for callflow.dynamic_cid system_config",
            "properties": {
                "accept_prompt": {
                    "default": "tone_stream://%(250,50,440)",
                    "description": "The media that would be played when the new caller id is accepted",
                    "type": "string"
                },
                "default_prompt": {
                    "default": "dynamic-cid-enter_cid",
                    "description": "The media that would be played to user to dial the new caller id",
                    "type": "string"
                },
                "max_digits": {
                    "default": 10,
                    "description": "Maximum length of the new caller id number",
                    "type": "integer"
                },
                "min_digits": {
                    "default": 10,
                    "description": "Minimum length of the new caller id number",
                    "type": "integer"
                },
                "reject_prompt": {
                    "default": "dynamic-cid-invalid_using_default",
                    "description": "The media that would be played when the new caller id is rejected",
                    "type": "string"
                },
                "whitelist_regex": {
                    "default": "\\d+",
                    "description": "The regex to use for number to be matched against",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.callflow.hotdesk": {
            "description": "Schema for callflow.hotdesk system_config",
            "properties": {
                "max_hotdesk_id_length": {
                    "default": 10,
                    "description": "callflow.hotdesk maximum hotdesk id length",
                    "type": "integer"
                },
                "max_login_attempts": {
                    "default": 3,
                    "description": "callflow.hotdesk maximum login attempts",
                    "type": "integer"
                },
                "max_pin_length": {
                    "default": 6,
                    "description": "callflow.hotdesk maximum pin length",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.callflow.menu": {
            "description": "Schema for callflow.menu system_config",
            "properties": {
                "min_greeting_length": {
                    "default": 1500,
                    "description": "callflow.menu minimum greeting length",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.callflow.park": {
            "description": "Schema for callflow.park system_config",
            "properties": {
                "db_doc_name": {
                    "default": "parked_calls",
                    "description": "callflow.park db doc name",
                    "type": "string"
                },
                "default_callback_timeout": {
                    "default": 30000,
                    "description": "callflow.park default callback timeout",
                    "type": "integer"
                },
                "default_ringback_timeout": {
                    "default": 120000,
                    "description": "callflow.park default ringback timeout",
                    "type": "integer"
                },
                "parked_presence_type": {
                    "default": "early",
                    "description": "callflow.park parked presence type",
                    "type": "string"
                },
                "valet_reservation_cleanup_time_ms": {
                    "default": 3000,
                    "description": "callflow park valet_reservation_cleanup_time_ms",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.callflow.resources": {
            "description": "Schema for callflow.resources system_config",
            "properties": {
                "default_asserted_identity": {
                    "default": false,
                    "description": "When set to true, the asserted identity will have defaults and force the use of P-Asserted-Identity (instead of RPID) on all outbound offnet calls.  When set to false, P-Asserted-Identity is only used if explicitly set in the account/user/device hierarchy.",
                    "type": "boolean"
                },
                "default_emit_account_id": {
                    "default": false,
                    "description": "When set to true, all outbound offnet calls will include a SIP header X-Account-ID with a value of the Kazoo account UUID.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.camper": {
            "description": "Schema for camper system_config",
            "properties": {
                "stop_after": {
                    "default": 31,
                    "description": "camper stop after",
                    "type": "integer"
                },
                "timeout": {
                    "default": 15,
                    "description": "camper timeout",
                    "type": "integer"
                },
                "tries": {
                    "default": 10,
                    "description": "camper tries",
                    "type": "integer"
                },
                "try_interval": {
                    "default": 3,
                    "description": "camper try interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.cccp": {
            "description": "Schema for cccp system_config",
            "properties": {
                "allowed_callee_regex": {
                    "default": "^\\+?\\d{7,}$",
                    "description": "cccp allowed callee regex",
                    "type": "string"
                },
                "callback_delay": {
                    "default": 3,
                    "description": "cccp callback delay",
                    "type": "integer"
                },
                "cccp_cb_number": {
                    "description": "cccp cccp cb number",
                    "type": "string"
                },
                "cccp_cc_number": {
                    "description": "cccp cccp cc number",
                    "type": "string"
                },
                "last_number_redial_code": {
                    "default": "*0",
                    "description": "cccp last number redial code",
                    "type": "string"
                },
                "prompt_delay": {
                    "default": 1,
                    "description": "cccp prompt delay",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.cdr": {
            "description": "Schema for cdr system_config",
            "properties": {
                "ignore_apps": {
                    "default": [
                        "milliwatt"
                    ],
                    "description": "cdr ignore apps",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignore_loopback_bowout": {
                    "default": true,
                    "description": "cdr ignore loopback bowout",
                    "type": "boolean"
                },
                "refresh_view_enabled": {
                    "default": false,
                    "description": "enable or disable the view refresh feature",
                    "type": "boolean"
                },
                "refresh_view_threshold": {
                    "default": 10,
                    "description": "number of cdrs to trigger view refresh",
                    "type": "integer"
                },
                "refresh_view_timeout": {
                    "default": 900,
                    "description": "time in seconds to to trigger cdrs view refresh",
                    "type": "integer"
                },
                "store_anonymous": {
                    "default": false,
                    "description": "cdr store anonymous",
                    "type": "boolean"
                },
                "v3_migrate_num_months": {
                    "default": 4,
                    "description": "cdr v3 migrate num months",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.cluster": {
            "description": "Schema for cluster system_config",
            "properties": {
                "cluster_id": {
                    "description": "provisioner cluster id",
                    "type": "string"
                },
                "zones": {
                    "default": {},
                    "description": "cluster zones",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.cnam": {
            "description": "Schema for cnam system_config",
            "properties": {
                "cnam_expires": {
                    "default": 900,
                    "description": "cnam cnam_expires",
                    "type": "integer"
                },
                "disable_normalize": {
                    "default": false,
                    "description": "cnam disable_normalize",
                    "type": "boolean"
                },
                "http_accept_header": {
                    "default": "text/pbx,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                    "description": "cnam http_accept_header",
                    "type": "string"
                },
                "http_basic_auth_password": {
                    "default": "",
                    "description": "cnam http_basic_auth_password",
                    "type": "string"
                },
                "http_basic_auth_username": {
                    "default": "",
                    "description": "cnam http_basic_auth_username",
                    "type": "string"
                },
                "http_body": {
                    "default": "",
                    "description": "cnam http_body",
                    "type": "string"
                },
                "http_connect_timeout_ms": {
                    "default": 500,
                    "description": "cnam http_connect_timeout_ms",
                    "type": "integer"
                },
                "http_content_type_header": {
                    "default": "application/json",
                    "description": "cnam http_content_type_header",
                    "type": "string"
                },
                "http_method": {
                    "default": "get",
                    "description": "cnam http_method",
                    "type": "string"
                },
                "http_token_auth_token": {
                    "default": "",
                    "description": "cnam http_token_auth_token",
                    "type": "string"
                },
                "http_url": {
                    "default": "https://data.telnyx.com/cnam/v1/caller-information?tn={{phone_number}}",
                    "description": "cnam http_url",
                    "type": "string"
                },
                "http_user_agent_header": {
                    "default": "Kazoo CNAM",
                    "description": "cnam http_user_agent_header",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.conferences": {
            "description": "Schema for conferences system_config",
            "properties": {
                "bridge_password": {
                    "description": "conferences bridge password",
                    "type": "string"
                },
                "bridge_username": {
                    "description": "conferences bridge username",
                    "type": "string"
                },
                "controls": {
                    "properties": {
                        "default": {
                            "description": "conferences controls default",
                            "items": {
                                "properties": {
                                    "action": {
                                        "description": "what action to assign to the star-code",
                                        "type": "string"
                                    },
                                    "digits": {
                                        "description": "what digit sequence to bind the action to",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "page": {
                            "description": "conferences controls page",
                            "items": {
                                "properties": {
                                    "action": {
                                        "description": "what action to assign to the star-code",
                                        "type": "string"
                                    },
                                    "digits": {
                                        "description": "what digit sequence to bind the action to",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "entry_tone": {
                    "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,659);v=-7;>=3;+=.1;%(800,0,659,783)",
                    "description": "conferences entry tone",
                    "type": "string"
                },
                "exit_tone": {
                    "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,440);v=-7;>=3;+=.1;%(800,0,349,440)",
                    "description": "conferences exit tone",
                    "type": "string"
                },
                "moderator_entry_tone": {
                    "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,659);v=-7;>=3;+=.1;%(800,0,659,783)",
                    "description": "conferences moderator entry tone",
                    "type": "string"
                },
                "moderator_exit_tone": {
                    "default": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,440);v=-7;>=3;+=.1;%(800,0,349,440)",
                    "description": "conferences moderator exit tone",
                    "type": "string"
                },
                "number_timeout": {
                    "default": 5000,
                    "description": "conferences number timeout",
                    "type": "integer"
                },
                "participant_sanity_check_ms": {
                    "default": 60000,
                    "description": "conferences participant_sanity_check_ms",
                    "type": "integer"
                },
                "pin_timeout": {
                    "default": 5000,
                    "description": "conferences pin timeout",
                    "type": "integer"
                },
                "profiles": {
                    "default": {},
                    "properties": {
                        "default": {
                            "default": {
                                "alone-sound": "prompt://system_media/conf-alone/en-us",
                                "caller-controls": "default",
                                "comfort-noise": 1000,
                                "deaf-sound": "prompt://system_media/conf-deaf/en-us",
                                "energy-level": 20,
                                "enter-sound": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,659);v=-7;>=3;+=.1;%(800,0,659,783)",
                                "exit-sound": "tone_stream://v=-7;>=2;+=.1;%(300,0,523,440);v=-7;>=3;+=.1;%(800,0,349,440)",
                                "interval": 20,
                                "locked-sound": "prompt://system_media/conf-max_participants/en-us",
                                "max-members-sound": "prompt://system_media/conf-max_participants/en-us",
                                "member-enter-sound": "prompt://system_media/conf-joining_conference/en-us",
                                "moderator-controls": "default",
                                "moh-sound": "$${hold_music}",
                                "muted-sound": "prompt://system_media/conf-muted/en-us",
                                "rate": 16000,
                                "undeaf-sound": "prompt://system_media/conf-undeaf/en-us",
                                "unmuted-sound": "prompt://system_media/conf-unmuted/en-us"
                            },
                            "description": "conferences default",
                            "type": "object"
                        },
                        "page": {
                            "default": {
                                "caller-controls": "paging",
                                "comfort-noise": 1000,
                                "energy-level": 20,
                                "enter-sound": "silence_stream://1",
                                "exit-sound": "silence_stream://1",
                                "interval": 20,
                                "moh-sound": "silence_stream://1",
                                "rate": 8000
                            },
                            "description": "conferences page",
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "review_name": {
                    "default": false,
                    "description": "conferences review name",
                    "type": "boolean"
                },
                "route_win_timeout": {
                    "default": 3000,
                    "description": "conferences route win timeout",
                    "type": "integer"
                },
                "support_name_announcement": {
                    "default": true,
                    "description": "conferences support name announcement",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.crossbar": {
            "description": "Schema for crossbar system_config",
            "properties": {
                "allow_tracing": {
                    "default": false,
                    "description": "crossbar allow tracing",
                    "type": "boolean"
                },
                "api_auth_tokens": {
                    "default": 35,
                    "description": "crossbar api auth tokens",
                    "type": "integer"
                },
                "autoload_modules": {
                    "description": "crossbar autoload modules",
                    "items": {
                        "description": "name of the crossbar module to load",
                        "type": "string"
                    },
                    "type": "array"
                },
                "check_reverse_proxies": {
                    "default": true,
                    "description": "If request is proxied, should Crossbar check allowed reverse proxies",
                    "type": "boolean"
                },
                "compress_response_body": {
                    "default": true,
                    "description": "crossbar compress response body",
                    "type": "boolean"
                },
                "default_allow_anonymous_quickcalls": {
                    "default": true,
                    "description": "crossbar default allow anonymous quickcalls",
                    "type": "boolean"
                },
                "default_language": {
                    "default": "en-US",
                    "description": "crossbar default language",
                    "type": "string"
                },
                "ensure_valid_schema": {
                    "default": true,
                    "description": "crossbar ensure valid schema",
                    "type": "boolean"
                },
                "idle_timeout_ms": {
                    "default": 120000,
                    "description": "timeout (in milliseconds) when no data is being sent",
                    "type": "integer"
                },
                "ip": {
                    "description": "crossbar ip",
                    "type": "string"
                },
                "load_view_chunk_size": {
                    "default": 50,
                    "description": "crossbar load_view_chunk_size",
                    "minimum": 1,
                    "type": "integer"
                },
                "magic_path_patterns": {
                    "default": [
                        "/:version/accounts/:account_id/vmboxes/:box_id/messages/:message_id/raw",
                        "/:version/accounts/:account_id/faxes/:direction/:fax_id/attachment",
                        "/:version/accounts/:account_id/presence/:reportid"
                    ],
                    "description": "crossbar magic path patterns",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "max_upload_size": {
                    "default": 8000000,
                    "description": "crossbar maximum upload size",
                    "type": "integer"
                },
                "maximum_chunk_size": {
                    "default": 50,
                    "description": "crossbar maximum_chunk_size",
                    "minimum": 1,
                    "type": "integer"
                },
                "maximum_range": {
                    "default": 2682000,
                    "description": "crossbar maximum range",
                    "minimum": 1,
                    "type": "integer"
                },
                "pagination_page_size": {
                    "default": 50,
                    "description": "crossbar pagination page size",
                    "minimum": 1,
                    "type": "integer"
                },
                "port": {
                    "default": 8000,
                    "description": "crossbar port",
                    "type": "integer"
                },
                "pretty_metrics": {
                    "default": true,
                    "description": "crossbar pretty metrics",
                    "type": "boolean"
                },
                "refresh_app_keys": {
                    "default": [
                        "name",
                        "i18n",
                        "tags",
                        "author",
                        "version",
                        "license",
                        "price",
                        "icon",
                        "screenshots",
                        "api_url",
                        "phase"
                    ],
                    "description": "crossbar refresh_app_keys",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "request_memory_limit": {
                    "description": "Limit the amount of memory an API request can consume (in bytes)",
                    "type": "integer"
                },
                "request_timeout_ms": {
                    "default": 10000,
                    "description": "crossbar request timeout in milliseconds",
                    "type": "integer"
                },
                "reset_id_size": {
                    "default": 137,
                    "description": "crossbar reset id size",
                    "type": "integer"
                },
                "reverse_proxies": {
                    "default": [
                        "127.0.0.1"
                    ],
                    "description": "crossbar reverse proxies",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "schema_strict_validation": {
                    "default": false,
                    "description": "crossbar schema strict validation",
                    "type": "boolean"
                },
                "ssl_ca_cert": {
                    "description": "crossbar ssl ca cert",
                    "type": "string"
                },
                "ssl_cert": {
                    "description": "crossbar ssl cert",
                    "type": "string"
                },
                "ssl_key": {
                    "description": "crossbar ssl key",
                    "type": "string"
                },
                "ssl_password": {
                    "default": "",
                    "description": "crossbar ssl password",
                    "type": "string"
                },
                "ssl_port": {
                    "default": 8443,
                    "description": "crossbar ssl port",
                    "type": "integer"
                },
                "ssl_workers": {
                    "default": 100,
                    "description": "crossbar ssl workers",
                    "type": "integer"
                },
                "stability_level": {
                    "description": "crossbar stability_level",
                    "enum": [
                        "alpha",
                        "beta",
                        "stable"
                    ],
                    "type": "string"
                },
                "token_costs": {
                    "default": 1,
                    "description": "crossbar token costs",
                    "type": "integer"
                },
                "trace_path": {
                    "default": "/tmp",
                    "description": "crossbar trace path",
                    "type": "string"
                },
                "use_plaintext": {
                    "default": true,
                    "description": "crossbar use plaintext",
                    "type": "boolean"
                },
                "use_ssl": {
                    "default": false,
                    "description": "crossbar use ssl",
                    "type": "boolean"
                },
                "user_auth_tokens": {
                    "default": 35,
                    "description": "crossbar user auth tokens",
                    "type": "integer"
                },
                "workers": {
                    "default": 100,
                    "description": "crossbar workers",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.accounts": {
            "description": "Schema for crossbar.accounts system_config",
            "properties": {
                "account_realm_suffix": {
                    "default": "sip.2600hz.com",
                    "description": "crossbar.accounts account realm suffix",
                    "type": "string"
                },
                "allow_move": {
                    "default": "superduper_admin",
                    "description": "crossbar.accounts allow move",
                    "type": "string"
                },
                "allow_sibling_listing": {
                    "default": true,
                    "description": "crossbar.accounts allow sibling listing",
                    "type": "boolean"
                },
                "default_parent": {
                    "default": "",
                    "description": "crossbar.accounts default parent",
                    "type": "string"
                },
                "ensure_unique_name": {
                    "default": true,
                    "description": "crossbar.accounts ensure unique name",
                    "type": "boolean"
                },
                "expose_api_key": {
                    "default": false,
                    "description": "crossbar.accounts expose api key",
                    "type": "boolean"
                },
                "new_account_notify_delay_s": {
                    "default": 30,
                    "description": "crossbar.accounts new account notify delay in seconds",
                    "type": "integer"
                },
                "random_realm_strength": {
                    "default": 3,
                    "description": "crossbar.accounts random realm strength",
                    "type": "integer"
                },
                "trial_time": {
                    "default": 1209600,
                    "description": "crossbar.accounts trial time",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.acdc_call_stats": {
            "description": "Schema for crossbar.acdc_call_stats system_config",
            "properties": {
                "maximum_bulk": {
                    "default": 50,
                    "description": "The maximum number of call stats to load in a request",
                    "minimum": 1,
                    "type": "integer"
                },
                "maximum_range": {
                    "default": 2682000,
                    "description": "The maximum number of seconds between the start and end time of a call stats request",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.alerts": {
            "description": "Schema for crossbar.alerts system_config",
            "properties": {
                "check_financials": {
                    "default": true,
                    "description": "crossbar alerts check_financials",
                    "type": "boolean"
                },
                "check_low_balance": {
                    "default": true,
                    "description": "crossbar alerts check_low_balance",
                    "type": "boolean"
                },
                "check_payment_token": {
                    "default": true,
                    "description": "crossbar alerts check_payment_token",
                    "type": "boolean"
                },
                "check_port_action_required": {
                    "default": true,
                    "description": "crossbar alerts check_port_action_required",
                    "type": "boolean"
                },
                "check_port_requests": {
                    "default": true,
                    "description": "crossbar alerts check_port_requests",
                    "type": "boolean"
                },
                "check_port_suspended": {
                    "default": true,
                    "description": "crossbar alerts check_port_suspended",
                    "type": "boolean"
                },
                "check_system_alerts": {
                    "default": true,
                    "description": "crossbar alerts check_system_alerts",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.auth": {
            "description": "Schema for crossbar.auth system_config",
            "properties": {
                "auth_modules": {
                    "additionalProperties": false,
                    "default": {
                        "cb_api_auth": {
                            "enabled": true,
                            "log_failed_attempts": true,
                            "log_successful_attempts": false,
                            "token_auth_expiry_s": 3600
                        },
                        "cb_auth": {
                            "enabled": true,
                            "log_failed_attempts": true,
                            "log_successful_attempts": false,
                            "token_auth_expiry_s": 3600
                        },
                        "cb_ip_auth": {
                            "enabled": true,
                            "log_failed_attempts": true,
                            "log_successful_attempts": false,
                            "token_auth_expiry_s": 3600
                        },
                        "cb_user_auth": {
                            "enabled": true,
                            "log_failed_attempts": true,
                            "log_successful_attempts": true,
                            "token_auth_expiry_s": 3600
                        }
                    },
                    "description": "Default crossbar authentication modules configuration",
                    "properties": {
                        "cb_api_auth": {
                            "$ref": "#/definitions/auth_module_config"
                        },
                        "cb_auth": {
                            "$ref": "#/definitions/auth_module_config"
                        },
                        "cb_ip_auth": {
                            "$ref": "#/definitions/auth_module_config"
                        },
                        "cb_user_auth": {
                            "$ref": "#/definitions/auth_module_config"
                        }
                    },
                    "type": "object"
                },
                "available_auth_methods": {
                    "default": [
                        "cb_user_auth",
                        "cb_api_auth",
                        "cb_auth",
                        "cb_ip_auth"
                    ],
                    "description": "List of crossbar auth configurable modules",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "basic_auth_type": {
                    "default": "md5",
                    "description": "crossbar.auth basic auth type",
                    "enum": [
                        "md5",
                        "sha"
                    ],
                    "type": "string"
                },
                "log_failed_attempts": {
                    "default": false,
                    "description": "Should log failed login attempts",
                    "type": "boolean"
                },
                "log_failed_login_attempts": {
                    "default": false,
                    "description": "Should log failed login attempts",
                    "type": "boolean"
                },
                "log_successful_attempts": {
                    "default": false,
                    "description": "Should log successful login attempts",
                    "type": "boolean"
                },
                "token_auth_expiry_s": {
                    "default": 3600,
                    "description": "crossbar token auth expiry in seconds",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.braintree": {
            "description": "Schema for crossbar.braintree system_config",
            "properties": {
                "max_account_credit": {
                    "default": 500,
                    "description": "crossbar.braintree maximum account credit",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.call_inspector": {
            "description": "Schema for crossbar.call_inspector system_config",
            "properties": {
                "maximum_bulk": {
                    "default": 50,
                    "description": "crossbar call_inspector maximum_bulk",
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.callflows": {
            "description": "Schema for crossbar.callflows system_config",
            "properties": {
                "default_reconcile_numbers": {
                    "default": false,
                    "description": "crossbar.callflows default reconcile numbers",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.cdrs": {
            "description": "Schema for crossbar.cdrs system_config",
            "properties": {
                "cdr_stale_view": {
                    "default": false,
                    "description": "force cdr to return stale records only",
                    "type": "boolean"
                },
                "maximum_bulk": {
                    "default": 50,
                    "description": "crossbar.cdrs maximum bulk",
                    "minimum": 1,
                    "type": "integer"
                },
                "maximum_range": {
                    "default": 2682000,
                    "description": "maximum range (in seconds) prior to the current date allowed for CDR requests",
                    "minimum": 1,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.channels": {
            "description": "Schema for crossbar.channels system_config",
            "properties": {
                "system_wide_channels_list": {
                    "default": false,
                    "description": "crossbar.channels system wide channels list",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.contact_list": {
            "description": "Schema for crossbar.contact_list system_config",
            "properties": {
                "default_includes": {
                    "default": [],
                    "description": "crossbar.contact_list default includes",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.devices": {
            "description": "Schema for crossbar.devices system_config",
            "properties": {
                "allow_aggregates": {
                    "default": true,
                    "description": "crossbar.devices allow aggregates",
                    "type": "boolean"
                },
                "provisioner_host": {
                    "description": "crossbar.devices provisioner host",
                    "type": "string"
                },
                "provisioner_referer": {
                    "description": "crossbar.devices provisioner referer",
                    "type": "string"
                },
                "provisioning_host": {
                    "description": "crossbar.devices provisioning host",
                    "type": "string"
                },
                "provisioning_referer": {
                    "description": "crossbar.devices provisioning referer",
                    "type": "string"
                },
                "provisioning_type": {
                    "description": "crossbar.devices provisioning type",
                    "type": "string"
                },
                "provisioning_url": {
                    "description": "crossbar.devices provisioning url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.media": {
            "description": "Schema for crossbar.media system_config",
            "properties": {
                "normalization_format": {
                    "default": "mp3",
                    "description": "crossbar.media normalization format",
                    "type": "string"
                },
                "normalize_media": {
                    "default": false,
                    "description": "crossbar.media normalize media",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.notifications": {
            "description": "Schema for crossbar.notifications system_config",
            "properties": {
                "inherit_default_values": {
                    "default": false,
                    "description": "crossbar.notifications use parent notifications doc as default values, to be overridden by request data (prior to validation)",
                    "type": "boolean"
                },
                "notification_timeout_ms": {
                    "default": 5000,
                    "description": "crossbar.notifications notification timeout in milliseconds",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.phone_numbers": {
            "description": "Schema for crossbar.phone_numbers system_config",
            "properties": {
                "default_country": {
                    "default": "US",
                    "description": "crossbar.phone_numbers default country",
                    "type": "string"
                },
                "phonebook_url": {
                    "description": "crossbar.phone_numbers phonebook url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.phonebook": {
            "description": "Schema for crossbar.phonebook system_config",
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "phonebook integration enabled",
                    "type": "boolean"
                },
                "phonebook_url": {
                    "description": "the phonebook api url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.resources": {
            "description": "Schema for crossbar.resources system_config",
            "properties": {
                "allow_peers": {
                    "default": false,
                    "description": "crossbar.resources allow peers",
                    "type": "boolean"
                },
                "job_recovery_threshold_s": {
                    "default": 3600,
                    "description": "crossbar.resources job recovery threshold in seconds",
                    "type": "integer"
                },
                "job_recovery_timeout_s": {
                    "default": 21600,
                    "description": "crossbar.resources job recovery timeout in seconds",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.sms": {
            "description": "Schema for crossbar.sms system_config",
            "properties": {
                "api_e164_convert_from": {
                    "default": false,
                    "description": "crossbar.sms api e164 convert from",
                    "type": "boolean"
                },
                "api_e164_convert_to": {
                    "default": false,
                    "description": "crossbar.sms api e164 convert to",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.token_restrictions": {
            "description": "Schema for crossbar.token_restrictions system_config",
            "properties": {
                "_": {
                    "description": "crossbar.token_restrictions  ",
                    "type": "object"
                },
                "default_priv_level": {
                    "default": "admin",
                    "description": "crossbar.token_restrictions default priv level",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.users": {
            "description": "Schema for crossbar.users system_config",
            "properties": {
                "generate_password_if_empty": {
                    "default": false,
                    "description": "crossbar users generate_password_if_empty",
                    "type": "boolean"
                },
                "generate_username_if_empty": {
                    "default": true,
                    "description": "crossbar users generate_username_if_empty",
                    "type": "boolean"
                },
                "reset_identity_secret_on_rehash": {
                    "default": true,
                    "description": "crossbar users reset_identity_secret_on_rehash",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.crossbar.voicemail": {
            "description": "Schema for crossbar.voicemail system_config",
            "properties": {
                "normalization_format": {
                    "default": "mp3",
                    "description": "Voicemail default audio format",
                    "type": "string"
                },
                "normalize_media": {
                    "default": false,
                    "description": "Whether or not normalize voicemail audio file",
                    "type": "boolean"
                },
                "transcribe_format": {
                    "description": "crossbar voicemail transcribe_format",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.datamgr": {
            "description": "Schema for datamgr system_config",
            "properties": {
                "cache_policy": {
                    "default": {
                        "account": 900,
                        "aggregate": 900,
                        "deprecated": 900,
                        "modb": 900,
                        "numbers": 900,
                        "system": 900,
                        "system_config": "infinity",
                        "system_data": "infinity"
                    },
                    "description": "datamgr cache policy",
                    "type": "object"
                },
                "change_notice_exclude_types": {
                    "default": [
                        "cdr",
                        "ledger",
                        "audit_log",
                        "login_attempt",
                        "pivot_debug",
                        "notify_smtp_log"
                    ],
                    "description": "datamgr change_notice_exclude_types",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "default_archive_folder": {
                    "default": "/tmp",
                    "description": "datamgr default archive folder",
                    "type": "string"
                },
                "max_bulk_insert": {
                    "default": 2000,
                    "description": "maximum number of documents that will be inserted in a single request",
                    "minimum": 1,
                    "type": "integer"
                },
                "max_bulk_read": {
                    "default": 2000,
                    "description": "maximum number of documents that will be read in a single request",
                    "minimum": 1,
                    "type": "integer"
                },
                "no_caching_doc_types": {
                    "default": [
                        "media",
                        "private_media",
                        "call_recording",
                        "fax",
                        "mailbox_message"
                    ],
                    "description": "datamgr no caching doc types",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "performance": {
                    "description": "datamgr performance",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.doodle": {
            "description": "Schema for doodle system_config",
            "properties": {
                "api_preserve_caller_id": {
                    "default": true,
                    "description": "doodle.api preserve caller id",
                    "type": "boolean"
                },
                "connections": {
                    "description": "doodle connections",
                    "type": "object"
                },
                "default_test_from_number": {
                    "default": "15552220001",
                    "description": "doodle default test from number",
                    "type": "string"
                },
                "default_test_route_id": {
                    "default": "syneverse",
                    "description": "doodle default test route id",
                    "type": "string"
                },
                "inbound_broker": {
                    "description": "doodle inbound broker",
                    "type": "string"
                },
                "inbound_exchange": {
                    "default": "sms",
                    "description": "doodle inbound exchange",
                    "type": "string"
                },
                "inbound_exchange_options": {
                    "default": {
                        "passive": true
                    },
                    "description": "doodle inbound exchange options",
                    "type": "object"
                },
                "inbound_exchange_type": {
                    "default": "topic",
                    "description": "doodle inbound exchange type",
                    "type": "string"
                },
                "inbound_queue_name": {
                    "description": "doodle inbound queue name",
                    "type": "string"
                },
                "listeners": {
                    "default": 1,
                    "description": "doodle listeners",
                    "type": "integer"
                },
                "min_bucket_cost": {
                    "default": 1,
                    "description": "doodle minimum bucket cost",
                    "type": "integer"
                },
                "reschedule": {
                    "default": {},
                    "description": "doodle reschedule",
                    "type": "object"
                },
                "route_win_timeout": {
                    "default": 3000,
                    "description": "doodle route win timeout",
                    "type": "integer"
                },
                "unavailable_message": {
                    "default": {
                        "en-US": "sms service unavailable"
                    },
                    "description": "doodle unavailable message",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.ecallmgr": {
            "description": "Schema for ecallmgr system_config",
            "properties": {
                "acl_request_timeout_fudge_ms": {
                    "default": 100,
                    "description": "ecallmgr acl_request_timeout_fudge_ms",
                    "type": "integer"
                },
                "acl_request_timeout_ms": {
                    "default": 2000,
                    "description": "ecallmgr acl_request_timeout_ms",
                    "type": "integer"
                },
                "acls": {
                    "default": {},
                    "description": "ecallmgr acls",
                    "type": "object"
                },
                "allow_endless_recording": {
                    "default": false,
                    "description": "ecallmgr allow_endless_recording",
                    "type": "boolean"
                },
                "authz_default_action": {
                    "default": "deny",
                    "description": "ecallmgr authz default action",
                    "type": "string"
                },
                "authz_dry_run": {
                    "default": false,
                    "description": "ecallmgr authz dry run",
                    "type": "boolean"
                },
                "authz_enabled": {
                    "default": false,
                    "description": "ecallmgr authz enabled",
                    "type": "boolean"
                },
                "authz_local_resources": {
                    "default": false,
                    "description": "ecallmgr authz local resources",
                    "type": "boolean"
                },
                "balance_crawler_cycle_ms": {
                    "default": 60000,
                    "description": "ecallmgr balance crawler cycle in milliseconds",
                    "type": "integer"
                },
                "balance_crawler_enabled": {
                    "default": false,
                    "description": "ecallmgr balance crawler enabled",
                    "type": "boolean"
                },
                "balance_crawler_fetch_timeout_ms": {
                    "default": 10000,
                    "description": "ecallmgr balance crawler fetch timeout in milliseconds",
                    "type": "integer"
                },
                "balance_crawler_interaccount_delay_ms": {
                    "default": 10,
                    "description": "ecallmgr balance crawler interaccount delay in milliseconds",
                    "type": "integer"
                },
                "call_control": {
                    "properties": {
                        "pool_overflow": {
                            "default": 100,
                            "description": "ecallmgr call_control pool_overflow",
                            "type": "integer"
                        },
                        "pool_server_confirms": {
                            "default": false,
                            "description": "ecallmgr call_control pool_server_confirms",
                            "type": "boolean"
                        },
                        "pool_size": {
                            "default": 150,
                            "description": "ecallmgr call_control pool_size",
                            "type": "integer"
                        },
                        "pool_threshold": {
                            "default": 5,
                            "description": "ecallmgr call_control pool_threshold",
                            "type": "integer"
                        },
                        "use_pool": {
                            "default": false,
                            "description": "ecallmgr call_control use_pool",
                            "type": "boolean"
                        }
                    }
                },
                "call_control_listeners": {
                    "default": 5,
                    "description": "ecallmgr call_control_listeners",
                    "type": "integer"
                },
                "call_routing_bindings": {
                    "default": [
                        "context_2"
                    ],
                    "description": "ecallmgr call routing bindings",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "capabilities": {
                    "default": [
                        {
                            "capability": "conference",
                            "is_loaded": false,
                            "module": "mod_conference"
                        },
                        {
                            "capability": "channel_move",
                            "is_loaded": false,
                            "module": "mod_channel_move"
                        },
                        {
                            "capability": "http_cache",
                            "is_loaded": false,
                            "module": "mod_http_cache"
                        },
                        {
                            "capability": "dialplan",
                            "is_loaded": false,
                            "module": "mod_dptools"
                        },
                        {
                            "capability": "sip",
                            "is_loaded": false,
                            "module": "mod_sofia"
                        },
                        {
                            "capability": "fax",
                            "is_loaded": false,
                            "module": "mod_spandsp"
                        },
                        {
                            "capability": "tts",
                            "is_loaded": false,
                            "module": "mod_flite"
                        },
                        {
                            "capability": "freetdm",
                            "is_loaded": false,
                            "module": "mod_freetdm"
                        },
                        {
                            "capability": "skype",
                            "is_loaded": false,
                            "module": "mod_skypopen"
                        },
                        {
                            "capability": "xmpp",
                            "is_loaded": false,
                            "module": "mod_dingaling"
                        },
                        {
                            "capability": "skinny",
                            "is_loaded": false,
                            "module": "mod_skinny"
                        },
                        {
                            "capability": "sms",
                            "is_loaded": false,
                            "module": "mod_sms"
                        }
                    ],
                    "description": "ecallmgr capabilities",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "debug_channel": {
                    "default": false,
                    "description": "ecallmgr debug channel",
                    "type": "boolean"
                },
                "default_fax_extension": {
                    "default": ".tiff",
                    "description": "ecallmgr default fax extension",
                    "type": "string"
                },
                "default_realm": {
                    "default": "nodomain.com",
                    "description": "ecallmgr default realm",
                    "type": "string"
                },
                "default_recording_extension": {
                    "default": ".mp3",
                    "description": "ecallmgr default recording extension",
                    "type": "string"
                },
                "default_ringback": {
                    "default": "%(2000,4000,440,480)",
                    "description": "ecallmgr default ringback",
                    "type": "string"
                },
                "event_stream_idle_alert": {
                    "default": 0,
                    "description": "ecallmgr event stream idle alert",
                    "type": "integer"
                },
                "expandable_macros": {
                    "default": {
                        "{account_id}": "${ecallmgr_Account-ID}",
                        "{billing_id}": "${ecallmgr_Billing-ID}",
                        "{caller_id_name}": "${caller_id_name}",
                        "{caller_id_number}": "${caller_id_number}",
                        "{reseller_id}": "${ecallmgr_Reseller-ID}"
                    },
                    "description": "macros that will be expanded at call-time, for use in custom SIP headers",
                    "type": "object"
                },
                "expires_deviation_time": {
                    "default": 180,
                    "description": "ecallmgr expires deviation time",
                    "type": "integer"
                },
                "failover_when_all_unreg": {
                    "default": false,
                    "description": "failover only when all devices are offline",
                    "type": "boolean"
                },
                "fax_file_path": {
                    "default": "/tmp/",
                    "description": "ecallmgr fax file path",
                    "type": "string"
                },
                "fetch_timeout": {
                    "default": 2600,
                    "description": "ecallmgr fetch timeout",
                    "type": "integer"
                },
                "freeswitch_context": {
                    "default": "context_2",
                    "description": "ecallmgr freeswitch context",
                    "type": "string"
                },
                "fs_cmds": {
                    "default": [
                        {
                            "load": "mod_sofia"
                        },
                        {
                            "reloadacl": ""
                        }
                    ],
                    "description": "ecallmgr fs cmds",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "fs_cmds_wait_ms": {
                    "default": 5000,
                    "description": "ecallmgr fs cmds wait in milliseconds",
                    "type": "integer"
                },
                "fs_node_uptime_s": {
                    "default": 600,
                    "description": "ecallmgr fs node uptime in seconds",
                    "type": "integer"
                },
                "fs_nodes": {
                    "default": [],
                    "description": "ecallmgr fs nodes",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "fs_profiles": {
                    "default": {},
                    "description": "ecallmgr fs profiles",
                    "type": "object"
                },
                "fs_reconnect_cmds": {
                    "description": "ecallmgr fs reconnect cmds",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "gateways": {
                    "default": {},
                    "description": "ecallmgr gateways",
                    "type": "object"
                },
                "insert_fetched_registration_locally": {
                    "default": false,
                    "description": "ecallmgr insert fetched registration locally",
                    "type": "boolean"
                },
                "max_channel_cleanup_timeout_ms": {
                    "default": 60000,
                    "description": "ecallmgr maximum channel cleanup timeout in milliseconds",
                    "type": "integer"
                },
                "max_channel_uptime_s": {
                    "default": 0,
                    "description": "ecallmgr maximum channel uptime in seconds",
                    "type": "integer"
                },
                "max_timeout_for_node_restart": {
                    "default": 10000,
                    "description": "ecallmgr maximum timeout for node restart",
                    "type": "integer"
                },
                "multivar_separator": {
                    "default": "~",
                    "description": "ecallmgr multivar_separator",
                    "type": "string"
                },
                "network_map": {
                    "default": {},
                    "description": "ecallmgr network map",
                    "type": "object"
                },
                "node_commands": {
                    "properties": {
                        "send_http": {
                            "properties": {
                                "delete_on_success": {
                                    "default": false,
                                    "description": "ecallmgr delete on success",
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "node_down_grace_period": {
                    "default": 10000,
                    "description": "ecallmgr node down grace period",
                    "type": "integer"
                },
                "process_gateways": {
                    "default": false,
                    "description": "ecallmgr process gateways",
                    "type": "boolean"
                },
                "publish_channel_reconnect": {
                    "default": false,
                    "description": "ecallmgr publish channel reconnect",
                    "type": "boolean"
                },
                "publish_channel_state": {
                    "default": true,
                    "description": "ecallmgr publish channel state",
                    "type": "boolean"
                },
                "publish_conference_event": {
                    "default": [
                        "conference-create",
                        "conference-destroy",
                        "lock",
                        "unlock",
                        "add-member",
                        "del-member",
                        "stop-talking",
                        "start-talking",
                        "mute-member",
                        "unmute-member",
                        "deaf-member",
                        "undeaf-member"
                    ],
                    "description": "ecallmgr publish conference event",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "record_sample_rate": {
                    "default": 8000,
                    "description": "ecallmgr record sample rate",
                    "type": "integer"
                },
                "record_stereo_sample_rate": {
                    "default": 16000,
                    "description": "ecallmgr record stereo sample rate",
                    "type": "integer"
                },
                "record_waste_resources": {
                    "default": false,
                    "description": "ecallmgr record waste resources",
                    "type": "boolean"
                },
                "recording_file_path": {
                    "default": "/tmp/",
                    "description": "ecallmgr recording file path",
                    "type": "string"
                },
                "recording_software_name": {
                    "default": "2600Hz, Inc.'s Kazoo",
                    "description": "ecallmgr recording software name",
                    "type": "string"
                },
                "redirect_via_proxy": {
                    "default": true,
                    "description": "ecallmgr redirect via proxy",
                    "type": "boolean"
                },
                "restrict_channel_event_publisher": {
                    "default": true,
                    "description": "ecallmgr restrict_channel_event_publisher",
                    "type": "boolean"
                },
                "restrict_channel_state_publisher": {
                    "default": false,
                    "description": "ecallmgr restrict channel state publisher",
                    "type": "boolean"
                },
                "sanitize_fs_value_regex": {
                    "default": "[^0-9\\w\\s-]",
                    "description": "ecallmgr sanitize_fs_value_regex",
                    "type": "string"
                },
                "should_detect_inband_dtmf": {
                    "default": false,
                    "description": "ecallmgr should detect inband dtmf",
                    "type": "boolean"
                },
                "sofia_conf": {
                    "default": false,
                    "description": "ecallmgr sofia conf",
                    "type": "boolean"
                },
                "tcp_packet_type": {
                    "default": 2,
                    "description": "ecallmgr tcp packet type",
                    "type": "integer"
                },
                "text_routing_bindings": {
                    "default": [
                        "context_2"
                    ],
                    "description": "ecallmgr text routing bindings",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "use_bypass_media_after_bridge": {
                    "default": false,
                    "description": "ecallmgr use bypass media after bridge",
                    "type": "boolean"
                },
                "use_http_cache": {
                    "default": true,
                    "description": "ecallmgr use http cache",
                    "type": "boolean"
                },
                "use_shout": {
                    "default": false,
                    "description": "ecallmgr use shout",
                    "type": "boolean"
                },
                "use_vlc": {
                    "default": false,
                    "description": "ecallmgr use vlc",
                    "type": "boolean"
                },
                "user_cache_time_in_ms": {
                    "default": 3600000,
                    "description": "ecallmgr user cache time in in milliseconds",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.edr": {
            "description": "Schema for edr system_config",
            "properties": {
                "backends": {
                    "default": [],
                    "description": "Registered edr backends",
                    "items": {
                        "properties": {
                            "bindings": {
                                "description": "The types of events the backend should be notified about",
                                "items": {
                                    "description": "An edr binding",
                                    "properties": {
                                        "account_id": {
                                            "anyOf": [
                                                {
                                                    "description": "The account id(s) to receive events from. If not specified or * then events for all accounts will be received",
                                                    "type": "string"
                                                },
                                                {
                                                    "items": {
                                                        "description": "The account id(s) to receive events from. If not specified or * then events for all accounts will be received",
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                }
                                            ],
                                            "default": "*"
                                        },
                                        "app_name": {
                                            "default": "*",
                                            "description": "Which apps should we receive events from? If not specified or * then events for all apps will be received",
                                            "type": "string"
                                        },
                                        "exact_severity": {
                                            "default": false,
                                            "description": "If true, then only events with severity exactly matching the severity field will be received. If false then more severe events will also be received",
                                            "type": "boolean"
                                        },
                                        "exact_verbosity": {
                                            "default": false,
                                            "description": "If true, then only events with verbosity exactly matching the verbosity field will be received. If false then less verbose events will also be received",
                                            "type": "boolean"
                                        },
                                        "include_descendants": {
                                            "default": false,
                                            "description": "Should we receive events relating to descendant accounts if an account is specified?",
                                            "type": "boolean"
                                        },
                                        "severity": {
                                            "anyOf": [
                                                {
                                                    "description": "What severity are we interested in events for?",
                                                    "enum": [
                                                        "ok",
                                                        "warning",
                                                        "critical"
                                                    ],
                                                    "type": "string"
                                                },
                                                {
                                                    "items": {
                                                        "description": "What severity are we interested in events for?",
                                                        "enum": [
                                                            "ok",
                                                            "warning",
                                                            "critical"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                }
                                            ],
                                            "default": "ok"
                                        },
                                        "verbosity": {
                                            "anyOf": [
                                                {
                                                    "description": "What verbosity are we interested in events for?",
                                                    "enum": [
                                                        "trace",
                                                        "debug",
                                                        "info",
                                                        "warn",
                                                        "error",
                                                        "fatal"
                                                    ],
                                                    "type": "string"
                                                },
                                                {
                                                    "items": {
                                                        "description": "What verbosity are we interested in events for?",
                                                        "enum": [
                                                            "trace",
                                                            "debug",
                                                            "info",
                                                            "warn",
                                                            "error",
                                                            "fatal"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                }
                                            ],
                                            "default": "info"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "enabled": {
                                "default": true,
                                "description": "Should the backend be started on edr app start?",
                                "type": "boolean"
                            },
                            "name": {
                                "description": "A unique identifier for the backend",
                                "minLength": 1,
                                "type": "string"
                            },
                            "options": {
                                "description": "Options passed on to the backend module. These vary by module",
                                "properties": {
                                    "formatter": {
                                        "description": "Output format configuration which is used by some (but not all) backends",
                                        "properties": {
                                            "options": {
                                                "description": "Options passed on to the formatter module. These vary by module",
                                                "type": "object"
                                            },
                                            "type": {
                                                "description": "The formatter module to be used (e.g. json refers to edr_fmt_json.erl)",
                                                "enum": [
                                                    "json"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "type": {
                                "description": "The backend module to be used (e.g. amqp refers to edr_be_amqp.erl)",
                                "enum": [
                                    "amqp",
                                    "file",
                                    "http"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "bindings",
                            "enabled"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "system_config.epmd": {
            "description": "Schema for epmd system_config",
            "properties": {
                "check_every_s": {
                    "default": 60,
                    "description": "epmd check_every_s",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.fax": {
            "description": "Schema for fax system_config",
            "properties": {
                "allow_all_addresses_when_empty": {
                    "default": false,
                    "description": "fax allow all addresses when empty",
                    "type": "boolean"
                },
                "allowed_content_types": {
                    "default": [
                        "application/pdf",
                        "image/tiff",
                        {
                            "prefix": "image"
                        },
                        {
                            "prefix": "application/vnd.openxmlformats-officedocument"
                        },
                        {
                            "prefix": "application/vnd.oasis.opendocument"
                        },
                        "application/msword",
                        "application/vnd.ms-excel",
                        "application/vnd.ms-powerpoint"
                    ],
                    "description": "fax allowed content types",
                    "items": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "properties": {
                                    "prefix": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "prefix"
                                ],
                                "type": "object"
                            }
                        ]
                    },
                    "type": "array"
                },
                "cloud_registration_pool_interval": {
                    "default": 5000,
                    "description": "fax cloud registration pool interval",
                    "type": "integer"
                },
                "default_compare_field": {
                    "default": "result_cause",
                    "description": "fax default compare field",
                    "type": "string"
                },
                "default_retry_count": {
                    "default": 3,
                    "description": "fax default retry count",
                    "type": "integer"
                },
                "default_retry_period": {
                    "default": 300,
                    "description": "fax default retry period",
                    "type": "integer"
                },
                "default_smtp_domain": {
                    "default": "fax.kazoo.io",
                    "description": "fax default SMTP domain",
                    "type": "string"
                },
                "delete_empty_faxes": {
                    "default": false,
                    "description": "fax delete empty faxes",
                    "type": "boolean"
                },
                "denied_content_types": {
                    "default": [
                        {
                            "prefix": "image/"
                        }
                    ],
                    "description": "fax denied content types",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "endpoint_timeout": {
                    "default": 40,
                    "description": "fax endpoint timeout",
                    "type": "integer"
                },
                "ensure_valid_caller_id": {
                    "default": true,
                    "description": "fax ensure valid caller id",
                    "type": "boolean"
                },
                "fax_file_path": {
                    "default": "/tmp/",
                    "description": "fax fax file path",
                    "type": "string"
                },
                "fax_settings": {
                    "default": {
                        "override_callee_number": false,
                        "override_fax_identity": true
                    },
                    "description": "fax fax settings",
                    "type": "object"
                },
                "file_cache_path": {
                    "default": "/tmp/",
                    "description": "fax file cache path",
                    "type": "string"
                },
                "ignore_early_media": {
                    "default": false,
                    "description": "fax ignore early media",
                    "type": "boolean"
                },
                "image_min_size": {
                    "default": "700x10",
                    "description": "fax image minimum size",
                    "type": "string"
                },
                "image_size_cmd_format": {
                    "default": "echo -n `identify -format \"%[fx:w]x%[fx:h]\" ~s`",
                    "description": "fax image size cmd format",
                    "type": "string"
                },
                "inbound_t38_default": {
                    "default": "true",
                    "description": "fax inbound t38 default",
                    "type": "string"
                },
                "log_faxbox_errors": {
                    "default": true,
                    "description": "fax log faxbox errors",
                    "type": "boolean"
                },
                "max_outbound": {
                    "default": 10,
                    "description": "fax max outbound",
                    "type": "integer"
                },
                "max_storage_retry": {
                    "default": 5,
                    "description": "fax maximum storage retry",
                    "type": "integer"
                },
                "port": {
                    "default": 30950,
                    "description": "fax port",
                    "type": "integer"
                },
                "report_anonymous_system_errors": {
                    "default": false,
                    "description": "fax report anonymous system errors",
                    "type": "boolean"
                },
                "report_faxbox_system_errors": {
                    "default": true,
                    "description": "fax report faxbox system errors",
                    "type": "boolean"
                },
                "report_smtp_errors": {
                    "default": true,
                    "description": "Report SMTP-related errors via notifications",
                    "type": "boolean"
                },
                "reschedule": {
                    "default": {},
                    "description": "fax reschedule",
                    "type": "object"
                },
                "serialize_outbound_numbers": {
                    "default": true,
                    "description": "Serialize fax transmissions by outbound number globally",
                    "type": "boolean"
                },
                "smtp_max_msg_size": {
                    "default": 10485670,
                    "description": "fax smtp maximum msg size",
                    "type": "integer"
                },
                "smtp_port": {
                    "default": 19025,
                    "description": "fax smtp port",
                    "type": "integer"
                },
                "smtp_sessions": {
                    "default": 50,
                    "description": "fax smtp sessions",
                    "type": "integer"
                },
                "store_fax_pdf": {
                    "default": true,
                    "description": "store the post processed fax document",
                    "type": "boolean"
                },
                "store_fax_tiff": {
                    "default": true,
                    "description": "store a pdf copy of the post processed fax document",
                    "type": "boolean"
                },
                "store_url_document": {
                    "default": true,
                    "description": "store the document url result in the database",
                    "type": "boolean"
                },
                "wait_for_fax_timeout_ms": {
                    "default": 3600000,
                    "description": "fax wait for fax timeout in milliseconds",
                    "type": "integer"
                },
                "workers": {
                    "default": 50,
                    "description": "fax workers",
                    "type": "integer"
                },
                "xmpp_interval": {
                    "default": 600000,
                    "description": "fax xmpp interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.frontier": {
            "description": "Schema for frontier system_config",
            "properties": {
                "rate_limits": {
                    "default": {
                        "account": {
                            "per_minute": {
                                "invites": 200,
                                "registrations": 100,
                                "total_packets": 2000
                            },
                            "per_second": {
                                "invites": 50,
                                "registrations": 20,
                                "total_packets": 100
                            }
                        },
                        "device": {
                            "per_minute": {
                                "invites": 100,
                                "registrations": 20,
                                "total_packets": 1000
                            },
                            "per_second": {
                                "invites": 5,
                                "registrations": 2,
                                "total_packets": 20
                            }
                        }
                    },
                    "description": "frontier rate limits",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.hangups": {
            "description": "Schema for hangups system_config",
            "properties": {
                "hangups_to_monitor": {
                    "default": [
                        "CALL_REJECTED",
                        "MANDATORY_IE_MISSING",
                        "NO_ROUTE_DESTINATION",
                        "PROGRESS_TIMEOUT",
                        "RECOVERY_ON_TIMER_EXPIRE",
                        "WRONG_CALL_STATE"
                    ],
                    "description": "hangups hangups to monitor",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignore_hangup_causes": {
                    "default": [
                        "ALLOTTED_TIMEOUT",
                        "ATTENDED_TRANSFER",
                        "LOSE_RACE",
                        "NORMAL_CLEARING",
                        "NO_ANSWER",
                        "NO_USER_RESPONSE",
                        "ORIGINATOR_CANCEL",
                        "USER_BUSY",
                        "PICKED_OFF"
                    ],
                    "description": "hangups ignore hangup causes",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "system_config.hotornot": {
            "description": "Schema for hotornot system_config",
            "properties": {
                "default_rate_cost": {
                    "default": 0,
                    "description": "default cost per minute for rate",
                    "type": "number"
                },
                "default_rate_increment": {
                    "default": 60,
                    "description": "default increment time for rate",
                    "type": "integer"
                },
                "default_rate_internal_cost": {
                    "default": 0,
                    "description": "default internal cost per minute for rate",
                    "type": "number"
                },
                "default_rate_minimum": {
                    "default": 60,
                    "description": "default minimal duration for rate",
                    "type": "integer"
                },
                "default_rate_nocharge_time": {
                    "default": 0,
                    "description": "default nocharge time for rate",
                    "type": "integer"
                },
                "default_rate_surcharge": {
                    "default": 0,
                    "description": "default surcharge amount for rate",
                    "type": "number"
                },
                "default_ratedeck": {
                    "default": "ratedeck",
                    "description": "default ratedeck database to use",
                    "type": "string"
                },
                "filter_list": {
                    "default": [
                        "direction",
                        "route_options",
                        "routes"
                    ],
                    "description": "List of filters for rates",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "mobile_rate": {
                    "description": "Object defining rate for Kazoo mobile",
                    "type": "object"
                },
                "rate_version": {
                    "description": "If defined, use rates with this version",
                    "type": "string"
                },
                "should_publish_system_alert": {
                    "properties": {
                        "both": {
                            "default": true,
                            "description": "hotornot should_publish_system_alert if a rate is missing",
                            "type": "boolean"
                        },
                        "inbound": {
                            "default": true,
                            "description": "hotornot should_publish_system_alert if inbound rate is missing",
                            "type": "boolean"
                        },
                        "outbound": {
                            "default": true,
                            "description": "hotornot should_publish_system_alert if outbound rate is missing",
                            "type": "boolean"
                        }
                    }
                },
                "sort_by_weight": {
                    "default": true,
                    "description": "sort rates by weight (true) or cost (false)",
                    "type": "boolean"
                },
                "trie_build_timeout_ms": {
                    "default": 60000,
                    "description": "build timeout (ms) for trie",
                    "type": "integer"
                },
                "trie_lru_expires_s": {
                    "default": 86400,
                    "description": "How long an entry in the LRU trie can remain",
                    "type": "integer"
                },
                "trie_module": {
                    "default": "hon_trie",
                    "description": "Which trie module to use",
                    "type": "string"
                },
                "use_trie": {
                    "default": false,
                    "description": "whether to use the trie to store rates in the VM",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.ips": {
            "description": "Schema for ips system_config",
            "properties": {
                "zone_name_map": {
                    "default": {},
                    "description": "ips zone_name_map",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.jonny5": {
            "description": "Schema for jonny5 system_config",
            "properties": {
                "check_service_standing": {
                    "default": true,
                    "description": "jonny5 check_service_standing",
                    "type": "boolean"
                },
                "default_allow_postpay": {
                    "description": "jonny5 default_allow_postpay",
                    "type": "boolean"
                },
                "default_inbound_trunks": {
                    "description": "jonny5 default inbound trunks",
                    "type": "integer"
                },
                "default_max_postpay_amount": {
                    "description": "jonny5 default_max_postpay_amount",
                    "type": "number"
                },
                "default_twoway_trunks": {
                    "description": "jonny5 default twoway trunks",
                    "type": "integer"
                },
                "flat_rate_blacklist": {
                    "default": "^\\+1(684|264|268|242|246|441|284|345|767|809|829|849|473|671|876|664|670|787|939|869|758|784|721|868|649|340|900|800|888|877|866|855|844)\\d{7}$",
                    "description": "jonny5 flat rate blacklist",
                    "type": "string"
                },
                "flat_rate_whitelist": {
                    "default": "^\\+1\\d{10}$",
                    "description": "jonny5 flat rate whitelist",
                    "type": "string"
                },
                "resource_flat_rate_lookup": {
                    "default": false,
                    "description": "lookup flat rate regexps per resource",
                    "type": "boolean"
                },
                "service_standing_cache_acceptable": {
                    "default": true,
                    "description": "jonny5 service_standing_cache_acceptable",
                    "type": "boolean"
                },
                "service_standing_cache_expiration_s": {
                    "default": 1800,
                    "description": "jonny5 service_standing_cache_expiration_s",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.kapps_controller": {
            "description": "Schema for kapps_controller system_config",
            "properties": {
                "kapps": {
                    "default": [
                        "blackhole",
                        "callflow",
                        "cdr",
                        "conference",
                        "crossbar",
                        "fax",
                        "hangups",
                        "media_mgr",
                        "milliwatt",
                        "omnipresence",
                        "pivot",
                        "registrar",
                        "reorder",
                        "stepswitch",
                        "sysconf",
                        "teletype",
                        "trunkstore",
                        "webhooks"
                    ],
                    "description": "kapps_controller kapps",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "system_config.kapps_maintenance": {
            "description": "Schema for kapps_maintenance system_config",
            "properties": {
                "migrate_current_version": {
                    "default": "3.22",
                    "description": "kapps_maintenance migrate current version",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.kazoo.pdf": {
            "description": "Schema for kazoo.pdf system_config",
            "properties": {
                "html2pdf": {
                    "default": "/usr/bin/htmldoc --quiet --webpage -f $pdf$ $html$",
                    "description": "kazoo.pdf html2pdf",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.kazoo_convert": {
            "description": "Schema for kazoo_convert system_config",
            "properties": {
                "fax": {
                    "properties": {
                        "attachment_format": {
                            "default": "pdf",
                            "description": "Format to use for receipt email messages and api responses",
                            "type": "string"
                        },
                        "convert_command_timeout": {
                            "default": 120000,
                            "description": "Timeout value in ms for how long a convert command can run before being killed",
                            "type": "integer"
                        },
                        "convert_image_command": {
                            "default": "convert $FROM -resample 200x200 -units PixelsPerInch -resize 1728x2200 -compress group4 $TO",
                            "description": "The command to resample a tiff file to a fax compatible format or convert a supported image/* format to a tiff",
                            "type": "string"
                        },
                        "convert_openoffice_command": {
                            "default": "libreoffice --headless --convert-to pdf $FROM --outdir $WORKDIR  2>&1 |egrep 'parser error|Error' && exit 1 || exit 0",
                            "description": "The command to convert open office documents to pdf",
                            "type": "string"
                        },
                        "convert_pdf_command": {
                            "default": "/usr/bin/gs -q -r200x200 -g1728x2200 -dNOPAUSE -dBATCH -dSAFER -sDEVICE=tiffg4 -sOutputFile=$TO -- $FROM",
                            "description": "The command to convert pdf documents to tiff",
                            "type": "string"
                        },
                        "convert_tiff_command": {
                            "default": "tiff2pdf -o $TO $FROM",
                            "description": "The command to convert a tiff file to PDF",
                            "type": "string"
                        },
                        "enable_openoffice": {
                            "default": true,
                            "description": "Enables the conversion of openoffice compatible documents",
                            "type": "boolean"
                        },
                        "large_tiff_command": {
                            "default": "convert $FROM -resample 200x200 -units PixelsPerInch -resize 1728\\!x2200 -compress group4 $TO",
                            "description": "The command to resize large tiffs to standard dimensions",
                            "type": "string"
                        },
                        "resample_image_command": {
                            "default": "convert $FROM -resample 200x200 -page +0+0 -compress group4 $TO",
                            "description": "The command to resample an image file into a fax compliant formatted tiff",
                            "type": "string"
                        },
                        "serialize_openoffice": {
                            "default": true,
                            "description": "Enable Serialization of openoffice compatible document conversions",
                            "type": "boolean"
                        },
                        "small_tiff_command": {
                            "default": "convert $FROM -gravity center -resample 200x200 -units PixelsPerInch -extent 1728x2200 -compress group4 $TO",
                            "description": "The command to format small tiffs to a fax compatible format",
                            "type": "string"
                        },
                        "validate_pdf_command": {
                            "default": "gs -dNOPAUSE -dBATCH -sDEVICE=nullpage $FILE",
                            "description": "The command to verify a PDF file is valid",
                            "type": "string"
                        },
                        "validate_tiff_command": {
                            "default": "tiffinfo $FILE",
                            "description": "The command to verify a TIFF file is valid",
                            "type": "string"
                        }
                    }
                },
                "fax_converter": {
                    "default": "fax_converter",
                    "description": "Module to use for fax related file conversions",
                    "type": "string"
                },
                "file_cache_path": {
                    "default": "/tmp/",
                    "description": "The default working directory to use when converting files",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.kazoo_convert.convertapi": {
            "description": "Schema for kazoo_convert.convertapi system_config",
            "properties": {
                "api_url": {
                    "default": "https://v2.convertapi.com",
                    "description": "convertapi api_url",
                    "type": "string"
                },
                "pdf_version": {
                    "default": "1.7",
                    "description": "Which pdf version files will be produced by convertapi service",
                    "enum": [
                        "1.2",
                        "1.3",
                        "1.4",
                        "1.5",
                        "1.6",
                        "1.7"
                    ],
                    "type": "string"
                },
                "resolution": {
                    "default": 200,
                    "description": "Which document resolution is used for converted files",
                    "maximum": 2400,
                    "minimum": 10,
                    "type": "integer"
                },
                "secret": {
                    "description": "convertapi secret",
                    "type": "string"
                },
                "timeout": {
                    "default": 60,
                    "description": "Document conversion timeout",
                    "maximum": 1200,
                    "minimum": 10,
                    "type": "integer"
                },
                "try_openoffice": {
                    "default": "for_msoffice_files_also",
                    "description": "For which files types may be called openoffice",
                    "enum": [
                        "for_msoffice_files_also",
                        "for_openoffice_files_only",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.kazoo_couch": {
            "description": "Schema for kazoo_couch system_config",
            "properties": {
                "admin_port": {
                    "default": 5986,
                    "description": "The CouchDB API port, typically 5986",
                    "type": "integer"
                },
                "allow_maintenance_db_delete": {
                    "default": false,
                    "description": "kazoo_couch allow maintenance db delete",
                    "type": "boolean"
                },
                "api_port": {
                    "default": 5984,
                    "description": "The CouchDB API port, typically 5984",
                    "type": "integer"
                },
                "compact_automatically": {
                    "default": false,
                    "description": "kazoo_couch compact automatically",
                    "type": "boolean"
                },
                "default_chunk_size": {
                    "default": 1000,
                    "description": "kazoo_couch default chunk size",
                    "type": "integer"
                },
                "max_compacting_shards": {
                    "default": 2,
                    "description": "kazoo_couch maximum compacting shards",
                    "type": "integer"
                },
                "max_compacting_views": {
                    "default": 2,
                    "description": "kazoo_couch maximum compacting views",
                    "type": "integer"
                },
                "max_concurrent_docs_to_archive": {
                    "default": 500,
                    "description": "kazoo_couch maximum concurrent docs to archive",
                    "type": "integer"
                },
                "max_wait_for_compaction_pids": {
                    "default": 360000,
                    "description": "kazoo_couch maximum wait for compaction pids",
                    "type": "integer"
                },
                "min_data_size": {
                    "default": 131072,
                    "description": "kazoo_couch minimum data size",
                    "type": "integer"
                },
                "min_ratio": {
                    "default": 1.2,
                    "description": "kazoo_couch minimum ratio",
                    "type": "number"
                },
                "sleep_between_poll": {
                    "default": 3000,
                    "description": "kazoo_couch sleep between poll",
                    "type": "integer"
                },
                "use_bigcouch_direct": {
                    "default": true,
                    "description": "kazoo_couch use bigcouch direct",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.kazoo_directory": {
            "description": "Schema for kazoo_directory system_config",
            "properties": {
                "default_ignore_completed_elsewhere": {
                    "default": true,
                    "description": "kazoo_directory default_ignore_completed_elsewhere",
                    "type": "boolean"
                },
                "restrict_to_known_types": {
                    "default": false,
                    "description": "kazoo_directory restrict_to_known_types",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.kazoo_endpoint": {
            "description": "Schema for kazoo_endpoint system_config",
            "properties": {
                "build_metaflows": {
                    "default": false,
                    "description": "kazoo_endpoint build_metaflows",
                    "type": "boolean"
                },
                "custom_sip_interface": {
                    "description": "kazoo_endpoint custom sip interface",
                    "type": "string"
                },
                "default_caller_id_name": {
                    "description": "kazoo_endpoint default caller id name",
                    "type": "string"
                },
                "default_caller_id_number": {
                    "description": "kazoo_endpoint default caller id number",
                    "type": "string"
                },
                "default_can_text_self": {
                    "default": true,
                    "description": "kazoo_endpoint default can text self",
                    "type": "boolean"
                },
                "default_ignore_completed_elsewhere": {
                    "default": true,
                    "description": "kazoo_endpoint default ignore completed elsewhere",
                    "type": "boolean"
                },
                "endpoint_module": {
                    "default": "kz_endpoint_v5",
                    "description": "kazoo_endpoint endpoint_module",
                    "type": "string"
                },
                "restrict_to_known_types": {
                    "default": false,
                    "description": "kazoo_endpoint restrict to known types",
                    "type": "boolean"
                },
                "should_add_diversion_header": {
                    "default": false,
                    "description": "kazoo_endpoint should add diversion header",
                    "type": "boolean"
                },
                "sip_transport": {
                    "description": "kazoo_endpoint sip transport",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.kazoo_endpoint.mobile": {
            "description": "Schema for kazoo_endpoint.mobile system_config",
            "properties": {
                "codecs": {
                    "default": [
                        "PCMU"
                    ],
                    "description": "kazoo_endpoint.mobile codecs",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "create_sip_endpoint": {
                    "default": false,
                    "description": "kazoo_endpoint.mobile create sip endpoint",
                    "type": "boolean"
                },
                "custom_sip_interface": {
                    "description": "kazoo_endpoint.mobile custom sip interface",
                    "type": "string"
                },
                "formatter": {
                    "default": "^\\+?1?([2-9][0-9]{2}[2-9][0-9]{6})$",
                    "description": "kazoo_endpoint.mobile formatter",
                    "type": "string"
                },
                "path": {
                    "default": "",
                    "description": "kazoo_endpoint.mobile path",
                    "type": "string"
                },
                "prefix": {
                    "default": "",
                    "description": "kazoo_endpoint.mobile prefix",
                    "type": "string"
                },
                "realm": {
                    "default": "mobile.k.zswitch.net",
                    "description": "kazoo_endpoint.mobile realm",
                    "type": "string"
                },
                "sms": {
                    "properties": {
                        "connections": {
                            "default": {
                                "default": {
                                    "exchange": "sms",
                                    "options": {
                                        "passive": true
                                    },
                                    "route": "sprint",
                                    "type": "topic"
                                }
                            },
                            "description": "kazoo_endpoint.mobile connections",
                            "type": "object"
                        }
                    }
                },
                "sms_interface": {
                    "default": "amqp",
                    "description": "kazoo_endpoint.mobile sms interface",
                    "type": "string"
                },
                "suffix": {
                    "default": "",
                    "description": "kazoo_endpoint.mobile suffix",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.kazoo_events": {
            "description": "Schema for kazoo_events system_config",
            "properties": {
                "event_listeners": {
                    "default": 5,
                    "description": "kazoo_events event_listeners",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.kazoo_im": {
            "description": "Schema for kazoo_im system_config",
            "properties": {
                "connector": {
                    "properties": {
                        "connections": {
                            "description": "kazoo_im connector connections",
                            "type": "object"
                        }
                    }
                },
                "onnet_listeners": {
                    "default": 1,
                    "description": "kazoo_im onnet_listeners",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.kazoo_web": {
            "description": "Schema for kazoo_web system_config",
            "properties": {
                "client": {
                    "properties": {
                        "blacklist": {
                            "properties": {
                                "cidrs": {
                                    "default": [
                                        "127.0.0.1/32",
                                        "0.0.0.0/32"
                                    ],
                                    "description": "kazoo_web client blacklist cidrs",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "hosts": {
                                    "default": [
                                        "localhost"
                                    ],
                                    "description": "kazoo_web client blacklist hosts",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                }
            },
            "type": "object"
        },
        "system_config.keys": {
            "description": "Schema for DTMF keys system_config",
            "properties": {
                "voicemail": {
                    "$ref": "#/definitions/voicemail_keys",
                    "description": "DTMF keys for voicemail callflow module"
                }
            },
            "type": "object"
        },
        "system_config.konami": {
            "description": "Schema for konami system_config",
            "properties": {
                "event_cleanup_timeout_ms": {
                    "default": 3600000,
                    "description": "konami event cleanup timeout in milliseconds",
                    "type": "integer"
                },
                "transfer": {
                    "properties": {
                        "default_takeback_dtmf": {
                            "default": "*1",
                            "description": "konami default takeback dtmf",
                            "type": "string"
                        },
                        "default_target_timeout_ms": {
                            "default": 20000,
                            "description": "konami default target timeout in milliseconds",
                            "type": "integer"
                        }
                    }
                },
                "use_fast_rearm": {
                    "default": false,
                    "description": "konami use fast rearm",
                    "type": "boolean"
                },
                "webseq_enabled": {
                    "default": false,
                    "description": "konami webseq enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.konami_pro": {
            "description": "Schema for konami_pro system_config",
            "properties": {
                "route_win_timeout": {
                    "default": 3000,
                    "description": "konami_pro route_win_timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.kzt_twiml_util": {
            "description": "Schema for kzt_twiml_util system_config",
            "properties": {
                "max_length": {
                    "default": 3600,
                    "description": "kzt_twiml_util maximum length",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.ledgers": {
            "description": "Schema for ledgers system_config",
            "properties": {
                "registered_ledgers": {
                    "default": [
                        {
                            "friendly_name": "Per Minute VoIP",
                            "name": "per-minute-voip"
                        },
                        {
                            "friendly_name": "Mobile Data (100mB)",
                            "name": "mobile_data"
                        },
                        {
                            "friendly_name": "Support",
                            "name": "support"
                        },
                        {
                            "friendly_name": "ASR Transcriptions",
                            "name": "asr-transcriptions"
                        }
                    ],
                    "description": "ledgers registered_ledgers",
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                },
                "rollover_monthly_balance": {
                    "default": true,
                    "description": "ledgers rollover_monthly_balance",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.limits": {
            "description": "Global limits ability to place concurrent calls using flat rate trunks",
            "properties": {
                "allow_postpay": {
                    "default": false,
                    "description": "Permit postpay settings on accounts by default",
                    "type": "boolean"
                },
                "allow_prepay": {
                    "default": true,
                    "description": "Permit prepay settings on accounts by default",
                    "type": "boolean"
                },
                "authz_resource_types": {
                    "default": [],
                    "description": "List of Resource-Types that will authorize the call; bypassing limit checks and billing per account by default",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "burst_trunks": {
                    "default": 0,
                    "description": "A hard limit for number of burst trunks permitted per account by default",
                    "minimum": -1,
                    "type": "integer"
                },
                "calls": {
                    "description": "A hard limit for the total number calls per account by default",
                    "minimum": 0,
                    "type": "integer"
                },
                "enabled": {
                    "default": true,
                    "description": "Determines if the limits should be enforced on accounts by default",
                    "type": "boolean"
                },
                "inbound_trunks": {
                    "default": 0,
                    "description": "A hard limit for the number of inbound trunks per account by default",
                    "minimum": -1,
                    "type": "integer"
                },
                "max_postpay_ammount": {
                    "default": 0,
                    "description": "A hard limit for the postpay before limiting calls per account by default",
                    "minimum": 0,
                    "type": "integer"
                },
                "outbound_trunks": {
                    "default": 0,
                    "description": "A hard limit for the number of outbound trunks per account by default",
                    "minimum": -1,
                    "type": "integer"
                },
                "reserve_ammount": {
                    "default": 0,
                    "description": "The amount to hold in reserve per account by default",
                    "minimum": 0,
                    "type": "integer"
                },
                "resource_consuming_calls": {
                    "description": "A hard limit for the number of resource consuming calls per account by default",
                    "minimum": 0,
                    "type": "integer"
                },
                "soft_limit_inbound": {
                    "default": false,
                    "description": "Permit calls on inbound calls accounts which have exceeded the limit per account by default",
                    "type": "boolean"
                },
                "soft_limit_outbound": {
                    "default": false,
                    "description": "Permit calls on outbound calls for accounts which have exceeded the limit per account by default",
                    "type": "boolean"
                },
                "twoway_trunks": {
                    "default": 0,
                    "description": "A hard limit for the number of twoway trunks per account by default",
                    "minimum": -1,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.media": {
            "description": "Schema for media system_config",
            "properties": {
                "authenticated_playback": {
                    "default": false,
                    "description": "media authenticated playback",
                    "type": "boolean"
                },
                "authenticated_store": {
                    "default": true,
                    "description": "media authenticated store",
                    "type": "boolean"
                },
                "call_recording": {
                    "properties": {
                        "extension": {
                            "default": "mp3",
                            "description": "Default media file format",
                            "type": "string"
                        },
                        "storage_retry_times": {
                            "default": 5,
                            "description": "media storage retry times",
                            "type": "integer"
                        },
                        "workers": {
                            "default": 1,
                            "description": "media call_recording workers",
                            "type": "integer"
                        }
                    }
                },
                "default_language": {
                    "description": "media default language",
                    "type": "string"
                },
                "distributed_proxy": {
                    "description": "media distributed_proxy",
                    "type": "object"
                },
                "fix_media_names": {
                    "default": true,
                    "description": "media fix media names",
                    "type": "boolean"
                },
                "max_recording_time_limit": {
                    "default": 10800,
                    "description": "media maximum recording time limit",
                    "type": "integer"
                },
                "normalize_destination_args": {
                    "default": "-r 8000",
                    "description": "media normalize destination args",
                    "type": "string"
                },
                "normalize_executable": {
                    "default": "sox",
                    "description": "media normalize executable",
                    "type": "string"
                },
                "normalize_source_args": {
                    "default": "",
                    "description": "media normalize source args",
                    "type": "string"
                },
                "proxy_hostname": {
                    "description": "media proxy hostname to be used with HAProxy",
                    "type": "string"
                },
                "proxy_ip": {
                    "description": "media proxy ip",
                    "type": "string"
                },
                "proxy_listeners": {
                    "default": 25,
                    "description": "media proxy listeners",
                    "type": "integer"
                },
                "proxy_password": {
                    "default": "",
                    "description": "media proxy password",
                    "type": "string"
                },
                "proxy_port": {
                    "default": 24517,
                    "description": "media proxy port",
                    "type": "integer"
                },
                "proxy_store_acls": {
                    "default": [
                        "127.0.0.0/24"
                    ],
                    "description": "media proxy store acls",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "proxy_store_authenticate": {
                    "default": true,
                    "description": "media proxy store authenticate",
                    "type": "boolean"
                },
                "proxy_username": {
                    "default": "",
                    "description": "media proxy username",
                    "type": "string"
                },
                "record_min_sec": {
                    "default": 0,
                    "description": "media record minimum sec",
                    "type": "integer"
                },
                "ssl_cert": {
                    "description": "media ssl cert",
                    "type": "string"
                },
                "ssl_key": {
                    "description": "media ssl key",
                    "type": "string"
                },
                "ssl_password": {
                    "default": "",
                    "description": "media ssl password",
                    "type": "string"
                },
                "ssl_port": {
                    "default": 24518,
                    "description": "media ssl port",
                    "type": "integer"
                },
                "store_recordings": {
                    "default": false,
                    "description": "media store recordings",
                    "type": "boolean"
                },
                "support_account_overrides": {
                    "default": true,
                    "description": "media support account overrides",
                    "type": "boolean"
                },
                "use_https": {
                    "default": false,
                    "description": "media use https",
                    "type": "boolean"
                },
                "use_plaintext": {
                    "default": true,
                    "description": "media use plaintext",
                    "type": "boolean"
                },
                "use_ssl_proxy": {
                    "default": false,
                    "description": "media use ssl proxy",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.metaflows": {
            "description": "Schema for metaflows system_config",
            "properties": {
                "binding_digit": {
                    "default": "*",
                    "description": "metaflows binding digit",
                    "type": "string"
                },
                "default_metaflow": {
                    "default": {},
                    "description": "metaflows default metaflow",
                    "type": "object"
                },
                "digit_timeout_ms": {
                    "default": 800,
                    "description": "metaflows digit timeout in milliseconds",
                    "type": "integer"
                },
                "listen_on": {
                    "default": "a",
                    "description": "metaflows listen on",
                    "type": "string"
                },
                "numbers": {
                    "default": {
                        "2": {
                            "data": {
                                "text": "hi"
                            },
                            "module": "say"
                        }
                    },
                    "description": "metaflows numbers",
                    "type": "object"
                },
                "patterns": {
                    "default": {
                        "^2$": {
                            "data": {
                                "text": "hi"
                            },
                            "module": "say"
                        }
                    },
                    "description": "metaflows patterns",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.milliwatt": {
            "description": "Schema for milliwatt system_config",
            "properties": {
                "echo": {
                    "default": {
                        "caller_id": [],
                        "number": [
                            "5555555552"
                        ]
                    },
                    "description": "milliwatt echo",
                    "type": "object"
                },
                "route_win_timeout": {
                    "default": 3000,
                    "description": "milliwatt route win timeout",
                    "type": "integer"
                },
                "tone": {
                    "default": {
                        "caller_id": [],
                        "number": [
                            "5555555551"
                        ]
                    },
                    "description": "milliwatt tone",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.mobile_manager": {
            "description": "Schema for mobile_manager system_config",
            "properties": {
                "url": {
                    "description": "mobile_manager url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.modb": {
            "description": "Schema for modb system_config",
            "properties": {
                "active_modbs": {
                    "default": 6,
                    "description": "modb active modbs",
                    "type": "integer"
                },
                "routines": {
                    "default": [],
                    "description": "modb routines",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "system_config.notify": {
            "description": "Schema for notify system_config",
            "properties": {
                "autoload_modules": {
                    "default": [
                        "teletype_account_zone_change",
                        "teletype_cnam_request",
                        "teletype_customer_update",
                        "teletype_denied_emergency_bridge",
                        "teletype_deregister",
                        "teletype_fax_inbound_error_to_email",
                        "teletype_fax_inbound_to_email",
                        "teletype_fax_outbound_error_to_email",
                        "teletype_fax_outbound_smtp_error_to_email",
                        "teletype_fax_outbound_to_email",
                        "teletype_first_occurrence",
                        "teletype_low_balance",
                        "teletype_missed_call",
                        "teletype_new_account",
                        "teletype_new_user",
                        "teletype_password_recovery",
                        "teletype_port_cancel",
                        "teletype_port_comment",
                        "teletype_ported",
                        "teletype_port_pending",
                        "teletype_port_rejected",
                        "teletype_port_request_admin",
                        "teletype_port_request",
                        "teletype_port_scheduled",
                        "teletype_port_unconfirmed",
                        "teletype_service_added",
                        "teletype_system_alert",
                        "teletype_topup",
                        "teletype_transaction",
                        "teletype_voicemail_full",
                        "teletype_voicemail_to_email",
                        "teletype_voicemail_deleted",
                        "teletype_webhook_disabled"
                    ],
                    "description": "teletype modules to start when teletype is started",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "backoff_fudge_ms": {
                    "default": 5000,
                    "description": "notify backoff fudge in milliseconds",
                    "type": "integer"
                },
                "notification_app": {
                    "default": "teletype",
                    "description": "notify notification app",
                    "type": "string"
                },
                "notify_persist_enabled": {
                    "default": true,
                    "description": "notify notify_persist_enabled",
                    "type": "boolean"
                },
                "notify_persist_exceptions": {
                    "default": [
                        "system_alert"
                    ],
                    "description": "notify notify_persist_exceptions",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "notify_persist_temporary_force_exceptions": {
                    "default": [],
                    "description": "notify notify_persist_temporary_force_exceptions",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "notify_publisher_timeout_ms": {
                    "default": 10000,
                    "description": "Timeout in milliseconds when publishing notification using notify publisher",
                    "minimum": 1,
                    "type": "integer"
                },
                "search_rep_email": {
                    "default": true,
                    "description": "notify search rep email",
                    "type": "boolean"
                },
                "should_persist_for_retry": {
                    "default": true,
                    "description": "notify should_persist_for_retry",
                    "type": "boolean"
                },
                "use_federated_listener": {
                    "default": false,
                    "description": "notify use federated listener",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.notify.cnam_request": {
            "description": "Schema for notify.cnam_request system_config",
            "properties": {
                "default_to": {
                    "default": "",
                    "description": "notify.cnam_request default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "system_config.notify.deregister": {
            "description": "Schema for notify.deregister system_config",
            "properties": {
                "default_to": {
                    "default": "",
                    "description": "notify.deregister default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "html_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.deregister html content transfer encoding",
                    "type": "string"
                },
                "text_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.deregister text content transfer encoding",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.notify.fax": {
            "description": "Schema for notify.fax system_config",
            "properties": {
                "attachment_format": {
                    "default": "pdf",
                    "description": "notify.fax attachment format",
                    "type": "string"
                },
                "tiff_to_pdf_conversion_command": {
                    "default": "tiff2pdf -o ~s ~s &> /dev/null && echo -n \"success\"",
                    "description": "notify.fax tiff to pdf conversion command",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.notify.fax_inbound_error_to_email": {
            "description": "Schema for notify.fax_inbound_error_to_email system_config",
            "properties": {
                "default_enabled": {
                    "default": false,
                    "description": "notify.fax_inbound_error_to_email default enabled",
                    "type": "boolean"
                },
                "filter_error_codes": {
                    "default": [
                        "0",
                        "49"
                    ],
                    "description": "notify.fax_inbound_error_to_email filter error codes",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "system_config.notify.fax_outbound_error_to_email": {
            "description": "Schema for notify.fax_outbound_error_to_email system_config",
            "properties": {
                "default_enabled": {
                    "default": true,
                    "description": "notify.fax_outbound_error_to_email default enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.notify.first_occurrence": {
            "description": "Schema for notify.first_occurrence system_config",
            "properties": {
                "default_to": {
                    "default": "",
                    "description": "notify.first_occurrence default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "html_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.first_occurrence html content transfer encoding",
                    "type": "string"
                },
                "text_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.first_occurrence text content transfer encoding",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.notify.low_balance": {
            "description": "Schema for notify.low_balance system_config",
            "properties": {
                "default_enabled": {
                    "default": false,
                    "description": "notify.low_balance default enabled",
                    "type": "boolean"
                },
                "threshold": {
                    "default": 5.0,
                    "description": "default threshold that will trigger a low balance notification",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "system_config.notify.new_account": {
            "description": "Schema for notify.new_account system_config",
            "properties": {
                "default_to": {
                    "default": "",
                    "description": "notify.new_account default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "html_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.new_account html content transfer encoding",
                    "type": "string"
                },
                "text_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.new_account text content transfer encoding",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.notify.password_recovery": {
            "description": "Schema for notify.password_recovery system_config",
            "properties": {
                "default_to": {
                    "description": "notify.password_recovery default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "html_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.password_recovery html content transfer encoding",
                    "type": "string"
                },
                "text_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.password_recovery text content transfer encoding",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.notify.port_cancel": {
            "description": "Schema for notify.port_cancel system_config",
            "properties": {
                "default_from": {
                    "description": "notify.port_cancel default from",
                    "type": "string"
                },
                "default_to": {
                    "default": "",
                    "description": "notify.port_cancel default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "system_config.notify.port_request": {
            "description": "Schema for notify.port_request system_config",
            "properties": {
                "default_from": {
                    "description": "notify.port_request default from",
                    "type": "string"
                },
                "default_to": {
                    "default": "",
                    "description": "notify.port_request default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "system_config.notify.port_request_admin": {
            "description": "Schema for notify.port_request_admin system_config",
            "properties": {
                "default_to": {
                    "description": "notify.port_request_admin default to",
                    "oneOf": [
                        {
                            "items": {
                                "format": "email",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "format": "email",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "system_config.notify.ported": {
            "description": "Schema for notify.ported system_config",
            "properties": {
                "default_to": {
                    "default": "",
                    "description": "notify.ported default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "send_from_admin_email": {
                    "default": true,
                    "description": "notify.ported send from admin email",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.notify.system_alert": {
            "description": "Schema for notify.system_alert system_config",
            "properties": {
                "default_to": {
                    "default": "",
                    "description": "notify.system_alert default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "enable_email_alerts": {
                    "default": true,
                    "description": "notify.system_alert enable email alerts",
                    "type": "boolean"
                },
                "html_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.system_alert html content transfer encoding",
                    "type": "string"
                },
                "subscriber_url": {
                    "description": "notify.system_alert subscriber url",
                    "type": "string"
                },
                "text_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.system_alert text content transfer encoding",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.notify.topup": {
            "description": "Schema for notify.topup system_config",
            "properties": {
                "default_to": {
                    "default": "",
                    "description": "notify.topup default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "html_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.topup html content transfer encoding",
                    "type": "string"
                },
                "text_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.topup text content transfer encoding",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.notify.transaction": {
            "description": "Schema for notify.transaction system_config",
            "properties": {
                "default_to": {
                    "default": "",
                    "description": "notify.transaction default to",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "html_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.transaction html content transfer encoding",
                    "type": "string"
                },
                "text_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.transaction text content transfer encoding",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.notify.voicemail_deleted": {
            "description": "Schema for notify.voicemail_deleted system_config",
            "properties": {
                "html_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.voicemail_deleted html content transfer encoding",
                    "type": "string"
                },
                "text_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.voicemail_deleted text content transfer encoding",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.notify.voicemail_full": {
            "description": "Schema for notify.voicemail_full system_config",
            "properties": {
                "default_enabled": {
                    "default": false,
                    "description": "notify.voicemail_full default enabled",
                    "type": "boolean"
                },
                "default_to": {
                    "description": "notify.voicemail_full default to",
                    "oneOf": [
                        {
                            "items": {
                                "format": "email",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "format": "email",
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "system_config.notify.voicemail_to_email": {
            "description": "Schema for notify.voicemail_to_email system_config",
            "properties": {
                "html_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.voicemail_to_email html content transfer encoding",
                    "type": "string"
                },
                "text_content_transfer_encoding": {
                    "default": "7BIT",
                    "description": "notify.voicemail_to_email text content transfer encoding",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.number_manager": {
            "description": "Schema for number_manager system_config",
            "properties": {
                "allow_port_transition_from_submitted_to_scheduled": {
                    "default": false,
                    "description": "should number ports be allowed to transition from submitted to scheduled?",
                    "type": "boolean"
                },
                "available_module_name": {
                    "default": "knm_local",
                    "description": "default carrier module name to use when creating a number",
                    "type": "string"
                },
                "carrier_modules": {
                    "default": [
                        "knm_local"
                    ],
                    "description": "carrier modules to perform number search & ordering from",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "classifiers": {
                    "default": {
                        "caribbean": {
                            "friendly_name": "Caribbean",
                            "pretty_print": "SS(###) ### - ####",
                            "regex": "^\\+?1((?:684|264|268|242|246|441|284|345|767|809|829|849|473|671|876|664|670|787|939|869|758|784|721|868|649|340)\\d{7})$"
                        },
                        "did_us": {
                            "friendly_name": "US DID",
                            "pretty_print": "SS(###) ### - ####",
                            "regex": "^(\\+?1)?([2-9][0-9]{2}[2-9][0-9]{6})$"
                        },
                        "emergency": {
                            "emergency": true,
                            "friendly_name": "Emergency Dispatcher",
                            "regex": "^(911|922|933|833|811|711|999)$"
                        },
                        "international": {
                            "friendly_name": "International",
                            "regex": "^\\+([2-9]\\d{7,})$"
                        },
                        "toll_us": {
                            "friendly_name": "US Toll",
                            "pretty_print": "SS(###) ### - ####",
                            "regex": "^\\+1(900\\d{7})$"
                        },
                        "tollfree_us": {
                            "friendly_name": "US Tollfree",
                            "pretty_print": "SS(###) ### - ####",
                            "regex": "^\\+1((?:800|88\\d|877|866|855|844|833|822)\\d{7})$"
                        },
                        "unknown": {
                            "friendly_name": "Unknown",
                            "regex": "^(.*)$"
                        }
                    },
                    "description": "regular expressions & billing names for numbers",
                    "type": "object"
                },
                "converters": {
                    "default": [
                        "regex"
                    ],
                    "description": "suffix for the KNM module to use for E164, NPAN and 1NPAN normalization of numbers",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "default_force_outbound": {
                    "default": false,
                    "description": "should we 'force_outbound' when this feature is not set on the number?",
                    "type": "boolean"
                },
                "e164_converters": {
                    "default": {
                        "^(\\+?1)?([2-9][0-9]{2}[2-9][0-9]{6})$": {
                            "prefix": "+1"
                        },
                        "^011(\\d{5,})$|^00(\\d{5,})$": {
                            "prefix": "+"
                        },
                        "^[2-9]\\d{7,}$": {
                            "prefix": "+"
                        }
                    },
                    "description": "regular expressions to convert numbers to E164 format",
                    "type": "object"
                },
                "features": {
                    "properties": {
                        "allow": {
                            "description": "number features a number is allowed to edit",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    }
                },
                "fetch_account_from_ports": {
                    "default": true,
                    "description": "should we also search ports when trying to `/identify` a number?",
                    "type": "boolean"
                },
                "force_local_outbound": {
                    "default": true,
                    "description": "default value for 'force_outbound' for local numbers only",
                    "type": "boolean"
                },
                "force_port_in_outbound": {
                    "default": true,
                    "description": "default value for 'force_outbound' for port_in numbers only",
                    "type": "boolean"
                },
                "force_port_out_outbound": {
                    "default": true,
                    "description": "default value for 'force_outbound' for port_out numbers only",
                    "type": "boolean"
                },
                "local_feature_override": {
                    "default": false,
                    "description": "overrides the filtering of external features for local numbers",
                    "type": "boolean"
                },
                "maximum_search_quantity": {
                    "default": 500,
                    "description": "maximum number of returned DIDs in a search query",
                    "minimum": 1,
                    "type": "integer"
                },
                "number_search_timeout_ms": {
                    "default": 5000,
                    "description": "number manager number search timeout in milliseconds",
                    "minimum": 1,
                    "type": "integer"
                },
                "parallel_jobs_count": {
                    "default": 1,
                    "description": "number of concurrent workers that can process a migration at the same time (1=non parallel behavior, MUST be >0)",
                    "minimum": 1,
                    "type": "integer"
                },
                "port_in_module_name": {
                    "default": "knm_local",
                    "description": "completed port requests will create numbers with this carrier module name",
                    "type": "string"
                },
                "providers": {
                    "description": "legacy value for number_manager.features.allow",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "reconcile_regex": {
                    "default": "^(\\+?1)?\\d{10}$|^\\+[2-9]\\d{7,}$|^011\\d*$|^00\\d*$",
                    "description": "if a number matches this regular expression then it is reconcilable",
                    "type": "string"
                },
                "released_state": {
                    "default": "available",
                    "description": "state to put numbers in when they are being released and their reserve history is empty",
                    "type": "string"
                },
                "should_age": {
                    "default": false,
                    "description": "Should numbers go through an aging period before being available?",
                    "type": "boolean"
                },
                "should_permanently_delete": {
                    "default": false,
                    "description": "when disconnecting numbers, if this flag is true they will be deleted otherwise they will go back to a pool. Local numbers are not affected by this flag",
                    "type": "boolean"
                },
                "time_between_accounts_ms": {
                    "default": 1000,
                    "description": "time to pause in between the processing of accounts in milliseconds",
                    "minimum": 1,
                    "type": "integer"
                },
                "time_between_db_ms": {
                    "default": 50,
                    "description": "number_manager time_between_db_ms",
                    "minimum": 1,
                    "type": "integer"
                },
                "time_between_numbers_ms": {
                    "default": 1000,
                    "description": "time to pause in between the processing of numbers in milliseconds",
                    "minimum": 1,
                    "type": "integer"
                },
                "unauthorized_numbers_lookup": {
                    "default": false,
                    "description": "should number search be allowed for unauthenticated API requests?",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.bandwidth": {
            "description": "Schema for number_manager.bandwidth system_config",
            "properties": {
                "debug": {
                    "default": false,
                    "description": "should debug mode be activated for the legacy knm_bandwidth?",
                    "type": "boolean"
                },
                "developer_key": {
                    "default": "",
                    "description": "developer key for the legacy Bandwidth API",
                    "type": "string"
                },
                "enable_provisioning": {
                    "default": true,
                    "description": "number_manager.bandwidth enable provisioning",
                    "type": "boolean"
                },
                "endpoints": {
                    "description": "number_manager.bandwidth endpoints",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "numbers_api_url": {
                    "default": "https://api.bandwidth.com/public/v2/numbers.api",
                    "description": "number_manager.bandwidth numbers api url",
                    "type": "string"
                },
                "order_name_prefix": {
                    "default": "Kazoo",
                    "description": "number_manager.bandwidth order name prefix",
                    "type": "string"
                },
                "sandbox_provisioning": {
                    "default": true,
                    "description": "number_manager.bandwidth sandbox provisioning",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.bandwidth2": {
            "description": "Schema for number_manager.bandwidth2 system_config",
            "properties": {
                "account_id": {
                    "default": "",
                    "description": "account ID for the asynchronous Bandwidth API",
                    "type": "string"
                },
                "api_password": {
                    "default": "",
                    "description": "number_manager.bandwidth2 api password",
                    "type": "string"
                },
                "api_username": {
                    "default": "",
                    "description": "number_manager.bandwidth2 api username",
                    "type": "string"
                },
                "debug": {
                    "default": false,
                    "description": "should the debug mode be activated for the asynchronous Bandwidth API?",
                    "type": "boolean"
                },
                "enable_provisioning": {
                    "default": true,
                    "description": "number_manager.bandwidth2 enable provisioning",
                    "type": "boolean"
                },
                "max_search_quantity": {
                    "default": 500,
                    "description": "number_manager.bandwidth2 max search quantity",
                    "minimum": 1,
                    "type": "integer"
                },
                "order_name_prefix": {
                    "default": "Kazoo",
                    "description": "number_manager.bandwidth2 order name prefix",
                    "type": "string"
                },
                "sandbox_provisioning": {
                    "default": true,
                    "description": "number_manager.bandwidth2 sandbox provisioning",
                    "type": "boolean"
                },
                "sip_peer": {
                    "default": "",
                    "description": "number_manager.bandwidth2 sip peer",
                    "type": "string"
                },
                "site_id": {
                    "default": "",
                    "description": "number_manager.bandwidth2 site id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.dash_e911": {
            "description": "Schema for number_manager.dash_e911 system_config",
            "properties": {
                "auth_password": {
                    "default": "",
                    "description": "number_manager.dash_e911 auth password",
                    "type": "string"
                },
                "auth_username": {
                    "default": "",
                    "description": "number_manager.dash_e911 auth username",
                    "type": "string"
                },
                "debug": {
                    "default": false,
                    "description": "number_manager.dash_e911 debug",
                    "type": "boolean"
                },
                "emergency_provisioning_url": {
                    "default": "https://service.dashcs.com/dash-api/xml/emergencyprovisioning/v1",
                    "description": "number_manager.dash_e911 emergency provisioning url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.locality": {
            "description": "Schema for number_manager.locality system_config",
            "properties": {
                "url": {
                    "description": "number_manager.locality url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.other": {
            "description": "Schema for number_manager.other system_config",
            "properties": {
                "default_country": {
                    "default": "US",
                    "description": "Country to search and acquire blocks of numbers from",
                    "type": "string"
                },
                "endpoints": {
                    "description": "number_manager.other endpoints",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "phonebook_url": {
                    "description": "number_manager.other phonebook url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.simwood": {
            "description": "Schema for number_manager.simwood system_config",
            "properties": {
                "auth_password": {
                    "default": "",
                    "description": "number_manager.simwood auth password",
                    "type": "string"
                },
                "auth_username": {
                    "default": "",
                    "description": "number_manager.simwood auth username",
                    "type": "string"
                },
                "numbers_api_url": {
                    "default": "https://api.simwood.com/v3/numbers",
                    "description": "number_manager.simwood numbers api url",
                    "type": "string"
                },
                "simwood_account_id": {
                    "default": "",
                    "description": "number_manager.simwood simwood account id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.telnyx": {
            "description": "Schema for number_manager.telnyx system_config",
            "properties": {
                "debug": {
                    "default": false,
                    "description": "number_manager.telnyx debug",
                    "type": "boolean"
                },
                "enable_provisioning": {
                    "default": true,
                    "description": "number_manager.telnyx enable provisioning",
                    "type": "boolean"
                },
                "monthly_recurring_cost": {
                    "default": 1.0,
                    "description": "number_manager.telnyx monthly recurring cost",
                    "type": "number"
                },
                "sandbox_provisioning": {
                    "default": false,
                    "description": "number_manager.telnyx sandbox provisioning",
                    "type": "boolean"
                },
                "should_filter_rates": {
                    "default": false,
                    "description": "should search results be filtered based on configured allowed cost?",
                    "type": "boolean"
                },
                "should_keep_best_effort": {
                    "default": false,
                    "description": "should search results also contain 'best effort' results?",
                    "type": "boolean"
                },
                "token": {
                    "description": "number_manager.telnyx token",
                    "type": "string"
                },
                "upfront_cost": {
                    "default": 1.0,
                    "description": "allowed upfront cost when acquiring number",
                    "type": "number"
                },
                "user": {
                    "description": "number_manager.telnyx user",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.vitelity": {
            "description": "Schema for number_manager.vitelity system_config",
            "properties": {
                "api_uri": {
                    "default": "http://api.vitelity.net/api.php",
                    "description": "number_manager.vitelity api uri",
                    "type": "string"
                },
                "routesip": {
                    "description": "number_manager.vitelity routesip",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "use_stepswitch_cnam": {
                    "default": false,
                    "description": "number_manager.vitelity use_stepswitch_cnam",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.voip_innovations": {
            "description": "Schema for number_manager.voip_innovations system_config",
            "properties": {
                "debug": {
                    "default": false,
                    "description": "number_manager.voip_innovations debug",
                    "type": "boolean"
                },
                "enable_provisioning": {
                    "default": true,
                    "description": "number_manager.voip_innovations enable provisioning",
                    "type": "boolean"
                },
                "endpoint_group": {
                    "default": "",
                    "description": "number_manager.voip_innovations endpoint group",
                    "type": "string"
                },
                "login": {
                    "default": "",
                    "description": "number_manager.voip_innovations login",
                    "type": "string"
                },
                "password": {
                    "default": "",
                    "description": "number_manager.voip_innovations password",
                    "type": "string"
                },
                "sandbox_provisioning": {
                    "default": false,
                    "description": "number_manager.voip_innovations sandbox provisioning",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.number_manager.voxbone": {
            "description": "Schema for number_manager.voxbone system_config",
            "properties": {
                "api_password": {
                    "default": "",
                    "description": "number_manager voxbone api_password",
                    "type": "string"
                },
                "api_username": {
                    "default": "",
                    "description": "number_manager voxbone api_username",
                    "type": "string"
                },
                "environment": {
                    "default": "sandbox",
                    "description": "number_manager voxbone environment",
                    "enum": [
                        "sandbox",
                        "production",
                        "beta"
                    ],
                    "type": "string"
                },
                "max_page_size": {
                    "default": 20,
                    "description": "number_manager voxbone max_page_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.omnipresence": {
            "description": "Schema for omnipresence system_config",
            "properties": {
                "dialog_subscribed_mwi_prefix": {
                    "default": "*98",
                    "description": "prefix used when subscribing vm updates for dialog",
                    "type": "string"
                },
                "expire_check_ms": {
                    "default": 1000,
                    "description": "omnipresence expire check in milliseconds",
                    "type": "integer"
                },
                "expires_fudge_s": {
                    "default": 20,
                    "description": "omnipresence expires fudge in seconds",
                    "type": "integer"
                },
                "subscriptions_sync_enabled": {
                    "default": false,
                    "description": "omnipresence subscriptions sync enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.pivot": {
            "description": "Schema for pivot system_config",
            "properties": {
                "request_timeout_ms": {
                    "default": 5000,
                    "description": "pivot request_timeout_ms",
                    "type": "integer"
                },
                "tts_texts_size": {
                    "default": 4000,
                    "description": "pivot tts texts size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.pivot.twiml": {
            "description": "Schema for pivot.twiml system_config",
            "properties": {
                "conference_moh": {
                    "default": "$${hold_music}",
                    "description": "Default MOH for conferences dialed via TwiML",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.privacy": {
            "description": "Schema for privacy system_config",
            "properties": {
                "anonymous_cid_names": {
                    "default": [
                        "anonymous",
                        "restricted"
                    ],
                    "description": "Additional CID name patterns to match for anonymous call rejection",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "anonymous_cid_numbers": {
                    "default": [
                        "anonymous",
                        "restricted"
                    ],
                    "description": "Additional CID number/userpart patterns to match for anonymous call rejection",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "block_anonymous_caller_id": {
                    "default": false,
                    "description": "Controls blocking of anonymous calls",
                    "type": "boolean"
                },
                "check_additional_anonymous_cid_names": {
                    "default": false,
                    "description": "use the anonymous_cid_names values to check if a number is anonymous",
                    "type": "boolean"
                },
                "check_additional_anonymous_cid_numbers": {
                    "default": false,
                    "description": "use the anonymous_cid_numbers values to check if a name is anonymous",
                    "type": "boolean"
                },
                "default_privacy_name": {
                    "default": "Anonymous",
                    "description": "privacy default_privacy_name",
                    "type": "string"
                },
                "default_privacy_number": {
                    "default": "anonymous",
                    "description": "privacy default_privacy_number",
                    "type": "string"
                },
                "method": {
                    "default": "kazoo",
                    "description": "privacy method",
                    "type": "string"
                },
                "privacy_mode": {
                    "default": "kazoo",
                    "description": "Default privacy mode for anonymous calls",
                    "type": "string"
                },
                "privacy_name": {
                    "default": "anonymous",
                    "description": "Default Caller ID Name should be shown for anonymous calls",
                    "type": "string"
                },
                "privacy_number": {
                    "default": "0000000000",
                    "description": "Default Caller ID Number should be shown for anonymous calls",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.provisioner": {
            "description": "Schema for provisioner system_config",
            "properties": {
                "combo_keys": {
                    "default": {
                        "cisco": {
                            "_": {
                                "line": "",
                                "parking": "",
                                "personal_parking": "",
                                "presence": "",
                                "speed_dial": ""
                            }
                        },
                        "grandstream": {
                            "_": {
                                "line": "0",
                                "parking": "19",
                                "personal_parking": "11",
                                "presence": "11",
                                "speed_dial": "10"
                            }
                        },
                        "obihai": {
                            "_": {
                                "line": "Call Appearance",
                                "parking": "Call Park Monitor",
                                "personal_parking": "Busy Lamp Field",
                                "presence": "Busy Lamp Field",
                                "speed_dial": "Speed Dial"
                            }
                        },
                        "vtech": {
                            "_": {
                                "line": "line",
                                "parking": "blf",
                                "personal_parking": "blf",
                                "presence": "presense",
                                "speed_dial": "speed"
                            }
                        },
                        "yealink": {
                            "_": {
                                "line": "15",
                                "parking": "10",
                                "personal_parking": "10",
                                "presence": "16",
                                "speed_dial": "13"
                            }
                        }
                    },
                    "description": "provisioner combo keys",
                    "type": "object"
                },
                "feature_keys": {
                    "default": {
                        "cisco": {
                            "_": {
                                "parking": "",
                                "personal_parking": "",
                                "presence": "",
                                "speed_dial": ""
                            }
                        },
                        "grandstream": {
                            "_": {
                                "parking": "9",
                                "personal_parking": "1",
                                "presence": "1",
                                "speed_dial": "0"
                            }
                        },
                        "obihai": {
                            "_": {
                                "parking": "Call Park Monitor",
                                "personal_parking": "Busy Lamp Field",
                                "presence": "Busy Lamp Field",
                                "speed_dial": "Speed Dial"
                            }
                        },
                        "polycom": {
                            "_": {
                                "parking": "automata",
                                "personal_parking": "automata",
                                "presence": "normal",
                                "speed_dial": "normal"
                            }
                        },
                        "yealink": {
                            "_": {
                                "parking": "10",
                                "personal_parking": "10",
                                "presence": "16",
                                "speed_dial": "13"
                            }
                        }
                    },
                    "description": "provisioner feature keys",
                    "type": "object"
                },
                "provisioning_type": {
                    "description": "provisioner provisioning type",
                    "type": "string"
                },
                "provisioning_url": {
                    "description": "provisioner provisioning url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.pusher": {
            "description": "Schema for pusher system_config",
            "properties": {
                "User-Agents": {
                    "default": {},
                    "description": "pusher User-Agents",
                    "type": "object"
                },
                "apple": {
                    "default": {},
                    "description": "pusher apple",
                    "properties": {
                        "apns_topic": {
                            "description": "APNs topic for push notifications payload",
                            "type": "string"
                        },
                        "certificate": {
                            "description": "PEM-encoded key and certificate",
                            "type": "string"
                        },
                        "headers": {
                            "default": {},
                            "description": "pusher apple headers",
                            "type": "object"
                        },
                        "host": {
                            "default": "api.push.apple.com",
                            "description": "APNs server host",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "firebase": {
                    "default": {},
                    "description": "pusher firebase",
                    "properties": {
                        "api_key": {
                            "description": "API Key for firebase",
                            "type": "string"
                        },
                        "headers": {
                            "default": {},
                            "description": "pusher firebase headers",
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.qubicle": {
            "description": "Schema for qubicle system_config",
            "properties": {
                "enable_event_call_props": {
                    "default": false,
                    "description": "qubicle enable_event_call_props",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.registrar": {
            "description": "Schema for registrar system_config",
            "properties": {
                "device_enabled_default": {
                    "default": true,
                    "description": "registrar device enabled default",
                    "type": "boolean"
                },
                "listeners": {
                    "default": 1,
                    "description": "registrar listeners",
                    "type": "integer"
                },
                "owner_enabled_default": {
                    "default": true,
                    "description": "registrar owner enabled default",
                    "type": "boolean"
                },
                "use_aggregate": {
                    "default": true,
                    "description": "registrar use aggregate",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.reorder": {
            "description": "Schema for reorder system_config",
            "properties": {
                "assume_inbound_e164": {
                    "default": false,
                    "description": "reorder assume inbound e164",
                    "type": "boolean"
                },
                "known_number": {
                    "description": "setting for how to response if the number is known but unconfigured",
                    "properties": {
                        "action": {
                            "default": "respond",
                            "description": "the action to take for unconfigured numbers",
                            "enum": [
                                "respond",
                                "transfer",
                                "bridge"
                            ],
                            "type": "string"
                        },
                        "bridge_account_id": {
                            "description": "the account id that the bridge_device_id belongs to",
                            "type": "string"
                        },
                        "bridge_device_id": {
                            "description": "the device id to bridge unconfigured numbers to",
                            "type": "string"
                        },
                        "response_code": {
                            "default": "686",
                            "description": "reorder code for replies to unconfigured numbers",
                            "type": "string"
                        },
                        "response_message": {
                            "default": "PICNIC",
                            "description": "reorder message for replies to unconfigured numbers",
                            "type": "string"
                        },
                        "transfer_target": {
                            "description": "onnet phone number to transfer unconfigured numbers to",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "unknown_number": {
                    "description": "setting for how to response if the number is not in the numbers database",
                    "properties": {
                        "action": {
                            "default": "respond",
                            "description": "the action to take for unknown numbers",
                            "enum": [
                                "respond",
                                "transfer",
                                "bridge"
                            ],
                            "type": "string"
                        },
                        "bridge_account_id": {
                            "description": "the account id that the bridge_device_id belongs to",
                            "type": "string"
                        },
                        "bridge_device_id": {
                            "description": "the device id to bridge unknown numbers to",
                            "type": "string"
                        },
                        "response_code": {
                            "default": "604",
                            "description": "reorder code for replies to unknown numbers",
                            "type": "string"
                        },
                        "response_message": {
                            "default": "Nope Nope Nope",
                            "description": "reorder message for replies to unknown numbers",
                            "type": "string"
                        },
                        "transfer_target": {
                            "description": "onnet phone number to transfer unknown numbers to",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_config.servers": {
            "description": "Schema for servers system_config",
            "properties": {
                "clock_timezone": {
                    "default": "UTC",
                    "description": "servers clock timezone",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.services": {
            "description": "Schema for services system_config",
            "properties": {
                "cascade_commits_to_master_account": {
                    "default": true,
                    "description": "services cascade_commits_to_master_account",
                    "type": "boolean"
                },
                "debug_services_quantities": {
                    "default": false,
                    "description": "services debug_services_quantities",
                    "type": "boolean"
                },
                "default_allow_updates": {
                    "default": true,
                    "description": "services default allow updates",
                    "type": "boolean"
                },
                "enforce_good_standing": {
                    "default": false,
                    "description": "services enforce_good_standing",
                    "type": "boolean"
                },
                "get_items_from_quantities": {
                    "description": "services get_items_from_quantities",
                    "type": "boolean"
                },
                "hydrate_cascade_commits": {
                    "default": true,
                    "description": "When an account makes a change it triggers a propagation up the account hiearchy updating the cascade quantities, if this is set to false the cascade quantities are summed with the account update deltas.  If this is set to true then the views will be invoked to fully reconcile the quantities (hydrate) during the cascade commits, a more expensive DB operation but provides self-corrective quantities.",
                    "type": "boolean"
                },
                "master_account_bookkeeper": {
                    "default": "kz_bookkeeper_local",
                    "description": "services master account bookkeeper",
                    "type": "string"
                },
                "merge_strategy_priority": {
                    "default": {
                        "cumulative": 20,
                        "recursive": 25,
                        "simple": 10
                    },
                    "description": "the object keys map to merge strategies and the values are expected to be an integer defining the merge priority between strategies",
                    "type": "object"
                },
                "modules": {
                    "description": "services modules",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "reseller_bookkeeper_lookup": {
                    "default": false,
                    "description": "allow resellers configure bookkeeper for children billing",
                    "type": "boolean"
                },
                "scan_rate": {
                    "default": 20000,
                    "description": "services scan rate",
                    "type": "integer"
                },
                "should_save_master_audit_logs": {
                    "default": false,
                    "description": "services should save master audit logs",
                    "type": "boolean"
                },
                "support_billing_id": {
                    "default": true,
                    "description": "services support billing id",
                    "type": "boolean"
                },
                "sync_buffer_period": {
                    "default": 600,
                    "description": "services sync buffer period",
                    "type": "integer"
                },
                "sync_services": {
                    "default": false,
                    "description": "services sync services",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.services.http_sync": {
            "description": "Schema for services.http_sync system_config",
            "properties": {
                "authorization_header": {
                    "default": "",
                    "description": "services http sync authorization header",
                    "type": "string"
                },
                "connect_timeout_ms": {
                    "default": 10000,
                    "description": "services http sync connect timeout in milliseconds",
                    "type": "integer"
                },
                "http_url": {
                    "default": "",
                    "description": "services http sync http url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.sms": {
            "description": "Schema for sms system_config",
            "properties": {
                "outbound": {
                    "properties": {
                        "options": {
                            "default": {
                                "delivery_mode": 2,
                                "mandatory": true
                            },
                            "description": "sms options",
                            "type": "object"
                        }
                    }
                }
            },
            "type": "object"
        },
        "system_config.sms_command": {
            "description": "Schema for sms_command system_config",
            "properties": {
                "application_timeout": {
                    "default": 500000,
                    "description": "sms_command application timeout",
                    "type": "integer"
                },
                "collect_timeout": {
                    "default": 60000,
                    "description": "sms_command collect timeout",
                    "type": "integer"
                },
                "message_timeout": {
                    "default": 60000,
                    "description": "sms_command message timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.smtp_client": {
            "description": "Schema for smtp_client system_config",
            "properties": {
                "auth": {
                    "default": "never",
                    "description": "smtp_client auth",
                    "type": "string"
                },
                "no_mx_lookups": {
                    "default": true,
                    "description": "smtp_client no mx lookups",
                    "type": "boolean"
                },
                "password": {
                    "default": "",
                    "description": "smtp_client password",
                    "type": "string"
                },
                "port": {
                    "default": 25,
                    "description": "smtp_client port",
                    "type": "integer"
                },
                "relay": {
                    "default": "localhost",
                    "description": "smtp_client relay",
                    "type": "string"
                },
                "retries": {
                    "default": 1,
                    "description": "smtp_client retries",
                    "type": "integer"
                },
                "send_timeout_ms": {
                    "default": 10000,
                    "description": "Timeout in milliseconds waiting for response from SMTP server",
                    "minimum": 1,
                    "type": "integer"
                },
                "tls": {
                    "description": "smtp_client tls",
                    "type": "string"
                },
                "use_ssl": {
                    "default": false,
                    "description": "smtp_client use SSL",
                    "type": "boolean"
                },
                "username": {
                    "default": "",
                    "description": "smtp_client username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.speech": {
            "description": "Schema for speech system_config",
            "properties": {
                "asr_api_key": {
                    "default": "",
                    "description": "speech asr API key",
                    "type": "string"
                },
                "asr_locale": {
                    "default": "en-us",
                    "description": "speech asr default locale",
                    "type": "string"
                },
                "asr_mime_type": {
                    "default": "application/wav",
                    "description": "speech asr mime type",
                    "type": "string"
                },
                "asr_preferred_content_type": {
                    "default": "application/wav",
                    "description": "speech asr preferred content type",
                    "type": "string"
                },
                "asr_provider": {
                    "default": "ispeech",
                    "description": "speech asr provider",
                    "type": "string"
                },
                "asr_url": {
                    "default": "http://api.ispeech.org/api/json",
                    "description": "speech asr url",
                    "type": "string"
                },
                "temporary_storage_path": {
                    "default": "/tmp",
                    "description": "speech temporary storage path",
                    "type": "string"
                },
                "tts_api_key": {
                    "default": "",
                    "description": "speech tts api key",
                    "type": "string"
                },
                "tts_args_encode": {
                    "default": "multipart",
                    "description": "speech tts args encode",
                    "type": "string"
                },
                "tts_cache": {
                    "default": 3600000,
                    "description": "How long, in milliseconds, to cache TTS media files",
                    "type": "integer"
                },
                "tts_end_padding": {
                    "default": 0,
                    "description": "speech tts end padding",
                    "type": "integer"
                },
                "tts_language": {
                    "default": "en-us",
                    "description": "speech tts language",
                    "type": "string"
                },
                "tts_provider": {
                    "default": "flite",
                    "description": "speech tts provider",
                    "type": "string"
                },
                "tts_speed": {
                    "default": 0,
                    "description": "speech tts speed",
                    "type": "integer"
                },
                "tts_start_padding": {
                    "default": 1,
                    "description": "speech tts start padding",
                    "type": "integer"
                },
                "tts_url_ispeech": {
                    "default": "http://api.ispeech.org/api/json",
                    "description": "speech TTS URL for iSpeech provider",
                    "type": "string"
                },
                "tts_url_voicefabric": {
                    "default": "https://voicefabric.ru/WSServer/ws/tts",
                    "description": "speech TTS URL for VoiceFabric provider",
                    "type": "string"
                },
                "tts_voice": {
                    "default": "male",
                    "description": "speech tts voice",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.speech.google": {
            "description": "Schema for speech.google system_config",
            "properties": {
                "asr_api_key": {
                    "default": "",
                    "description": "API key for Google Cloud Speech",
                    "type": "string"
                },
                "asr_enable_automatic_punctuation": {
                    "default": true,
                    "description": "detect and insert punctuation in transcription results",
                    "type": "boolean"
                },
                "asr_enable_word_time_offsets": {
                    "description": "top result includes a list of words and the start and end time offsets",
                    "type": "boolean"
                },
                "asr_model": {
                    "default": "phone_call",
                    "description": "model to select for the given request",
                    "enum": [
                        "command_and_search",
                        "phone_call",
                        "video",
                        "default"
                    ],
                    "type": "string"
                },
                "asr_profanity_filter": {
                    "description": "server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisk",
                    "type": "boolean"
                },
                "asr_url": {
                    "default": "https://speech.googleapis.com/v1/speech:recognize",
                    "description": "Google Cloud Speech API url",
                    "type": "string"
                },
                "asr_use_enhanced": {
                    "default": true,
                    "description": "use an enhanced model for speech recognition",
                    "type": "boolean"
                },
                "tts_api_key": {
                    "default": "",
                    "description": "speech google tts_api_key",
                    "type": "string"
                },
                "tts_url": {
                    "default": "https://texttospeech.googleapis.com/v1/text:synthesize",
                    "description": "speech google tts_url",
                    "type": "string"
                }
            },
            "required": [
                "asr_api_key"
            ],
            "type": "object"
        },
        "system_config.stepswitch": {
            "description": "Schema for stepswitch system_config",
            "properties": {
                "assume_inbound_e164": {
                    "default": false,
                    "description": "stepswitch assume inbound destination DID is e164 format",
                    "type": "boolean"
                },
                "assume_inbound_origination_e164": {
                    "default": false,
                    "description": "stepswitch assume inbound origination DID is e164 format",
                    "type": "boolean"
                },
                "cid_rules_honor_diversions": {
                    "default": false,
                    "description": "stepswitch cid rules honor diversions",
                    "type": "boolean"
                },
                "default_audio_codecs": {
                    "default": [],
                    "description": "stepswitch default audio codecs",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "default_bypass_media": {
                    "default": false,
                    "description": "stepswitch default bypass media",
                    "type": "boolean"
                },
                "default_caller_id_type": {
                    "default": "external",
                    "description": "stepswitch default caller id type",
                    "type": "string"
                },
                "default_codecs": {
                    "default": [],
                    "description": "stepswitch default codecs",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "default_emergency_cid_number": {
                    "description": "stepswitch default emergency cid number",
                    "type": "string"
                },
                "default_formatters": {
                    "description": "stepswitch default formatters",
                    "items": {
                        "$ref": "#/definitions/formatters",
                        "description": "default formatter",
                        "type": "object"
                    },
                    "type": "array"
                },
                "default_prefix": {
                    "default": "",
                    "description": "stepswitch default prefix",
                    "type": "string"
                },
                "default_progress_timeout": {
                    "default": 8,
                    "description": "stepswitch default progress timeout",
                    "type": "integer"
                },
                "default_route": {
                    "description": "stepswitch default route",
                    "type": "string"
                },
                "default_rtcp_mux": {
                    "description": "RTCP protocol messages mixed with RTP data",
                    "type": "string"
                },
                "default_suffix": {
                    "default": "",
                    "description": "stepswitch default suffix",
                    "type": "string"
                },
                "default_video_codecs": {
                    "default": [],
                    "description": "stepswitch default video codecs",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "default_weight": {
                    "default": 3,
                    "description": "stepswitch default weight",
                    "type": "integer"
                },
                "deny_emergency_bridge_cause": {
                    "default": "Emergency service not configured",
                    "description": "stepswitch deny emergency bridge cause",
                    "type": "string"
                },
                "deny_emergency_bridge_code": {
                    "default": 486,
                    "description": "stepswitch deny emergency bridge code",
                    "type": "integer"
                },
                "deny_emergency_bridge_media": {
                    "default": "prompt://system_media/stepswitch-emergency_not_configured/",
                    "description": "stepswitch deny emergency bridge media",
                    "type": "string"
                },
                "deny_invalid_emergency_cid": {
                    "default": false,
                    "description": "stepswitch deny invalid emergency cid",
                    "type": "boolean"
                },
                "ensure_valid_emergency_cid": {
                    "default": false,
                    "description": "stepswitch ensure valid emergency cid",
                    "type": "boolean"
                },
                "fixed_length_shortdial_correction": {
                    "description": "stepswitch fixed_length_shortdial_correction",
                    "minimum": 1,
                    "type": "integer"
                },
                "format_from_uri": {
                    "default": false,
                    "description": "stepswitch format from uri",
                    "type": "boolean"
                },
                "inbound_user_field": {
                    "default": "Request",
                    "description": "stepswitch inbound destination user field",
                    "type": "string"
                },
                "inbound_user_origination_field": {
                    "default": "From",
                    "description": "stepswitch inbound origination user field",
                    "type": "string"
                },
                "max_shortdial_correction": {
                    "default": 5,
                    "description": "stepswitch maximum shortdial correction",
                    "minimum": 1,
                    "type": "integer"
                },
                "min_shortdial_correction": {
                    "default": 2,
                    "description": "stepswitch minimum shortdial correction",
                    "minimum": 1,
                    "type": "integer"
                },
                "route_by": {
                    "default": "stepswitch_resources",
                    "description": "stepswitch route by",
                    "type": "string"
                },
                "use_first_dedicated_proxy_only": {
                    "default": true,
                    "description": "If gateways are generated for assigned dedicated IPs, only generate one for the first IP (usually local to the call).",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.stepswitch.cnam": {
            "description": "Schema for stepswitch.cnam system_config",
            "properties": {
                "cnam_expires": {
                    "default": 900,
                    "description": "stepswitch.cnam cnam expires",
                    "type": "integer"
                },
                "disable_normalize": {
                    "default": false,
                    "description": "stepswitch.cnam disable normalize",
                    "type": "boolean"
                },
                "http_accept_header": {
                    "default": "text/pbx,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                    "description": "stepswitch.cnam http accept header",
                    "type": "string"
                },
                "http_basic_auth_password": {
                    "default": "",
                    "description": "stepswitch.cnam http basic auth password",
                    "type": "string"
                },
                "http_basic_auth_username": {
                    "default": "",
                    "description": "stepswitch.cnam http basic auth username",
                    "type": "string"
                },
                "http_body": {
                    "default": "",
                    "description": "stepswitch.cnam http body",
                    "type": "string"
                },
                "http_connect_timeout_ms": {
                    "default": 500,
                    "description": "stepswitch.cnam http connect timeout in milliseconds",
                    "type": "integer"
                },
                "http_content_type_header": {
                    "default": "application/json",
                    "description": "stepswitch.cnam http content type header",
                    "type": "string"
                },
                "http_method": {
                    "default": "get",
                    "description": "stepswitch.cnam http method",
                    "type": "string"
                },
                "http_token_auth_token": {
                    "default": "",
                    "description": "stepswitch cnam http_token_auth_token",
                    "type": "string"
                },
                "http_url": {
                    "default": "https://api.opencnam.com/v2/phone/{{phone_number}}",
                    "description": "stepswitch.cnam http url",
                    "type": "string"
                },
                "http_user_agent_header": {
                    "default": "Kazoo Stepswitch CNAM",
                    "description": "stepswitch.cnam http user agent header",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.sysconf": {
            "description": "Schema for sysconf system_config",
            "properties": {
                "acl_request_timeout_fudge_ms": {
                    "default": 100,
                    "description": "sysconf acl request timeout fudge in milliseconds",
                    "type": "integer"
                },
                "acl_request_timeout_ms": {
                    "default": 2000,
                    "description": "sysconf acl request timeout in milliseconds",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.system_data": {
            "description": "Schema for system_data system_config",
            "properties": {
                "allow_validation_overrides": {
                    "default": false,
                    "description": "Whether to allow storage plans to skip validating attachment settings",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.tasks": {
            "description": "Schema for tasks system_config",
            "properties": {
                "aging_expiry_d": {
                    "default": 90,
                    "description": "tasks aging expiry in days",
                    "minimum": 0,
                    "type": "integer"
                },
                "attempt_upload_output_times": {
                    "default": 5,
                    "description": "how many times will the upload of the resulting CSV be attempted, cannot be zero",
                    "minimum": 1,
                    "type": "integer"
                },
                "browse_dbs_interval_s": {
                    "default": 86400,
                    "description": "tasks browse dbs interval in seconds",
                    "minimum": 1,
                    "type": "integer"
                },
                "crawler_delay_time_ms": {
                    "default": 60000,
                    "description": "tasks crawler delay time in milliseconds",
                    "type": "integer"
                },
                "crawler_timer_ms": {
                    "default": 86400000,
                    "description": "tasks crawler timer in milliseconds",
                    "minimum": 0,
                    "type": "integer"
                },
                "cycle_delay_time_ms": {
                    "default": 300000,
                    "description": "tasks cycle delay time in milliseconds",
                    "type": "integer"
                },
                "discovery_expiry_d": {
                    "default": 1,
                    "description": "tasks discovery expiry in days",
                    "minimum": 0,
                    "type": "integer"
                },
                "interaccount_delay_ms": {
                    "default": 10000,
                    "description": "tasks interaccount delay in milliseconds",
                    "type": "integer"
                },
                "low_balance_repeat_s": {
                    "default": 86400,
                    "description": "tasks low balance repeat in seconds",
                    "type": "integer"
                },
                "pause_between_upload_output_attempts_s": {
                    "default": 10,
                    "description": "the amount of time to pause between attempts to upload resulting CSV in seconds",
                    "minimum": 0,
                    "type": "integer"
                },
                "scan_rate": {
                    "default": 20000,
                    "description": "tasks scan_rate",
                    "minimum": 0,
                    "type": "integer"
                },
                "send_progress_after_processed": {
                    "default": 1000,
                    "description": "tasks send progress after processed",
                    "minimum": 1,
                    "type": "integer"
                },
                "should_archive_modbs": {
                    "default": false,
                    "description": "tasks should archive modbs",
                    "type": "boolean"
                },
                "should_crawl_for_first_occurrence": {
                    "default": true,
                    "description": "tasks should crawl for first occurrence",
                    "type": "boolean"
                },
                "should_crawl_for_low_balance": {
                    "default": true,
                    "description": "tasks should crawl for low balance",
                    "type": "boolean"
                },
                "soft_delete_pause_ms": {
                    "default": 10000,
                    "description": "tasks soft delete pause in milliseconds",
                    "type": "integer"
                },
                "support_billing_id": {
                    "default": true,
                    "description": "tasks support_billing_id",
                    "type": "boolean"
                },
                "sync_buffer_period": {
                    "default": 600,
                    "description": "tasks sync_buffer_period",
                    "minimum": 0,
                    "type": "integer"
                },
                "sync_services": {
                    "default": false,
                    "description": "tasks sync_services",
                    "type": "boolean"
                },
                "unfinished_port_request_lifetime_s": {
                    "default": 2592000,
                    "description": "tasks unfinished port request lifetime in seconds",
                    "type": "integer"
                },
                "wait_after_row_ms": {
                    "default": 500,
                    "description": "tasks wait after row in milliseconds",
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.tasks.bill_early": {
            "description": "Schema for tasks.bill_early system_config",
            "properties": {
                "bill_early_enabled": {
                    "default": false,
                    "description": "Controls whether we should bill early the accounts",
                    "type": "boolean"
                },
                "how_many_early_days": {
                    "default": 5,
                    "description": "How many days before first of the next month this task should start processing accounts",
                    "type": "integer"
                },
                "reminder_enabled": {
                    "default": false,
                    "description": "Controls whether we should send bill reminder for the accounts a few days before due date",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.tasks.fax_cleanup": {
            "description": "Schema for tasks.fax_cleanup system_config",
            "properties": {
                "enabled": {
                    "default": true,
                    "description": "Enables the cluster to run the fax cleanup task",
                    "type": "boolean"
                },
                "page_size": {
                    "default": 32,
                    "description": "The number of documents to process in one fetch operation",
                    "type": "integer"
                },
                "per_page_pause_ms": {
                    "default": 1000,
                    "description": "How many milliseconds to pause between chunk fetches",
                    "type": "integer"
                },
                "stale_after_s": {
                    "default": 604800,
                    "description": "The number of seconds old a document is before it is considered to be stale",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.tasks.ledger_rollover": {
            "description": "Schema for tasks.ledger_rollover system_config",
            "properties": {
                "refresh_in_parallel": {
                    "default": 50,
                    "description": "tasks ledger_rollover refresh_in_parallel",
                    "type": "integer"
                },
                "refresh_view_enabled": {
                    "default": false,
                    "description": "tasks ledger_rollover refresh_view_enabled",
                    "type": "boolean"
                },
                "rollover_in_parallel": {
                    "default": 10,
                    "description": "How many accounts to rollover per-pass (in parallel)",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.tasks.modb_creation": {
            "description": "Schema for tasks.modb_creation system_config",
            "properties": {
                "create_in_parallel": {
                    "default": 1,
                    "description": "How many accounts to process per pass (in parallel).",
                    "type": "integer"
                },
                "creation_day": {
                    "default": 28,
                    "description": "Which day of the month (of current month) to create next month's MODBs on",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.tasks.notify_resend": {
            "description": "Schema for tasks.notify_resend system_config",
            "properties": {
                "cycle_delay_time_ms": {
                    "default": 300000,
                    "description": "Timeout in milliseconds between each cycle",
                    "type": "integer"
                },
                "max_doc_read": {
                    "default": 20,
                    "description": "Max number of notifications to read from database for each cycle",
                    "type": "integer"
                },
                "max_retries": {
                    "default": 3,
                    "description": "Default max retries to re-publish",
                    "type": "integer"
                },
                "publish_timeout_ms": {
                    "default": 10000,
                    "description": "Timeout in milliseconds for publishing notification",
                    "minimum": 1,
                    "type": "integer"
                },
                "reschedule_rules": {
                    "default": {
                        "voicemail_new": {
                            "rules": {
                                "after_15_mins": {
                                    "attempt": 1,
                                    "retries": 4,
                                    "retry_after_s": 900
                                },
                                "after_45_mins": {
                                    "attempt": 2,
                                    "retries": 4,
                                    "retry_after_s": 2700
                                },
                                "after_one_day": {
                                    "attempt": 4,
                                    "retries": 4,
                                    "retry_after_s": 86400
                                },
                                "after_two_hours": {
                                    "attempt": 3,
                                    "retries": 4,
                                    "retry_after_s": 7200
                                }
                            }
                        }
                    },
                    "description": "Re-schedule rules for each notification type to apply",
                    "type": "object"
                },
                "retry_after_fudge_s": {
                    "default": 600000,
                    "description": "Constant time in seconds which would be multiplied with attempts to set retry time",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.tasks.numbers": {
            "description": "Schema for tasks.numbers system_config",
            "properties": {
                "db_page_size": {
                    "default": 1000,
                    "description": "maximum count of numbers read from db at once",
                    "type": "integer"
                },
                "import_defaults_to_carrier": {
                    "default": "knm_local",
                    "description": "carrier module to use if none provided during numbers import",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.tasks.services_rollover": {
            "description": "Schema for tasks.services_rollover system_config",
            "properties": {
                "rollover_in_parallel": {
                    "default": 10,
                    "description": "How many accounts to rollover services for per pass (in parallel)",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.teletype": {
            "description": "Schema for teletype system_config",
            "properties": {
                "iterate_over_bcc": {
                    "default": true,
                    "description": "teletype iterate over bcc",
                    "type": "boolean"
                },
                "notice_enabled_by_default": {
                    "default": true,
                    "description": "Specify if template is considered enabled by default when teletype tries to process that notification",
                    "type": "boolean"
                },
                "render_farm_workers": {
                    "default": 50,
                    "description": "teletype render farm workers",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "system_config.token_buckets": {
            "description": "Schema for token_buckets system_config",
            "properties": {
                "default": {
                    "properties": {
                        "max_bucket_tokens": {
                            "default": 100,
                            "description": "token_buckets maximum bucket tokens",
                            "type": "integer"
                        }
                    }
                },
                "inactivity_timeout_s": {
                    "default": 600,
                    "description": "token_buckets inactivity timeout in seconds",
                    "type": "integer"
                },
                "tokens_fill_rate": {
                    "default": 10,
                    "description": "token_buckets tokens fill rate",
                    "type": "integer"
                },
                "tokens_fill_time": {
                    "default": "second",
                    "description": "token_buckets tokens fill time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "system_config.topup": {
            "description": "Schema for topup system_config",
            "properties": {
                "enable": {
                    "default": false,
                    "description": "topup enable",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.trunkstore": {
            "description": "Schema for trunkstore system_config",
            "properties": {
                "default_caller_id_number": {
                    "description": "trunkstore default caller id number",
                    "type": "string"
                },
                "default_hunt_non_reconcilable": {
                    "default": false,
                    "description": "trunkstore default hunt non reconcilable",
                    "type": "boolean"
                },
                "ensure_valid_caller_id": {
                    "default": false,
                    "description": "trunkstore ensure valid caller id",
                    "type": "boolean"
                },
                "honor_diversions_by_cid_validation": {
                    "default": false,
                    "description": "trunkstore honor diversions by cid validation",
                    "type": "boolean"
                },
                "pool_overflow": {
                    "default": 100,
                    "description": "trunkstore pool_overflow",
                    "type": "integer"
                },
                "pool_server_confirms": {
                    "default": false,
                    "description": "trunkstore pool_server_confirms",
                    "type": "boolean"
                },
                "pool_size": {
                    "default": 150,
                    "description": "trunkstore pool_size",
                    "type": "integer"
                },
                "pool_threshold": {
                    "default": 5,
                    "description": "trunkstore pool_threshold",
                    "type": "integer"
                },
                "ring_ready_offnet": {
                    "default": true,
                    "description": "trunkstore ring ready offnet",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "system_config.webhooks": {
            "description": "Schema for webhooks system_config",
            "properties": {
                "attempt_failure_count": {
                    "default": 6,
                    "description": "webhooks attempt failure count",
                    "type": "integer"
                },
                "attempt_failure_expiry_ms": {
                    "default": 60000,
                    "description": "webhooks attempt failure expiry in milliseconds",
                    "type": "integer"
                },
                "connect_timeout_ms": {
                    "default": 10000,
                    "description": "webhooks connect timeout in milliseconds",
                    "type": "integer"
                },
                "disable_disabler": {
                    "default": false,
                    "description": "if true webhooks will not be automatically disabled",
                    "type": "boolean"
                },
                "log_successful_attempts": {
                    "default": false,
                    "description": "webhooks log successful attempts",
                    "type": "boolean"
                },
                "object_types": {
                    "description": "webhooks object types",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "system_config.whitelabel": {
            "description": "Schema for whitelabel system_config",
            "properties": {
                "domains": {
                    "description": "whitelabel domains",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "system_configs": {
            "description": "Schema for system_config documents",
            "properties": {
                "default": {
                    "default": {},
                    "description": "default settings that apply to all nodes/zones if not defined",
                    "type": "object"
                }
            },
            "required": [
                "default"
            ],
            "type": "object"
        },
        "tasks": {
            "description": "Input data to go through as part of a background task",
            "properties": {
                "file_name": {
                    "description": "Human-readable name of a task's input file",
                    "type": "string"
                },
                "records": {
                    "description": "List the rows of input data",
                    "items": {
                        "type": "object"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "temporal_rules": {
            "description": "Schema for a temporal rules",
            "properties": {
                "cycle": {
                    "description": "The recurrence cycle for this rule",
                    "enum": [
                        "date",
                        "daily",
                        "weekly",
                        "monthly",
                        "yearly"
                    ],
                    "type": "string"
                },
                "days": {
                    "description": "The recurrence days for this rule",
                    "items": {
                        "maximum": 31,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "type": "array"
                },
                "enabled": {
                    "description": "Whether the rule is enabled",
                    "type": "boolean"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "interval": {
                    "default": 1,
                    "description": "The recurrence interval for this rule",
                    "minimum": 1,
                    "type": "integer"
                },
                "month": {
                    "description": "The recurrence month for this rule",
                    "maximum": 12,
                    "minimum": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "A friendly name for the temporal rule",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "ordinal": {
                    "description": "The recurrence ordinal for this rule",
                    "enum": [
                        "every",
                        "first",
                        "second",
                        "third",
                        "fourth",
                        "fifth",
                        "last"
                    ],
                    "type": "string"
                },
                "start_date": {
                    "default": 62586115200,
                    "description": "The date that any recurrence should be calculated as starting on",
                    "type": "integer"
                },
                "time_window_start": {
                    "description": "Seconds from the start of a day to consider this rule valid",
                    "maximum": 86400,
                    "minimum": 0,
                    "type": "integer"
                },
                "time_window_stop": {
                    "description": "Seconds from the start of a day to stop considering this rule valid",
                    "maximum": 86400,
                    "minimum": 0,
                    "type": "integer"
                },
                "wdays": {
                    "description": "The recurrence weekdays for this rule",
                    "items": {
                        "enum": [
                            "monday",
                            "tuesday",
                            "wednesday",
                            "wensday",
                            "thursday",
                            "friday",
                            "saturday",
                            "sunday"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "cycle",
                "name"
            ],
            "type": "object"
        },
        "temporal_rules_sets": {
            "description": "Schema for a temporal rules sets",
            "properties": {
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "A friendly name for the temporal rule set",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "temporal_rules": {
                    "description": "Temporal Rules",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "token_restrictions": {
            "description": "Schema for token restrictions",
            "properties": {
                "restrictions": {
                    "type": "object"
                }
            },
            "type": "object"
        },
        "trunkstore": {
            "description": "Trunkstore configuration document - this is old stuff; do not recommend building off this if possible",
            "properties": {
                "account": {
                    "description": "Information that applies to the account as a whole",
                    "properties": {
                        "auth_realm": {
                            "description": "The realm any device in the account will use to authenticate with",
                            "minLength": 1,
                            "type": "string"
                        },
                        "caller_id": {
                            "properties": {
                                "cid_name": {
                                    "maxLength": 35,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "cid_number": {
                                    "maxLength": 35,
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "cid_name",
                                "cid_number"
                            ],
                            "type": "object"
                        },
                        "credits": {
                            "properties": {
                                "prepay": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "prepay"
                            ],
                            "type": "object"
                        },
                        "emergency_caller_id": {
                            "properties": {
                                "cid_name": {
                                    "maxLength": 35,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "cid_number": {
                                    "maxLength": 35,
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "cid_name",
                                "cid_number"
                            ],
                            "type": "object"
                        },
                        "trunks": {
                            "description": "The number of two-way trunks this account has purchased",
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "required": [
                        "auth_realm",
                        "credits",
                        "trunks"
                    ],
                    "type": "object"
                },
                "call_restriction": {
                    "additionalProperties": {
                        "properties": {
                            "action": {
                                "description": "If set to deny all calls of this type will be rejected.",
                                "enum": [
                                    "inherit",
                                    "deny"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "default": {},
                    "description": "Trunk level call restrictions for each available number classification",
                    "type": "object"
                },
                "name": {
                    "description": "Human-friendly name of the trunkstore account",
                    "type": "string"
                },
                "servers": {
                    "default": [],
                    "description": "What servers will be allowed to make/receive calls via this account",
                    "items": {
                        "properties": {
                            "DIDs": {
                                "type": "object"
                            },
                            "auth": {
                                "properties": {
                                    "auth_method": {
                                        "description": "What type of auth mechanism to use",
                                        "enum": [
                                            "password"
                                        ],
                                        "type": "string"
                                    },
                                    "auth_password": {
                                        "description": "Password of the user@auth_realm",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "auth_user": {
                                        "description": "Username for authentication",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "auth_method",
                                    "auth_password",
                                    "auth_user"
                                ],
                                "type": "object"
                            },
                            "name": {
                                "description": "Human-friendly name of the server",
                                "minLength": 1,
                                "type": "string"
                            },
                            "options": {
                                "properties": {
                                    "caller_id": {
                                        "properties": {
                                            "cid_name": {
                                                "maxLength": 35,
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "cid_number": {
                                                "maxLength": 35,
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "cid_name",
                                            "cid_number"
                                        ],
                                        "type": "object"
                                    },
                                    "delay": {
                                        "default": 0,
                                        "description": "The time, in seconds, to wait before attempting to call the server",
                                        "type": "integer"
                                    },
                                    "enabled": {
                                        "default": true,
                                        "description": "Is the server ready for sending and receiving calls",
                                        "type": "boolean"
                                    },
                                    "failover": {
                                        "description": "Route inbound call to another destination if this server fails to handle the call",
                                        "properties": {
                                            "e164": {
                                                "description": "An E.164 formatted DID to dial for failover",
                                                "type": "string"
                                            },
                                            "sip": {
                                                "description": "A SIP URI (sip:user@host) to call for failover",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "force_outbound": {
                                        "default": false,
                                        "description": "If true, will send the call over configured carriers instead of to the server (as opposed to the 'enabled' flag, which will reject the calls)",
                                        "type": "boolean"
                                    },
                                    "ignore_early_media": {
                                        "type": "boolean"
                                    },
                                    "inbound_format": {
                                        "default": "npan",
                                        "description": "Determines how the INVITE is sent to the server",
                                        "enum": [
                                            "e164",
                                            "npan",
                                            "1npan",
                                            "username"
                                        ],
                                        "type": "string"
                                    },
                                    "media_handling": {
                                        "default": "bypass",
                                        "description": "Determine whether the switch should be in the media path or not",
                                        "enum": [
                                            "process",
                                            "bypass"
                                        ],
                                        "type": "string"
                                    },
                                    "progress_timeout": {
                                        "description": "The time, in seconds, to wait for the server to progress in the call, before trying an optionally defined failover route or terminating the call",
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "sip_headers": {
                                        "description": "List of arbitrary SIP headers to add to the INVITE",
                                        "items": {
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "timeout": {
                                        "description": "The time, in seconds, to wait for an answer from the server",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "required": [
                            "auth"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The type of the document (pvt_type in Crossbar docs)",
                    "enum": [
                        "sys_info"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "account",
                "type"
            ]
        },
        "user_auth": {
            "description": "Provides an auth-token via user credentials",
            "properties": {
                "account_name": {
                    "description": "The account name of the user",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "account_realm": {
                    "description": "The account realm of the user",
                    "maxLength": 253,
                    "minLength": 4,
                    "pattern": "^[.\\w_-]+$",
                    "type": "string"
                },
                "credentials": {
                    "description": "A hash of the uses credentials",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string"
                },
                "method": {
                    "default": "md5",
                    "description": "The hash method",
                    "enum": [
                        "md5",
                        "sha"
                    ],
                    "type": "string"
                },
                "phone_number": {
                    "description": "A phone number assigned to the users account",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "credentials"
            ],
            "type": "object"
        },
        "user_auth_recovery": {
            "description": "Send a reset-your-password email via user credentials",
            "properties": {
                "account_name": {
                    "description": "The account name of the user",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string"
                },
                "account_realm": {
                    "description": "The account realm of the user",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string"
                },
                "phone_number": {
                    "description": "A phone number assigned to the user's account",
                    "maxLength": 64,
                    "minLength": 1,
                    "type": "string"
                },
                "ui_url": {
                    "description": "The UI's root URL",
                    "maxLength": 2000,
                    "minLength": 14,
                    "type": "string"
                },
                "username": {
                    "description": "The user's username",
                    "maxLength": 254,
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "ui_url",
                "username"
            ],
            "type": "object"
        },
        "user_auth_recovery_reset": {
            "description": "Request a password reset from a trusted source",
            "properties": {
                "reset_id": {
                    "description": "The UUID that is part of the password-reset link",
                    "pattern": "^[a-fA-F0-9]{40,250}$",
                    "type": "string"
                }
            },
            "required": [
                "reset_id"
            ],
            "type": "object"
        },
        "users": {
            "description": "Schema for a user",
            "properties": {
                "call_forward": {
                    "description": "The device call forward parameters",
                    "properties": {
                        "direct_calls_only": {
                            "default": false,
                            "description": "Determines if the calls that are not directly sent to the device should be forwarded",
                            "type": "boolean"
                        },
                        "enabled": {
                            "default": false,
                            "description": "Determines if the call forwarding should be used",
                            "type": "boolean"
                        },
                        "failover": {
                            "default": false,
                            "description": "Enable the call-forwarding parameters if the device is offline",
                            "type": "boolean"
                        },
                        "ignore_early_media": {
                            "default": true,
                            "description": "The option to determine if early media from the call forwarded number should ignored",
                            "type": "boolean"
                        },
                        "keep_caller_id": {
                            "default": true,
                            "description": "Determines if the caller id is kept when the call is forwarded, if not the devices caller id is used",
                            "type": "boolean"
                        },
                        "number": {
                            "description": "The number to forward calls to",
                            "maxLength": 35,
                            "type": "string"
                        },
                        "require_keypress": {
                            "default": true,
                            "description": "Determines if the callee is prompted to press 1 to accept the call",
                            "type": "boolean"
                        },
                        "substitute": {
                            "default": true,
                            "description": "Determines if the call forwarding replaces the device",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "call_recording": {
                    "$ref": "#/definitions/call_recording"
                },
                "call_restriction": {
                    "additionalProperties": {
                        "properties": {
                            "action": {
                                "description": "If set to deny all calls of this type will be rejected.  If set to inherit the user/device rules apply",
                                "enum": [
                                    "inherit",
                                    "deny"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "default": {},
                    "description": "Device level call restrictions for each available number classification",
                    "type": "object"
                },
                "call_waiting": {
                    "$ref": "#/definitions/call_waiting"
                },
                "caller_id": {
                    "$ref": "#/definitions/caller_id",
                    "description": "The device caller ID parameters"
                },
                "caller_id_options": {
                    "description": "custom properties for configuring caller_id",
                    "properties": {
                        "outbound_privacy": {
                            "description": "Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing",
                            "enum": [
                                "full",
                                "name",
                                "number",
                                "none"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "contact_list": {
                    "default": {},
                    "description": "Contact List Parameters",
                    "properties": {
                        "exclude": {
                            "description": "If set to true the device is excluded from the contact list",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "dial_plan": {
                    "$ref": "#/definitions/dialplans",
                    "description": "A list of rules used to modify dialed numbers"
                },
                "directories": {
                    "description": "Provides the mappings for what directory the user is a part of (the key), and what callflow (the value) to invoke if the user is selected by the caller.",
                    "type": "object"
                },
                "do_not_disturb": {
                    "description": "DND Parameters",
                    "properties": {
                        "enabled": {
                            "description": "Is do-not-disturb enabled for this user?",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "email": {
                    "description": "The email of the user",
                    "format": "email",
                    "maxLength": 254,
                    "minLength": 3,
                    "type": "string"
                },
                "enabled": {
                    "default": true,
                    "description": "Determines if the user is currently enabled",
                    "type": "boolean"
                },
                "feature_level": {
                    "description": "The user level for assigning feature sets",
                    "type": "string"
                },
                "first_name": {
                    "description": "The first name of the user",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "formatters": {
                    "$ref": "#/definitions/formatters",
                    "type": "object"
                },
                "hotdesk": {
                    "default": {},
                    "description": "The user hotdesk parameters",
                    "properties": {
                        "enabled": {
                            "default": false,
                            "description": "Determines if the user has hotdesking enabled",
                            "type": "boolean"
                        },
                        "id": {
                            "description": "The users hotdesk id",
                            "maxLength": 15,
                            "type": "string"
                        },
                        "keep_logged_in_elsewhere": {
                            "default": false,
                            "description": "Determines if user should be able to login to multiple phones simultaneously",
                            "type": "boolean"
                        },
                        "pin": {
                            "description": "The users hotdesk pin number",
                            "maxLength": 15,
                            "minLength": 4,
                            "type": "string"
                        },
                        "require_pin": {
                            "default": false,
                            "description": "Determines if user requires a pin to change the hotdesk state",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "language": {
                    "description": "The language for this user",
                    "type": "string"
                },
                "last_name": {
                    "description": "The last name of the user",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "media": {
                    "$ref": "#/definitions/endpoint.media",
                    "description": "Configure audio/video/etc media options for this user"
                },
                "metaflows": {
                    "$ref": "#/definitions/metaflows",
                    "description": "The device metaflow parameters"
                },
                "music_on_hold": {
                    "default": {},
                    "description": "The music on hold parameters used if not a property of the device owner",
                    "properties": {
                        "media_id": {
                            "description": "The ID of a media object that should be used as the music on hold",
                            "maxLength": 128,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "password": {
                    "description": "The GUI login password",
                    "type": "string"
                },
                "presence_id": {
                    "description": "Static presence ID (used instead of SIP username)",
                    "type": "string"
                },
                "priv_level": {
                    "default": "user",
                    "description": "The privilege level of the user",
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "type": "string"
                },
                "profile": {
                    "$ref": "#/definitions/profile",
                    "description": "User's profile data"
                },
                "pronounced_name": {
                    "description": "Name pronounced by user to introduce himself to conference members",
                    "properties": {
                        "media_id": {
                            "description": "The ID of a media object that should be used as the music on hold",
                            "maxLength": 128,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "require_password_update": {
                    "default": false,
                    "description": "UI flag that the user should update their password.",
                    "type": "boolean"
                },
                "ringtones": {
                    "default": {},
                    "description": "Ringtone Parameters",
                    "properties": {
                        "external": {
                            "description": "The alert info SIP header added when the call is from internal sources",
                            "maxLength": 256,
                            "type": "string"
                        },
                        "internal": {
                            "description": "The alert info SIP header added when the call is from external sources",
                            "maxLength": 256,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "timezone": {
                    "description": "User's timezone",
                    "type": "string"
                },
                "username": {
                    "description": "The GUI login username - alpha-numeric, dashes, at symbol, periods, plusses, and underscores allowed",
                    "maxLength": 256,
                    "minLength": 1,
                    "pattern": "^([+@.\\w_-]+)$",
                    "type": "string"
                },
                "verified": {
                    "default": false,
                    "description": "Determines if the user has been verified",
                    "type": "boolean"
                },
                "vm_to_email_enabled": {
                    "default": true,
                    "description": "Determines if the user would like voicemails emailed to them",
                    "type": "boolean"
                },
                "voicemail": {
                    "properties": {
                        "notify": {
                            "properties": {
                                "callback": {
                                    "$ref": "#/definitions/notify.callback"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "first_name",
                "last_name"
            ],
            "type": "object"
        },
        "vm_message_metadata": {
            "description": "Schema for a voicemail message metadata",
            "properties": {
                "call_id": {
                    "description": "The SIP call-id",
                    "type": "string"
                },
                "caller_id_name": {
                    "description": "The caller id name",
                    "maxLength": 35,
                    "type": "string"
                },
                "caller_id_number": {
                    "description": "The caller id number",
                    "maxLength": 35,
                    "type": "string"
                },
                "folder": {
                    "description": "The folder the message belongs to",
                    "enum": [
                        "deleted",
                        "saved",
                        "new"
                    ],
                    "type": "string"
                },
                "from": {
                    "description": "The SIP from header",
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                },
                "timestamp": {
                    "description": "The UTC timestamp, in Gregorian seconds, that the voicemail was left on",
                    "type": "integer"
                },
                "to": {
                    "description": "The SIP to header",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "vmboxes": {
            "description": "Schema for a voicemail box",
            "properties": {
                "check_if_owner": {
                    "default": true,
                    "description": "Determines if when the user calls their own voicemail they should be prompted to sign in",
                    "type": "boolean"
                },
                "delete_after_notify": {
                    "default": false,
                    "description": "Move the voicemail to delete folder after the notification has been sent",
                    "type": "boolean"
                },
                "flags": {
                    "description": "Flags set by external applications",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "is_setup": {
                    "default": false,
                    "description": "Determines if the user has completed the initial configuration",
                    "type": "boolean"
                },
                "is_voicemail_ff_rw_enabled": {
                    "default": false,
                    "description": "callflow allow fastforward and rewind during voicemail message playback",
                    "type": "boolean"
                },
                "mailbox": {
                    "description": "The voicemail box number",
                    "maxLength": 30,
                    "minLength": 1,
                    "type": "string"
                },
                "media": {
                    "default": {},
                    "description": "The media (prompt) parameters",
                    "properties": {
                        "unavailable": {
                            "description": "The ID of a media object that should be used as the unavailable greeting",
                            "maxLength": 32,
                            "minLength": 32,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "media_extension": {
                    "default": "mp3",
                    "description": "Voicemail audio format",
                    "enum": [
                        "mp3",
                        "mp4",
                        "wav"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "A friendly name for the voicemail box",
                    "maxLength": 128,
                    "minLength": 1,
                    "type": "string"
                },
                "not_configurable": {
                    "default": false,
                    "description": "Determines if the user can configure this voicemail.",
                    "type": "boolean"
                },
                "notify": {
                    "properties": {
                        "callback": {
                            "$ref": "#/definitions/notify.callback"
                        }
                    },
                    "type": "object"
                },
                "notify_email_addresses": {
                    "default": [],
                    "description": "List of email addresses to send notifications to (in addition to owner's email, if any)",
                    "items": {
                        "format": "email",
                        "type": "string"
                    },
                    "type": "array"
                },
                "oldest_message_first": {
                    "default": false,
                    "description": "Play older voicemail messages before new ones",
                    "type": "boolean"
                },
                "operator_number": {
                    "description": "Alternate/override number to use when calling operator from voicemail",
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "owner_id": {
                    "description": "The ID of the user object that 'owns' the voicemail box",
                    "maxLength": 32,
                    "minLength": 32,
                    "type": "string"
                },
                "pin": {
                    "description": "The pin number for the voicemail box",
                    "maxLength": 6,
                    "minLength": 4,
                    "type": "string"
                },
                "require_pin": {
                    "default": false,
                    "description": "Determines if a pin is required to check the voicemail from the users devices",
                    "type": "boolean"
                },
                "save_after_notify": {
                    "default": false,
                    "description": "Move the voicemail to save folder after the notification has been sent (This setting will override delete_after_notify)",
                    "type": "boolean"
                },
                "seek_duration_ms": {
                    "default": 10000,
                    "description": "callflow fastforward and rewind seek duration",
                    "minimum": 0,
                    "type": "integer"
                },
                "skip_envelope": {
                    "default": false,
                    "description": "Determines if the envelope should be skipped",
                    "type": "boolean"
                },
                "skip_greeting": {
                    "default": false,
                    "description": "Determines if the greeting should be skipped",
                    "type": "boolean"
                },
                "skip_instructions": {
                    "default": false,
                    "description": "Determines if the instructions after the greeting and prior to composing a message should be played",
                    "type": "boolean"
                },
                "timezone": {
                    "description": "The default timezone",
                    "maxLength": 32,
                    "minLength": 5,
                    "type": "string"
                },
                "transcribe": {
                    "default": false,
                    "description": "Transcribe voicemail using ASR engine",
                    "type": "boolean"
                }
            },
            "required": [
                "mailbox",
                "name"
            ],
            "type": "object"
        },
        "voicemail_keys": {
            "description": "DTMF keys for voicemail callflow module",
            "properties": {
                "configure": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will enter the config menu when pressed at the main menu"
                },
                "continue": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will continue to the next callflow element when pressed at the greeting or instructions menu"
                },
                "delete": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will delete the voicemail message when pressed at the post playback menu"
                },
                "exit": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will exit the main menu when pressed"
                },
                "fastforward": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will seek the playback forward for seek_duration_ms ms"
                },
                "hear_new": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will play new voicemail messages when pressed at the main menu"
                },
                "hear_saved": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will play saved voicemail messages when pressed at the main menu"
                },
                "keep": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will keep the voicemail message when pressed at the post playback menu"
                },
                "listen": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will listen to the recording when pressed at the recording review menu"
                },
                "login": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will log into the voicemail box when pressed at the compose voicemail menu"
                },
                "next": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will go to the next voicemail message when pressed at the post playback menu"
                },
                "operator": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will call the operator when pressed"
                },
                "prev": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will go to the previous voicemail message when pressed at the post playback menu"
                },
                "rec_name": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will enter the record the voicemail box name when pressed at the config menu"
                },
                "rec_unavailable": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will enter the record the unavailable greeting when pressed at the config menu"
                },
                "record": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will record when pressed at the recording review menu"
                },
                "replay": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will replay the voicemail message when pressed at the post playback menu"
                },
                "return_main": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will return to the main menu when pressed at the config menu"
                },
                "rewind": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will seek the playback backward for seek_duration_ms ms"
                },
                "save": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will save when pressed at the recording review menu"
                },
                "set_pin": {
                    "$ref": "#/definitions/voicemail_keys.dtmf_key",
                    "description": "DTMF key which will allow the user to set their pin when pressed at the config menu"
                }
            }
        },
        "voicemail_keys.dtmf_key": {
            "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "0",
                "*",
                "#"
            ],
            "maxLength": 1,
            "minLength": 1,
            "type": "string"
        },
        "webhook_attempts": {
            "description": "Log of an attempt to send a webhook to a third-party server",
            "properties": {
                "client_error": {
                    "description": "Kazoo-side error string, if any",
                    "type": "string"
                },
                "hook_id": {
                    "description": "Id of the hook attempted",
                    "type": "string"
                },
                "reason": {
                    "description": "short reason for the failure",
                    "type": "string"
                },
                "response_body": {
                    "description": "HTTP response body received, if any",
                    "type": "string"
                },
                "response_code": {
                    "description": "HTTP response code received, if any",
                    "type": "string"
                },
                "result": {
                    "description": "Whether the attempt succeeded or not",
                    "enum": [
                        "success",
                        "failure"
                    ],
                    "type": "string"
                },
                "retries_left": {
                    "description": "How many retries were left after this attempt",
                    "type": "integer"
                }
            },
            "required": [
                "hook_id",
                "result"
            ],
            "type": "object"
        },
        "webhooks": {
            "description": "Web Hooks are subscriptions to allowed events that, when the event occurs, the event data is sent to the uri set in the Web Hook document.",
            "properties": {
                "custom_data": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "These properties will be added to the event and will overwrite existing values.",
                    "type": "object"
                },
                "enabled": {
                    "default": true,
                    "description": "Is the webhook enabled and running",
                    "type": "boolean"
                },
                "format": {
                    "default": "form-data",
                    "description": "What Body format to use when sending the webhook. only valid for 'post' & 'put' verbs",
                    "enum": [
                        "form-data",
                        "json"
                    ],
                    "type": "string"
                },
                "hook": {
                    "description": "The trigger event for a request being made to 'callback_uri'.",
                    "type": "string"
                },
                "http_verb": {
                    "default": "post",
                    "description": "What HTTP method to use when contacting the server",
                    "enum": [
                        "get",
                        "post",
                        "put"
                    ],
                    "type": "string"
                },
                "include_internal_legs": {
                    "default": true,
                    "description": "Whether to filter out call legs that are internal to the system (loopback)",
                    "type": "boolean"
                },
                "include_subaccounts": {
                    "description": "Should the webhook be fired for subaccount events.",
                    "type": "boolean"
                },
                "name": {
                    "description": "A friendly name for the webhook",
                    "type": "string"
                },
                "retries": {
                    "default": 2,
                    "description": "Retry the request this many times (if it fails)",
                    "maximum": 4,
                    "minimum": 0,
                    "type": "integer"
                },
                "uri": {
                    "description": "The 3rd party URI to call out to an event",
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "hook",
                "name",
                "uri"
            ],
            "type": "object"
        },
        "whitelabel": {
            "description": "Whitelabel settings",
            "properties": {
                "company_name": {
                    "description": "The company name to display to users",
                    "type": "string"
                },
                "domain": {
                    "description": "This is the whitelabeled domain that users will be entering to reach the UI",
                    "format": "uri",
                    "type": "string"
                },
                "fake_api_url": {
                    "description": "This is a whitelabeled API URL, primarily used by the developer application",
                    "format": "uri",
                    "type": "string"
                },
                "hide_credits": {
                    "default": false,
                    "description": "When checked this hides the credits",
                    "type": "boolean"
                },
                "hide_powered": {
                    "default": false,
                    "description": "When checked this hides the powered by 2600Hz on the bottom right",
                    "type": "boolean"
                },
                "hide_registration": {
                    "default": false,
                    "description": "When checked this hides the ability to register for a new account",
                    "type": "boolean"
                },
                "inbound_trunks_price": {
                    "description": "The price to show for inbound trunks, this is currently only for display purposes",
                    "type": "string"
                },
                "nav": {
                    "description": "Properties related to navigation in the UI",
                    "properties": {
                        "help": {
                            "description": "The URL to use when the help link is clicked",
                            "format": "uri",
                            "type": "string"
                        },
                        "learn_more": {
                            "description": "The URL to use when the 'Learn More!' link is clicked",
                            "format": "uri",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "outbound_trunks_price": {
                    "description": "The price to show for outbound trunks, this is currently only for display purposes",
                    "type": "string"
                },
                "port": {
                    "description": "Parameters related to white-labeling port requests",
                    "properties": {
                        "authority": {
                            "description": "The account ID(s) to be used for administrating port requests",
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            ]
                        },
                        "features": {
                            "description": "The URL to use when the features link is clicked",
                            "format": "uri",
                            "type": "string"
                        },
                        "loa": {
                            "description": "The URL to use when the LOA link is clicked",
                            "format": "uri",
                            "type": "string"
                        },
                        "resporg": {
                            "description": "The URL to use when the resporg link is clicked",
                            "format": "uri",
                            "type": "string"
                        },
                        "support_email": {
                            "description": "The support email address to display to the user",
                            "format": "email",
                            "type": "string"
                        },
                        "terms": {
                            "description": "The URL to use when the terms and conditions link is clicked",
                            "format": "uri",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "twoway_trunks_price": {
                    "description": "The price to show for twoway trunks, this is currently only for display purposes",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "externalDocs": {
        "description": "Kazoo documentation's Git repository",
        "url": "https://docs.2600hz.com/dev"
    },
    "host": "localhost:8000",
    "info": {
        "description": "The Crossbar APIs",
        "license": {
            "name": "Mozilla Public License 1.1"
        },
        "title": "Crossbar",
        "version": "v2"
    },
    "parameters": {
        "ACCOUNT_ID": {
            "description": "request ACCOUNT_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "ACCOUNT_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "ALERT_ID": {
            "description": "request ALERT_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "ALERT_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "APP_ID": {
            "description": "request APP_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "APP_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "APP_SCREENSHOT_INDEX": {
            "description": "request APP_SCREENSHOT_INDEX parameter",
            "in": "path",
            "name": "APP_SCREENSHOT_INDEX",
            "pattern": "^[0-9]+$",
            "required": true,
            "type": "string"
        },
        "ARGS": {
            "description": "request ARGS parameter",
            "in": "path",
            "name": "ARGS",
            "required": true,
            "type": "string"
        },
        "ATTACHMENT_ID": {
            "description": "request ATTACHMENT_ID parameter",
            "in": "path",
            "name": "ATTACHMENT_ID",
            "required": true,
            "type": "string"
        },
        "ATTEMPT_ID": {
            "description": "request ATTEMPT_ID parameter",
            "in": "path",
            "name": "ATTEMPT_ID",
            "required": true,
            "type": "string"
        },
        "AUDIT_ID": {
            "description": "request AUDIT_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "AUDIT_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "AUTH_TOKEN": {
            "description": "request AUTH_TOKEN parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "AUTH_TOKEN",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "BLACKLIST_ID": {
            "description": "request BLACKLIST_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "BLACKLIST_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "C2C_ID": {
            "description": "request C2C_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "C2C_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "CALLFLOW_ID": {
            "description": "request CALLFLOW_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "CALLFLOW_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "CALL_ID": {
            "description": "request CALL_ID parameter",
            "in": "path",
            "name": "CALL_ID",
            "required": true,
            "type": "string"
        },
        "CCCP_ID": {
            "description": "request CCCP_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "CCCP_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "CDR_ID": {
            "description": "request CDR_ID parameter",
            "in": "path",
            "maxLength": 39,
            "minLength": 39,
            "name": "CDR_ID",
            "pattern": "^[0-9a-f-]+$",
            "required": true,
            "type": "string"
        },
        "COMMENT_ID": {
            "description": "request COMMENT_ID parameter",
            "in": "path",
            "name": "COMMENT_ID",
            "required": true,
            "type": "string"
        },
        "CONFERENCE_ID": {
            "description": "request CONFERENCE_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "CONFERENCE_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "CONFIG_ID": {
            "description": "request CONFIG_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "CONFIG_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "CONNECTIVITY_ID": {
            "description": "request CONNECTIVITY_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "CONNECTIVITY_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "DEVICE_ID": {
            "description": "request DEVICE_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "DEVICE_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "DIRECTORY_ID": {
            "description": "request DIRECTORY_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "DIRECTORY_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "ENDPOINT_ID": {
            "description": "request ENDPOINT_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "ENDPOINT_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "ENDPOINT_TYPE": {
            "description": "request ENDPOINT_TYPE parameter",
            "enum": [
                "users",
                "devices"
            ],
            "in": "path",
            "name": "ENDPOINT_TYPE",
            "required": true,
            "type": "string"
        },
        "ERROR_ID": {
            "description": "request ERROR_ID parameter",
            "in": "path",
            "name": "ERROR_ID",
            "required": true,
            "type": "string"
        },
        "EXTENSION": {
            "description": "request EXTENSION parameter",
            "in": "path",
            "name": "EXTENSION",
            "required": true,
            "type": "string"
        },
        "FAXBOX_ID": {
            "description": "request FAXBOX_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "FAXBOX_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "FAX_ID": {
            "description": "request FAX_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "FAX_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "FAX_JOB_ID": {
            "description": "request FAX_JOB_ID parameter",
            "in": "path",
            "name": "FAX_JOB_ID",
            "required": true,
            "type": "string"
        },
        "FUNCTION": {
            "description": "request FUNCTION parameter",
            "in": "path",
            "name": "FUNCTION",
            "pattern": "^[a-zA-Z0-9]+$",
            "required": true,
            "type": "string"
        },
        "FUNCTION_ID": {
            "description": "request FUNCTION_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "FUNCTION_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "GROUP_ID": {
            "description": "request GROUP_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "GROUP_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "HANDLER_ID": {
            "description": "request HANDLER_ID parameter",
            "in": "path",
            "name": "HANDLER_ID",
            "required": true,
            "type": "string"
        },
        "INTERACTION_ID": {
            "description": "request INTERACTION_ID parameter",
            "in": "path",
            "name": "INTERACTION_ID",
            "required": true,
            "type": "string"
        },
        "IP_ADDRESS": {
            "description": "request IP_ADDRESS parameter",
            "in": "path",
            "maxLength": 15,
            "minLength": 7,
            "name": "IP_ADDRESS",
            "pattern": "^[0-9.]+$",
            "required": true,
            "type": "string"
        },
        "JOB_ID": {
            "description": "request JOB_ID parameter",
            "in": "path",
            "name": "JOB_ID",
            "required": true,
            "type": "string"
        },
        "KEY_ID": {
            "description": "request KEY_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "KEY_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "LANGUAGE": {
            "description": "request LANGUAGE parameter",
            "in": "path",
            "name": "LANGUAGE",
            "required": true,
            "type": "string"
        },
        "LEDGER_ID": {
            "description": "request LEDGER_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "LEDGER_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "LINK_ID": {
            "description": "request LINK_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "LINK_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "LIST_ENTRY_ID": {
            "description": "request LIST_ENTRY_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "LIST_ENTRY_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "LIST_ID": {
            "description": "request LIST_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "LIST_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "MEDIA_ID": {
            "description": "request MEDIA_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "MEDIA_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "MENU_ID": {
            "description": "request MENU_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "MENU_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "MIGRATION_ID": {
            "description": "request MIGRATION_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "MIGRATION_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "MODB_SUFFIX": {
            "description": "request MODB_SUFFIX parameter",
            "in": "path",
            "maxLength": 6,
            "minLength": 6,
            "name": "MODB_SUFFIX",
            "pattern": "^[0-9]{6}",
            "required": true,
            "type": "string"
        },
        "MODULE": {
            "description": "request MODULE parameter",
            "in": "path",
            "name": "MODULE",
            "pattern": "^[a-zA-Z0-9]+$",
            "required": true,
            "type": "string"
        },
        "NODE": {
            "description": "request NODE parameter",
            "in": "path",
            "name": "NODE",
            "pattern": "^[a-zA-Z0-9]+@[a-zA-Z0-9]+$",
            "required": true,
            "type": "string"
        },
        "NOTIFICATION_ID": {
            "description": "request NOTIFICATION_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "NOTIFICATION_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "NUMBER": {
            "description": "request NUMBER parameter",
            "in": "path",
            "name": "NUMBER",
            "pattern": "^\\+?[0-9]+",
            "required": true,
            "type": "string"
        },
        "PARTICIPANT_ID": {
            "description": "request PARTICIPANT_ID parameter",
            "in": "path",
            "name": "PARTICIPANT_ID",
            "pattern": "^[0-9]+$",
            "required": true,
            "type": "string"
        },
        "PHONE_NUMBER": {
            "description": "request PHONE_NUMBER parameter",
            "in": "path",
            "minLength": 13,
            "name": "PHONE_NUMBER",
            "pattern": "^%2[Bb][0-9]+$",
            "required": true,
            "type": "string"
        },
        "PLAN_ID": {
            "description": "request PLAN_ID parameter",
            "in": "path",
            "name": "PLAN_ID",
            "required": true,
            "type": "string"
        },
        "PORT_REQUEST_ID": {
            "description": "request PORT_REQUEST_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "PORT_REQUEST_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "PROMPT_ID": {
            "description": "request PROMPT_ID parameter",
            "in": "path",
            "name": "PROMPT_ID",
            "required": true,
            "type": "string"
        },
        "PROVIDER_ID": {
            "description": "request PROVIDER_ID parameter",
            "in": "path",
            "name": "PROVIDER_ID",
            "required": true,
            "type": "string"
        },
        "QUEUE_ID": {
            "description": "request QUEUE_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "QUEUE_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "RATE_ID": {
            "description": "request RATE_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "RATE_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "RECORDING_ID": {
            "description": "request RECORDING_ID parameter",
            "in": "path",
            "maxLength": 39,
            "minLength": 39,
            "name": "RECORDING_ID",
            "pattern": "^[0-9a-f-]+$",
            "required": true,
            "type": "string"
        },
        "REPORT_ID": {
            "description": "request REPORT_ID parameter",
            "in": "path",
            "maxLength": 39,
            "minLength": 39,
            "name": "REPORT_ID",
            "pattern": "^report\\-[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "RESOURCE_ID": {
            "description": "request RESOURCE_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "RESOURCE_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "RESOURCE_TEMPLATE_ID": {
            "description": "request RESOURCE_TEMPLATE_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "RESOURCE_TEMPLATE_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "SAMPLE_ID": {
            "description": "request SAMPLE_ID parameter",
            "in": "path",
            "name": "SAMPLE_ID",
            "required": true,
            "type": "string"
        },
        "SCHEMA_NAME": {
            "description": "request SCHEMA_NAME parameter",
            "in": "path",
            "name": "SCHEMA_NAME",
            "pattern": "^[a-z0-9._-]+$",
            "required": true,
            "type": "string"
        },
        "SELECTOR_NAME": {
            "description": "request SELECTOR_NAME parameter",
            "in": "path",
            "name": "SELECTOR_NAME",
            "required": true,
            "type": "string"
        },
        "SMS_ID": {
            "description": "request SMS_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "SMS_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "SMTP_LOG_ID": {
            "description": "request SMTP_LOG_ID parameter",
            "in": "path",
            "name": "SMTP_LOG_ID",
            "required": true,
            "type": "string"
        },
        "SOCKET_ID": {
            "description": "request SOCKET_ID parameter",
            "in": "path",
            "name": "SOCKET_ID",
            "required": true,
            "type": "string"
        },
        "SOURCE_SERVICE": {
            "description": "request SOURCE_SERVICE parameter",
            "in": "path",
            "name": "SOURCE_SERVICE",
            "required": true,
            "type": "string"
        },
        "STORAGE_PLAN_ID": {
            "description": "request STORAGE_PLAN_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "STORAGE_PLAN_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "SYSTEM_CONFIG_ID": {
            "description": "request SYSTEM_CONFIG_ID parameter",
            "in": "path",
            "name": "SYSTEM_CONFIG_ID",
            "required": true,
            "type": "string"
        },
        "TASK_ID": {
            "description": "request TASK_ID parameter",
            "in": "path",
            "maxLength": 15,
            "minLength": 15,
            "name": "TASK_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "TEMPORAL_RULE_ID": {
            "description": "request TEMPORAL_RULE_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "TEMPORAL_RULE_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "TEMPORAL_RULE_SET": {
            "description": "request TEMPORAL_RULE_SET parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "TEMPORAL_RULE_SET",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "THING": {
            "description": "request THING parameter",
            "in": "path",
            "name": "THING",
            "required": true,
            "type": "string"
        },
        "TRANSACTION_ID": {
            "description": "request TRANSACTION_ID parameter",
            "in": "path",
            "name": "TRANSACTION_ID",
            "required": true,
            "type": "string"
        },
        "USERNAME": {
            "description": "request USERNAME parameter",
            "in": "path",
            "name": "USERNAME",
            "required": true,
            "type": "string"
        },
        "USER_ID": {
            "description": "request USER_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "USER_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "UUID": {
            "description": "request UUID parameter",
            "in": "path",
            "name": "UUID",
            "pattern": "^[a-f0-9-]+$",
            "required": true,
            "type": "string"
        },
        "VM_BOX_ID": {
            "description": "request VM_BOX_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "VM_BOX_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "VM_MSG_ID": {
            "description": "request VM_MSG_ID parameter",
            "in": "path",
            "name": "VM_MSG_ID",
            "required": true,
            "type": "string"
        },
        "WEBHOOK_ID": {
            "description": "request WEBHOOK_ID parameter",
            "in": "path",
            "maxLength": 32,
            "minLength": 32,
            "name": "WEBHOOK_ID",
            "pattern": "^[0-9a-f]+$",
            "required": true,
            "type": "string"
        },
        "WHITELABEL_DOMAIN": {
            "description": "request WHITELABEL_DOMAIN parameter",
            "in": "path",
            "name": "WHITELABEL_DOMAIN",
            "required": true,
            "type": "string"
        },
        "auth_token_header": {
            "description": "request authentication token",
            "in": "header",
            "minLength": 32,
            "name": "X-Auth-Token",
            "required": true,
            "type": "string"
        },
        "auth_token_header_or_none": {
            "description": "request authentication token",
            "in": "header",
            "minLength": 32,
            "name": "X-Auth-Token",
            "required": false,
            "type": "string"
        }
    },
    "paths": {
        "/about": {
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "accounts",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "accounts",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts"
                        }
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "accounts",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts"
                        }
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/access_lists": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "access_lists",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/access_lists"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/acdc_call_stats": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/acls": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/agents": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/agents/stats": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/agents/status": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/agents/status/{USER_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/agents/{USER_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/agents/{USER_ID}/queue_status": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/agents/{USER_ID}/status": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/alerts": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/alerts/{ALERT_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/ALERT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/ALERT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/allotments": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "allotments",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/allotments"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/allotments/consumed": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/api_key": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "accounts",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/apps_link/authorize": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/apps_store": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/apps_store/blacklist": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/apps_store/{APP_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/APP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/APP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/APP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/APP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/apps_store/{APP_ID}/icon": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/APP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/apps_store/{APP_ID}/screenshot/{APP_SCREENSHOT_INDEX}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/APP_ID"
                    },
                    {
                        "$ref": "#/parameters/APP_SCREENSHOT_INDEX"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/att_handlers_errors": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/att_handlers_errors/handler/{HANDLER_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/HANDLER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/att_handlers_errors/{ERROR_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/ERROR_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/blacklists": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "blacklists",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/blacklists"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/blacklists/{BLACKLIST_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/BLACKLIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/BLACKLIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/BLACKLIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "blacklists",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/blacklists"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/BLACKLIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/call_inspector": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/call_inspector/{CALL_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CALL_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/callflows": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "callflows",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/callflows"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/callflows/{CALLFLOW_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CALLFLOW_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CALLFLOW_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CALLFLOW_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "callflows",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/callflows"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CALLFLOW_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/cccps": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "cccps",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cccps"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/cccps/{CCCP_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CCCP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CCCP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "cccps",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cccps"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CCCP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "cccps",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cccps"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CCCP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/cdrs": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/cdrs/interaction": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/cdrs/legs/{INTERACTION_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/INTERACTION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/cdrs/summary": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/cdrs/{CDR_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CDR_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/channels": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/channels/{UUID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/UUID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/UUID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/UUID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/children": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/clicktocall": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "clicktocall",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/clicktocall"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/clicktocall/{C2C_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/C2C_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/C2C_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/C2C_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "clicktocall",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/clicktocall"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/C2C_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/clicktocall/{C2C_ID}/connect": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header_or_none"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/C2C_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "clicktocall",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/clicktocall"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header_or_none"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/C2C_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/clicktocall/{C2C_ID}/history": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/C2C_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/comments": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "comments",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comments"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/comments/{COMMENT_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/COMMENT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/COMMENT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "comments",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comments"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/COMMENT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/conferences": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "conferences",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/conferences"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/conferences/{CONFERENCE_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFERENCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFERENCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFERENCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "conferences",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/conferences"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFERENCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "conferences",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/conferences"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFERENCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/conferences/{CONFERENCE_ID}/participants": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFERENCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "conferences",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/conferences"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFERENCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/conferences/{CONFERENCE_ID}/participants/{PARTICIPANT_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFERENCE_ID"
                    },
                    {
                        "$ref": "#/parameters/PARTICIPANT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "conferences",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/conferences"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFERENCE_ID"
                    },
                    {
                        "$ref": "#/parameters/PARTICIPANT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/configs/{CONFIG_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/connectivity": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "connectivity",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/connectivity"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/connectivity/{CONNECTIVITY_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONNECTIVITY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONNECTIVITY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONNECTIVITY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "connectivity",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/connectivity"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONNECTIVITY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/contact_list": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/descendants": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/devices": {
            "get": {
                "description": "Summary listing of devices for the account",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "description": "Create a new device",
                "parameters": [
                    {
                        "in": "body",
                        "name": "devices",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/devices"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    },
                    "201": {
                        "description": "The newly created device object"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/devices/status": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/devices/{DEVICE_ID}": {
            "delete": {
                "description": "Remove the device from the account",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DEVICE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "description": "Get the device details",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DEVICE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DEVICE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "description": "Edit the device object",
                "parameters": [
                    {
                        "in": "body",
                        "name": "devices",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/devices"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DEVICE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "devices",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/devices"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DEVICE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    },
                    "202": {
                        "description": "action was accepted (for asynchronous actions)"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/devices/{DEVICE_ID}/sync": {
            "post": {
                "description": "Reset the device by sending a check-sync SIP NOTIFY",
                "parameters": [
                    {
                        "in": "body",
                        "name": "devices",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/devices"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DEVICE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    },
                    "202": {
                        "description": "Notice that the check-sync has been sent"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/dialplans": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/directories": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "directories",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/directories"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/directories/{DIRECTORY_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DIRECTORY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DIRECTORY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DIRECTORY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "directories",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/directories"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/DIRECTORY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxboxes": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxboxes/{FAXBOX_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAXBOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAXBOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAXBOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAXBOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "faxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/faxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/inbox": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/inbox/{FAX_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "faxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/faxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/inbox/{FAX_ID}/attachment": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/incoming": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/incoming/{FAX_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/outbox": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/outbox/{FAX_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "faxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/faxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/outbox/{FAX_ID}/attachment": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/outgoing": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "faxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/faxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/outgoing/{FAX_JOB_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FAX_JOB_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/smtplog": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/faxes/smtplog/{ATTEMPT_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/ATTEMPT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/functions": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "functions",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/functions"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/functions/samples": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/functions/{FUNCTION_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FUNCTION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FUNCTION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FUNCTION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "functions",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/functions"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/FUNCTION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/groups": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "groups",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/groups"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/groups/{GROUP_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/GROUP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/GROUP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/GROUP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "groups",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/groups"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/GROUP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/hotdesks": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ips": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "ips",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ips"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "ips",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ips"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ips/assigned": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ips/hosts": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ips/zones": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ips/{IP_ADDRESS}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/IP_ADDRESS"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/IP_ADDRESS"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "ips",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ips"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/IP_ADDRESS"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ledgers": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ledgers/available": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ledgers/credit": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "ledgers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ledgers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ledgers/debit": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "ledgers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ledgers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ledgers/summary/{MODB_SUFFIX}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MODB_SUFFIX"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ledgers/total": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ledgers/{SOURCE_SERVICE}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SOURCE_SERVICE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/ledgers/{SOURCE_SERVICE}/{LEDGER_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SOURCE_SERVICE"
                    },
                    {
                        "$ref": "#/parameters/LEDGER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/limits": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "limits",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/limits"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/lists": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "lists",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lists"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "lists",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lists"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}/entries": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "lists",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lists"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}/entries/{LIST_ENTRY_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ENTRY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ENTRY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ENTRY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "lists",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lists"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ENTRY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}/entries/{LIST_ENTRY_ID}/photo": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "lists",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/lists"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ENTRY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/lists/{LIST_ID}/entries/{LIST_ENTRY_ID}/vcard": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ID"
                    },
                    {
                        "$ref": "#/parameters/LIST_ENTRY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/media": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "media",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/media"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/media/languages": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/media/languages/{LANGUAGE}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/LANGUAGE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/media/prompts": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/media/prompts/{PROMPT_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PROMPT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/media/{MEDIA_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MEDIA_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MEDIA_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "media",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/media"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MEDIA_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/media/{MEDIA_ID}/raw": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MEDIA_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "media",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/media"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MEDIA_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/menus": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "menus",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/menus"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/menus/{MENU_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MENU_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MENU_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MENU_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "menus",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/menus"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MENU_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/metaflows": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "metaflows",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/metaflows"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/migrations": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/migrations/{MIGRATION_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MIGRATION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/MIGRATION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/mms": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "mms",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mms"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/mms/{SMS_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SMS_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SMS_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/move": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "accounts",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/multi_factor": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/multi_factor/attempts": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/multi_factor/attempts/{ATTEMPT_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/ATTEMPT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/multi_factor/{CONFIG_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/notifications": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "notifications",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/notifications"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/notifications/customer_update/message": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "notifications",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/notifications"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/notifications/smtplog": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/notifications/smtplog/{SMTP_LOG_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SMTP_LOG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/notifications/{NOTIFICATION_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/NOTIFICATION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/NOTIFICATION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "notifications",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/notifications"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/NOTIFICATION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/notifications/{NOTIFICATION_ID}/preview": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "notifications",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/notifications"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/NOTIFICATION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/parents": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/parked_calls": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/carriers_info": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/check": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/classifiers": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/classifiers/{PHONE_NUMBER}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/collection": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/collection/activate": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/fix": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/fix/{PHONE_NUMBER}": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/locality": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/prefix": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}/activate": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}/identify": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}/port": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/phone_numbers/{PHONE_NUMBER}/reserve": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "phone_numbers",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phone_numbers"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/pivot/debug": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/pivot/debug/{UUID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/UUID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "port_requests",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/port_requests"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/last_submitted": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "port_requests",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/port_requests"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/attachments": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "port_requests",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/port_requests"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/attachments/{ATTACHMENT_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    },
                    {
                        "$ref": "#/parameters/ATTACHMENT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    },
                    {
                        "$ref": "#/parameters/ATTACHMENT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "port_requests",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/port_requests"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    },
                    {
                        "$ref": "#/parameters/ATTACHMENT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/canceled": {
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/completed": {
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/loa": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/pending": {
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/rejected": {
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/scheduled": {
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/submitted": {
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/port_requests/{PORT_REQUEST_ID}/timeline": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PORT_REQUEST_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/presence": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/presence/report-{REPORT_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/REPORT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/presence/{EXTENSION}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/EXTENSION"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/EXTENSION"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/queues": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "queues",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/queues"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/queues/eavesdrop": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "queues",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/queues"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/queues/stats": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/queues/{QUEUE_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/QUEUE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/QUEUE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/QUEUE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "queues",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/queues"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/QUEUE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/queues/{QUEUE_ID}/eavesdrop": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "queues",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/queues"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/QUEUE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/queues/{QUEUE_ID}/roster": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/QUEUE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/QUEUE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "queues",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/queues"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/QUEUE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/rate_limits": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/recordings": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/recordings/{RECORDING_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RECORDING_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RECORDING_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/registrations": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/registrations/count": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/registrations/{USERNAME}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USERNAME"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/reseller": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "accounts",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_selectors": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_selectors/name": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_selectors/name/{SELECTOR_NAME}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SELECTOR_NAME"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_selectors/name/{SELECTOR_NAME}/resource/{RESOURCE_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SELECTOR_NAME"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_selectors/resource": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_selectors/resource/{RESOURCE_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_selectors/resource/{RESOURCE_ID}/name/{SELECTOR_NAME}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_ID"
                    },
                    {
                        "$ref": "#/parameters/SELECTOR_NAME"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_selectors/rules": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "resource_selectors",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resource_selectors"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_selectors/{UUID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/UUID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/UUID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "resource_selectors",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resource_selectors"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/UUID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_templates": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resource_templates/{RESOURCE_TEMPLATE_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_TEMPLATE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_TEMPLATE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_TEMPLATE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_TEMPLATE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resources": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "resources",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resources"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resources/collection": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "resources",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resources"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "resources",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resources"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resources/jobs": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "resources",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resources"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resources/jobs/{JOB_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/JOB_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/resources/{RESOURCE_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "resources",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resources"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/RESOURCE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/search": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/search/multi": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/security": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/security/attempts": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/security/attempts/{ATTEMPT_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/ATTEMPT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/audit": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/audit/{AUDIT_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/AUDIT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/audit_summary": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/audit_summary/{SOURCE_SERVICE}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SOURCE_SERVICE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/available": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/editable": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/manual": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/overrides": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/quote": {
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/reconciliation": {
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/summary": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/synchronization": {
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/topup": {
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/services/{PLAN_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PLAN_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/PLAN_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/siblings": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/skels": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "skels",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/skels"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/skels/{THING}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/THING"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/THING"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/THING"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "skels",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/skels"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/THING"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/sms": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "sms",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sms"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/sms/{SMS_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SMS_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SMS_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/storage": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "storage",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "storage",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/storage/plans": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "storage",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/storage/plans/{STORAGE_PLAN_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/STORAGE_PLAN_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/STORAGE_PLAN_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/STORAGE_PLAN_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "storage",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storage"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/STORAGE_PLAN_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/tasks": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasks",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tasks"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/tasks/{TASK_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TASK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TASK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TASK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/tasks/{TASK_ID}/input": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TASK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/tasks/{TASK_ID}/output": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TASK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/tasks/{TASK_ID}/stop": {
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TASK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/temporal_rules": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "temporal_rules",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/temporal_rules"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/temporal_rules/{TEMPORAL_RULE_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TEMPORAL_RULE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TEMPORAL_RULE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TEMPORAL_RULE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "temporal_rules",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/temporal_rules"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TEMPORAL_RULE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/temporal_rules_sets": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "temporal_rules_sets",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/temporal_rules_sets"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/temporal_rules_sets/{TEMPORAL_RULE_SET}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TEMPORAL_RULE_SET"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TEMPORAL_RULE_SET"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TEMPORAL_RULE_SET"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "temporal_rules_sets",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/temporal_rules_sets"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TEMPORAL_RULE_SET"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/token_restrictions": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "token_restrictions",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/token_restrictions"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/transactions": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/transactions/refund": {
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/transactions/sale": {
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/transactions/{TRANSACTION_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/TRANSACTION_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/tree": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/users": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "users",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/users/{USER_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "users",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/users/{USER_ID}/photo": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "users",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/users/{USER_ID}/vcard": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/USER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/vmboxes": {
            "get": {
                "description": "Summary listing of voicemail boxes for the account",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "description": "Create a new voicemail box",
                "parameters": [
                    {
                        "in": "body",
                        "name": "vmboxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmboxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    },
                    "201": {
                        "description": "The newly created voicemail box"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/vmboxes/messages": {
            "get": {
                "description": "Listing of all messages on an account",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}": {
            "delete": {
                "description": "Deletes the voicemail box from the account",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "description": "Details of the voicemail box",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "description": "Patch an existing voicemail box",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "description": "Edit an existing voicemail box",
                "parameters": [
                    {
                        "in": "body",
                        "name": "vmboxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmboxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}/messages": {
            "delete": {
                "description": "Remove all or a list of messages from a voicemail box",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "description": "Listing of messages contained in the voicemail box",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "description": "Change a list message",
                "parameters": [
                    {
                        "in": "body",
                        "name": "vmboxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmboxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "vmboxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmboxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}/messages/raw": {
            "post": {
                "description": "Fetch raw audio of a list message id",
                "parameters": [
                    {
                        "in": "body",
                        "name": "vmboxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmboxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}/messages/{VM_MSG_ID}": {
            "delete": {
                "description": "Remove the message from the voicemail box",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_MSG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "description": "Get a specific message object",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_MSG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "description": "Change a message",
                "parameters": [
                    {
                        "in": "body",
                        "name": "vmboxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmboxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_MSG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/vmboxes/{VM_BOX_ID}/messages/{VM_MSG_ID}/raw": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_MSG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "vmboxes",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmboxes"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_BOX_ID"
                    },
                    {
                        "$ref": "#/parameters/VM_MSG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/webhooks": {
            "get": {
                "description": "Summary listing of webhooks for the account",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "description": "Re-enable the collection of webhooks",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "description": "Create a new webhook",
                "parameters": [
                    {
                        "in": "body",
                        "name": "webhooks",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhooks"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    },
                    "201": {
                        "description": "The newly created webhook object"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/webhooks/attempts": {
            "get": {
                "description": "List the attempts Kazoo has made to the external servers",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/webhooks/samples": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/webhooks/samples/{SAMPLE_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SAMPLE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/webhooks/{WEBHOOK_ID}": {
            "delete": {
                "description": "Remove the webhook from the account",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/WEBHOOK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "description": "Get the webhook details",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/WEBHOOK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "description": "Patch the webhook object",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/WEBHOOK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "description": "Edit the webhook object",
                "parameters": [
                    {
                        "in": "body",
                        "name": "webhooks",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhooks"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/WEBHOOK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/webhooks/{WEBHOOK_ID}/attempts": {
            "get": {
                "description": "List the attempts Kazoo has made to the external servers for this webhook",
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/WEBHOOK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/websockets": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/websockets/{SOCKET_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/SOCKET_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/whitelabel": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "whitelabel",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/whitelabel"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "whitelabel",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/whitelabel"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/whitelabel/domains": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "whitelabel",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/whitelabel"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/whitelabel/icon": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "whitelabel",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/whitelabel"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/whitelabel/logo": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "whitelabel",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/whitelabel"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/whitelabel/welcome": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "whitelabel",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/whitelabel"
                        }
                    },
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/whitelabel/{WHITELABEL_DOMAIN}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/WHITELABEL_DOMAIN"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/whitelabel/{WHITELABEL_DOMAIN}/icon": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/WHITELABEL_DOMAIN"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/whitelabel/{WHITELABEL_DOMAIN}/logo": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/WHITELABEL_DOMAIN"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/whitelabel/{WHITELABEL_DOMAIN}/welcome": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/WHITELABEL_DOMAIN"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/accounts/{ACCOUNT_ID}/{ENDPOINT_TYPE}/{ENDPOINT_ID}/quickcall/{NUMBER}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/ENDPOINT_TYPE"
                    },
                    {
                        "$ref": "#/parameters/ENDPOINT_ID"
                    },
                    {
                        "$ref": "#/parameters/NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/auth_token_header"
                    },
                    {
                        "$ref": "#/parameters/ACCOUNT_ID"
                    },
                    {
                        "$ref": "#/parameters/ENDPOINT_TYPE"
                    },
                    {
                        "$ref": "#/parameters/ENDPOINT_ID"
                    },
                    {
                        "$ref": "#/parameters/NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/api_auth": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "api_auth",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_auth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth": {
            "put": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/apps": {
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/apps/{APP_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/APP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/APP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/APP_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/authorize": {
            "put": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/callback": {
            "put": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/keys": {
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/keys/{KEY_ID}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/KEY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/KEY_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/links": {
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/links/{LINK_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/LINK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/LINK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "$ref": "#/parameters/LINK_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/providers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/providers/{PROVIDER_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/PROVIDER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/PROVIDER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "$ref": "#/parameters/PROVIDER_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/auth/tokeninfo": {
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/ip_auth": {
            "put": {
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/rates": {
            "get": {
                "description": "Listing of available rate docs",
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "rates",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rates"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/rates/number/{PHONE_NUMBER}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/PHONE_NUMBER"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/rates/ratedecks": {
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/rates/{RATE_ID}": {
            "delete": {
                "description": "Delete the rate doc",
                "parameters": [
                    {
                        "$ref": "#/parameters/RATE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "description": "Get the rate doc",
                "parameters": [
                    {
                        "$ref": "#/parameters/RATE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/RATE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "rates",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rates"
                        }
                    },
                    {
                        "$ref": "#/parameters/RATE_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/schemas": {
            "get": {
                "description": "Listing of installed schemas available",
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/schemas/{SCHEMA_NAME}": {
            "get": {
                "description": "Get the JSON schema definition",
                "parameters": [
                    {
                        "$ref": "#/parameters/SCHEMA_NAME"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/schemas/{SCHEMA_NAME}/validation": {
            "put": {
                "description": "Perform a test validation",
                "parameters": [
                    {
                        "$ref": "#/parameters/SCHEMA_NAME"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/sup/{MODULE}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/MODULE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/sup/{MODULE}/{FUNCTION}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/MODULE"
                    },
                    {
                        "$ref": "#/parameters/FUNCTION"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/sup/{MODULE}/{FUNCTION}/{ARGS}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/MODULE"
                    },
                    {
                        "$ref": "#/parameters/FUNCTION"
                    },
                    {
                        "$ref": "#/parameters/ARGS"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/system_configs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/system_configs/{SYSTEM_CONFIG_ID}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/SYSTEM_CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/SYSTEM_CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/SYSTEM_CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "system_configs",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system_configs"
                        }
                    },
                    {
                        "$ref": "#/parameters/SYSTEM_CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "system_configs",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system_configs"
                        }
                    },
                    {
                        "$ref": "#/parameters/SYSTEM_CONFIG_ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/system_configs/{SYSTEM_CONFIG_ID}/{NODE}": {
            "delete": {
                "parameters": [
                    {
                        "$ref": "#/parameters/SYSTEM_CONFIG_ID"
                    },
                    {
                        "$ref": "#/parameters/NODE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/SYSTEM_CONFIG_ID"
                    },
                    {
                        "$ref": "#/parameters/NODE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "$ref": "#/parameters/SYSTEM_CONFIG_ID"
                    },
                    {
                        "$ref": "#/parameters/NODE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "system_configs",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system_configs"
                        }
                    },
                    {
                        "$ref": "#/parameters/SYSTEM_CONFIG_ID"
                    },
                    {
                        "$ref": "#/parameters/NODE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/system_status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/token_auth": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/user_auth": {
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "user_auth",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_auth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/user_auth/recovery": {
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "user_auth",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_auth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "name": "user_auth",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_auth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        },
        "/user_auth/{AUTH_TOKEN}": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/parameters/AUTH_TOKEN"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request succeeded"
                    }
                }
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "swagger": "2.0"
}
