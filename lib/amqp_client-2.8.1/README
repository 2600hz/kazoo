README.in:

Please see http://www.rabbitmq.com/build-erlang-client.html for build
instructions.

For your convenience, a text copy of these instructions is available
below. Please be aware that the instructions here may not be as up to
date as those at the above URL.

===========================================================================


   RabbitMQ
   SpringSource
   __________________________ [  ]

     * Installation
     * Documentation
     * Tutorials
     * Services
     * Community
     * Blog

                 Erlang AMQP Client Library Build Instructions

   This section describes the process for obtaining a copy of the RabbitMQ
   Erlang AMQP client source code and its dependecies, as well as
   instructions for building the Erlang client from source.

Obtaining the source

     * Either download a released source code distribution from the download
       page, or
     * Check the code out directly from our mercurial repositories:

 $ hg clone http://hg.rabbitmq.com/rabbitmq-codegen
 $ hg clone http://hg.rabbitmq.com/rabbitmq-server
 $ hg clone http://hg.rabbitmq.com/rabbitmq-erlang-client
 $ cd rabbitmq-erlang-client
 $ make

   If you choose to check the code out using mercurial, be aware that the
   server code and the code-generation module are dependencies of the Erlang
   client library. If you're working with a released source code
   distribution, though, all necessary dependecies are included.

Required Libraries and Tools

   In order to build RabbitMQ, you will need a few tools.

   RabbitMQ requires a recent version of Python and simplejson.py (an
   implementation of a JSON reader and writer in Python), for generating AMQP
   framing code. simplejson.py is included as a standard json library in the
   Python core since 2.6 release.

   Additionally, you will need

     * the Erlang development and runtime tools
       If you are on a Debian-based system then you need the erlang-nox and
       erlang-dev packages installed. If you are building and installing
       Erlang from source then you must ensure that openssl is installed on
       your system.
     * a recent version of GNU make
     * a recent version of xsltproc, which is part of libxslt

Building the Erlang client libraries

   You will need to get the source of the server and the codegen. If you ran
   the commands above, the these will be placed in sibling directories to the
   Erlang client (i.e: ../rabbitmq-server and ../rabbitmq-codegen), which is
   the default that the Makefile expects. In this case, you can just run
   make.

   If the source tree for the server is not in the sibling directory, you
   will need to specify the path to this directory with make
   BROKER_DIR=/path/to/server. In this case, make sure you specify BROKER_DIR
   every time you run a make target.

   Other interesting Makefile targets include

   all
           The default target. Builds the client libraries.

   run
           Builds the client libraries and starts an Erlang shell with the
           libraries loaded.

   run_in_broker
           Builds the client and starts RabbitMQ server with shell and the
           client included in load path.

   clean
           Removes build products.

   test
           Runs a set of tests against a server running on locally. You will
           need to start a local instance of an AMQP server, running on port
           5672, which allows guest/guest access on virtual host "/",
           beforehand.

   all_tests
           Clean compiles the client and client tests source code and runs
           network_client_SUITE, direct_client_SUITE and packaging tests.
           During testing, this make target runs an instance of the broker,
           so make sure there is no other instance of RabbitMQ server
           running.

   dialyze
           Analyses the client source code with dialyzer. Uses PLT file from
           default location: ~/.dialyzer_plt. Use

 $ make PLT=/path/to/plt dialyze

           to override this. Add broker to PLT beforehand, otherwise you will
           a lot of 'unknown function' warnings. See add_broker_to_plt make
           target.

   dialyze_all
           Same as dialyze, except that this also analyses tests source code.

   add_broker_to_plt
           Adds broker .beam files to default plt. Use

 $ make PLT=/path/to/plt add_broker_to_plt

           to override default plt location (~/.dialyzer_plt).

   source_tarball
           Creates tarball of all the client source code.

   package
           Creates an erlang archive of the client.

   common_package
           Creates an erlang archive of the server modules required by the
           erlang client.

    In This Section

     * Server Documentation
     * Client Documentation
     * Plugins
     * News
     * Protocol
     * Building

          * Building the Server
          * Building the Java Client
          * Building the .NET Client
          * Building the Erlang Client
          * Our use of Mercurial

     * License

   Sitemap | Contact

   Copyright Â© 2012 VMware, Inc. All rights reserved. Terms of Use | Privacy
