Please see http://www.rabbitmq.com/install.html for install 
instructions.

For your convenience, a text copy of these instructions is available 
below. Please be aware that the instructions here may not be as up to 
date as those at the above URL.

===========================================================================


                                    RabbitMQ

   SpringSource
   __________________________ [  ]

     * Download
     * Documentation
     * Get Started
     * Services
     * Community
     * Blog

   Here you can find instructions to get your server download installed and
   running for your chosen platform.

  RabbitMQ Server Installation

     * Introduction
     * Windows Quick Install

          * Install the Server

          * Run RabbitMQ Service

     * Windows Manual Install

          * Install Server Components

          * Find Command Scripts and App Data

          * Run RabbitMQ Server as an Application

          * Run RabbitMQ Server as a Service

          * Manage the Broker

          * Logging

     * Debian GNU/Linux and Ubuntu Linux

          * Install the Server

          * Run RabbitMQ Server

     * RPM based Linux (CentOS, Fedora, OpenSuse, RedHat)

          * Install the Server

          * Run RabbitMQ Server

     * Mac OS X with MacPorts

          * Install the Server

          * Run RabbitMQ Server

     * Mac OS X with Homebrew

          * Install the Server

          * Run RabbitMQ Server

     * Solaris

          * Install the Server

     * Generic Unix or Linux (BSD, Mac OS X)

          * Install the Server

          * Run RabbitMQ Server

          * Manage the Server

          * Logging

     * Troubleshooting

Introduction

   Each installation requires Erlang, which also provides Mnesia (DBMS) and
   logging support for the brokers. Mnesia and log directories may need
   read/write permissions for the service account.

   Management scripts start and stop the broker, and set up a default
   environment. Scripts and commands need to run as a privileged user e.g. an
   administrator on Windows, or with root permission (e.g. sudo) on Unix-like
   systems.

   If you use non-default file locations, ports, account or service names, or
   component properties these should be configured. If you need multiple
   server nodes, also see the clustering guide.

   These are the steps, done manually or via a packager:

    1. Install Erlang
    2. Install RabbitMQ server
    3. (optional) Configure environment
    4. Start service or daemon

Windows Quick Install

  Install the Server

   Install the easy way

           Run the Erlang Windows Binary File. It takes around 5 minutes.

           Then just run the Installer for Windows systems,
           rabbitmq-server-2.7.0.exe. It takes around 2 minutes, and will set
           RabbitMQ up and running as a service, with a default
           configuration. That's all!

  Run RabbitMQ Service

   Customise RabbitMQ Environment Variables

           The service will run fine using its default settings. You may want
           to customise the RabbitMQ environment or edit configuration.

   Run RabbitMQ

           The RabbitMQ service starts automatically. You can
           stop/reinstall/start the RabbitMQ service from the Start Menu.

   Manage the Service

           You can find links to RabbitMQ directories in the Start Menu.

           You can use also any of the command line scripts in sbin as
           described for Windows Manual Install including rabbitmqctl
           commands and logging. You can set up the path or just use the link
           to sbin directory found in the Start Menu.

Windows Manual Install

  Install Server Components

   If you should ever need to install RabbitMQ manually, this is how to do
   it:

   Install Erlang

           Run the Erlang Windows Binary File. Erlang will appear in the
           Start Menu, and \erlx.x.x\bin\erl.exe will be in C:\Program Files
           or C:\Program Files (x86).

   ERLANG_HOME

           Set ERLANG_HOME to where you actually put your Erlang
           installation, e.g. C:\Program Files\erlx.x.x (full path). The
           RabbitMQ batch files expect to execute %ERLANG_HOME%\bin\erl.exe.

           Go to
           Start > Settings > Control Panel > System > Advanced > Environment Variables.
           Create the system environment variable ERLANG_HOME and set it to
           the full path of the directory which contains bin\erl.exe.

   Install RabbitMQ Server

           Download rabbitmq-server-windows-2.7.0.zip from the download page.

           From the zip file, extract the folder named rabbitmq_server-2.7.0
           into C:\Program Files\RabbitMQ (or somewhere suitable for
           application files).

  Find Command Scripts and App Data

   Commands for RabbitMQ Server

           Within the rabbitmq_server-2.7.0\sbin directory are some scripts
           which run commands to control the RabbitMQ server.

           The RabbitMQ server can be run as either an application or service
           (not both).

              * rabbitmq-server.bat starts the broker as an application.
              * rabbitmq-service.bat manages the service and starts the
                broker.
              * rabbitmqctl.bat manages a running broker.

           Log in as an administrator. To see the output, run these from a
           Command Prompt in the sbin directory.

           Note: On Windows Vista (and later) you will need to elevate
           privilege (e.g. right-click on the icon to select Run as
           Administrator).

   Find Commands Easily
           Set up the system path so you can find the server and sbin
           directory easily.

              * Create a system environment variable (e.g. RABBITMQ_SERVER)
                for "C:\Program Files\RabbitMQ\rabbitmq_server-2.7.0". Adjust
                this if you put rabbitmq_server-2.7.0 elsewhere, or if you
                upgrade versions.
              * Append the literal string ";%RABBITMQ_SERVER%\sbin" to your
                system path (aka %PATH%).

           Now you can run rabbitmq commands from any (administrator) Command
           Prompt.

           You will need to navigate to rabbitmq_server-2.7.0\sbin to run
           commands if your system path does not contain the RabbitMQ sbin
           directory.

   Finding Application Data

           By default, the RabbitMQ logs and Mnesia database are stored in
           the current user's Application Data directory e.g. C:\Documents
           and Settings\%USERNAME%\Application Data or
           C:\Users\%USERNAME%\AppData\Roaming (Windows Vista and later).

           Execute echo %APPDATA% at a Command Prompt to find this directory.
           Alternatively, Start > Run %APPDATA% will open this folder.

  Run RabbitMQ Server as an Application

   The application is started by the rabbitmq-server.bat script in sbin.

   Customise RabbitMQ Server Environment Variables
           Environment variable defaults are set within the
           rabbitmq-server.bat file. You may need to customise environment
           variables for your installation.

   Start the Broker as an Application

           Run the command

 rabbitmq-server -detached

           Alternatively, you can double-click the rabbitmq-server.bat file
           in Windows Explorer.

           If you start by double-clicking, a Command Prompt window opens,
           displays a banner message, reports on progress in the startup
           sequence, and concludes with "broker running". This shows that the
           RabbitMQ broker has been started successfully.

           If you started without the -detached option, e.g. by
           double-clicking, you will need a second Command Prompt window to
           control the application cleanly. Note: Closing the original
           Command Prompt window will forcefully shut down a server started
           this way.

   Stop or Manage the Broker
           rabbitmq-server only starts the broker. To manage the broker use
           rabbitmqctl commands.

  Run RabbitMQ Server as a Service

   The service will run in the security context of the system account without
   the need for a user to be logged in on a console. This is normally more
   appropriate for production use. The server should not be run as a service
   and application simultaneously.

   The service runs using the rabbitmq-service.bat script in sbin.

   Customise RabbitMQ Service Environment Variables

           Note: After setting environment variables, you may need to install
           the service again.

           The rabbitmq-service.bat script recognises many of the same
           environment variables as rabbitmq-server.bat, as well as a few
           additional service environment variables.

   Install the Service

           Install the service by running

 rabbitmq-service install

           A service with the name defined by RABBITMQ_SERVICENAME should now
           appear in the Windows Services control panel
           (Start > Run services.msc).

   Managing the Service

           To manage the service (install, remove, start, stop, enable,
           disable), use rabbitmq-service.bat commands. Refer to the service
           guide for more information and troubleshooting guidance. You can
           also use the Windows Services panel (services.msc) to perform some
           of the same functions as the service script.

   Start the Broker as a Service

           To start the broker, execute

 rabbitmq-service start

           If the output from this command is "Service RABBITMQ_SERVICENAME
           started", then the service was started correctly.

           Confirm the service named RABBITMQ_SERVICENAME reports a "Started"
           status in Services:
           Start > Run services.msc.

   Manage the Broker
           To manage the broker use rabbitmqctl commands.

  Manage the Broker

   To stop the broker or check its status, use rabbitmqctl.bat in sbin (as an
   administrator).

   Synchronise Erlang Cookies (when running a manually installed Windows
   Service)

           Erlang Security Cookies used by the service account and the user
           running rabbitmqctl.bat must be synchronised for rabbitmqctl.bat
           to function.

           To ensure Erlang cookie files contain the same string, copy the
           .erlang.cookie file from the Windows directory (normally
           C:\WINDOWS\.erlang.cookie) to replace the user .erlang.cookie. The
           user cookie will be in the user's home directory (%USERPROFILE%),
           e.g. C:\Documents and Settings\%USERNAME%\.erlang.cookie or
           C:\Users\%USERNAME%\.erlang.cookie (Windows Vista and later).

   Stopping the Broker

           Use rabbitmqctl stop.

   Checking the Broker Status

           Use rabbitmqctl status. All rabbitmqctl commands will report the
           node absence if no broker is running (i.e. nodedown).

   More info on rabbitmqctl commands

   More info on administration

  Logging

   Output from the server is sent to a RABBITMQ_NODENAME.log file in the
   RABBITMQ_LOG_BASE directory. Additional log data is written to
   RABBITMQ_NODENAME-sasl.log.

   The broker always appends to the log files, so a complete log history is
   retained.

   You can rotate logs using rabbitmqctl rotate_logs.

Debian GNU/Linux and Ubuntu Linux

  Install the Server

   Install from a package

           Install the rabbitmq-server package - at the time of writing,
           RabbitMQ is included in Debian unstable (sid), Debian testing
           (squeeze), and Ubuntu 9.04 (Jaunty Jackalope) and onwards.

           Alternatively, install rabbitmq-server_2.7.0-1_all.deb from the
           download page, or by using our APT repository.

           All dependencies should be met automatically.

  Run RabbitMQ Server

   Customise RabbitMQ Environment Variables

           The server should start using defaults. You can customise the
           RabbitMQ environment. Also see how to configure components.

   Start the Server

           The server is started as a daemon by default when the RabbitMQ
           server package is installed.

           As an administrator, start and stop the server as usual for Debian
           using invoke-rc.d rabbitmq-server stop/start/etc.

           Note: The server is set up to run as system user rabbitmq. If you
           change the location of the Mnesia database or the logs, you must
           ensure the files are owned by this user (and also update the
           environment variables).

   Manage the Server
           See the Generic Unix or Linux section for info on rabbitmqctl
           commands and logging.

RPM based Linux (CentOS, Fedora, OpenSuse, RedHat)

  Install the Server

   Install from a package

           The RabbitMQ server is included in Fedora, so for Fedora and RHEL
           users we recommend to install the rabbitmq-server package via the
           distribution's package manager.

           Alternatively, install rabbitmq-server-2.7.0-noarch.rpm (which you
           can download from the download page). We recommend using your
           distribution's packaged version of Erlang to run the server. See
           the server download page for more information.

  Run RabbitMQ Server

   Customise RabbitMQ Environment Variables

           The server should start using defaults. You can customise the
           RabbitMQ environment. Also see how to configure components.

   Start the Server

           The server is not started as a daemon by default when the RabbitMQ
           server package is installed. To start the daemon by default when
           the system boots, as an administrator run chkconfig
           rabbitmq-server on.

           As an administrator, start and stop the server as usual using
           /sbin/service rabbitmq-server stop/start/etc.

           Note: The server is set up to run as system user rabbitmq. If you
           change the location of the Mnesia database or the logs, you must
           ensure the files are owned by this user (and also update the
           environment variables).

   Manage the Server
           See the Generic Unix or Linux section for info on rabbitmqctl
           commands and logging.

Mac OS X with MacPorts

   Users of Mac OS X who do not use MacPorts can use the Generic Unix
   installation instructions instead.

   A portfile for the RabbitMQ server is included in MacPorts. From the
   MacPorts home page:

     The MacPorts Project is an open-source community initiative to design an
     easy-to-use system for compiling, installing, and upgrading either
     command-line, X11 or Aqua based open-source software on the Mac OS X
     operating system.

   RabbitMQ maintains a dedicated MacPorts repository, which you should use
   to install the latest RabbitMQ server version via MacPorts, as officially
   released MacPorts packaging may not always contain the lastest released
   version of RabbitMQ.
   (NB It can take a very long time to install other macport updates - see
   man port for options).

  Install the Server

   Installation of the version of the RabbitMQ server distributed with
   MacPorts is as simple as (sudo port sync followed by)

 sudo port install rabbitmq-server

  Run RabbitMQ Server

   To start the server, you can either use launchctl (see the instructions
   emitted during the sudo port install step) or you can start it from the
   command line with sudo rabbitmq-server -detached.

   The rabbitmq-server, rabbitmqctl, and other RabbitMQ-related scripts on
   the path automatically (through sudo) run in the context of the rabbitmq
   user, so that the Erlang cookie can be read from (sudo)
   $MACPORTS_PREFIX/var/lib/rabbitmq/.erlang.cookie.

   See the Generic Unix or Linux installation section for further
   information.

Mac OS X with Homebrew

   A brew for the RabbitMQ server is available from Homebrew. Note: You may
   not be able to install the RabbitMQ brew from inside a firewall.

  Install the Server

   Before installing make sure you have the latest brews:

 brew update

   Then, install RabbitMQ server with:

 brew install rabbitmq

  Run RabbitMQ Server

   The RabbitMQ server scripts are installed into /usr/local/sbin. This is
   not automatically added to your path, so you may wish to add
   PATH=$PATH:/usr/local/sbin to your .bash_profile or .profile. The server
   can then be started with rabbitmq-server.

   All scripts run under your own user account. Sudo is not required.

   See the Generic Unix or Linux section for further information.

Solaris

  Install the Server

   The Generic Unix or Linux installation instructions may be used to install
   RabbitMQ on Solaris, with two modifications:

     * The RabbitMQ shell scripts assume a standard POSIX environment. On
       Solaris this requires that startup scripts be executed with the
       /usr/xpg4/bin/sh shell. This can be accomplished by replacing the
       first line of each script (which normally reads #!/bin/sh) with
       #!/bin/xpg4/bin/sh.
     * The RabbitMQ shell scripts assume the existence of the "readlink"
       utility for resolving symbolic links. This can be obtained by
       installing the Sunfreeware "coreutils" package or compiling GNU
       coreutils.

Generic Unix or Linux (BSD, Mac OS X)

  Install the Server

   Install a recent version of Erlang.

   Download rabbitmq-server-generic-unix-2.7.0.tar.gz from the download page.

   Contained in the tarball is a directory named rabbitmq_server-2.7.0. You
   should extract this into somewhere appropriate for application binaries on
   your system. The sbin directory will be found in this directory.

  Run RabbitMQ Server

   Customise RabbitMQ Environment Variables

           Within the sbin directory is a shell script rabbitmq-server which
           uses default values. You can customise the RabbitMQ environment.
           Also see how to configure components.

           Note: If the directories RABBITMQ_MNESIA_BASE and
           RABBITMQ_LOG_BASE do not exist the server will attempt to create
           them. The server needs write permission at the configured
           locations.

   Start the Server

           Invoke the rabbitmq-server shell script. This displays a banner
           message, and reports on progress in the startup sequence,
           concluding with the message "broker running", indicating that the
           RabbitMQ broker has been started successfully.

           You can also start the server in "detached" mode with
           rabbitmq-server -detached, in which case the server process runs
           in the background.

  Manage the Server

   To stop the server or check its status, etc., you can use rabbitmqctl (as
   an administrator). It should be available on the path. All rabbitmqctl
   commands will report the node absence if no broker is running.

     * Use rabbitmqctl stop to stop the server. Alternatively, just terminate
       the Erlang process.
     * Use rabbitmqctl status to check whether it is running.

   More info on rabbitmqctl commands

   More info on administration

  Logging

   Output from the server is sent to a RABBITMQ_NODENAME.log file in the
   RABBITMQ_LOG_BASE directory. Additional log data is written to
   RABBITMQ_NODENAME-sasl.log.

   The broker always appends to the log files, so a complete log history is
   retained.

   You can use the logrotate program to do all necessary rotation and
   compression, and you can change it. By default, this script runs weekly on
   files located in default /var/log/rabbitmq directory. See
   /etc/logrotate.d/rabbitmq-server to configure logrotate.

Troubleshooting

   Checking Broker Status

           You can use rabbitmqctl status to verify whether a broker is
           running.
           Normal output from a running broker without plugins follows this
           pattern:

   Status of node 'rabbit@xxx' ...
   [{pid,...},
    {running_applications,[{rabbit,"RabbitMQ","2.7.0"},
                           {os_mon,"..."},
                           {sasl,"..."},
                           {mnesia,"..."},
                           {stdlib,"..."},
                           {kernel,"..."},
   {os,"..."},
   {erlang_version,"..."},
   {memory,"..."}}]

           This example indicates that no broker is running:

   Status of node 'rabbit@xxx' ...
   Error: unable to connect to node 'rabbit@xxx': nodedown
   diagnostics:
   - nodes and their ports on xxx: [{rabbitmqctl,...}]
   - current node: 'rabbitmqctlxxx@xxx'
   - current node home dir: [...]
   - current node cookie hash: [...]

           If the diagnostic line looks like this:

   - nodes and their ports on xxx: [{rabbit,...},{rabbitmqctl,...}]

           and the broker logfile contains entries similar to

   Connection attempt from disallowed node...

           then you should make sure the erlang cookies are the same.

   Server Fails to Start

           When the server fails to start, usually a crash dump file
           erl_crash.dump is created in the directory where the server was
           started. This can provide very detailed information on the causes
           of a start up failure, but its analysis requires Erlang expertise.

           If you attempt to start another server while a broker is already
           running, then you will receive an error report. You can confirm
           whether the broker is already running by checking the status.

           If the server fails to start, examine the console output and the
           log files in the RABBITMQ_LOG_BASE directory. Configuration and
           permission errors are frequently the cause, e.g. the Mnesia
           directory cannot be created.

   Windows Service fails to Install
           If the service fails to install, check the service account has
           full access permission for RABBITMQ_BASE, RABBITMQ_MNESIA_BASE and
           RABBITMQ_LOG_BASE directories [XP, Vista].

   Windows Service fails to Start

           If the service fails to start, make sure the service has been
           installed.

           On starting the service, if the service output reads "The process
           terminated unexpectedly" instead, then the service did not start
           correctly. Check that the environment variables are set correctly.
           The logfiles in RABBITMQ_BASE may also contain useful diagnostic
           information.

   If the server is not behaving as expected during operation, examine the
   log files and use the rabbitmqctl commands from the admin guide to obtain
   further information on the server status.

   For problems encountered in the handling of AMQP traffic, the AMQP capture
   and analysis tool may help in the analysis.

   Failing that, it's possible that we've solved the problem for someone
   else. Try using the search box at the top of our web pages to find site,
   mailing list and blog information. You might also check our mailing list
   archives.

   If you still can't find a solution to your problem then please post a new
   message to rabbitmq-discuss@lists.rabbitmq.com (you may have to join the
   mailing list first). Let us know what you were trying to do, the error you
   received and relevant entries from the logfile and one of our engineers
   will help you get it fixed.

   If all of the above fails, please tell us about the problem, including the
   log files under RABBITMQ_LOG_BASE in your report.

   Related Links:

     * Server Download
     * Configure
     * Clustering
     * Admin
     * Plugins
     * Manual Pages
     * Management

   Contact | About

   Copyright © 2011 VMware, Inc. All rights reserved.
