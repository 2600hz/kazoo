--- original_version/gen_leader.erl	2009-05-19 15:16:57.000000000 -0400
+++ opencsm_version/gen_leader.erl	2009-05-19 15:32:25.000000000 -0400
@@ -51,6 +51,9 @@
 %%   See gen_server.
 %% @type callerRef() = {pid(), reference()}. See gen_server.
 %%
+
+%% This version debugged/modified by Andrew Thompson (andrew@hijacked.us)
+%% for SpiceCSM
 -module(gen_leader).
 
 % Time between rounds of query from the leader
@@ -146,6 +149,9 @@
 %%
 %% @doc Starts a gen_leader process without linking to the parent.
 %%
+% ADT - don't allow an empty candidate list
+start(_Name, [], _Workers, _Mod, _Arg, _Options) ->
+	{error, nocandidates};
 start(Name, CandidateNodes, Workers, Mod, Arg, Options) when is_atom(Name) ->
     gen:start(?MODULE, nolink, {local,Name},
 	      Mod, {CandidateNodes, Workers, Arg}, Options).
@@ -170,6 +176,9 @@
 %% <p>The list of candidates needs to be known from the start. Workers 
 %% can be added at runtime.</p>
 %% @end
+% ADT - don't allow an empty candidate list
+start_link(_Name, [], _Workers, _Mod, _Arg, _Options) ->
+	{error, nocandidates};
 start_link(Name, CandidateNodes, Workers, 
 	   Mod, Arg, Options) when is_atom(Name) ->
     % Random delay for QuickCheck
@@ -296,9 +305,9 @@
     ok.
 
 
-do_cast(Tag, Name, Request) when atom(Name) ->
+do_cast(Tag, Name, Request) when is_atom(Name) ->
     Name ! {Tag, Request};
-do_cast(Tag, Pid, Request) when pid(Pid) ->
+do_cast(Tag, Pid, Request) when is_pid(Pid) ->
     Pid ! {Tag, Request}.
 
 
@@ -316,6 +325,10 @@
 %%% loop is entered.
 %%% ---------------------------------------------------
 %%% @hidden 
+% ADT - R13B passes {local, Name} or {global, Name} instead of just Name
+init_it(Starter, Parent, {local, Name}, Mod, {CandidateNodes, Workers, Arg}, Options) ->
+    init_it(Starter, Parent, Name, Mod,
+	    {CandidateNodes, Workers, Arg}, Options); % ADT - R13B compatability
 init_it(Starter, self, Name, Mod, {CandidateNodes, Workers, Arg}, Options) ->
     init_it(Starter, self(), Name, Mod, 
 	    {CandidateNodes, Workers, Arg}, Options);
@@ -345,13 +358,34 @@
 	    proc_lib:init_ack(Starter, {error, Reason}),
 	    exit(Reason);
 	{{ok, State}, true} ->
-	    NewE = startStage1(Election#election{incarn = incarnation(node())}),
+	    NewE = startStage1(Election#election{incarn = incarnation(Name, node())}),
 
 	    proc_lib:init_ack(Starter, {ok, self()}),
+
+			% ADT - handle the case where there's only one candidate worker and we can't
+			% rely on DOWN messages to trigger the elected() call because we never get
+			% a DOWN for ourselves
+			case (length(CandidateNodes) == 1) and (CandidateNodes =:= [node()]) of
+				true ->
+					% there's only one candidate leader; us
+					hasBecomeLeader(NewE,#server{parent = Parent,mod = Mod,
+							state = State,debug = Debug},{init});
+				false ->
+					% more than one candidate worker, continue as normal
 	    safe_loop(#server{parent = Parent,mod = Mod,state = State,debug = Debug}, 
-		      candidate, NewE,{init});
+		      candidate, NewE,{init})
+		end;
 	{{ok, State}, false} ->
+	  % ADT - support for dynamic workers
+		io:format("new worker~n", []),
+		% broadcast to all the candidate nodes we know about
 	    proc_lib:init_ack(Starter, {ok, self()}), 	  
+	    lists:foreach(
+		      fun(Node) ->
+		          {Name,Node} ! {workerStart, self()}
+		      end,Election#election.candidate_nodes),
+
+		timer:send_after(?TAU,{workerstart_timeout}),
 	    safe_loop(#server{parent = Parent,mod = Mod,state = State,debug = Debug}, 
 		      waiting_worker, Election,{init});
 	Else ->
@@ -368,8 +402,11 @@
 %%% ---------------------------------------------------
 
 
+% safe_loop is for when new candidates/workers are starting or when
+% the leader is being re-elected
+
 safe_loop(#server{mod = Mod, state = State} = Server, Role,
-	  #election{name = Name} = E, PrevMsg) ->
+	  #election{name = Name} = E, _PrevMsg) ->
     % Event for QuickCheck
     % ?EVENT({Role,E}),
     receive
@@ -421,12 +458,14 @@
 		    NewE = E
 	    end,
 	    hasBecomeLeader(NewE,Server,Msg);
-	{ldr,Synch,T,From} = Msg ->
+	{ldr,Synch,Candidates,Workers,T,From} = Msg ->
 	    case ( (E#election.status == wait) and (E#election.elid == T) ) of
 		true ->
 		    NewE1 = mon_node(E,From),
 		    NewE = NewE1#election{leader = From,
 					  leadernode = node(From),
+						candidate_nodes = Candidates,
+						worker_nodes = Workers,
 					  status = norm},
 		    {ok,NewState} = Mod:surrendered(State,Synch,NewE),
 		    loop(Server#server{state = NewState},surrendered,NewE,Msg);
@@ -465,11 +504,14 @@
 	    % The sender will notice this via a DOWN message
 	    safe_loop(Server,Role,E,Msg);
 	{activateWorker,T,Synch,From} = Msg ->
-	    case ( (T == E#election.elid) and (node(From) == E#election.leadernode)) of
+	    case ((T == E#election.elid) and (node(From) == E#election.leadernode)) of
 		true ->
 		    NewE = E#election{ leader = From,
 				       status = worker },
+		    % XXX - only workers should get this message, and workers shouldn't
+		    % call Mod:surrendered!
 		    {ok,NewState} = Mod:surrendered(State,Synch,NewE),
+				% actually enter the main loop
 		    loop(Server#server{state = NewState},worker,NewE,Msg);
 		false ->
 		    % This should be a VERY special case...
@@ -480,11 +522,19 @@
 	
 	{tau_timeout} = Msg ->
 	    safe_loop(Server,Role,E,Msg);
-	{'DOWN',Ref,process,From,Reason} = Msg when Role == waiting_worker ->
+	{workerstart_timeout} = Msg ->
+		io:format("worker start timeout~n"),
+		lists:foreach(
+			fun(Node) ->
+					{E#election.name,Node} ! {workerStart, self()}
+			end,E#election.candidate_nodes),
+		timer:send_after(?TAU,{workerstart_timeout}),
+		safe_loop(Server, Role, E, Msg);
+	{'DOWN',_Ref,process,From,_Reason} = Msg when Role == waiting_worker ->
 	    % We are only monitoring one proc, the leader!
 	    Node = case From of
 		       {Name,_Node} -> _Node;
-		       _ when pid(From) -> node(From)
+		       _ when is_pid(From) -> node(From)
 		   end,
 	    case Node == E#election.leadernode of
 		true ->
@@ -495,10 +545,10 @@
 		    NewE = E
 	    end,  
 	    safe_loop(Server, Role, NewE,Msg);
-	{'DOWN',Ref,process,From,Reason} = Msg ->
+	{'DOWN',Ref,process,From,_Reason} = Msg ->
 	    Node = case From of
 		       {Name,_Node} -> _Node;
-		       _ when pid(From) -> node(From)
+		       _ when is_pid(From) -> node(From)
 		   end,
 	    NewMon = E#election.monitored -- [{Ref,Node}],
 	    case lists:member(Node,E#election.candidate_nodes) of
@@ -508,6 +558,7 @@
 		    case ( pos(Node,E#election.candidate_nodes) < 
 			     pos(node(),E#election.candidate_nodes) ) of
 			true ->
+					NewServer = Server,
 			    Lesser = lesser(node(),E#election.candidate_nodes),
 			    LesserIsSubset = (Lesser -- NewDown) == [],
 			    case ((E#election.status == wait) and (Node == E#election.leadernode)) of
@@ -522,6 +573,14 @@
 				    end
 			    end;
 			false ->
+					% ADT if we're the leader, call Mod:handle_DOWN as per the documentation
+					case (E#election.leader == self()) of
+						true ->
+							{ok,NewState} = (Server#server.mod):handle_DOWN(Node, Server#server.state, E),
+							NewServer = Server#server{state = NewState};
+						false ->
+							NewServer = Server
+					end,
 			    case ( (E#election.status == elec2) and (Node == E#election.pendack) ) of
 				true ->
 				    NewE = continStage2(E1);
@@ -536,14 +595,14 @@
 			    end
 		    end 
 	    end,
-	    hasBecomeLeader(NewE,Server,Msg)
+	    hasBecomeLeader(NewE,NewServer,Msg)
     end.
 
 
 loop(#server{parent = Parent,
 	     mod = Mod,
 	     state = State,
-	     debug = Debug} = Server, Role, #election{name = Name} = E, PrevMsg) ->
+	     debug = Debug} = Server, Role, #election{name = Name} = E, _PrevMsg) ->
     % Event for QuickCheck
     % ?EVENT({Role,E}),
     receive
@@ -557,7 +616,8 @@
 		    terminate(Reason, Msg, Server, Role, E);
 
 		{halt,_,From} ->
-		    From ! {hasLeader,E#election.leader,E#election.elid,self()},
+		    % we already have a leader, so send it back
+		    From ! {hasLeader, E#election.leader,E#election.elid,self()},
 		    loop(Server,Role,E,Msg);
 		{hasLeader,_,_,_} ->
 		    loop(Server,Role,E,Msg);
@@ -567,7 +627,9 @@
 			    NewE = mon_node(E#election{down = E#election.down -- [node(From)]},
 						 From),
 			    {ok,Synch,NewState} = Mod:elected(State,NewE),
-			    From ! {ldr,Synch,E#election.elid,self()}, 
+			    % ADT - send the candidate and worker lists so they can be synchronized
+			    From ! {ldr,Synch,E#election.candidate_nodes, E#election.worker_nodes,
+						E#election.elid,self()},
 			    loop(Server#server{state = NewState},Role,NewE,Msg);	
 			false ->
 			    From ! {notLeader,T,self()},
@@ -589,11 +651,24 @@
 			    NewE = mon_node(E#election{down = E#election.down -- [node(From)]},
 						 From),
 			    {ok,Synch,NewState} = Mod:elected(State,NewE),
-			    From ! {ldr,Synch,E#election.elid,self()},
+			    % ADT - send the candidate and worker lists so they can be synchronized
+			    From ! {ldr,Synch,E#election.candidate_nodes, E#election.worker_nodes,
+						E#election.elid,self()},
 			    loop(Server#server{state = NewState},Role,NewE,Msg);	
 			false ->
 			    loop(Server,Role,E,Msg)
 		    end;
+		% ADT - support for dynamic workers
+		{workerStart,From} ->
+			case self() == E#election.leader of
+				true ->
+					io:format("Added new worker to the pool ~p~n", [From]),
+					NewE = E#election{work_down = lists:umerge(E#election.work_down,
+							[node(From)])},
+					loop(Server,Role,NewE,Msg);
+				false ->
+					loop(Server,Role,E,Msg)
+			end;
 		{workerAlive,_,_} ->
 		    % Do nothing if we get this from a new leader
 		    % We will soon notice that the prev leader has died, and
@@ -608,10 +683,38 @@
 			        %            and iselem(node(From),E#election.monitored)
                                 ) of
 			true ->
+					Extra = {add_worker, node(From)},
+					Fun = fun() ->
+						case whereis(E#election.name) of
+							undefined ->
+								io:format("~p is not running on ~p~n", [E#election.name, node()]),
+								ok;
+							Pid ->
+								io:format("suspending ~p on ~p~n", [Pid, node()]),
+								sys:suspend(Pid),
+								io:format("changing code for ~p on ~p~n", [Pid, node()]),
+								sys:change_code(Pid, ?MODULE, foo, Extra),
+								io:format("resuming ~p on ~p~n", [Pid, node()]),
+								sys:resume(Pid)
+						end
+					end,
+
+					Nodes = lists:append(E#election.candidate_nodes -- [node()],
+						[node()]),
+
+					lists:foreach(
+						fun(Node) ->
+							spawn(Node, Fun)
+						end, Nodes),
+					io:format("done spawning~n"),
+
  			    NewE = mon_node(
  				     E#election{work_down = E#election.work_down -- [node(From)]},
  				     From),
 %			    NewE = E#election{work_down = E#election.work_down -- [node(From)]},
+			    % XXX - this isn't a candidate, the docs say only candidates should
+					% trigger an elected() call
+
 			    {ok,Synch,NewState} = Mod:elected(State,NewE),
 			    From ! {activateWorker,T,Synch,self()},
 			    loop(Server#server{state = NewState},Role,NewE,Msg);		
@@ -636,11 +739,13 @@
 			    ok
 		    end,
 		    loop(Server,Role,E,Msg);
-		{'DOWN',Ref,process,From,Reason} when Role == worker ->
+		{workerstart_timeout} = Msg ->
+			loop(Server, Role, E, Msg);
+		{'DOWN',_Ref,process,From,_Reason} when Role == worker ->
 		    % We are only monitoring one proc, the leader!
 		    Node = case From of
 			       {Name,_Node} -> _Node;
-			       _ when pid(From) -> node(From)
+			       _ when is_pid(From) -> node(From)
 			   end,
 		    case Node == E#election.leadernode of
 			true ->
@@ -651,10 +756,10 @@
 			false ->
 			    loop(Server, Role, E,Msg)
 		    end;		    
-		{'DOWN',Ref,process,From,Reason} ->
+		{'DOWN',Ref,process,From,_Reason} ->
 		    Node = case From of
 			       {Name,_Node} -> _Node;
-			       _ when pid(From) -> node(From)
+			       _ when is_pid(From) -> node(From)
 			   end,
 		    NewMon = E#election.monitored -- [{Ref,Node}],
 		    case lists:member(Node,E#election.candidate_nodes) of
@@ -667,7 +772,15 @@
 				    safe_loop(Server, candidate, NewE,Msg);
 				
 				false ->
-				    loop(Server, Role, E1,Msg)
+					% ADT if we're the leader, call Mod:handle_DOWN as per the documentation
+					case (E#election.leader == self()) of
+						true ->
+							{ok,NewState} = (Server#server.mod):handle_DOWN(Node, Server#server.state, E),
+							NewServer = Server#server{state = NewState};
+						false ->
+							NewServer = Server
+					end,
+				    loop(NewServer, Role, E1,Msg)
 			    end;
 			false ->
 			    % I am the leader, make sure the dead worker is in work_down.
@@ -689,16 +802,24 @@
 %% Callback functions for system messages handling.
 %%-----------------------------------------------------------------
 %% @hidden 
-system_continue(Parent, Debug, [safe, Server, Role, E]) ->
+system_continue(_Parent, _Debug, [safe, Server, Role, E]) ->
     safe_loop(Server, Role, E,{});
-system_continue(Parent, Debug, [normal, Server, Role, E]) ->
+system_continue(_Parent, _Debug, [normal, Server, Role, E]) ->
     loop(Server, Role, E,{}).
 
 %% @hidden 
-system_terminate(Reason, _Parent, Debug, [Mode, Server, Role, E]) ->
+system_terminate(Reason, _Parent, _Debug, [_Mode, Server, Role, E]) ->
     terminate(Reason, [], Server, Role, E).
 
 %% @hidden 
+system_code_change([Mode, Server, Role, E], _Module, _OldVsn,
+	{add_worker, Worker}) ->
+	% ADT - using code_change to add a dynamic worker to the shared list of workers
+	NewE = E#election{worker_nodes = lists:umerge(E#election.worker_nodes,
+			[Worker])},
+	io:format("Added worker ~p to election state for ~p~n", [Worker,
+			E#election.name]),
+	{ok, [Mode, Server, Role, NewE]};
 system_code_change([Mode, Server, Role, E], _Module, OldVsn, Extra) ->
     #server{mod = Mod, state = State} = Server,
     case catch Mod:code_change(OldVsn, State, E, Extra) of
@@ -809,6 +930,21 @@
 	   #server{mod = Mod, state = State} = Server, Role, E) ->
     handle_common_reply(catch Mod:handle_cast(Msg, State), 
 			Cast, Server, Role, E);
+% ADT - implement gen_leader_cast
+handle_msg({'$leader_cast', Msg} = Cast,
+	   #server{mod = Mod, state = State} = Server, elected = Role, E) ->
+    case catch Mod:handle_leader_cast(Msg, State, E) of
+			{noreply, NState} ->
+				NewServer = handle_debug(Server#server{state = NState},
+					Role, E, Cast),
+				loop(NewServer, Role, E,Cast);
+			Other ->
+				handle_common_reply(Other, Msg, Server, Role, E)
+			end;
+handle_msg({'$leader_cast', Msg} = Cast, Server, Role,
+	   #election{leader = Leader} = E) ->
+    Leader ! {'$leader_cast', Msg},
+		loop(Server, Role, E, Cast);
 handle_msg(Msg,
 	   #server{mod = Mod, state = State} = Server, Role, E) ->
     handle_common_reply(catch Mod:handle_info(Msg, State),
@@ -817,6 +953,11 @@
 
 handle_common_reply(Reply, Msg, Server, Role, E) ->
     case Reply of
+	% ADT - support for noreply replies from eg. gen_cast
+	{noreply, NState} -> 
+		NewServer = handle_debug(Server#server{state = NState},
+						Role, E, Reply),
+		loop(NewServer, Role, E, Msg);
 	{ok, NState} ->
 	    NewServer = handle_debug(Server#server{state = NState},
 				     Role, E, Reply),
@@ -835,9 +976,9 @@
     handle_debug(Server, Role, E, {out, Reply, To, State}).
 
 
-handle_debug(#server{debug = []} = Server, _Role, _E, Event) ->
+handle_debug(#server{debug = []} = Server, _Role, _E, _Event) ->
     Server;
-handle_debug(#server{debug = Debug} = Server, Role, E, Event) ->
+handle_debug(#server{debug = Debug} = Server, _Role, E, Event) ->
     Debug1 = sys:handle_debug(Debug, {?MODULE, print_event}, 
 			      E#election.name, Event),
     Server#server{debug = Debug1}.
@@ -848,8 +989,8 @@
 
 terminate(Reason, Msg, #server{mod = Mod, 
 			       state = State,
-			       debug = Debug} = Server, Role,
-	  #election{name = Name} = E) ->
+			       debug = Debug} = _Server, _Role,
+	  #election{name = Name} = _E) ->
     case catch Mod:terminate(Reason, State) of
 	{'EXIT', R} ->
 	    error_info(R, Name, Msg, State, Debug),
@@ -920,7 +1061,7 @@
 %%-----------------------------------------------------------------
 %% @hidden 
 format_status(Opt, StatusData) ->
-    [PDict, SysState, Parent, Debug, [Mode, Server, Role, E]] = StatusData,
+    [PDict, SysState, Parent, Debug, [_Mode, Server, _Role, E]] = StatusData,
     Header = lists:concat(["Status for generic server ", E#election.name]),
     Log = sys:get_debug(log, Debug, []),
     #server{mod = Mod, state = State} = Server,
@@ -968,10 +1109,14 @@
 		   acks = []}).
 
 continStage2(E) ->
-    case pos(E#election.pendack,E#election.candidate_nodes) < length(E#election.candidate_nodes) of
+	% is the current node at a lower position than the last element in the list
+	case pos(E#election.pendack, E#election.candidate_nodes) < length(E#election.candidate_nodes) of
 	true ->	    
+			% finds the candidate node in the list right after the one matching node()
 	    Pendack = next(E#election.pendack,E#election.candidate_nodes),
-	    NewE = mon_nodes(E,[Pendack]),
+			NewE = mon_nodes(E,[Pendack]), % monitor it
+			% send a halt message, the pendack process should return ackLeader
+			% or hasLeader if it thinks it has a leader already
 	    {E#election.name,Pendack} ! {halt,E#election.elid,self()},
 	    NewE#election{pendack = Pendack}; 
        false ->
@@ -1001,9 +1146,9 @@
 %% Star monitoring one Process
 mon_node(E,Proc) ->
     Node = case Proc of
-	       {Name,Node_} -> 
+	       {_Name,Node_} -> 
 		   Node_;
-	       Pid when pid(Pid) -> 
+	       Pid when is_pid(Pid) -> 
 		   node(Pid)
 	   end,
     case iselem(Node,E#election.monitored) of
@@ -1014,7 +1159,6 @@
 	    E#election{monitored = [{Ref,Node} | E#election.monitored]}
     end.
 		       
-
 %% Stop monitoring of a bunch of nodes
 %demon_nodes(E) ->
 %    foreach(fun({R,_}) ->
@@ -1030,7 +1174,8 @@
 	    lists:foreach(
 	      fun(Node) ->
 		      {E#election.name,Node} ! 
-			  {ldr, Synch, E#election.elid, self()}
+			  {ldr, Synch, E#election.candidate_nodes, E#election.worker_nodes,
+					E#election.elid, self()}
 	      end,E#election.acks),
 
 	    % Make sure we will try to contact all workers!
@@ -1058,15 +1203,20 @@
 % Atomicity: This approach is safe as long as there is only 
 % one gen_leader running per node.
 %
-incarnation(Node) ->
-    case file:read_file_info(Node) of
-	{error,Reason} ->
-	    ok = file:write_file(Node,term_to_binary(1)),
+% ADT - modified to use the locally registered
+% name in addition to the nodename to allow multiple gen_leaders
+% per node
+%
+incarnation(Name, Node) ->
+    FileName = lists:flatten(io_lib:format(".~p.~p-~p", [?MODULE, Name, Node])),
+    case file:read_file_info(FileName) of
+	{error,_Reason} ->
+	    ok = file:write_file(FileName,term_to_binary(1)),
 	    0;
 	{ok,_} ->
-	    {ok,Bin} = file:read_file(Node),
+	    {ok,Bin} = file:read_file(FileName),
 	    Incarn = binary_to_term(Bin),
-	    ok = file:write_file(Node,term_to_binary(Incarn+1)),
+	    ok = file:write_file(FileName,term_to_binary(Incarn+1)),
 	    Incarn
     end.
 
@@ -1098,6 +1248,7 @@
 lesser(N,[M|Ms]) ->
     [M|lesser(N,Ms)].
 
+%% returns the next element after N in a list
 next(_,[]) ->
     no_val;
 next(N,[N|Ms]) ->
@@ -1105,6 +1256,7 @@
 next(N,[_|Ms]) ->
     next(N,Ms).
 
+%% find the posiion of N1 in a list
 pos(N1,[N1|_]) ->
     1;
 pos(N1,[_|Ns]) ->
