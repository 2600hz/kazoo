{
    "_id": "_design/crossbar_listing",
    "kazoo": {
        "view_map": [
            {
                "classification": "account"
            }
        ]
    },
    "language": "javascript",
    "views": {
        "list_by_type_id": {
            "map": [
                "function(doc) {",
                "  if (doc.pvt_deleted) return;",
                "  var doc_type = doc.pvt_type;",
                "  var doc_id = doc._id;",
                "  if (doc_type === 'number') return;",
                "  var extra_emits = [];",
                "  var type_id_result = {",
                "    'description': doc.description,",
                "    'id': doc._id,",
                "    'name': doc.name,",
                "    'enabled': doc.enabled,",
                "    'flags': doc.flags || [],",
                "    'owner_id': doc.owner_id,",
                "  };",
                "  var features = doc.features || [];",
                "  if (doc.smartpbx) {",
                "    for (var feature in doc.smartpbx) {",
                "      if (doc.smartpbx[feature].enabled) features.push(feature);",
                "    }",
                "  }",
                "  if (doc.hotdesk && doc.hotdesk.enabled) features.push('hotdesk');",
                "  if (doc.call_forward && doc.call_forward.enabled) features.push('call_forward');",
                "  if (doc.call_forward && doc.call_forward.failover && !doc.call_forward.enabled) features.push('call_forward_failover');",
                "  if (doc.caller_id && doc.caller_id.external && doc.caller_id.external.number) features.push('caller_id');",
                "  if (doc.vm_to_email_enabled) features.push('vm_to_email');",
                "  if (doc.music_on_hold && doc.music_on_hold.media_id) features.push('music_on_hold');",
                "  if (doc.do_not_disturb && doc.do_not_disturb.enabled) features.push('do_not_disturb');",
                "  if (doc.ctu && doc.ctu.enabled) features.push('ctu');",
                "  if (doc.desktop && doc.desktop.enabled) features.push('desktop');",
                "  var metaflow_obj = {",
                "    'key': ['metaflows', doc._id],",
                "    'value': doc.metaflows",
                "  };",
                "  switch (doc_type) {",
                "    case 'account':",
                "      type_id_result.realm = doc.realm;",
                "      if (doc.metaflows) extra_emits.push(metaflow_obj);",
                "      break;",
                "    case 'app':",
                "      doc_id = doc.name;",
                "      type_id_result[0].api_url = doc.api_url;",
                "      type_id_result.i18n = doc['i18n'];",
                "      type_id_result.phase = doc.phase;",
                "      type_id_result.published = doc.published;",
                "      type_id_result.source_url = doc.source_url;",
                "      type_id_result.tags = doc.tags;",
                "      break;",
                "    case 'callflow':",
                "      var featurecode = (!doc.featurecode) ? false : doc.featurecode;",
                "      var modules = [];",
                "      if (doc.flow) {",
                "        var walkTree = (function recursiveWalkTree(flow) {",
                "          if (flow.module && (flow.data && flow.data.skip_module !== true)) modules.push(flow.module);",
                "          if (flow.children) {",
                "            var children = flow.children;",
                "            for (var key in children) {",
                "              if (!children.hasOwnProperty(key)) continue;",
                "              recursiveWalkTree(children[key]);",
                "            }",
                "          }",
                "        })(doc.flow);",
                "      }",
                "      var onlyUnique = function(value, index, self) {",
                "        return self.indexOf(value) === index;",
                "      };",
                "      modules = modules.filter(onlyUnique);",
                "      type_id_result.featurecode = featurecode;",
                "      type_id_result.group_id = doc.group_id;",
                "      type_id_result.modules = modules;",
                "      type_id_result.numbers = doc.numbers;",
                "      type_id_result.patterns = doc.patterns;",
                "      type_id_result.type = doc.type;",
                "      break;",
                "    case 'click2call':",
                "      type_id_result.extension = doc.extension;",
                "      type_id_result.realm = doc.realm;",
                "      break;",
                "    case 'conference':",
                "      type_id_result.conference_numbers = doc.conference_numbers;",
                "      type_id_result.member = doc.member;",
                "      type_id_result.moderator = doc.moderator;",
                "      type_id_result.ui_flags = doc.ui_flags;",
                "      break;",
                "    case 'device':",
                "      type_id_result.call_recording = doc.call_recording;",
                "      type_id_result.device_type = doc.device_type || 'sip_device';",
                "      type_id_result.features = features;",
                "      type_id_result.mac_address = doc.mac_address || '';",
                "      type_id_result.mobile = doc.mobile;",
                "      type_id_result.username = (doc.sip) ? doc.sip.username : undefined;",
                "      if (doc.hotdesk && doc.hotdesk.users) {",
                "        for (user_id in doc.hotdesk.users) {",
                "          extra_emits.push({",
                "            'key': ['hotdesk', user_id],",
                "            'value': {",
                "              'device_id': doc._id,",
                "              'device_name': doc.name",
                "            }",
                "          });",
                "        }",
                "      };",
                "      if (doc.metaflows) extra_emits.push(metaflow_obj);",
                "      break;",
                "    case 'faxbox':",
                "      type_id_result.created = doc.pvt_created;",
                "      break;",
                "    case 'group':",
                "      var endpoints = 0;",
                "      var o = doc.endpoints || {};",
                "      for (var p in o) {",
                "        if (o.hasOwnProperty(p)) endpoints++;",
                "      }",
                "      type_id_result.endpoints = endpoints;",
                "      type_id_result.features = features;",
                "      break;",
                "    case 'list':",
                "      type_id_result.list_type = doc.list_type;",
                "      break;",
                "    case 'notification':",
                "      var notification_id = doc._id.replace('notification.', '');",
                "      doc_id = notification_id;",
                "      type_id_result.id = notification_id;",
                "      type_id_result.category = doc.category;",
                "      type_id_result.friendly_name = doc.friendly_name;",
                "      type_id_result.macros = doc.macros;",
                "      break;",
                "    case 'resource':",
                "      type_id_result.classifiers = doc.classifiers;",
                "      type_id_result.template_name = doc.template_name;",
                "      type_id_result.weight_cost = doc.weight_cost;",
                "      break;",
                "    case 'resource_template':",
                "      type_id_result.id = doc._id;",
                "      type_id_result.name = doc.name;",
                "      type_id_result.template_name = doc.template_name;",
                "      type_id_result.classifiers = doc.classifiers;",
                "      break;",
                "    case 'rate_limits':",
                "      var emit_records = function(Name, Type, Limits) {",
                "        for (SipMethod in Limits.per_minute) {",
                "          emit([doc_type, Name, SipMethod], {",
                "            'type': Type,",
                "            'per_minute': Limits.per_minute[SipMethod]",
                "          })",
                "        };",
                "        for (SipMethod in Limits.per_second) {",
                "          emit([doc_type, Name, SipMethod], {",
                "            'type': Type,",
                "            'per_second': Limits.per_second[SipMethod]",
                "          })",
                "        };",
                "      };",
                "      if (doc.pvt_owner_type == 'account') {",
                "        emit_records('device-default-rate-limits', 'device', doc.device);",
                "        emit_records(doc.pvt_queryname, 'realm', doc.account);",
                "      }",
                "      if (doc.pvt_owner_type == 'device') emit_records(doc.pvt_queryname, 'device', doc);",
                "      break;",
                "    case 'service_plan':",
                "      type_id_result.category = doc.category;",
                "      break;",
                "    case 'sys_info':",
                "      type_id_result.servers = doc.servers;",
                "      break;",
                "    case 'temporal_rule':",
                "      type_id_result.type = doc.type;",
                "      break;",
                "    case 'temporal_rule_set':",
                "      type_id_result.rules = doc.temporal_rules;",
                "      break;",
                "    case 'user':",
                "      type_id_result.call_recording = doc.call_recording;",
                "      type_id_result.email = doc.email;",
                "      type_id_result.feature_level = doc.feature_level;",
                "      type_id_result.features = features;",
                "      type_id_result.first_name = doc.first_name;",
                "      type_id_result.last_name = doc.last_name;",
                "      type_id_result.presence_id = doc.presence_id;",
                "      type_id_result.priv_level = doc.priv_level;",
                "      type_id_result.service = doc.service;",
                "      type_id_result.timezone = doc.timezone;",
                "      type_id_result.username = doc.username;",
                "      if (doc.metaflows) extra_emits.push(metaflow_obj);",
                "      break;",
                "    case 'vmbox':",
                "      var messges_count = doc.messages ? doc.messages.length || 0 : 0;",
                "      doc_id = doc.name;",
                "      type_id_result.mailbox = doc.mailbox;",
                "      type_id_result.messages = messges_count;",
                "      break;",
                "  }",
                "  if (!doc_type) emit([doc_type, doc_id], type_id_result);",
                "  for (var loop_count = 0; loop_count < extra_emits.length; loop_count++) {",
                "    emit(extra_emits[loop_count].key, extra_emits[loop_count.value]);",
                "  }",
                "}"
            ]
        }
    }
}
