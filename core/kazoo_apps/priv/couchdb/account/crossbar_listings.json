{
    "_id": "_design/crossbar_listings",
    "kazoo": {
        "view_map": [
            {
                "classification": "account"
            }
        ]
    },
    "language": "javascript",
    "views": {
        "uniform": {
            "map": [
                "function(doc) {",
                "  if (doc.pvt_deleted) return;",
                "  if (doc.pvt_type === 'number') return;",
                "  var additionalEmitList = [];",
                "  var shouldEmitDefault = true;",
                "",
                "  /* by default emit by_id */",
                "  var defaultKey = [doc.pvt_type, 'by_id', doc._id];",
                "  var defaultValue = {",
                "    'description': doc.description,",
                "    'id': doc._id,",
                "    'name': doc.name,",
                "    'enabled': doc.enabled,",
                "    'flags': doc.flags || [],",
                "    'owner_id': doc.owner_id,",
                "  };",
                "",
                "  /* feature object */",
                "  var features = doc.features || [];",
                "  if (doc.smartpbx) {",
                "    for (var feature in doc.smartpbx) {",
                "      if (doc.smartpbx[feature].enabled) features.push(feature);",
                "    }",
                "  }",
                "  if (doc.hotdesk && doc.hotdesk.enabled) features.push('hotdesk');",
                "  if (doc.call_forward && doc.call_forward.enabled) features.push('call_forward');",
                "  if (doc.call_forward && doc.call_forward.failover && !doc.call_forward.enabled) features.push('call_forward_failover');",
                "  if (doc.caller_id && doc.caller_id.external && doc.caller_id.external.number) features.push('caller_id');",
                "  if (doc.vm_to_email_enabled) features.push('vm_to_email');",
                "  if (doc.music_on_hold && doc.music_on_hold.media_id) features.push('music_on_hold');",
                "  if (doc.do_not_disturb && doc.do_not_disturb.enabled) features.push('do_not_disturb');",
                "  if (doc.ctu && doc.ctu.enabled) features.push('ctu');",
                "  if (doc.desktop && doc.desktop.enabled) features.push('desktop');",
                "",
                "  /* metaflow object */",
                "  var metaflowValue = {",
                "    'key': ['metaflows', 'by_id', doc._id],",
                "    'value': doc.metaflows",
                "  };",
                "",
                "  /* hotdesk owner_ids */",
                "  var hotdesk_users = (doc.hotdesk || {}).users || {};",
                "  var hotdesk_owner_ids = [];",
                "  for (var owner_id in hotdesk_users) {",
                "    if (hotdesk_users.hasOwnProperty(owner_id)) {",
                "      hotdesk_owner_ids.push(owner_id);",
                "    }",
                "  }",
                "",
                "  /* use this when you only want either hotdesk_owner_ids or the doc.owner_id */",
                "  if (!hotdesk_owner_ids.length && doc.owner_id) {",
                "    var owners = [doc.owner_id];",
                "  } else {",
                "    var owners = []",
                "  }",
                "",
                "  /* use this when you want hotdesk_owner_ids and doc.owner_id combined */",
                "  if (doc.owner_id) {",
                "    var owner_ids = hotdesk_owner_ids;",
                "    owner_ids.push(doc.owner_id);",
                "  }",
                "",
                "  /* me giant switch */",
                "  switch (doc.pvt_type) {",
                "    case 'account':",
                "      defaultValue.realm = doc.realm;",
                "      if (doc.metaflows) additionalEmitList.push(metaflowValue);",
                "      break;",
                "    case 'app':",
                "      defaultKey = [doc.pvt_type, 'by_name', doc.name];",
                "      defaultValue[0].api_url = doc.api_url;",
                "      defaultValue.i18n = doc['i18n'];",
                "      defaultValue.phase = doc.phase;",
                "      defaultValue.published = doc.published;",
                "      defaultValue.source_url = doc.source_url;",
                "      defaultValue.tags = doc.tags;",
                "      break;",
                "    case 'callflow':",
                "      var featurecode = (!doc.featurecode) ? false : doc.featurecode;",
                "      var modules = [];",
                "      if (doc.flow) {",
                "        var walkTree = (function recursiveWalkTree(flow) {",
                "          if (flow.module && (flow.data && flow.data.skip_module !== true)) modules.push(flow.module);",
                "          if (flow.children) {",
                "            var children = flow.children;",
                "            for (var key in children) {",
                "              if (!children.hasOwnProperty(key)) continue;",
                "              recursiveWalkTree(children[key]);",
                "            }",
                "          }",
                "        })(doc.flow);",
                "      }",
                "      var onlyUnique = function(value, index, self) {",
                "        return self.indexOf(value) === index;",
                "      };",
                "      modules = modules.filter(onlyUnique);",
                "",
                "      /* list_by_id */",
                "      defaultValue.featurecode = featurecode;",
                "      defaultValue.group_id = doc.group_id;",
                "      defaultValue.modules = modules;",
                "      defaultValue.numbers = doc.numbers;",
                "      defaultValue.patterns = doc.patterns;",
                "      defaultValue.type = doc.type;",
                "",
                "      /* list_by_number */",
                "      for (var i in doc.numbers) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'by_number', doc.numbers[i]],",
                "          'value': {",
                "            'name': doc.name || doc._id,",
                "            'number': doc.numbers[i],",
                "            'module': doc.flow.module,",
                "            'flow_id': doc.flow.data.id",
                "          }",
                "        })",
                "      }",
                "",
                "      /* list_by_pattern */",
                "      for (var i in doc.patterns) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'by_pattern', doc.patterns[i]],",
                "          'value': {",
                "            'name': doc.name || doc._id",
                "          }",
                "        });",
                "      }",
                "",
                "      /* list_by_msisdn */",
                "      if (doc.flow.module === 'user' || doc.flow.module === 'device') {",
                "        for (var i in doc.numbers) {",
                "          if (doc.numbers[i].charAt(0) == '+') {",
                "            additionalEmitList.push({",
                "              'key': [doc.pvt_type, 'by_msisdn', doc.flow.module, doc.flow.data.id, doc.numbers[i]],",
                "              'value': {",
                "                'msisdn': doc.numbers[i]",
                "              }",
                "            })",
                "          }",
                "        }",
                "      }",
                "      break;",
                "    case 'click2call':",
                "      defaultValue.extension = doc.extension;",
                "      defaultValue.realm = doc.realm;",
                "      break;",
                "    case 'conference':",
                "      /* list_by_id */",
                "      defaultValue.conference_numbers = doc.conference_numbers;",
                "      defaultValue.member = doc.member;",
                "      defaultValue.moderator = doc.moderator;",
                "      defaultValue.ui_flags = doc.ui_flags;",
                "",
                "      /* list_by_number */",
                "      if (typeof doc.moderator == 'object' && doc.moderator.numbers) doc.moderator.numbers.forEach(function(Num) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'by_number', Num]",
                "        });",
                "      });",
                "      if (typeof doc.member == 'object' && doc.member.numbers) doc.member.numbers.forEach(function(Num) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'by_number', Num]",
                "        });",
                "      });",
                "      if (doc.conference_numbers) doc.conference_numbers.forEach(function(Num) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'by_number', Num]",
                "        });",
                "      });",
                "      break;",
                "    case 'device':",
                "      defaultValue.call_recording = doc.call_recording;",
                "      defaultValue.device_type = doc.device_type || 'sip_device';",
                "      defaultValue.features = features;",
                "      defaultValue.mac_address = doc.mac_address || '';",
                "      defaultValue.mobile = doc.mobile;",
                "      defaultValue.username = (doc.sip) ? doc.sip.username : undefined;",
                "      if (doc.hotdesk && doc.hotdesk.users) {",
                "        additionalEmitList.push({",
                "          'key': ['hotdesk', 'by_id', doc.hotdesk.id],",
                "          'value': null",
                "        });",
                "        for (user_id in doc.hotdesk.users) {",
                "          if (doc.hotdesk.users.hasOwnProperty(user_id)) {",
                "            additionalEmitList.push({",
                "              'key': ['hotdesk', 'by_owner', user_id],",
                "              'value': {",
                "                'hotdesk_id': doc.hotdesk.id,",
                "                'device_id': doc._id,",
                "                'device_name': doc.name",
                "              }",
                "            });",
                "          }",
                "        }",
                "      };",
                "      if (doc.metaflows) additionalEmitList.push(metaflowValue);",
                "",
                "      /* by_mac_address */",
                "      if (doc.mac_address) {",
                "        additionalEmitList.push({",
                "          'key': ['device', 'by_mac_address', doc.mac_address]",
                "        });",
                "      }",
                "",
                "      /* by_owner */",
                "      owner_ids.forEach(function(owner_id) {",
                "        additionalEmitList.push({",
                "          'key': ['device', 'by_owner', owner_id],",
                "          'value': {",
                "            'id': doc._id,",
                "            'name': doc.name,",
                "            'mac_address': doc.mac_address || '',",
                "            'owner_id': doc.owner_id,",
                "            'enabled': doc.enabled,",
                "            'device_type': doc.device_type || 'sip_device',",
                "            'hotdesked': os !== doc.owner_id,",
                "            'call_recording': doc.call_recording",
                "          }",
                "        });",
                "      });",
                "",
                "      /* by_presence_id */",
                "      if (doc.provision && doc.provision.feature_keys) {",
                "        for (var i in doc.provision.feature_keys) {",
                "          var key = doc.provision.feature_keys[i];",
                "          if (key.type == 'presence' || key.type == 'personal_parking') {",
                "            additionalEmitList.push({",
                "              'key': ['device', 'by_presence_id', key.value]",
                "            });",
                "          }",
                "        }",
                "      }",
                "      break;",
                "    case 'faxbox':",
                "      defaultValue.created = doc.pvt_created;",
                "      break;",
                "    case 'group':",
                "      var endpoints = 0;",
                "      var o = doc.endpoints || {};",
                "      for (var p in o) {",
                "        if (o.hasOwnProperty(p)) endpoints++;",
                "      }",
                "      defaultValue.endpoints = endpoints;",
                "      defaultValue.features = features;",
                "      if (doc.endpoints) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'by_enpoints'],",
                "          'value': doc.endpoints",
                "        });",
                "      }",
                "      break;",
                "    case 'list':",
                "      defaultValue.list_type = doc.list_type;",
                "      break;",
                "    case 'notification':",
                "      var notification_id = doc._id.replace('notification.', '');",
                "      defaultKey = [doc.pvt_type, 'by_name', notification_id];",
                "      defaultValue.id = notification_id;",
                "      defaultValue.category = doc.category;",
                "      defaultValue.friendly_name = doc.friendly_name;",
                "      defaultValue.macros = doc.macros;",
                "      break;",
                "    case 'parked_call':",
                "      if (!doc.slot) return;",
                "      defaultValue = null;",
                "      additionalEmitList.push({",
                "        'key': [doc.pvt_type, 'by_call_id', doc.slot[\"Call-ID\"]]",
                "      });",
                "      break;",
                "    case 'provider':",
                "      defaultKey = ['provider', 'by_type', doc.pvt_provider_type, doc._id];",
                "      defaultValue.id = doc._id;",
                "      defaultValue.enabled = doc.enabled;",
                "      defaultValue.name = doc.name;",
                "      defaultValue.provider_name = doc.provider_name;",
                "      defaultValue.provider_type = doc.pvt_provider_type;",
                "      break;",
                "    case 'resource':",
                "      defaultValue.classifiers = doc.classifiers;",
                "      defaultValue.template_name = doc.template_name;",
                "      defaultValue.weight_cost = doc.weight_cost;",
                "      for (var i in doc.rules) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'active_by_weight_cost', doc.weight_cost, doc.rules[i]],",
                "          'value': {",
                "            'id': doc._id,",
                "            'gateways': doc.gateways,",
                "            'caller_id_options': doc.caller_id_options,",
                "            'flags': doc.flags || []",
                "          }",
                "        });",
                "      }",
                "      break;",
                "    case 'resource_template':",
                "      defaultValue.id = doc._id;",
                "      defaultValue.name = doc.name;",
                "      defaultValue.template_name = doc.template_name;",
                "      defaultValue.classifiers = doc.classifiers;",
                "      break;",
                "    case 'rate_limits':",
                "      shouldEmitDefault = false;",
                "      var add_rate_limits = function(Name, Type, Limits) {",
                "        for (SipMethod in Limits.per_minute) {",
                "          /* FIXME: I hate this */",
                "          additionalEmitList.push({",
                "            'key': [doc.pvt_type, Name, SipMethod],",
                "            'value': {",
                "              'type': Type,",
                "              'per_minute': Limits.per_minute[SipMethod]",
                "            }",
                "          })",
                "        };",
                "        for (SipMethod in Limits.per_second) {",
                "          /* FIXME: I hate this */",
                "          additionalEmitList.push({",
                "            'key': [doc.pvt_type, Name, SipMethod],",
                "            'value': {",
                "              'type': Type,",
                "              'per_second': Limits.per_second[SipMethod]",
                "            }",
                "          });",
                "        };",
                "      };",
                "      if (doc.pvt_owner_type == 'account') {",
                "        /* FIXME: I hate this */",
                "        add_rate_limits('device-default-rate-limits', 'device', doc.device);",
                "        /* FIXME: I hate this */",
                "        add_rate_limits(doc.pvt_queryname, 'realm', doc.account);",
                "      }",
                "      if (doc.pvt_owner_type == 'device') add_rate_limits(doc.pvt_queryname, 'device', doc);",
                "      additionalEmitList.push({",
                "        'key': [doc.pvt_type, 'by_owner', doc.pvt_owner_id]",
                "      });",
                "      break;",
                "    case 'service_plan':",
                "      defaultValue.category = doc.category;",
                "      break;",
                "    case 'sys_info':",
                "      defaultValue.servers = doc.servers;",
                "      break;",
                "    case 'temporal_rule':",
                "      defaultValue.type = doc.type;",
                "      break;",
                "    case 'temporal_rule_set':",
                "      defaultValue.rules = doc.temporal_rules;",
                "      break;",
                "    case 'user':",
                "      defaultValue.call_recording = doc.call_recording;",
                "      defaultValue.email = doc.email;",
                "      defaultValue.feature_level = doc.feature_level;",
                "      defaultValue.features = features;",
                "      defaultValue.first_name = doc.first_name;",
                "      defaultValue.last_name = doc.last_name;",
                "      defaultValue.presence_id = doc.presence_id;",
                "      defaultValue.priv_level = doc.priv_level;",
                "      defaultValue.service = doc.service;",
                "      defaultValue.timezone = doc.timezone;",
                "      defaultValue.username = doc.username;",
                "      if (doc.metaflows) additionalEmitList.push(metaflowValue);",
                "      break;",
                "    case 'vmbox':",
                "      var messges_count = doc.messages ? doc.messages.length || 0 : 0;",
                "      defaultKey = [doc.pvt_type, 'by_name', doc.name];",
                "      defaultValue.mailbox = doc.mailbox;",
                "      defaultValue.messages = messges_count;",
                "      additionalEmitList.push({",
                "        'key': [doc.pvt_type, 'by_number', doc.mailbox],",
                "        'value': null",
                "      });",
                "      break;",
                "  }",
                "",
                "  /* contact_list */",
                "  if ((doc.contact_list || {}).exclude) {",
                "    /* by_excluded */",
                "    additionalEmitList.push({",
                "      'key': ['contact_list', 'by_excluded', doc._id],",
                "      'value': null",
                "    });",
                "",
                "    /* by_extension */",
                "    /* by_custom */",
                "    /* by_featurecode */",
                "    if (doc.pvt_type === 'callflow' && doc.numbers) {",
                "      var contact_requireid = ['menu', 'conference', 'directory', 'receive_fax', 'voicemail'];",
                "      var contact_featurecodes = ['call_forward', 'do_not_disturb', 'intercom', 'privacy', 'record_call', 'disa', 'dynamic_cid', 'hotdesk', 'manual_presence', 'park', , 'voicemail'];",
                "      var cf_first_mod = (doc.flow || {}).module;",
                "      var cf_second_mod = (((doc.flow || {}).children || {})._ || {}).module;",
                "      var cf_name = doc.name || ((doc.flow || {}).data || {}).name;",
                "      var contact_id = ((doc.flow || {}).data || {}).id || ((doc.flow || {}).data || {}).owner_id;",
                "      if ((cf_first_mod == 'user' || cf_first_mod == 'device') && (cf_second_mod == 'voicemail' || !cf_second_mod) && contact_id) {",
                "        additionalEmitList.push({",
                "          'key': ['contact_list', 'by_extension'],",
                "          'value': {",
                "            'id': contact_id,",
                "            'numbers': doc.numbers",
                "          }",
                "        });",
                "      } else if (cf_name) {",
                "        additionalEmitList.push({",
                "          'key': ['contact_list', (!doc.featurecode) ? 'by_custom' : 'by_featurecode'],",
                "          'value': {",
                "            'name': cf_name,",
                "            'first_module': cf_first_mod.replace('_', ' '),",
                "            'numbers': doc.numbers",
                "          }",
                "        });",
                "      } else if (contact_requireid.indexOf(cf_first_mod) >= 0 && contact_id) {",
                "        additionalEmitList.push({",
                "          'key': ['contact_list', (!doc.featurecode) ? 'by_custom' : 'by_featurecode'],",
                "          'value': {",
                "            'id': contact_id,",
                "            'name': cf_name,",
                "            'first_module': cf_first_mod,",
                "            'numbers': doc.numbers",
                "          }",
                "        });",
                "      } else if (contact_featurecodes.indexOf(cf_first_mod) >= 0) {",
                "        var cf_action = ((doc.flow || {}).data || {}).action;",
                "        if (!cf_action) return;",
                "        if (cf_action == cf_first_mod) {",
                "          cf_action = '';",
                "        } else {",
                "          cf_action = ' (' + cf_action + ')';",
                "        }",
                "        additionalEmitList.push({",
                "          'key': ['contact_list', (!doc.featurecode) ? 'by_custom' : 'by_featurecode'],",
                "          'value': {",
                "            'name': cf_name || cf_first_mod.replace(/_/g, ' ') + cf_action.replace(/_/g, ' '),",
                "            'numbers': doc.numbers",
                "          }",
                "        });",
                "      }",
                "    }",
                "",
                "    /* by_names */",
                "    var contact_list_doctypes = ['menu', 'conference', 'directory', 'device', 'vmbox'];",
                "    if (doc.pvt_type == 'user') {",
                "      additionalEmitList.push({",
                "        'key': ['contact_list', 'by_names'],",
                "        'value': {",
                "          'id': doc._id,",
                "          'name': doc.first_name + ' ' + doc.last_name",
                "        }",
                "      });",
                "    } else if (contact_list_doctypes.indexOf(doc.pvt_type) >= 0) {",
                "      additionalEmitList.push({",
                "        'key': ['contact_list', 'by_names'],",
                "        'value': {",
                "          'id': doc._id,",
                "          'name': doc.name",
                "        }",
                "      });",
                "    }",
                "  }",
                "",
                "  /* endpoint */",
                "  if (doc.caller_id) {",
                "    for (var type in doc.caller_id) {",
                "      /* TODO: improve: check pvt_enabled, also emit with pvt_type? */",
                "      additionalEmitList.push({",
                "        'key': ['endpoint', doc.caller_id[type].number, type],",
                "        'value': doc.pvt_type",
                "      });",
                "    }",
                "  }",
                "",
                "  /* by_owner */",
                "  hotdesk_owner_ids.forEach(function(owner_id) {",
                "    additionalEmitList.push({",
                "      'key': ['by_owner', owner_id, doc.pvt_type]",
                "    });",
                "  });",
                "  if (!hotdesk_owner_ids.length && doc.owner_id) {",
                "    additionalEmitList.push({",
                "      'key': ['by_owner', doc.owner_id, doc.pvt_type]",
                "    });",
                "  }",
                "",
                "  /* by_sip_username */",
                "  if (doc.sip && doc.sip.username && doc.sip.method == 'password') {",
                "    additionalEmitList.push({",
                "      'key': ['by_sip_username', doc.sip.username],",
                "      'value': owners",
                "    });",
                "  } else if (doc.pvt_type === 'sys_info' && doc.servers) {",
                "    for (var sys_info_srv in doc.servers) {",
                "      var auth = doc.servers[sys_info_srv].auth;",
                "      if (auth.auth_user && auth.auth_method == 'password') {",
                "        additionalEmitList.push({",
                "          'key': ['by_sip_username', auth.auth_user],",
                "          'value': owners",
                "        });",
                "      }",
                "    }",
                "  }",
                "",
                "  /* by_sip_credential */",
                "  if (doc.sip && doc.sip.username) {",
                "    doc.sip.authorizing_id = doc._id;",
                "    doc.sip.authorizing_type = doc.device_type == 'mobile' ? 'mobile' : doc.pvt_type;",
                "    additionalEmitList.push({",
                "      'key': ['by_sip_credential', doc.sip.username.toLowerCase()],",
                "      'value': doc.sip",
                "    });",
                "  } else if (doc.pvt_type === 'sys_info' && doc.servers) {",
                "    for (var i in doc.servers) {",
                "      if (!doc.servers[i].auth || !doc.servers[i].auth.auth_method || doc.servers[i].auth.auth_method.toLowerCase() != 'password')",
                "        continue;",
                "      var auth = doc.servers[i].auth;",
                "      additionalEmitList.push({",
                "        'key': ['by_sip_credential', auth.auth_user.toLowerCase()],",
                "        'value': {",
                "          'password': auth.auth_password,",
                "          'username': auth.auth_user,",
                "          'method': auth.auth_method || 'password',",
                "          'invite_format': doc.servers[i].options.inbound_format || 'e164',",
                "          'authorizing_id': doc._id,",
                "          'authorizing_type': doc.pvt_type",
                "        }",
                "      });",
                "    }",
                "  }",
                "",
                "  /* emit */",
                "  if (shouldEmitDefault) emit(defaultKey, defaultValue);",
                "  for (var loop_count = 0; loop_count < additionalEmitList.length; loop_count++) {",
                "    emit(additionalEmitList[loop_count].key, additionalEmitList[loop_count].value || null);",
                "  }",
                "}"
            ]
        }
    }
}
