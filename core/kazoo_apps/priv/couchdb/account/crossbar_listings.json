{
    "_id": "_design/crossbar_listings",
    "kazoo": {
        "view_map": [
            {
                "classification": "account"
            }
        ]
    },
    "language": "javascript",
    "views": {
        "uniform": {
            "map": [
                "function(doc) {",
                "  if (doc.pvt_deleted) return;",
                "  if (doc.pvt_type === 'number') return;",
                "  var additionalEmitList = [];",
                "  var shouldEmitDefault = true;",
                "  var defaultKey = [doc.pvt_type, doc._id];",
                "  var defaultValue = {",
                "    'description': doc.description,",
                "    'id': doc._id,",
                "    'name': doc.name,",
                "    'enabled': doc.enabled,",
                "    'flags': doc.flags || [],",
                "    'owner_id': doc.owner_id,",
                "  };",
                "  var features = doc.features || [];",
                "  if (doc.smartpbx) {",
                "    for (var feature in doc.smartpbx) {",
                "      if (doc.smartpbx[feature].enabled) features.push(feature);",
                "    }",
                "  }",
                "  if (doc.hotdesk && doc.hotdesk.enabled) features.push('hotdesk');",
                "  if (doc.call_forward && doc.call_forward.enabled) features.push('call_forward');",
                "  if (doc.call_forward && doc.call_forward.failover && !doc.call_forward.enabled) features.push('call_forward_failover');",
                "  if (doc.caller_id && doc.caller_id.external && doc.caller_id.external.number) features.push('caller_id');",
                "  if (doc.vm_to_email_enabled) features.push('vm_to_email');",
                "  if (doc.music_on_hold && doc.music_on_hold.media_id) features.push('music_on_hold');",
                "  if (doc.do_not_disturb && doc.do_not_disturb.enabled) features.push('do_not_disturb');",
                "  if (doc.ctu && doc.ctu.enabled) features.push('ctu');",
                "  if (doc.desktop && doc.desktop.enabled) features.push('desktop');",
                "  var metaflowValue = {",
                "    'key': ['metaflows', doc._id],",
                "    'value': doc.metaflows",
                "  };",
                "  switch (doc.pvt_type) {",
                "    case 'account':",
                "      defaultValue.realm = doc.realm;",
                "      if (doc.metaflows) additionalEmitList.push(metaflowValue);",
                "      break;",
                "    case 'app':",
                "      defaultKey = [doc.pvt_type, doc.name];",
                "      defaultValue[0].api_url = doc.api_url;",
                "      defaultValue.i18n = doc['i18n'];",
                "      defaultValue.phase = doc.phase;",
                "      defaultValue.published = doc.published;",
                "      defaultValue.source_url = doc.source_url;",
                "      defaultValue.tags = doc.tags;",
                "      break;",
                "    case 'callflow':",
                "      var featurecode = (!doc.featurecode) ? false : doc.featurecode;",
                "      var modules = [];",
                "      if (doc.flow) {",
                "        var walkTree = (function recursiveWalkTree(flow) {",
                "          if (flow.module && (flow.data && flow.data.skip_module !== true)) modules.push(flow.module);",
                "          if (flow.children) {",
                "            var children = flow.children;",
                "            for (var key in children) {",
                "              if (!children.hasOwnProperty(key)) continue;",
                "              recursiveWalkTree(children[key]);",
                "            }",
                "          }",
                "        })(doc.flow);",
                "      }",
                "      var onlyUnique = function(value, index, self) {",
                "        return self.indexOf(value) === index;",
                "      };",
                "      modules = modules.filter(onlyUnique);",
                "",
                "      /* list_by_id */",
                "      defaultValue.featurecode = featurecode;",
                "      defaultValue.group_id = doc.group_id;",
                "      defaultValue.modules = modules;",
                "      defaultValue.numbers = doc.numbers;",
                "      defaultValue.patterns = doc.patterns;",
                "      defaultValue.type = doc.type;",
                "",
                "      /* list_by_number */",
                "      for (var i in doc.numbers) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'by_number', doc.numbers[i]],",
                "          'value': {",
                "            'name': doc.name || doc._id,",
                "            'number': doc.numbers[i],",
                "            'module': doc.flow.module,",
                "            'flow_id': doc.flow.data.id",
                "          }",
                "        })",
                "      }",
                "",
                "      /* list_by_pattern */",
                "      for (var i in doc.patterns) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'by_pattern', doc.patterns[i]],",
                "          'value': {",
                "            'name': doc.name || doc._id",
                "          }",
                "        });",
                "      }",
                "",
                "      /* list_by_msisdn */",
                "      if (doc.flow.module === 'user' || doc.flow.module === 'device') {",
                "        for (var i in doc.numbers) {",
                "          if (doc.numbers[i].charAt(0) == '+') {",
                "            additionalEmitList.push({",
                "              'key': [doc.pvt_type, 'by_msisdn', doc.flow.module, doc.flow.data.id, doc.numbers[i]],",
                "              'value': {",
                "                'msisdn': doc.numbers[i]",
                "              }",
                "            })",
                "          }",
                "        }",
                "      }",
                "      break;",
                "    case 'click2call':",
                "      defaultValue.extension = doc.extension;",
                "      defaultValue.realm = doc.realm;",
                "      break;",
                "    case 'conference':",
                "      /* list_by_id */",
                "      defaultValue.conference_numbers = doc.conference_numbers;",
                "      defaultValue.member = doc.member;",
                "      defaultValue.moderator = doc.moderator;",
                "      defaultValue.ui_flags = doc.ui_flags;",
                "",
                "      /* list_by_number */",
                "      if (typeof doc.moderator == 'object' && doc.moderator.numbers) doc.moderator.numbers.forEach(function(Num) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_type, 'by_number', Num]",
                "        });",
                "      });",
                "      if (typeof doc.member == 'object' && doc.member.numbers) doc.member.numbers.forEach(function(Num) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_owner_id, 'by_number', Num]",
                "        });",
                "      });",
                "      if (doc.conference_numbers) doc.conference_numbers.forEach(function(Num) {",
                "        additionalEmitList.push({",
                "          'key': [doc.pvt_owner_id, 'by_number', Num]",
                "        });",
                "      });",
                "      break;",
                "    case 'device':",
                "      defaultValue.call_recording = doc.call_recording;",
                "      defaultValue.device_type = doc.device_type || 'sip_device';",
                "      defaultValue.features = features;",
                "      defaultValue.mac_address = doc.mac_address || '';",
                "      defaultValue.mobile = doc.mobile;",
                "      defaultValue.username = (doc.sip) ? doc.sip.username : undefined;",
                "      if (doc.hotdesk && doc.hotdesk.users) {",
                "        for (user_id in doc.hotdesk.users) {",
                "          additionalEmitList.push({",
                "            'key': ['hotdesk', user_id],",
                "            'value': {",
                "              'device_id': doc._id,",
                "              'device_name': doc.name",
                "            }",
                "          });",
                "        }",
                "      };",
                "      if (doc.metaflows) additionalEmitList.push(metaflowValue);",
                "      break;",
                "    case 'faxbox':",
                "      defaultValue.created = doc.pvt_created;",
                "      break;",
                "    case 'group':",
                "      var endpoints = 0;",
                "      var o = doc.endpoints || {};",
                "      for (var p in o) {",
                "        if (o.hasOwnProperty(p)) endpoints++;",
                "      }",
                "      defaultValue.endpoints = endpoints;",
                "      defaultValue.features = features;",
                "      break;",
                "    case 'list':",
                "      defaultValue.list_type = doc.list_type;",
                "      break;",
                "    case 'notification':",
                "      var notification_id = doc._id.replace('notification.', '');",
                "      defaultKey = [doc.pvt_type, notification_id];",
                "      defaultValue.id = notification_id;",
                "      defaultValue.category = doc.category;",
                "      defaultValue.friendly_name = doc.friendly_name;",
                "      defaultValue.macros = doc.macros;",
                "      break;",
                "    case 'provider':",
                "      defaultKey = ['provider', doc.pvt_provider_type, doc._id];",
                "      defaultValue.id = doc._id;",
                "      defaultValue.enabled = doc.enabled;",
                "      defaultValue.name = doc.name;",
                "      defaultValue.provider_name = doc.provider_name;",
                "      defaultValue.provider_type = doc.pvt_provider_type;",
                "      break;",
                "    case 'resource':",
                "      defaultValue.classifiers = doc.classifiers;",
                "      defaultValue.template_name = doc.template_name;",
                "      defaultValue.weight_cost = doc.weight_cost;",
                "      break;",
                "    case 'resource_template':",
                "      defaultValue.id = doc._id;",
                "      defaultValue.name = doc.name;",
                "      defaultValue.template_name = doc.template_name;",
                "      defaultValue.classifiers = doc.classifiers;",
                "      break;",
                "    case 'rate_limits':",
                "      shouldEmitDefault = false;",
                "      var add_rate_limits = function(Name, Type, Limits) {",
                "        for (SipMethod in Limits.per_minute) {",
                "          /* I hate this */",
                "          additionalEmitList.push({",
                "            'key': [doc.pvt_type, Name, SipMethod],",
                "            'value': {",
                "              'type': Type,",
                "              'per_minute': Limits.per_minute[SipMethod]",
                "            }",
                "          })",
                "        };",
                "        for (SipMethod in Limits.per_second) {",
                "          /* I hate this */",
                "          additionalEmitList.push({",
                "            'key': [doc.pvt_type, Name, SipMethod],",
                "            'value': {",
                "              'type': Type,",
                "              'per_second': Limits.per_second[SipMethod]",
                "            }",
                "          });",
                "        };",
                "      };",
                "      if (doc.pvt_owner_type == 'account') {",
                "        /* I hate this */",
                "        add_rate_limits('device-default-rate-limits', 'device', doc.device);",
                "        /* I hate this */",
                "        add_rate_limits(doc.pvt_queryname, 'realm', doc.account);",
                "      }",
                "      if (doc.pvt_owner_type == 'device') add_rate_limits(doc.pvt_queryname, 'device', doc);",
                "      additionalEmitList.push({",
                "        'key': [doc.pvt_type, 'by_owner', doc.pvt_owner_id]",
                "      });",
                "      break;",
                "    case 'service_plan':",
                "      defaultValue.category = doc.category;",
                "      break;",
                "    case 'sys_info':",
                "      defaultValue.servers = doc.servers;",
                "      break;",
                "    case 'temporal_rule':",
                "      defaultValue.type = doc.type;",
                "      break;",
                "    case 'temporal_rule_set':",
                "      defaultValue.rules = doc.temporal_rules;",
                "      break;",
                "    case 'user':",
                "      defaultValue.call_recording = doc.call_recording;",
                "      defaultValue.email = doc.email;",
                "      defaultValue.feature_level = doc.feature_level;",
                "      defaultValue.features = features;",
                "      defaultValue.first_name = doc.first_name;",
                "      defaultValue.last_name = doc.last_name;",
                "      defaultValue.presence_id = doc.presence_id;",
                "      defaultValue.priv_level = doc.priv_level;",
                "      defaultValue.service = doc.service;",
                "      defaultValue.timezone = doc.timezone;",
                "      defaultValue.username = doc.username;",
                "      if (doc.metaflows) additionalEmitList.push(metaflowValue);",
                "      break;",
                "    case 'vmbox':",
                "      var messges_count = doc.messages ? doc.messages.length || 0 : 0;",
                "      defaultKey = [doc.pvt_type, doc.name];",
                "      defaultValue.mailbox = doc.mailbox;",
                "      defaultValue.messages = messges_count;",
                "      break;",
                "  }",
                "  if (shouldEmitDefault) emit(defaultKey, defaultValue);",
                "  for (var loop_count = 0; loop_count < additionalEmitList.length; loop_count++) {",
                "    emit(additionalEmitList[loop_count].key, additionalEmitList[loop_count].value || null);",
                "  }",
                "}"
            ]
        }
    }
}
