{
    "_id": "_design/services",
    "kazoo": {
        "view_map": [
            {
                "classification": "modb"
            }
        ]
    },
    "language": "javascript",
    "views": {
        "audit_logs_by_creation": {
            "map": [
                "function(doc) {",
                "  if ( doc.pvt_deleted || doc.pvt_type != 'audit_log') return;",
                "  emit(doc.pvt_created, {",
                "    'id': doc._id,",
                "    'status': doc.status,",
                "    'reason': doc.reason,",
                "    'message': doc.message,",
                "    'type': doc.audit.changes.type,",
                "    'summary': doc.invoice.summary",
                "  });",
                "}"
            ]
        },
        "day_summary_by_date": {
            "map": [
                "function(doc) {",
                "  if (doc.pvt_deleted || (doc.pvt_type != 'audit_log' && doc.pvt_type != 'ledger')) return;",
                "  var unix = new Date(Math.floor((doc.pvt_created - 62167219200) * 1000));",
                "  var day = unix.getUTCFullYear() + '-' + ('0' + (unix.getUTCMonth() + 1)).slice(-2) + '-' + ('0' + unix.getUTCDate()).slice(-2);",
                "  if (doc.pvt_type === 'audit_log') {",
                "    var invoice = doc.invoice || {};",
                "    var items = invoice.items || [];",
                "    for (var index = 0; index < items.length; index++) {",
                "      var item = items[index];",
                "      if (item.changes && (item.changes.difference.billable || 0 ) !== 0) {",
                "        var changedBillable = item.changes.difference.billable;",
                "        var result = {};",
                "        result[item.item] = {",
                "          'addition': changedBillable > 0 ? changedBillable : 0,",
                "          'last_timestamp': doc.pvt_created,",
                "          'quantity': item.billable || 0,",
                "          'removal': changedBillable < 0 ? Math.abs(changedBillable) : 0,",
                "          'sum_quantity': false",
                "        };",
                "        emit(day, result);",
                "      }",
                "    }",
                "  } else if ((doc.pvt_type === 'ledger') && (doc.source.service === 'per-minute-voip')) {",
                "    var result = {};",
                "    result['per-minute-voip'] = {",
                "      'quantity': doc.usage.quantity || 0,",
                "      'sum_quantity': true,",
                "      'unit': doc.usage.unit",
                "    };",
                "    emit(day, result);",
                "  }",
                "}"
            ],
            "reduce": [
                "function (keys, values, rereduce) {",
                "  return values.reduce(function(reduceObj, obj) {",
                "    for (var service in obj) {",
                "      if (!obj.hasOwnProperty(service)) continue;",
                "      var serviceObj = obj[service];",
                "      var reduceService = reduceObj[service] || {};",
                "      var isLateChange = (serviceObj.last_timestamp || 0) >= (reduceService.last_timestamp || 0);",
                "      var tmp = {};",
                "      if (serviceObj.sum_quantity) {",
                "        var tmp = {",
                "          'quantity': (serviceObj.quantity || 0) + (reduceService.quantity || 0),",
                "          'sum_quantity': true,",
                "          'unit': serviceObj.unit || reduceService.unit",
                "        }",
                "      } else {",
                "        tmp = {",
                "         'addition': (reduceService.addition || 0) + (serviceObj.addition || 0),",
                "         'last_timestamp': isLateChange ? (serviceObj.last_timestamp || 0) : (reduceService.last_timestamp || 0),",
                "         'quantity': isLateChange ? (serviceObj.quantity || 0) : (reduceService.quantity || 0),",
                "         'removal': (reduceService.removal || 0) + (serviceObj.removal || 0),",
                "         'sum_quantity': false",
                "       }",
                "      };",
                "      reduceObj[service] = tmp;",
                "    }",
                "    return reduceObj;",
                "  }, {})",
                "}"
            ]
        },
        "day_summary_by_source": {
            "map": [
                "function(doc) {",
                "  if (doc.pvt_deleted || (doc.pvt_type != 'audit_log' && doc.pvt_type != 'ledger')) return;",
                "  var unix = new Date(Math.floor((doc.pvt_created - 62167219200) * 1000));",
                "  var day = unix.getUTCFullYear() + '-' + ('0' + (unix.getUTCMonth() + 1)).slice(-2) + '-' + ('0' + unix.getUTCDate()).slice(-2);",
                "  if (doc.pvt_type === 'audit_log') {",
                "    var invoice = doc.invoice || {};",
                "    var items = invoice.items || [];",
                "    for (var index = 0; index < items.length; index++) {",
                "      var item = items[index];",
                "      if (item.changes && (item.changes.difference.billable || 0 ) !== 0) {",
                "        var changedBillable = item.changes.difference.billable;",
                "        emit([item.item, day], {",
                "          'addition': changedBillable > 0 ? changedBillable : 0,",
                "          'last_timestamp': doc.pvt_created,",
                "          'quantity': item.billable || 0,",
                "          'removal': changedBillable < 0 ? Math.abs(changedBillable) : 0,",
                "          'sum_quantity': false",
                "        });",
                "      }",
                "    }",
                "  } else if ((doc.pvt_type === 'ledger') && (doc.source.service === 'per-minute-voip')) {",
                "    emit(['per-minute-voip', day], {",
                "      'last_timestamp': doc.pvt_created,",
                "      'quantity': doc.usage.quantity || 0,",
                "      'sum_quantity': true,",
                "      'unit': doc.usage.unit",
                "    });",
                "  }",
                "}"
            ],
            "reduce": [
                "function (keys, values, rereduce) {",
                "  return values.reduce(function(reduceObj, obj) {",
                "    var isLateChange = (obj.last_timestamp || 0) >= (reduceObj.last_timestamp || 0);",
                "    if (obj.sum_quantity) {",
                "      return {",
                "        'last_timestamp': isLateChange ? (obj.last_timestamp || 0) : (reduceObj.last_timestamp || 0),",
                "        'quantity': (obj.quantity || 0) + (reduceObj.quantity || 0),",
                "        'sum_quantity': true,",
                "        'unit': reduceObj.unit || obj.unit",
                "      }",
                "    } else {",
                "      return {",
                "        'addition': (reduceObj.addition || 0) + (obj.addition || 0),",
                "        'last_timestamp': isLateChange ? (obj.last_timestamp || 0) : (reduceObj.last_timestamp || 0),",
                "        'quantity': isLateChange ? (obj.quantity || 0) : (reduceObj.quantity || 0),",
                "        'removal': (reduceObj.removal || 0) + (obj.removal || 0),",
                "        'sum_quantity': false",
                "      }",
                "    }",
                "  }, {})",
                "}"
            ]
        }
    }
}
