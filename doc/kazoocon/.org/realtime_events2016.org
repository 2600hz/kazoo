#+include:: "theme2016.org"
#+DATE: \today
#+EMAIL: james@2600hz.com
* Webhooks and Websockets
#+BEGIN_EXPORT latex
{
\usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight]{./images/first_slide.png}}%
\begin{frame}
\begin{flushright}
\alert{WEBHOOKS AND WEBSOCKETS:\par REAL-TIME EVENTS} \par
\par
Presented by: James Aimonetti
\end{flushright}
\end{frame}
}
#+END_EXPORT
** About Myself
*** About Myself
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: column
    :END:
- James Aimonetti
- Kazoo Architect and Community at 2600Hz
- mc_ on freenode
*** Presenter
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: column
    :END:
#+BEGIN_CENTER
[[./images/presenter_h280.jpg]]
#+END_CENTER
** Webhooks - High level
:PROPERTIES:
:BEAMER_env: frame
:END:
- Request events to be sent to your server
- Read-only
- AMQP->HTTP bridge
- Custom webhooks via callflows
** Webhooks
:PROPERTIES:
:BEAMER_env: frame
:END:
- Simple HTTP request is sent from Kazoo to your server
  - Respond with 200 only (auto-disabled otherwise)
  - If possible, relay data to separate process for use
- Update rows in a database or spreadsheet
- Screen pops
- Use with Pivot to build reactive routing logic
** Available Webhooks
- Code can be found [[https://github.com/2600hz/kazoo/tree/master/applications/webhooks/src/modules][here]]
- Channel events
  - CREATE
  - ANSWER
  - BRIDGE
  - DESTROY
- Inbound/outbound faxes
** Available Webhooks (cont)
- Parked calls
- Account objects
  - Accounts, callflows, devices, fax boxes, media (MOH, IVR, voicemails), users, voicemail boxes, faxes
  - Created/edited/deleted
  - Billing systems
- Custom webhooks from callflows
  - Analytics on IVRs
** Query for webhooks available
#+LaTeX: \small
#+BEGIN_SRC shell
curl -v -X GET http://{SERVER}:8000/v2/webhooks
#+END_SRC
** Creating a webhook
:PROPERTIES:
:BEAMER_env: frame
:END:
#+LaTeX: \small
#+BEGIN_SRC shell
curl -v -X PUT \
-H "X-Auth-Token: {AUTH_TOKEN}" \
-H "Content-Type: application/json" \
-d '{"data": {
    "name": "New Calls",
    "uri": "http://{YOUR_SERVER}/calls/new.php",
    "http_verb": "post",
    "hook": "channel_create",
    "retries":3
}}' \
http://{CB_SERVER}:8000/v2/accounts/{ACCOUNT_ID}/webhooks
#+END_SRC
** Webhook Request
:PROPERTIES:
:BEAMER_env: frame
:END:
- *GET*: query string parameters
- *POST*: =x-www-urlencoded-form= body
- Data sent will be the AMQP JSON payload, encoded for the HTTP method chosen
- No processing of the response (except HTTP response code)

** The future of webhooks
:PROPERTIES:
:BEAMER_env: frame
:END:
- Reseller hooks for all sub-accounts
  - Added Oct 6
  - Create one hook, receive events for all sub-accounts
- Feature requests welcome!
** Websockets
:PROPERTIES:
:BEAMER_env: frame
:END:
- Persistent connection
- Lower overhead (no polling)
- Get events *and* issue commands to Kazoo
- Richer UI interactions with Kazoo (operator console)
** Anatomy of websocket connection
:PROPERTIES:
:BEAMER_env: frame
:END:
#+BEGIN_CENTER
#+CAPTION: https://www.pubnub.com/wp-content/uploads/2014/09/WebSockets-Diagram.png
#+ATTR_LATEX: :height 0.8\textheight
[[./images/WebSockets-Diagram.png]]

#+END_CENTER
** Create a websocket connection
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_opt: fragile
:END:
- Ensure *blackhole* application is running
- Open a connection

#+BEGIN_EXPORT latex
\begin{lstlisting}[language=javascript]
var socket = new WebSocket("ws://{BH_IP}:5555");
\end{lstlisting}
#+END_EXPORT

** Subscribe for events
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_opt: fragile
:END:
#+BEGIN_EXPORT latex
\begin{lstlisting}[language=javascript]
function send(data) {
    socket.send(JSON.stringify(data));
}
socket.onopen = function() {...}

socket.onmessage = function(raw_message) {
    var json_data = JSON.parse(raw_message.data);

    console.log(json_data);
};
\end{lstlisting}
#+END_EXPORT
** Subscribe for an account's new calls
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_opt: fragile
:END:
#+BEGIN_EXPORT latex
\begin{lstlisting}[language=javascript]
send({
    action: 'subscribe',
    account_id: '{ACCOUNT_ID}',
    auth_token: '{AUTH_TOKEN}',
    binding: 'call.CHANNEL_CREATE.*'
});
\end{lstlisting}
#+END_EXPORT
** Subscribe for multiple types of events
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_opt: fragile
:END:
#+BEGIN_EXPORT latex
\begin{lstlisting}[language=javascript]
send({
    action: 'subscribe',
    account_id: '{ACCOUNT_ID}',
    auth_token: '{AUTH_TOKEN}',
    bindings: ['call.CHANNEL_ANSWER.*'
               ,'call.CHANNEL_DESTROY.*'
              ]
});
\end{lstlisting}
#+END_EXPORT
** Subscribe for doc change events
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_opt: fragile
:END:
#+BEGIN_EXPORT latex
\begin{lstlisting}[language=javascript]
send({
    action: 'subscribe',
    account_id: "{ACCOUNT_ID}",
    auth_token: "{AUTH_TOKEN}",
    bindings: ["doc_created.*.user.*"
               ,"doc_edited.*.user.*"
              ]
});
\end{lstlisting}
#+END_EXPORT
** Unsubscribe from events
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_opt: fragile
:END:
#+BEGIN_EXPORT latex
\begin{lstlisting}[language=javascript]
send({
    "action": "unsubscribe"
    ,"account_id": "{ACCOUNT_ID}"
    ,"auth_token": "{AUTH_TOKEN}"
    ,"binding": "call.CHANNEL_CREATE.*"
});
\end{lstlisting}
#+END_EXPORT

** Monster makes this easy
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_opt: fragile
:END:
- See [[https://github.com/2600hz/monster-ui/blob/master/docs/kazoocon.md][the docs]] for specifics
#+BEGIN_EXPORT latex
\begin{lstlisting}[language=javascript]
monster.socket.emit("subscribe", { account_id: self.accountId
,auth_token: self.authToken
,binding: "call.CHANNEL_CREATE.*"
});

addEvent = function(data) {
  var formattedEvent = self.formatEvent(data),
      eventTemplate = monster.template(self, 'event', formattedEvent);

      template.find('.list-events tbody').prepend(eventTemplate);
};
\end{lstlisting}
#+END_EXPORT
** Monster makes this easy (cont)
:PROPERTIES:
:BEAMER_env: frame
:BEAMER_opt: fragile
:END:
#+BEGIN_EXPORT latex
\begin{lstlisting}[language=javascript]
// Bind some js code to the reception of call events
monster.socket.on("CHANNEL_CREATE", function (data) {
  addEvent(data);
});
monster.socket.on("CHANNEL_ANSWER", function (data) {
  addEvent(data);
});

monster.socket.on("CHANNEL_DESTROY", function (data) {
  addEvent(data);
});
\end{lstlisting}
#+END_EXPORT
** Query for available bindings
:PROPERTIES:
:BEAMER_env: frame
:END:
#+LaTeX: \scriptsize
#+BEGIN_SRC shell
curl -v -X GET http://{CROSSBAR}:8000/v2/websockets | python -mjson.tool
#+END_SRC
#+LaTeX: \scriptsize
#+BEGIN_SRC json
{
    "data": {
        "call": [
            {
                "binding": "call.CHANNEL_CREATE.*",
                "event": "CHANNEL_CREATE"
            },
            {
                "binding": "call.CHANNEL_ANSWER.*",
                "event": "CHANNEL_ANSWER"
            },
            {
                "binding": "call.CHANNEL_DESTROY.*",
                "event": "CHANNEL_DESTROY"
            },
            {
                "binding": "call.CHANNEL_BRIDGE.*",
                "event": "CHANNEL_BRIDGE"
            }
        ]
        ,...
    }
}
#+END_SRC
** Event categories available
:PROPERTIES:
:BEAMER_env: frame
:END:
- Channel events
- Fax events
- Objects - identical to webhooks
** Fetch account's socket connections
:PROPERTIES:
:BEAMER_env: frame
:END:
#+LaTeX: \scriptsize
#+BEGIN_SRC shell
curl -v -X GET \
-H "X-Auth-Token: {AUTH_TOKEN}" \
http://{SERVER}:8000/v2/accounts/{ACCOUNT_ID}/websockets
#+END_SRC
#+LaTeX: \scriptsize
#+BEGIN_SRC json
{
    "data": [
        "{SOCKET_ID1}",
        "{SOCKET_ID2}",
        "{SOCKET_ID3}"
    ],
    "status": "success"
}
#+END_SRC
** Fetch bindings for a socket ID
:PROPERTIES:
:BEAMER_env: frame
:END:
#+LaTeX: \scriptsize
#+BEGIN_SRC shell
curl -v -X GET \
-H "X-Auth-Token: {AUTH_TOKEN}" \
http://{SERVER}:8000/v2/accounts/{ACCOUNT_ID}/websockets/{SOCKET_ID}
#+END_SRC
#+LaTeX: \scriptsize
#+BEGIN_SRC json
{
    "data": [
        {
            "account_id": "{ACCOUNT_ID}",
            "auth_token": "{AUTH_TOKEN}",
            "bindings": [
                "call.CHANNEL_DESTROY.*",
                "call.CHANNEL_ANSWER.*",
                "call.CHANNEL_CREATE.*"
            ],
            "websocket_session_id": "{SOCKET_ID}"
        }
    ],
    "status": "success"
}
#+END_SRC
** Execute commands
:PROPERTIES:
:BEAMER_env: frame
:END:
#+LaTeX: \scriptsize
#+BEGIN_SRC shell
curl -v -X PUT \
    -H "Content-Type: application/json" \
    -H "X-Auth-Token: {AUTH_TOKEN}" \
    -d '{"data": {"action": "metaflow", "data": { "module", "hangup" }}' \
    http://{SERVER}:8000/v2/accounts/{ACCOUNT_ID}/channels/{UUID}
#+END_SRC
** The future
:PROPERTIES:
:BEAMER_env: frame
:END:
- Support sending commands
  - Currently, =cb_channels= is the way (via metaflows/konami)
  - Pivot over websockets (great idea from yesterday!)
- More events exposed for building richer UIs
  - Conference events
  - Notifications (vm left, system alerts)
* Thank You
#+BEGIN_EXPORT latex
{
\usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight]{./images/last_slide.png}}%
\begin{frame}
\begin{center}
\alert{THANK YOU!}
\end{center}
\end{frame}
}
#+END_EXPORT
