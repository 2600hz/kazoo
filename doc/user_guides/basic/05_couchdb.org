#+OPTIONS: ':nil *:t -:t ::t <:t H:2 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:f title:t toc:nil todo:t |:t
#+TITLE: Kazoo Basic Training - CouchDB
#+DATE: <2016-06-06 Mon>
#+AUTHOR: James Aimonetti
#+EMAIL: james@2600hz.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.50.3 (Org mode 8.3.4)
#+STARTUP: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+BEAMER_FRAME_LEVEL: 2
#+BEAMER_THEME: Madrid
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

* CouchDB

** Kazoo Basic Training

#+BEGIN_CENTER
CouchDB
#+END_CENTER

** The Kazoo Stack - Cluster

#+BEGIN_CENTER
[[file:./images/kazoo_stack.png]]
#+END_CENTER

** The Kazoo Stack - FreeSWITCH

#+BEGIN_CENTER
[[file:./images/kazoo_stack_couchdb.png]]
#+END_CENTER

** Why CouchDB                                                      :B_frame:
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks,label=
   :BEAMER_env: frame
   :END:

*** Two Architectural Lessons Learned
 - Modeling Schema is Difficult
   - Modular, Rapid Development System
 - Master / Slave Doesnâ€™t Scale

*** Two Enhancements Desired
 - Find a database that works well over a WAN
 - Gain additional uptime guarantees

*** Multi-Master database
 - Any node can answer any request

*** Supports Zones
 - Requires a 'zone' attribute when adding a node
 - Requires a [cluster] placement attribute
 - Provides geo-redundancy

*** No Single Point of Failure
 - Properly tuned quorum settings ensure this

*** Eventual Consistency
 - Data is automatically replicated, eventually
 - Link latency typically the limit

*** Coherence
 - Written in Erlang

*** Backup Without Downtime
 - as simple as cp/rsync

*** More Servers Creates More Capacity
 - Pre-allocate based on expected growth

*** Simple, Simple, Simple
 - OPS will love it

** How Does It Work                                                 :B_frame:
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks,label=
   :BEAMER_env: frame
   :END:

*** Nodes                                                   :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
#+BEGIN_CENTER
[[file:./images/couchdb_nodes.png]]
#+END_CENTER

*** The Ring                                                :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
#+BEGIN_CENTER
[[file:./images/couchdb_ring.png]]
#+END_CENTER

** Installing CouchDB                                               :B_frame:
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks,label=
   :BEAMER_env: frame
   :END:

*** Debian

Taken from [[https://cwiki.apache.org/confluence/display/COUCHDB/Debian][CouchDB's installation instructions]]:
1. Setup Erlang Solutions' Erlang package:
   #+BEGIN_EXAMPLE
   $> apt-get install -y lsb-release
   $> echo "deb http://binaries.erlang-solutions.com/debian `lsb_release -cs` contrib" \
   | sudo tee /etc/apt/sources.list.d/erlang-solutions.list
   $> wget -O - http://binaries.erlang-solutions.com/debian/erlang_solutions.asc \
   | sudo apt-key add -
   #+END_EXAMPLE
2. Install dependencies:
   #+BEGIN_EXAMPLE
   $> sudo apt-get update -y
   $> sudo apt-get install -y libmozjs185 libmozjs185-dev erlang-nox erlang-dev \
   build-essential libnspr4 libnspr4-0d libnspr4-dev libcurl4-openssl-dev curl libicu-dev \
   pkg-config git haproxy nodejs
   #+END_EXAMPLE

*** CentOS

The installation instructions are missing at the moment. Yum commands
with similar packages as in Debian's installtion instructions should
suffice.

*** General

See the [[https://couchdb.apache.org/developer-preview/2.0/][Developer preview]]:

1. Setup CouchDB
   #+BEGIN_EXAMPLE
   $> git clone https://git-wip-us.apache.org/repos/asf/couchdb.git
   $> npm install -g grunt-cli
   $> cd couchdb
   $> git checkout developer-preview-2.0
   $> ./configure
   $> make
   #+END_EXAMPLE
2. Start CouchDB
   #+BEGIN_EXAMPLE
   $> dev/run --with-admin-party-please --with-haproxy -n 3
   $> /usr/sbin/haproxy -D -f rel/haproxy.cfg
   #+END_EXAMPLE
3. Accessing CouchDB API
   #+BEGIN_EXAMPLE
   $> curl 127.0.0.1:5984
   {"couchdb":"Welcome","version":"b49d069","vendor":{"name":"The Apache Software Foundation"}}
   #+END_EXAMPLE
4. CouchDB UI (Fauxton) - access http://localhost:5984/_utils

*** Configuration files

Once you've started CouchDB, you can take a look at the configuration
files. There aren't many knobs you need to tweak but its worth taking
a peek. You can find these files in the =default.ini= file and
override them in =local.ini=

*** =[chttpd]= - CouchDB API
    #+BEGIN_EXAMPLE
    [chttpd]
    port = 15984
    bind_address = 127.0.0.1
    backlog = 512
    docroot = src/fauxton/dist/release
    socket_options = [{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]
    #+END_EXAMPLE

*** =[httpd]= - CouchDB Admin Interface
   #+BEGIN_EXAMPLE
   [httpd]
   port = 15986
   bind_address = 127.0.0.1
   authentication_handlers = {couch_httpd_oauth, oauth_authentication_handler}, {couch_httpd_auth, cookie_authentication_handler}, {couch_httpd_auth, default_authentication_handler}
   default_handler = {couch_httpd_db, handle_request}
   secure_rewrites = true
   vhost_global_handlers = _utils, _uuids, _session, _oauth, _users
   allow_jsonp = false
   ; Options for the MochiWeb HTTP server.
   ;server_options = [{backlog, 128}, {acceptor_pool_size, 16}]
   ; For more socket options, consult Erlang's module 'inet' man page.
   ;socket_options = [{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]
   socket_options = [{recbuf, 262144}, {sndbuf, 262144}]
   log_max_chunk_size = 1000000
   enable_cors = false
   ; CouchDB can optionally enforce a maximum uri length;
   ; max_uri_length = 8000
   #+END_EXAMPLE

*** =[cluster]= - Quorum settings
    #+BEGIN_EXAMPLE
    [cluster]
    q=8
    r=2
    w=2
    n=3
    #+END_EXAMPLE

*** =[couch_httpd_auth]=
   #+BEGIN_EXAMPLE
   [couch_httpd_auth]
   ; If you set this to true, you should also uncomment the WWW-Authenticate line
   ; above. If you don't configure a WWW-Authenticate header, CouchDB will send
   ; Basic realm="server" in order to prevent you getting logged out.
   ; require_valid_user = false
   secret = d27d82ed2bd6485d9eda59a10a61e7a1
   #+END_EXAMPLE

*** =[couchdb]=
    #+BEGIN_EXAMPLE
    [couchdb]
    uuid = fake_uuid_for_dev
    database_dir = /srv/db
    view_index_dir = /srv/view_index
    ; util_driver_dir =
    ; plugin_dir =
    max_document_size = 67108864 ; 64 MB
    os_process_timeout = 5000 ; 5 seconds. for view and external servers.
    max_dbs_open = 500
    delayed_commits = false
    ; Method used to compress everything that is appended to database and view index files, except
    ; for attachments (see the attachments section). Available methods are:
    ;
    ; none         - no compression
    ; snappy       - use google snappy, a very fast compressor/decompressor
    ; deflate_[N]  - use zlib's deflate, N is the compression level which ranges from 1 (fastest,
    ;                lowest compression ratio) to 9 (slowest, highest compression ratio)
    file = /var/log/couchdb/couchdb.log
    ; Higher values may give better read performance due to less read operations
    ; and/or more OS page cache hits, but they can also increase overall response
    ; time for writes when there are many attachment write requests in parallel.
    attachment_stream_buffer_size = 4096
    #+END_EXAMPLE

*** Quorum Settings
 - Q: Number of shards per DB
 - R: Read quorum
 - W: Write quorum
 - N: Number of redundant copies

*** =vm.args=

Erlang configuration file. You shouldn't need to change anything
except maybe =-setcookie monster=.

** Managing CouchDB

** Thank You

#+INCLUDE: "./frames/footer.org"
